link:
library/ctypes.html#loading-dynamic-link-libraries

docs:

Loading dynamic link librariesÂ¶
 exports the cdll, and on Windows windll and oledll
objects, for loading dynamic link libraries.
You load libraries by accessing them as attributes of these objects. cdll
loads libraries which export functions using the standard  calling
convention, while windll libraries call functions using the 
calling convention. oledll also uses the  calling convention, and
assumes the functions return a Windows  error code. The error
code is used to automatically raise an  exception when the
function call fails.

Changed in version 3.3: Windows errors used to raise , which is now an alias
of .

Here are some examples for Windows. Note that  is the MS standard C
library containing most standard C functions, and uses the cdecl calling
convention:


Windows appends the usual  file suffix automatically.

Note
Accessing the standard C library through  will use an
outdated version of the library that may be incompatible with the one
being used by Python. Where possible, use native Python functionality,
or else import and use the  module.

On Linux, it is required to specify the filename including the extension to
load a library, so attribute access can not be used to load libraries. Either the
 method of the dll loaders should be used, or you should load
the library by creating an instance of CDLL by calling the constructor:


