link:
library/multiprocessing.html#sharing-state-between-processes

docs:

Sharing state between processesÂ¶
As mentioned above, when doing concurrent programming it is usually best to
avoid using shared state as far as possible.  This is particularly true when
using multiple processes.
However, if you really do need to use some shared data then
 provides a couple of ways of doing so.
Shared memory

Data can be stored in a shared memory map using  or
.  For example, the following code


will print


The  and  arguments used when creating  and  are
typecodes of the kind used by the  module:  indicates a
double precision float and  indicates a signed integer.  These shared
objects will be process and thread-safe.
For more flexibility in using shared memory one can use the
 module which supports the creation of
arbitrary ctypes objects allocated from shared memory.

Server process

A manager object returned by  controls a server process which
holds Python objects and allows other processes to manipulate them using
proxies.
A manager returned by  will support types
, , , ,
, , ,
, , ,
,  and .  For example,


will print


Server process managers are more flexible than using shared memory objects
because they can be made to support arbitrary object types.  Also, a single
manager can be shared by processes on different computers over a network.
They are, however, slower than using shared memory.

