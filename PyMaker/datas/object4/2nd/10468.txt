link:
library/resource.html#resource-limits

docs:

Resource Limits¶
Resources usage can be limited using the  function described
below. Each resource is controlled by a pair of limits: a soft limit and a hard
limit. The soft limit is the current limit, and may be lowered or raised by a
process over time. The soft limit can never exceed the hard limit. The hard
limit can be lowered to any value greater than the soft limit, but not raised.
(Only processes with the effective UID of the super-user can raise a hard
limit.)
The specific resources that can be limited are system dependent. They are
described in the getrlimit(2) man page.  The resources listed below
are supported when the underlying operating system supports them; resources
which cannot be checked or controlled by the operating system are not defined in
this module for those platforms.


¶
Constant used to represent the limit for an unlimited resource.



(resource)¶
Returns a tuple  with the current soft and hard limits of
resource. Raises  if an invalid resource is specified, or
 if the underlying system call fails unexpectedly.



(resource, limits)¶
Sets new limits of consumption of resource. The limits argument must be a
tuple  of two integers describing the new limits. A value of
 can be used to request a limit that is
unlimited.
Raises  if an invalid resource is specified, if the new soft
limit exceeds the hard limit, or if a process tries to raise its hard limit.
Specifying a limit of  when the hard or
system limit for that resource is not unlimited will result in a
.  A process with the effective UID of super-user can
request any valid limit value, including unlimited, but 
will still be raised if the requested limit exceeds the system imposed
limit.
 may also raise  if the underlying system call
fails.



(pid, resource[, limits])¶
Combines  and  in one function and
supports to get and set the resources limits of an arbitrary process. If
pid is 0, then the call applies to the current process. resource and
limits have the same meaning as in , except that
limits is optional.
When limits is not given the function returns the resource limit of the
process pid. When limits is given the resource limit of the process is
set and the former resource limit is returned.
Raises  when pid can’t be found and
 when the user doesn’t have  for
the process.
Availability: Linux 2.6.36 or later with glibc 2.13 or later.

New in version 3.4.


These symbols define resources whose consumption can be controlled using the
 and  functions described below. The values of
these symbols are exactly the constants used by C programs.
The Unix man page for getrlimit(2) lists the available resources.
Note that not all systems use the same symbol or same value to denote the same
resource.  This module does not attempt to mask platform differences — symbols
not defined for a platform will not be available from this module on that
platform.


¶
The maximum size (in bytes) of a core file that the current process can create.
This may result in the creation of a partial core file if a larger core would be
required to contain the entire process image.



¶
The maximum amount of processor time (in seconds) that a process can use. If
this limit is exceeded, a  signal is sent to the process. (See
the  module documentation for information about how to catch this
signal and do something useful, e.g. flush open files to disk.)



¶
The maximum size of a file which the process may create.



¶
The maximum size (in bytes) of the process’s heap.



¶
The maximum size (in bytes) of the call stack for the current process.  This only
affects the stack of the main thread in a multi-threaded process.



¶
The maximum resident set size that should be made available to the process.



¶
The maximum number of processes the current process may create.



¶
The maximum number of open file descriptors for the current process.



¶
The BSD name for .



¶
The maximum address space which may be locked in memory.



¶
The largest area of mapped memory which the process may occupy.



¶
The maximum area (in bytes) of address space which may be taken by the process.



¶
The number of bytes that can be allocated for POSIX message queues.
Availability: Linux 2.6.8 or later.

New in version 3.4.




¶
The ceiling for the process’s nice level (calculated as 20 - rlim_cur).
Availability: Linux 2.6.12 or later.

New in version 3.4.




¶
The ceiling of the real-time priority.
Availability: Linux 2.6.12 or later.

New in version 3.4.




¶
The time limit (in microseconds) on CPU time that a process can spend
under real-time scheduling without making a blocking syscall.
Availability: Linux 2.6.25 or later.

New in version 3.4.




¶
The number of signals which the process may queue.
Availability: Linux 2.6.8 or later.

New in version 3.4.




¶
The maximum size (in bytes) of socket buffer usage for this user.
This limits the amount of network memory, and hence the amount of mbufs,
that this user may hold at any time.
Availability: FreeBSD 9 or later.

New in version 3.4.




¶
The maximum size (in bytes) of the swap space that may be reserved or
used by all of this user id’s processes.
This limit is enforced only if bit 1 of the vm.overcommit sysctl is set.
Please see tuning(7) for a complete description of this sysctl.
Availability: FreeBSD 9 or later.

New in version 3.4.




¶
The maximum number of pseudo-terminals created by this user id.
Availability: FreeBSD 9 or later.

New in version 3.4.


