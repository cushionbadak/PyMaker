link:
library/datetime.html#datetime-objects

docs:

 Objects¶
A  object is a single object containing all the information
from a  object and a  object.  Like a 
object,  assumes the current Gregorian calendar extended in
both directions; like a time object,  assumes there are exactly
3600*24 seconds in every day.
Constructor:


class (year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)¶
The year, month and day arguments are required.  tzinfo may be , or an
instance of a  subclass.  The remaining arguments may be integers,
in the following ranges:

,
,
,
,
,
,
,
.

If an argument outside those ranges is given,  is raised.

New in version 3.6: Added the  argument.


Other constructors, all class methods:


classmethod ()¶
Return the current local datetime, with  . This is
equivalent to . See also ,
.



classmethod (tz=None)¶
Return the current local date and time.  If optional argument tz is 
or not specified, this is like , but, if possible, supplies more
precision than can be gotten from going through a  timestamp
(for example, this may be possible on platforms supplying the C
 function).
If tz is not , it must be an instance of a  subclass, and the
current date and time are converted to tz’s time zone.  In this case the
result is equivalent to .
See also , .



classmethod ()¶
Return the current UTC date and time, with  . This is like
, but returns the current UTC date and time, as a naive
 object.  An aware current UTC datetime can be obtained by
calling .  See also .



classmethod (timestamp, tz=None)¶
Return the local date and time corresponding to the POSIX timestamp, such as is
returned by . If optional argument tz is  or not
specified, the timestamp is converted to the platform’s local date and time, and
the returned  object is naive.
If tz is not , it must be an instance of a  subclass, and the
timestamp is converted to tz’s time zone.  In this case the result is
equivalent to
.
 may raise , if the timestamp is out of
the range of values supported by the platform C  or
 functions, and  on  or
 failure.
It’s common for this to be restricted to years in
1970 through 2038. Note that on non-POSIX systems that include leap seconds in
their notion of a timestamp, leap seconds are ignored by ,
and then it’s possible to have two timestamps differing by a second that yield
identical  objects. See also .

Changed in version 3.3: Raise  instead of  if the timestamp
is out of the range of values supported by the platform C
 or  functions. Raise 
instead of  on  or 
failure.


Changed in version 3.6:  may return instances with  set to 1.




classmethod (timestamp)¶
Return the UTC  corresponding to the POSIX timestamp, with
 . This may raise , if the timestamp is
out of the range of values supported by the platform C  function,
and  on  failure.
It’s common for this to be restricted to years in 1970 through 2038.
To get an aware  object, call :


On the POSIX compliant platforms, it is equivalent to the following
expression:


except the latter formula always supports the full years range: between
 and  inclusive.

Changed in version 3.3: Raise  instead of  if the timestamp
is out of the range of values supported by the platform C
 function. Raise  instead of
 on  failure.




classmethod (ordinal)¶
Return the  corresponding to the proleptic Gregorian ordinal,
where January 1 of year 1 has ordinal 1.  is raised unless .  The hour, minute, second and
microsecond of the result are all 0, and  is .



classmethod (date, time, tzinfo=self.tzinfo)¶
Return a new  object whose date components are equal to the
given  object’s, and whose time components
are equal to the given  object’s.  If the tzinfo
argument is provided, its value is used to set the  attribute
of the result, otherwise the  attribute of the time argument
is used.
For any  object d,
.  If date is a
 object, its time components and  attributes
are ignored.

Changed in version 3.6: Added the tzinfo argument.




classmethod (date_string)¶
Return a  corresponding to a date_string in one of the
formats emitted by  and .
Specifically, this function supports strings in the format(s)
,
where  can match any single character.

Caution
This does not support parsing arbitrary ISO 8601 strings - it is only intended
as the inverse operation of .


New in version 3.7.




classmethod (date_string, format)¶
Return a  corresponding to date_string, parsed according to
format.  This is equivalent to .  is raised if the date_string and format
can’t be parsed by  or if it returns a value which isn’t a
time tuple. For a complete list of formatting directives, see
strftime() and strptime() Behavior.

Class attributes:


¶
The earliest representable , .



¶
The latest representable , .



¶
The smallest possible difference between non-equal  objects,
.

Instance attributes (read-only):


¶
Between  and  inclusive.



¶
Between 1 and 12 inclusive.



¶
Between 1 and the number of days in the given month of the given year.



¶
In .



¶
In .



¶
In .



¶
In .



¶
The object passed as the tzinfo argument to the  constructor,
or  if none was passed.



¶
In .  Used to disambiguate wall times during a repeated interval.  (A
repeated interval occurs when clocks are rolled back at the end of daylight saving
time or when the UTC offset for the current zone is decreased for political reasons.)
The value 0 (1) represents the earlier (later) of the two moments with the same wall
time representation.

New in version 3.6.


Supported operations:






Operation
Result




(1)


(2)


(3)


Compares  to
. (4)




datetime2 is a duration of timedelta removed from datetime1, moving forward in
time if  > 0, or backward if  < 0.  The
result has the same  attribute as the input datetime, and
datetime2 - datetime1 == timedelta after.  is raised if
datetime2.year would be smaller than  or larger than
. Note that no time zone adjustments are done even if the
input is an aware object.

Computes the datetime2 such that datetime2 + timedelta == datetime1. As for
addition, the result has the same  attribute as the input
datetime, and no time zone adjustments are done even if the input is aware.

Subtraction of a  from a  is defined only if
both operands are naive, or if both are aware.  If one is aware and the other is
naive,  is raised.
If both are naive, or both are aware and have the same  attribute,
the  attributes are ignored, and the result is a 
object t such that .  No time zone adjustments
are done in this case.
If both are aware and have different  attributes,  acts
as if a and b were first converted to naive UTC datetimes first.  The
result is  except that the implementation never overflows.

datetime1 is considered less than datetime2 when datetime1 precedes
datetime2 in time.
If one comparand is naive and the other is aware, 
is raised if an order comparison is attempted.  For equality
comparisons, naive instances are never equal to aware instances.
If both comparands are aware, and have the same  attribute, the
common  attribute is ignored and the base datetimes are
compared.  If both comparands are aware and have different 
attributes, the comparands are first adjusted by subtracting their UTC
offsets (obtained from ).

Changed in version 3.3: Equality comparisons between naive and aware 
instances don’t raise .


Note
In order to stop comparison from falling back to the default scheme of comparing
object addresses, datetime comparison normally raises  if the
other comparand isn’t also a  object.  However,
 is returned instead if the other comparand has a
 attribute.  This hook gives other kinds of date objects a
chance at implementing mixed-type comparison.  If not, when a 
object is compared to an object of a different type,  is raised
unless the comparison is  or .  The latter cases return
 or , respectively.



 objects can be used as dictionary keys. In Boolean contexts,
all  objects are considered to be true.
Instance methods:


()¶
Return  object with same year, month and day.



()¶
Return  object with same hour, minute, second, microsecond and fold.
 is .  See also method .

Changed in version 3.6: The fold value is copied to the returned  object.




()¶
Return  object with same hour, minute, second, microsecond, fold, and
tzinfo attributes.  See also method .

Changed in version 3.6: The fold value is copied to the returned  object.




(year=self.year, month=self.month, day=self.day, hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0)¶
Return a datetime with the same attributes, except for those attributes given
new values by whichever keyword arguments are specified.  Note that
 can be specified to create a naive datetime from an aware
datetime with no conversion of date and time data.

New in version 3.6: Added the  argument.




(tz=None)¶
Return a  object with new  attribute tz,
adjusting the date and time data so the result is the same UTC time as
self, but in tz’s local time.
If provided, tz must be an instance of a  subclass, and its
 and  methods must not return .  If self
is naive, it is presumed to represent time in the system timezone.
If called without arguments (or with ) the system local
timezone is assumed for the target timezone.  The  attribute of the converted
datetime instance will be set to an instance of 
with the zone name and offset obtained from the OS.
If  is tz,  is equal to self:  no
adjustment of date or time data is performed. Else the result is local
time in the timezone tz, representing the same UTC time as self:  after
,  will have
the same date and time data as .
If you merely want to attach a time zone object tz to a datetime dt without
adjustment of date and time data, use .  If you
merely want to remove the time zone object from an aware datetime dt without
conversion of date and time data, use .
Note that the default  method can be overridden in a
 subclass to affect the result returned by .
Ignoring error cases,  acts like:



Changed in version 3.3: tz now can be omitted.


Changed in version 3.6: The  method can now be called on naive instances that
are presumed to represent system local time.




()¶
If  is , returns , else returns
, and raises an exception if the latter doesn’t
return  or a  object with magnitude less than one day.

Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes.




()¶
If  is , returns , else returns
, and raises an exception if the latter doesn’t return
 or a  object with magnitude less than one day.

Changed in version 3.7: The DST offset is not restricted to a whole number of minutes.




()¶
If  is , returns , else returns
, raises an exception if the latter doesn’t return
 or a string object,



()¶
Return a  such as returned by .
 is equivalent to , where  is the day number within
the current year starting with  for January 1st. The  flag
of the result is set according to the  method:  is
 or  returns ,  is set to ;
else if  returns a non-zero value,  is set to ;
else  is set to .



()¶
If  instance d is naive, this is the same as
 except that  is forced to 0 regardless of what
 returns.  DST is never in effect for a UTC time.
If d is aware, d is normalized to UTC time, by subtracting
, and a  for the
normalized time is returned.   is forced to 0. Note
that an  may be raised if d.year was
 or  and UTC adjustment spills over a year
boundary.



()¶
Return the proleptic Gregorian ordinal of the date.  The same as
.



()¶
Return POSIX timestamp corresponding to the 
instance.  The return value is a  similar to that
returned by .
Naive  instances are assumed to represent local
time and this method relies on the platform C 
function to perform the conversion.  Since 
supports wider range of values than  on many
platforms, this method may raise  for times far
in the past or far in the future.
For aware  instances, the return value is computed
as:



New in version 3.3.


Changed in version 3.6: The  method uses the  attribute to
disambiguate the times during a repeated interval.


Note
There is no method to obtain the POSIX timestamp directly from a
naive  instance representing UTC time.  If your
application uses this convention and your system timezone is not
set to UTC, you can obtain the POSIX timestamp by supplying
:


or by calculating the timestamp directly:






()¶
Return the day of the week as an integer, where Monday is 0 and Sunday is 6.
The same as . See also .



()¶
Return the day of the week as an integer, where Monday is 1 and Sunday is 7.
The same as . See also ,
.



()¶
Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The same as
.



(sep='T', timespec='auto')¶
Return a string representing the date and time in ISO 8601 format,
YYYY-MM-DDTHH:MM:SS.ffffff or, if  is 0,
YYYY-MM-DDTHH:MM:SS
If  does not return , a string is
appended, giving the UTC offset:
YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]] or, if 
is 0 YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]].
The optional argument sep (default ) is a one-character separator,
placed between the date and time portions of the result.  For example,


The optional argument timespec specifies the number of additional
components of the time to include (the default is ).
It can be one of the following:

: Same as  if  is 0,
same as  otherwise.
: Include the  in the two-digit HH format.
: Include  and  in HH:MM format.
: Include , , and 
in HH:MM:SS format.
: Include full time, but truncate fractional second
part to milliseconds. HH:MM:SS.sss format.
: Include full time in HH:MM:SS.ffffff format.


Note
Excluded time components are truncated, not rounded.

 will be raised on an invalid timespec argument.



New in version 3.6: Added the timespec argument.




()¶
For a  instance d,  is equivalent to
.



()¶
Return a string representing the date and time, for example .  is
equivalent to  on platforms where the
native C  function (which  invokes, but which
 does not invoke) conforms to the C standard.



(format)¶
Return a string representing the date and time, controlled by an explicit format
string.  For a complete list of formatting directives, see
strftime() and strptime() Behavior.



(format)¶
Same as .  This makes it possible to specify a format
string for a  object in formatted string
literals and when using .  For a
complete list of formatting directives, see
strftime() and strptime() Behavior.

Examples of working with datetime objects:


Using datetime with tzinfo:


