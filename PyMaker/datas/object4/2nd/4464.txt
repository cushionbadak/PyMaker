link:
library/subprocess.html#frequently-used-arguments

docs:

Frequently Used Arguments¶
To support a wide variety of use cases, the  constructor (and
the convenience functions) accept a large number of optional arguments. For
most typical use cases, many of these arguments can be safely left at their
default values. The arguments that are most commonly needed are:

args is required for all calls and should be a string, or a sequence of
program arguments. Providing a sequence of arguments is generally
preferred, as it allows the module to take care of any required escaping
and quoting of arguments (e.g. to permit spaces in file names). If passing
a single string, either shell must be  (see below) or else
the string must simply name the program to be executed without specifying
any arguments.
stdin, stdout and stderr specify the executed program’s standard input,
standard output and standard error file handles, respectively.  Valid values
are , , an existing file descriptor (a positive
integer), an existing file object, and .   indicates
that a new pipe to the child should be created.   indicates
that the special file  will be used.  With the default
settings of , no redirection will occur; the child’s file handles
will be inherited from the parent.  Additionally, stderr can be
, which indicates that the stderr data from the child
process should be captured into the same file handle as for stdout.
If encoding or errors are specified, or text (also known as
universal_newlines) is true,
the file objects stdin, stdout and stderr will be opened in text
mode using the encoding and errors specified in the call or the
defaults for .
For stdin, line ending characters  in the input will be converted
to the default line separator . For stdout and stderr,
all line endings in the output will be converted to .  For more
information see the documentation of the  class
when the newline argument to its constructor is .
If text mode is not used, stdin, stdout and stderr will be opened as
binary streams. No encoding or line ending conversion is performed.

New in version 3.6: Added encoding and errors parameters.


New in version 3.7: Added the text parameter as an alias for universal_newlines.


Note
The newlines attribute of the file objects ,
 and  are not updated by
the  method.

If shell is , the specified command will be executed through
the shell.  This can be useful if you are using Python primarily for the
enhanced control flow it offers over most system shells and still want
convenient access to other shell features such as shell pipes, filename
wildcards, environment variable expansion, and expansion of  to a
user’s home directory.  However, note that Python itself offers
implementations of many shell-like features (in particular, ,
, , ,
, and ).

Changed in version 3.3: When universal_newlines is , the class uses the encoding

instead of .  See the
 class for more information on this change.


Note
Read the Security Considerations section before using .


These options, along with all of the other options, are described in more
detail in the  constructor documentation.
