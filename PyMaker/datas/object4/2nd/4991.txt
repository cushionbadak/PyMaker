link:
library/asyncio-llapi-index.html#event-loop-methods

docs:

Event Loop MethodsÂ¶
See also the main documentation section about the
event loop methods.
Lifecycle







Run a Future/Task/awaitable until complete.


Run the event loop forever.


Stop the event loop.


Close the event loop.


Return  if the event loop is running.


Return  if the event loop is closed.

 
Close asynchronous generators.



Debugging







Enable or disable the debug mode.


Get the current debug mode.



Scheduling Callbacks







Invoke a callback soon.


A thread-safe variant of .


Invoke a callback after the given time.


Invoke a callback at the given time.



Thread/Process Pool






 
Run a CPU-bound or other blocking function in
a  executor.


Set the default executor for .



Tasks and Futures







Create a  object.


Schedule coroutine as a .


Set a factory used by  to
create .


Get the factory  uses
to create .



DNS






 
Asynchronous version of .

 
Asynchronous version of .



Networking and IPC






 
Open a TCP connection.

 
Create a TCP server.

 
Open a Unix socket connection.

 
Create a Unix socket server.

 
Wrap a  into a 
pair.

 
Open a datagram (UDP) connection.

 
Send a file over a transport.

 
Upgrade an existing connection to TLS.

 
Wrap a read end of a pipe into a  pair.

 
Wrap a write end of a pipe into a  pair.



Sockets






 
Receive data from the .

 
Receive data from the  into a buffer.

 
Send data to the .

 
Connect the .

 
Accept a  connection.

 
Send a file over the .


Start watching a file descriptor for read availability.


Stop watching a file descriptor for read availability.


Start watching a file descriptor for write availability.


Stop watching a file descriptor for write availability.



Unix Signals







Add a handler for a .


Remove a handler for a .



Subprocesses







Spawn a subprocess.


Spawn a subprocess from a shell command.



Error Handling







Call the exception handler.


Set a new exception handler.


Get the current exception handler.


The default exception handler implementation.



Examples

Using asyncio.get_event_loop() and loop.run_forever().
Using loop.call_later().
Using  to implement
an echo-client.
Using  to
connect a socket.
Using add_reader() to watch an FD for read events.
Using loop.add_signal_handler().
Using loop.subprocess_exec().

