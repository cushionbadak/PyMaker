link:
library/enum.html#interesting-examples

docs:

Interesting examples¶
While , , , and  are
expected to cover the majority of use-cases, they cannot cover them all.  Here
are recipes for some different types of enumerations that can be used directly,
or as examples for creating one’s own.

Omitting values¶
In many use-cases one doesn’t care what the actual value of an enumeration
is. There are several ways to define this type of simple enumeration:

use instances of  for the value
use instances of  as the value
use a descriptive string as the value
use a tuple as the value and a custom  to replace the
tuple with an  value

Using any of these methods signifies to the user that these values are not
important, and also enables one to add, remove, or reorder members without
having to renumber the remaining members.
Whichever method you choose, you should provide a  that also hides
the (unimportant) value:



Using ¶
Using  would look like:




Using ¶
Using  would look like:




Using a descriptive string¶
Using a string as the value would look like:




Using a custom ¶
Using an auto-numbering  would look like:



Note
The  method, if defined, is used during creation of the Enum
members; it is then replaced by Enum’s  which is used after
class creation for lookup of existing members.




OrderedEnum¶
An ordered enumeration that is not based on  and so maintains
the normal  invariants (such as not being comparable to other
enumerations):




DuplicateFreeEnum¶
Raises an error if a duplicate member name is found instead of creating an
alias:



Note
This is a useful example for subclassing Enum to add or change other
behaviors as well as disallowing aliases.  If the only desired change is
disallowing aliases, the  decorator can be used instead.



Planet¶
If  or  is defined the value of the enum member
will be passed to those methods:




TimePeriod¶
An example to show the  attribute in use:



