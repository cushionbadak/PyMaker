link:
library/signal.html#execution-of-python-signal-handlers

docs:

Execution of Python signal handlersÂ¶
A Python signal handler does not get executed inside the low-level (C) signal
handler.  Instead, the low-level signal handler sets a flag which tells the
virtual machine to execute the corresponding Python signal handler
at a later point(for example at the next bytecode instruction).
This has consequences:

It makes little sense to catch synchronous errors like  or
 that are caused by an invalid operation in C code.  Python
will return from the signal handler to the C code, which is likely to raise
the same signal again, causing Python to apparently hang.  From Python 3.3
onwards, you can use the  module to report on synchronous
errors.
A long-running calculation implemented purely in C (such as regular
expression matching on a large body of text) may run uninterrupted for an
arbitrary amount of time, regardless of any signals received.  The Python
signal handlers will be called when the calculation finishes.

