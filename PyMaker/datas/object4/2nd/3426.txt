link:
library/argparse.html#action

docs:

action¶
 objects associate command-line arguments with actions.  These
actions can do just about anything with the command-line arguments associated with
them, though most actions simply add an attribute to the object returned by
.  The  keyword argument specifies
how the command-line arguments should be handled. The supplied actions are:

 - This just stores the argument’s value.  This is the default
action. For example:



 - This stores the value specified by the const keyword
argument.  The  action is most commonly used with
optional arguments that specify some sort of flag.  For example:



 and  - These are special cases of
 used for storing the values  and 
respectively.  In addition, they create default values of  and
 respectively.  For example:



 - This stores a list, and appends each argument value to the
list.  This is useful to allow an option to be specified multiple times.
Example usage:



 - This stores a list, and appends the value specified by
the const keyword argument to the list.  (Note that the const keyword
argument defaults to .)  The  action is typically
useful when multiple arguments need to store constants to the same list. For
example:



 - This counts the number of times a keyword argument occurs. For
example, this is useful for increasing verbosity levels:



 - This prints a complete help message for all the options in the
current parser and then exits. By default a help action is automatically
added to the parser. See  for details of how the
output is created.

 - This expects a  keyword argument in the
 call, and prints version information
and exits when invoked:




You may also specify an arbitrary action by passing an Action subclass or
other object that implements the same interface.  The recommended way to do
this is to extend , overriding the  method
and optionally the  method.
An example of a custom action:


For more details, see .
