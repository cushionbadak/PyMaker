link:
library/imaplib.html#imap4-objects

docs:

IMAP4 Objects¶
All IMAP4rev1 commands are represented by methods of the same name, either
upper-case or lower-case.
All arguments to commands are converted to strings, except for ,
and the last argument to  which is passed as an IMAP4 literal.  If
necessary (the string contains IMAP4 protocol-sensitive characters and isn’t
enclosed with either parentheses or double quotes) each string is quoted.
However, the password argument to the  command is always quoted. If
you want to avoid having an argument string quoted (eg: the flags argument to
) then enclose the string in parentheses (eg: ).
Each command returns a tuple:  where type is usually
 or , and data is either the text from the command response,
or mandated results from the command. Each data is either a string, or a
tuple. If a tuple, then the first part is the header of the response, and the
second part contains the data (ie: ‘literal’ value).
The message_set options to commands below is a string specifying one or more
messages to be acted upon.  It may be a simple message number (), a range
of message numbers (), or a group of non-contiguous ranges separated by
commas ().  A range can contain an asterisk to indicate an infinite
upper bound ().
An  instance has the following methods:


(mailbox, flags, date_time, message)¶
Append message to named mailbox.



(mechanism, authobject)¶
Authenticate command — requires response processing.
mechanism specifies which authentication mechanism is to be used - it should
appear in the instance variable  in the form .
authobject must be a callable object:


It will be called to process server continuation responses; the response
argument it is passed will be .  It should return  data
that will be base64 encoded and sent to the server.  It should return
 if the client abort response  should be sent instead.

Changed in version 3.5: string usernames and passwords are now encoded to  instead of
being limited to ASCII.




()¶
Checkpoint mailbox on server.



()¶
Close currently selected mailbox. Deleted messages are removed from writable
mailbox. This is the recommended command before .



(message_set, new_mailbox)¶
Copy message_set messages onto end of new_mailbox.



(mailbox)¶
Create new mailbox named mailbox.



(mailbox)¶
Delete old mailbox named mailbox.



(mailbox, who)¶
Delete the ACLs (remove any rights) set for who on mailbox.



(capability)¶
Enable capability (see RFC 5161).  Most capabilities do not need to be
enabled.  Currently only the  capability is supported
(see RFC 6855).

New in version 3.5: The  method itself, and RFC 6855 support.




()¶
Permanently remove deleted items from selected mailbox. Generates an 
response for each deleted message. Returned data contains a list of 
message numbers in order received.



(message_set, message_parts)¶
Fetch (parts of) messages.  message_parts should be a string of message part
names enclosed within parentheses, eg: .  Returned data
are tuples of message part envelope and data.



(mailbox)¶
Get the s for mailbox. The method is non-standard, but is supported
by the  server.



(mailbox, entry, attribute)¶
Retrieve the specified s for mailbox. The method is
non-standard, but is supported by the  server.



(root)¶
Get the  root’s resource usage and limits. This method is part of the
IMAP4 QUOTA extension defined in rfc2087.



(mailbox)¶
Get the list of   for the named mailbox. This method is part
of the IMAP4 QUOTA extension defined in rfc2087.



([directory[, pattern]])¶
List mailbox names in directory matching pattern.  directory defaults to
the top-level mail folder, and pattern defaults to match anything.  Returned
data contains a list of  responses.



(user, password)¶
Identify the client using a plaintext password. The password will be quoted.



(user, password)¶
Force use of  authentication when identifying the client to protect
the password.  Will only work if the server  response includes the
phrase .



()¶
Shutdown connection to server. Returns server  response.



(directory='""', pattern='*')¶
List subscribed mailbox names in directory matching pattern. directory
defaults to the top level directory and pattern defaults to match any mailbox.
Returned data are tuples of message part envelope and data.



(mailbox)¶
Show my ACLs for a mailbox (i.e. the rights that I have on mailbox).



()¶
Returns IMAP namespaces as defined in RFC 2342.



()¶
Send  to server.



(host, port)¶
Opens socket to port at host.  This method is implicitly called by
the  constructor.  The connection objects established by this
method will be used in the , ,
, and  methods.  You may override
this method.



(message_num, message_part, start, length)¶
Fetch truncated part of a message. Returned data is a tuple of message part
envelope and data.



(user)¶
Assume authentication as user. Allows an authorised administrator to proxy
into any user’s mailbox.



(size)¶
Reads size bytes from the remote server. You may override this method.



()¶
Reads one line from the remote server. You may override this method.



()¶
Prompt server for an update. Returned data is  if no new messages, else
value of  response.



(oldmailbox, newmailbox)¶
Rename mailbox named oldmailbox to newmailbox.



(code)¶
Return data for response code if received, or . Returns the given
code, instead of the usual type.



(charset, criterion[, ...])¶
Search mailbox for matching messages.  charset may be , in which case
no  will be specified in the request to the server.  The IMAP
protocol requires that at least one criterion be specified; an exception will be
raised when the server returns an error.  charset must be  if
the  capability was enabled using the 
command.
Example:





(mailbox='INBOX', readonly=False)¶
Select a mailbox. Returned data is the count of messages in mailbox
( response).  The default mailbox is .  If the readonly
flag is set, modifications to the mailbox are not allowed.



(data)¶
Sends  to the remote server. You may override this method.



(mailbox, who, what)¶
Set an  for mailbox. The method is non-standard, but is supported by
the  server.



(mailbox, entry, attribute[, ...])¶
Set s for mailbox. The method is non-standard, but is
supported by the  server.



(root, limits)¶
Set the  root’s resource limits. This method is part of the IMAP4
QUOTA extension defined in rfc2087.



()¶
Close connection established in .  This method is implicitly
called by .  You may override this method.



()¶
Returns socket instance used to connect to server.



(sort_criteria, charset, search_criterion[, ...])¶
The  command is a variant of  with sorting semantics for the
results.  Returned data contains a space separated list of matching message
numbers.
Sort has two arguments before the search_criterion argument(s); a
parenthesized list of sort_criteria, and the searching charset.  Note that
unlike , the searching charset argument is mandatory.  There is also
a  command which corresponds to  the way that 
corresponds to .  The  command first searches the mailbox for
messages that match the given searching criteria using the charset argument for
the interpretation of strings in the searching criteria.  It then returns the
numbers of matching messages.
This is an  extension command.



(ssl_context=None)¶
Send a  command.  The ssl_context argument is optional
and should be a  object.  This will enable
encryption on the IMAP connection.  Please read Security considerations for
best practices.

New in version 3.2.


Changed in version 3.4: The method now supports hostname check with
 and Server Name Indication (see
).




(mailbox, names)¶
Request named status conditions for mailbox.



(message_set, command, flag_list)¶
Alters flag dispositions for messages in mailbox.  command is specified by
section 6.4.6 of RFC 2060 as being one of “FLAGS”, “+FLAGS”, or “-FLAGS”,
optionally with a suffix of “.SILENT”.
For example, to set the delete flag on all messages:



Note
Creating flags containing ‘]’ (for example: “[test]”) violates
RFC 3501 (the IMAP protocol).  However, imaplib has historically
allowed creation of such tags, and popular IMAP servers, such as Gmail,
accept and produce such flags.  There are non-Python programs which also
create such tags.  Although it is an RFC violation and IMAP clients and
servers are supposed to be strict, imaplib nonetheless continues to allow
such tags to be created for backward compatibility reasons, and as of
Python 3.6, handles them if they are sent from the server, since this
improves real-world compatibility.




(mailbox)¶
Subscribe to new mailbox.



(threading_algorithm, charset, search_criterion[, ...])¶
The  command is a variant of  with threading semantics for
the results.  Returned data contains a space separated list of thread members.
Thread members consist of zero or more messages numbers, delimited by spaces,
indicating successive parent and child.
Thread has two arguments before the search_criterion argument(s); a
threading_algorithm, and the searching charset.  Note that unlike
, the searching charset argument is mandatory.  There is also a
 command which corresponds to  the way that  corresponds to .  The  command first searches the
mailbox for messages that match the given searching criteria using the charset
argument for the interpretation of strings in the searching criteria. It then
returns the matching messages threaded according to the specified threading
algorithm.
This is an  extension command.



(command, arg[, ...])¶
Execute command args with messages identified by UID, rather than message
number.  Returns response appropriate to command.  At least one argument must be
supplied; if none are provided, the server will return an error and an exception
will be raised.



(mailbox)¶
Unsubscribe from old mailbox.



(name[, ...])¶
Allow simple extension commands notified by server in  response.

The following attributes are defined on instances of :


¶
The most recent supported protocol in the  response from the
server.



¶
Integer value to control debugging output.  The initialize value is taken from
the module variable .  Values greater than three trace each command.



¶
Boolean value that is normally , but is set to  if an
 command is successfully issued for the 
capability.

New in version 3.5.


