link:
library/http.cookies.html

docs:


 — HTTP state management¶
Source code: Lib/http/cookies.py

The  module defines classes for abstracting the concept of
cookies, an HTTP state management mechanism. It supports both simple string-only
cookies, and provides an abstraction for having any serializable data-type as
cookie value.
The module formerly strictly applied the parsing rules described in the
RFC 2109 and RFC 2068 specifications.  It has since been discovered that
MSIE 3.0x doesn’t follow the character rules outlined in those specs and also
many current day browsers and servers have relaxed parsing rules when comes to
Cookie handling.  As a result, the parsing rules used are a bit less strict.
The character set, ,  and
 denote the set of valid characters allowed by this module
in Cookie name (as ).

Changed in version 3.3: Allowed ‘:’ as a valid Cookie name character.


Note
On encountering an invalid cookie,  is raised, so if your
cookie data comes from a browser you should always prepare for invalid data
and catch  on parsing.



exception ¶
Exception failing because of RFC 2109 invalidity: incorrect attributes,
incorrect Set-Cookie header, etc.



class ([input])¶
This class is a dictionary-like object whose keys are strings and whose values
are  instances. Note that upon setting a key to a value, the
value is first converted to a  containing the key and the value.
If input is given, it is passed to the  method.



class ([input])¶
This class derives from  and overrides 
and . SimpleCookie supports strings as cookie values.
When setting the value, SimpleCookie calls the builtin  to convert
the value to a string. Values received from HTTP are kept as strings.


See also

Module 
HTTP cookie handling for web clients.  The  and
 modules do not depend on each other.
RFC 2109 - HTTP State Management Mechanism
This is the state management specification implemented by this module.



Cookie Objects¶


(val)¶
Return a tuple  from a string representation.
 can be any type. This method does no decoding in
 — it exists so it can be overridden.



(val)¶
Return a tuple . val can be any type, but
 will always be converted to a string.
This method does no encoding in  — it exists so it can
be overridden.
In general, it should be the case that  and
 are inverses on the range of value_decode.



(attrs=None, header='Set-Cookie:', sep='\r\n')¶
Return a string representation suitable to be sent as HTTP headers. attrs and
header are sent to each ’s  method. sep is used
to join the headers together, and is by default the combination 
(CRLF).



(attrs=None)¶
Return an embeddable JavaScript snippet, which, if run on a browser which
supports JavaScript, will act the same as if the HTTP headers was sent.
The meaning for attrs is the same as in .



(rawdata)¶
If rawdata is a string, parse it as an  and add the values
found there as s. If it is a dictionary, it is equivalent to:





Morsel Objects¶


class ¶
Abstract a key/value pair, which has some RFC 2109 attributes.
Morsels are dictionary-like objects, whose set of keys is constant — the valid
RFC 2109 attributes, which are










The attribute  specifies that the cookie is only transferred
in HTTP requests, and is not accessible through JavaScript. This is intended
to mitigate some forms of cross-site scripting.
The keys are case-insensitive and their default value is .

Changed in version 3.5:  now takes  and 
into account.


Changed in version 3.7: Attributes ,  and
 are read-only.  Use  for
setting them.




¶
The value of the cookie.



¶
The encoded value of the cookie — this is what should be sent.



¶
The name of the cookie.



(key, value, coded_value)¶
Set the key, value and coded_value attributes.



(K)¶
Whether K is a member of the set of keys of a .



(attrs=None, header='Set-Cookie:')¶
Return a string representation of the Morsel, suitable to be sent as an HTTP
header. By default, all the attributes are included, unless attrs is given, in
which case it should be a list of attributes to use. header is by default
.



(attrs=None)¶
Return an embeddable JavaScript snippet, which, if run on a browser which
supports JavaScript, will act the same as if the HTTP header was sent.
The meaning for attrs is the same as in .



(attrs=None)¶
Return a string representing the Morsel, without any surrounding HTTP or
JavaScript.
The meaning for attrs is the same as in .



(values)¶
Update the values in the Morsel dictionary with the values in the dictionary
values.  Raise an error if any of the keys in the values dict is not a
valid RFC 2109 attribute.

Changed in version 3.5: an error is raised for invalid keys.




(value)¶
Return a shallow copy of the Morsel object.

Changed in version 3.5: return a Morsel object instead of a dict.




(key, value=None)¶
Raise an error if key is not a valid RFC 2109 attribute, otherwise
behave the same as .



Example¶
The following example demonstrates how to use the  module.




