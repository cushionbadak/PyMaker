link:
library/ctypes.html#arrays-and-pointers

docs:

Arrays and pointers¶


class (*args)¶
Abstract base class for arrays.
The recommended way to create concrete array types is by multiplying any
 data type with a positive integer.  Alternatively, you can subclass
this type and define  and  class variables.
Array elements can be read and written using standard
subscript and slice accesses; for slice reads, the resulting object is
not itself an .


¶
A positive integer specifying the number of elements in the array.
Out-of-range subscripts result in an . Will be
returned by .



¶
Specifies the type of each element in the array.

Array subclass constructors accept positional arguments, used to
initialize the elements in order.



class ¶
Private, abstract base class for pointers.
Concrete pointer types are created by calling  with the
type that will be pointed to; this is done automatically by
.
If a pointer points to an array, its elements can be read and
written using standard subscript and slice accesses.  Pointer objects
have no size, so  will raise .  Negative
subscripts will read from the memory before the pointer (as in C), and
out-of-range subscripts will probably crash with an access violation (if
you’re lucky).


¶
Specifies the type pointed to.



¶
Returns the object to which to pointer points.  Assigning to this
attribute changes the pointer to point to the assigned object.


