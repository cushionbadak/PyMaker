link:
reference/datamodel.html#customizing-instance-and-subclass-checks

docs:

3.3.4. Customizing instance and subclass checks¶
The following methods are used to override the default behavior of the
 and  built-in functions.
In particular, the metaclass  implements these methods in
order to allow the addition of Abstract Base Classes (ABCs) as “virtual base
classes” to any class or type (including built-in types), including other
ABCs.


(self, instance)¶
Return true if instance should be considered a (direct or indirect)
instance of class. If defined, called to implement .



(self, subclass)¶
Return true if subclass should be considered a (direct or indirect)
subclass of class.  If defined, called to implement .

Note that these methods are looked up on the type (metaclass) of a class.  They
cannot be defined as class methods in the actual class.  This is consistent with
the lookup of special methods that are called on instances, only in this
case the instance is itself a class.

See also

PEP 3119 - Introducing Abstract Base Classes
Includes the specification for customizing  and
 behavior through  and
, with motivation for this functionality
in the context of adding Abstract Base Classes (see the 
module) to the language.


