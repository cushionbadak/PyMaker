link:
library/enum.html#how-are-enums-different

docs:

How are Enums different?¶
Enums have a custom metaclass that affects many aspects of both derived Enum
classes and their instances (members).

Enum Classes¶
The  metaclass is responsible for providing the
, ,  and other methods that
allow one to do things with an  class that fail on a typical
class, such as list(Color) or some_enum_var in Color.   is
responsible for ensuring that various other methods on the final 
class are correct (such as , ,
 and ).


Enum Members (aka instances)¶
The most interesting thing about Enum members is that they are singletons.
 creates them all while it is creating the 
class itself, and then puts a custom  in place to ensure
that no new ones are ever instantiated by returning only the existing
member instances.


Finer Points¶

Supported  names¶
 is an  of :
items.  It is only available on the class.
, if specified, must create and return the enum members; it is
also a very good idea to set the member’s  appropriately.  Once
all the members are created it is no longer used.


Supported  names¶

 – name of the member
 – value of the member; can be set / modified in 
 – a lookup function used when a value is not found; may be
overridden
 – a list of names, either as a  or a ,
that will not be transformed into members, and will be removed from the final
class
 – used in Python 2/3 code to ensure member order is consistent
(class attribute, removed during class creation)
 – used by the Functional API and by
 to get an appropriate value for an enum member; may be
overridden


New in version 3.6: , , 


New in version 3.7: 

To help keep Python 2 / Python 3 code in sync an  attribute can
be provided.  It will be checked against the actual order of the enumeration
and raise an error if the two do not match:



Note
In Python 2 code the  attribute is necessary as definition
order is lost before it can be recorded.



 member type¶
 members are instances of their  class, and are
normally accessed as .  Under certain circumstances they
can also be accessed as , but you should never do
this as that lookup may fail or, worse, return something besides the
 member you are looking for (this is another good reason to use
all-uppercase names for members):



Changed in version 3.5.



Boolean value of  classes and members¶
 members that are mixed with non- types (such as
, , etc.) are evaluated according to the mixed-in
type’s rules; otherwise, all members evaluate as .  To make your
own Enum’s boolean evaluation depend on the member’s value add the following to
your class:


 classes always evaluate as .


 classes with methods¶
If you give your  subclass extra methods, like the Planet
class above, those methods will show up in a  of the member,
but not of the class:




Combining members of ¶
If a combination of Flag members is not named, the  will include
all named flags and all named combinations of flags that are in the value:




