link:
library/argparse.html#upgrading-optparse-code

docs:

Upgrading optparse codeÂ¶
Originally, the  module had attempted to maintain compatibility
with .  However,  was difficult to extend
transparently, particularly with the changes required to support the new
 specifiers and better usage messages.  When most everything in
 had either been copy-pasted over or monkey-patched, it no
longer seemed practical to try to maintain the backwards compatibility.
The  module improves on the standard library 
module in a number of ways including:

Handling positional arguments.
Supporting sub-commands.
Allowing alternative option prefixes like  and .
Handling zero-or-more and one-or-more style arguments.
Producing more informative usage messages.
Providing a much simpler interface for custom  and .

A partial upgrade path from  to :

Replace all  calls with
 calls.
Replace  with  and add additional 
calls for the positional arguments. Keep in mind that what was previously
called , now in the  context is called .
Replace 
by using  instead of
.
Replace callback actions and the  keyword arguments with
 or  arguments.
Replace string names for  keyword arguments with the corresponding
type objects (e.g. int, float, complex, etc).
Replace  with  and
 and  with
.
Replace strings with implicit arguments such as  or  with
the standard Python syntax to use dictionaries to format strings, that is,
 and .
Replace the OptionParser constructor  argument with a call to
.

