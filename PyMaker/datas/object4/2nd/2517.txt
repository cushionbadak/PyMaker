link:
library/lzma.html#compressing-and-decompressing-data-in-memory

docs:

Compressing and decompressing data in memory¶


class (format=FORMAT_XZ, check=-1, preset=None, filters=None)¶
Create a compressor object, which can be used to compress data incrementally.
For a more convenient way of compressing a single chunk of data, see
.
The format argument specifies what container format should be used.
Possible values are:


: The  container format.
This is the default format.



: The legacy  container format.
This format is more limited than  – it does not support integrity
checks or multiple filters.



: A raw data stream, not using any container format.
This format specifier does not support integrity checks, and requires that
you always specify a custom filter chain (for both compression and
decompression). Additionally, data compressed in this manner cannot be
decompressed using  (see ).



The check argument specifies the type of integrity check to include in the
compressed data. This check is used when decompressing, to ensure that the
data has not been corrupted. Possible values are:

: No integrity check.
This is the default (and the only acceptable value) for
 and .
: 32-bit Cyclic Redundancy Check.
: 64-bit Cyclic Redundancy Check.
This is the default for .
: 256-bit Secure Hash Algorithm.

If the specified check is not supported, an  is raised.
The compression settings can be specified either as a preset compression
level (with the preset argument), or in detail as a custom filter chain
(with the filters argument).
The preset argument (if provided) should be an integer between  and
 (inclusive), optionally OR-ed with the constant
. If neither preset nor filters are given, the
default behavior is to use  (preset level ).
Higher presets produce smaller output, but make the compression process
slower.

Note
In addition to being more CPU-intensive, compression with higher presets
also requires much more memory (and produces output that needs more memory
to decompress). With preset  for example, the overhead for an
 object can be as high as 800 MiB. For this reason,
it is generally best to stick with the default preset.

The filters argument (if provided) should be a filter chain specifier.
See Specifying custom filter chains for details.


(data)¶
Compress data (a  object), returning a 
object containing compressed data for at least part of the input. Some of
data may be buffered internally, for use in later calls to
 and . The returned data should be
concatenated with the output of any previous calls to .



()¶
Finish the compression process, returning a  object
containing any data stored in the compressor’s internal buffers.
The compressor cannot be used after this method has been called.




class (format=FORMAT_AUTO, memlimit=None, filters=None)¶
Create a decompressor object, which can be used to decompress data
incrementally.
For a more convenient way of decompressing an entire compressed stream at
once, see .
The format argument specifies the container format that should be used. The
default is , which can decompress both  and
 files. Other possible values are ,
, and .
The memlimit argument specifies a limit (in bytes) on the amount of memory
that the decompressor can use. When this argument is used, decompression will
fail with an  if it is not possible to decompress the input
within the given memory limit.
The filters argument specifies the filter chain that was used to create
the stream being decompressed. This argument is required if format is
, but should not be used for other formats.
See Specifying custom filter chains for more information about filter chains.

Note
This class does not transparently handle inputs containing multiple
compressed streams, unlike  and . To
decompress a multi-stream input with , you must
create a new decompressor for each stream.



(data, max_length=-1)¶
Decompress data (a bytes-like object), returning
uncompressed data as bytes. Some of data may be buffered
internally, for use in later calls to . The
returned data should be concatenated with the output of any
previous calls to .
If max_length is nonnegative, returns at most max_length
bytes of decompressed data. If this limit is reached and further
output can be produced, the  attribute will
be set to . In this case, the next call to
 may provide data as  to obtain
more of the output.
If all of the input data was decompressed and returned (either
because this was less than max_length bytes, or because
max_length was negative), the  attribute
will be set to .
Attempting to decompress data after the end of stream is reached
raises an EOFError.  Any data found after the end of the
stream is ignored and saved in the  attribute.

Changed in version 3.5: Added the max_length parameter.




¶
The ID of the integrity check used by the input stream. This may be
 until enough of the input has been decoded to
determine what integrity check it uses.



¶
 if the end-of-stream marker has been reached.



¶
Data found after the end of the compressed stream.
Before the end of the stream is reached, this will be .



¶
 if the  method can provide more
decompressed data before requiring new uncompressed input.

New in version 3.5.





(data, format=FORMAT_XZ, check=-1, preset=None, filters=None)¶
Compress data (a  object), returning the compressed data as a
 object.
See  above for a description of the format, check,
preset and filters arguments.



(data, format=FORMAT_AUTO, memlimit=None, filters=None)¶
Decompress data (a  object), returning the uncompressed data
as a  object.
If data is the concatenation of multiple distinct compressed streams,
decompress all of these streams, and return the concatenation of the results.
See  above for a description of the format,
memlimit and filters arguments.

