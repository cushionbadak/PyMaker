link:
library/datetime.html#date-objects

docs:

 Objects¶
A  object represents a date (year, month and day) in an idealized
calendar, the current Gregorian calendar indefinitely extended in both
directions.  January 1 of year 1 is called day number 1, January 2 of year 1 is
called day number 2, and so on.  This matches the definition of the “proleptic
Gregorian” calendar in Dershowitz and Reingold’s book Calendrical Calculations,
where it’s the base calendar for all computations.  See the book for algorithms
for converting between proleptic Gregorian ordinals and many other calendar
systems.


class (year, month, day)¶
All arguments are required.  Arguments may be integers, in the following
ranges:





If an argument outside those ranges is given,  is raised.

Other constructors, all class methods:


classmethod ()¶
Return the current local date.  This is equivalent to
.



classmethod (timestamp)¶
Return the local date corresponding to the POSIX timestamp, such as is returned
by .  This may raise , if the timestamp is out
of the range of values supported by the platform C  function,
and  on  failure.
It’s common for this to be restricted to years from 1970 through 2038.  Note
that on non-POSIX systems that include leap seconds in their notion of a
timestamp, leap seconds are ignored by .

Changed in version 3.3: Raise  instead of  if the timestamp
is out of the range of values supported by the platform C
 function. Raise  instead of
 on  failure.




classmethod (ordinal)¶
Return the date corresponding to the proleptic Gregorian ordinal, where January
1 of year 1 has ordinal 1.   is raised unless . For any date d, .



classmethod (date_string)¶
Return a  corresponding to a date_string in the format emitted
by . Specifically, this function supports strings in
the format(s) .

Caution
This does not support parsing arbitrary ISO 8601 strings - it is only intended
as the inverse operation of .


New in version 3.7.


Class attributes:


¶
The earliest representable date, .



¶
The latest representable date, .



¶
The smallest possible difference between non-equal date objects,
.

Instance attributes (read-only):


¶
Between  and  inclusive.



¶
Between 1 and 12 inclusive.



¶
Between 1 and the number of days in the given month of the given year.

Supported operations:






Operation
Result




date2 is  days removed
from date1.  (1)


Computes date2 such that . (2)


(3)


date1 is considered less than date2 when
date1 precedes date2 in time. (4)



Notes:

date2 is moved forward in time if , or backward if
.  Afterward .
 and  are ignored.
 is raised if  would be smaller than
 or larger than .
 and  are ignored.
This is exact, and cannot overflow.  timedelta.seconds and
timedelta.microseconds are 0, and date2 + timedelta == date1 after.
In other words,  if and only if . Date comparison raises  if
the other comparand isn’t also a  object. However,
 is returned instead if the other comparand has a
 attribute.  This hook gives other kinds of date objects a
chance at implementing mixed-type comparison. If not, when a 
object is compared to an object of a different type,  is raised
unless the comparison is  or .  The latter cases return
 or , respectively.

Dates can be used as dictionary keys. In Boolean contexts, all 
objects are considered to be true.
Instance methods:


(year=self.year, month=self.month, day=self.day)¶
Return a date with the same value, except for those parameters given new
values by whichever keyword arguments are specified.  For example, if , then .



()¶
Return a  such as returned by .
The hours, minutes and seconds are 0, and the DST flag is -1. 
is equivalent to , where  is the day number within the current year starting with
 for January 1st.



()¶
Return the proleptic Gregorian ordinal of the date, where January 1 of year 1
has ordinal 1.  For any  object d,
.



()¶
Return the day of the week as an integer, where Monday is 0 and Sunday is 6.
For example, , a Wednesday. See also
.



()¶
Return the day of the week as an integer, where Monday is 1 and Sunday is 7.
For example, , a Wednesday. See also
, .



()¶
Return a 3-tuple, (ISO year, ISO week number, ISO weekday).
The ISO calendar is a widely used variant of the Gregorian calendar. See
https://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm for a good
explanation.
The ISO year consists of 52 or 53 full weeks, and where a week starts on a
Monday and ends on a Sunday.  The first week of an ISO year is the first
(Gregorian) calendar week of a year containing a Thursday. This is called week
number 1, and the ISO year of that Thursday is the same as its Gregorian year.
For example, 2004 begins on a Thursday, so the first week of ISO year 2004
begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that
 and .



()¶
Return a string representing the date in ISO 8601 format, ‘YYYY-MM-DD’.  For
example, .



()¶
For a date d,  is equivalent to .



()¶
Return a string representing the date, for example .  is equivalent to
 on platforms where the native C
 function (which  invokes, but which
 does not invoke) conforms to the C standard.



(format)¶
Return a string representing the date, controlled by an explicit format string.
Format codes referring to hours, minutes or seconds will see 0 values. For a
complete list of formatting directives, see
strftime() and strptime() Behavior.



(format)¶
Same as . This makes it possible to specify a format
string for a  object in formatted string
literals and when using . For a
complete list of formatting directives, see
strftime() and strptime() Behavior.

Example of counting days to an event:


Example of working with :


