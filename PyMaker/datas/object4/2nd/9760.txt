link:
library/importlib.html#examples

docs:

Examples¶

Importing programmatically¶
To programmatically import a module, use .




Checking if a module can be imported¶
If you need to find out if a module can be imported without actually doing the
import, then you should use .




Importing a source file directly¶
To import a Python source file directly, use the following recipe
(Python 3.5 and newer only):




Setting up an importer¶
For deep customizations of import, you typically want to implement an
importer. This means managing both the finder and loader
side of things. For finders there are two flavours to choose from depending on
your needs: a meta path finder or a path entry finder. The
former is what you would put on  while the latter is what
you create using a path entry hook on  which works
with  entries to potentially create a finder. This example will
show you how to register your own importers so that import will use them (for
creating an importer for yourself, read the documentation for the appropriate
classes defined within this package):




Approximating ¶
Import itself is implemented in Python code, making it possible to
expose most of the import machinery through importlib. The following
helps illustrate the various APIs that importlib exposes by providing an
approximate implementation of
 (Python 3.4 and newer for the importlib usage,
Python 3.6 and newer for other parts of the code).



