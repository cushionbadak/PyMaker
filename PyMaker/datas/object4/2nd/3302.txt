link:
library/io.html#io.BufferedIOBase

docs:


class ¶
Base class for binary streams that support some kind of buffering.
It inherits . There is no public constructor.
The main difference with  is that methods ,
 and  will try (respectively) to read as much
input as requested or to consume all given output, at the expense of
making perhaps more than one system call.
In addition, those methods can raise  if the
underlying raw stream is in non-blocking mode and cannot take or give
enough data; unlike their  counterparts, they will
never return .
Besides, the  method does not have a default
implementation that defers to .
A typical  implementation should not inherit from a
 implementation, but wrap one, like
 and  do.
 provides or overrides these methods and attribute in
addition to those from :


¶
The underlying raw stream (a  instance) that
 deals with.  This is not part of the
 API and may not exist on some implementations.



()¶
Separate the underlying raw stream from the buffer and return it.
After the raw stream has been detached, the buffer is in an unusable
state.
Some buffers, like , do not have the concept of a single
raw stream to return from this method.  They raise
.

New in version 3.1.




(size=-1)¶
Read and return up to size bytes.  If the argument is omitted, ,
or negative, data is read and returned until EOF is reached.  An empty
 object is returned if the stream is already at EOF.
If the argument is positive, and the underlying raw stream is not
interactive, multiple raw reads may be issued to satisfy the byte count
(unless EOF is reached first).  But for interactive raw streams, at most
one raw read will be issued, and a short result does not imply that EOF is
imminent.
A  is raised if the underlying raw stream is in
non blocking-mode, and has no data available at the moment.



([size])¶
Read and return up to size bytes, with at most one call to the
underlying raw stream’s  (or
) method.  This can be useful if you are
implementing your own buffering on top of a 
object.
If size is  (the default), an arbitrary number of bytes are
returned (more than zero unless EOF is reached).



(b)¶
Read bytes into a pre-allocated, writable
bytes-like object b and return the number of bytes read.
For example, b might be a .
Like , multiple reads may be issued to the underlying raw
stream, unless the latter is interactive.
A  is raised if the underlying raw stream is in non
blocking-mode, and has no data available at the moment.



(b)¶
Read bytes into a pre-allocated, writable
bytes-like object b, using at most one call to
the underlying raw stream’s  (or
) method. Return the number of bytes read.
A  is raised if the underlying raw stream is in non
blocking-mode, and has no data available at the moment.

New in version 3.5.




(b)¶
Write the given bytes-like object, b, and return the number
of bytes written (always equal to the length of b in bytes, since if
the write fails an  will be raised).  Depending on the
actual implementation, these bytes may be readily written to the
underlying stream, or held in a buffer for performance and latency
reasons.
When in non-blocking mode, a  is raised if the
data needed to be written to the raw stream but it couldn’t accept
all the data without blocking.
The caller may release or mutate b after this method returns,
so the implementation should only access b during the method call.

