link:
library/subprocess.html#popen-objects

docs:

Popen Objects¶
Instances of the  class have the following methods:


()¶
Check if child process has terminated.  Set and return
 attribute. Otherwise, returns .



(timeout=None)¶
Wait for child process to terminate.  Set and return
 attribute.
If the process does not terminate after timeout seconds, raise a
 exception.  It is safe to catch this exception and
retry the wait.

Note
This will deadlock when using  or 
and the child process generates enough output to a pipe such that
it blocks waiting for the OS pipe buffer to accept more data.
Use  when using pipes to avoid that.


Note
The function is implemented using a busy loop (non-blocking call and
short sleeps). Use the  module for an asynchronous wait:
see .


Changed in version 3.3: timeout was added.




(input=None, timeout=None)¶
Interact with process: Send data to stdin.  Read data from stdout and stderr,
until end-of-file is reached.  Wait for process to terminate.  The optional
input argument should be data to be sent to the child process, or
, if no data should be sent to the child.  If streams were opened in
text mode, input must be a string.  Otherwise, it must be bytes.
 returns a tuple .
The data will be strings if streams were opened in text mode; otherwise,
bytes.
Note that if you want to send data to the process’s stdin, you need to create
the Popen object with .  Similarly, to get anything other than
 in the result tuple, you need to give  and/or
 too.
If the process does not terminate after timeout seconds, a
 exception will be raised.  Catching this exception and
retrying communication will not lose any output.
The child process is not killed if the timeout expires, so in order to
cleanup properly a well-behaved application should kill the child process and
finish communication:



Note
The data read is buffered in memory, so do not use this method if the data
size is large or unlimited.


Changed in version 3.3: timeout was added.




(signal)¶
Sends the signal signal to the child.

Note
On Windows, SIGTERM is an alias for . CTRL_C_EVENT and
CTRL_BREAK_EVENT can be sent to processes started with a creationflags
parameter which includes CREATE_NEW_PROCESS_GROUP.




()¶
Stop the child. On Posix OSs the method sends SIGTERM to the
child. On Windows the Win32 API function  is called
to stop the child.



()¶
Kills the child. On Posix OSs the function sends SIGKILL to the child.
On Windows  is an alias for .

The following attributes are also available:


¶
The args argument as it was passed to  – a
sequence of program arguments or else a single string.

New in version 3.3.




¶
If the stdin argument was , this attribute is a writeable
stream object as returned by . If the encoding or errors
arguments were specified or the universal_newlines argument was ,
the stream is a text stream, otherwise it is a byte stream. If the stdin
argument was not , this attribute is .



¶
If the stdout argument was , this attribute is a readable
stream object as returned by . Reading from the stream provides
output from the child process. If the encoding or errors arguments were
specified or the universal_newlines argument was , the stream is a
text stream, otherwise it is a byte stream. If the stdout argument was not
, this attribute is .



¶
If the stderr argument was , this attribute is a readable
stream object as returned by . Reading from the stream provides
error output from the child process. If the encoding or errors arguments
were specified or the universal_newlines argument was , the stream
is a text stream, otherwise it is a byte stream. If the stderr argument was
not , this attribute is .


Warning
Use  rather than ,
 or  to avoid
deadlocks due to any of the other OS pipe buffers filling up and blocking the
child process.



¶
The process ID of the child process.
Note that if you set the shell argument to , this is the process ID
of the spawned shell.



¶
The child return code, set by  and  (and indirectly
by ).  A  value indicates that the process
hasn’t terminated yet.
A negative value  indicates that the child was terminated by signal
 (POSIX only).

