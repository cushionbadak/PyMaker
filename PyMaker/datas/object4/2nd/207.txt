link:
reference/import.html#special-considerations-for-main

docs:

5.8. Special considerations for __main__¶
The  module is a special case relative to Python’s import
system.  As noted elsewhere, the  module
is directly initialized at interpreter startup, much like  and
.  However, unlike those two, it doesn’t strictly
qualify as a built-in module.  This is because the manner in which
 is initialized depends on the flags and other options with
which the interpreter is invoked.

5.8.1. __main__.__spec__¶
Depending on how  is initialized, 
gets set appropriately or to .
When Python is started with the  option,  is set
to the module spec of the corresponding module or package.  is
also populated when the  module is loaded as part of executing a
directory, zipfile or other  entry.
In the remaining cases
 is set to , as the code used to populate the
 does not correspond directly with an importable module:

interactive prompt
 option
running from stdin
running directly from a source or bytecode file

Note that  is always  in the last case,
even if the file could technically be imported directly as a module
instead. Use the  switch if valid module metadata is desired
in .
Note also that even when  corresponds with an importable module
and  is set accordingly, they’re still considered
distinct modules. This is due to the fact that blocks guarded by
 checks only execute when the module is used
to populate the  namespace, and not during normal import.

