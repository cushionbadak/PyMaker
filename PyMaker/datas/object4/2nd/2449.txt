link:
library/sqlite3.html#using-adapters-to-store-additional-python-types-in-sqlite-databases

docs:

Using adapters to store additional Python types in SQLite databases¶
As described before, SQLite supports only a limited set of types natively. To
use other Python types with SQLite, you must adapt them to one of the
sqlite3 module’s supported types for SQLite: one of NoneType, int, float,
str, bytes.
There are two ways to enable the  module to adapt a custom Python
type to one of the supported ones.

Letting your object adapt itself¶
This is a good approach if you write the class yourself. Let’s suppose you have
a class like this:


Now you want to store the point in a single SQLite column.  First you’ll have to
choose one of the supported types first to be used for representing the point.
Let’s just use str and separate the coordinates using a semicolon. Then you need
to give your class a method  which must return
the converted value. The parameter protocol will be .




Registering an adapter callable¶
The other possibility is to create a function that converts the type to the
string representation and register the function with .


The  module has two default adapters for Python’s built-in
 and  types.  Now let’s suppose
we want to store  objects not in ISO representation,
but as a Unix timestamp.



