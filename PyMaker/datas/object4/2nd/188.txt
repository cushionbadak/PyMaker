link:
reference/import.html#loading

docs:

5.4. Loading¶
If and when a module spec is found, the import machinery will use it (and
the loader it contains) when loading the module.  Here is an approximation
of what happens during the loading portion of import:


Note the following details:


If there is an existing module object with the given name in
, import will have already returned it.
The module will exist in  before the loader
executes the module code.  This is crucial because the module code may
(directly or indirectly) import itself; adding it to 
beforehand prevents unbounded recursion in the worst case and multiple
loading in the best.
If loading fails, the failing module – and only the failing module –
gets removed from .  Any module already in the
 cache, and any module that was successfully loaded
as a side-effect, must remain in the cache.  This contrasts with
reloading where even the failing module is left in .
After the module is created but before execution, the import machinery
sets the import-related module attributes (“_init_module_attrs” in
the pseudo-code example above), as summarized in a
later section.
Module execution is the key moment of loading in which the module’s
namespace gets populated.  Execution is entirely delegated to the
loader, which gets to decide what gets populated and how.
The module created during loading and passed to exec_module() may
not be the one returned at the end of import [2].



Changed in version 3.4: The import system has taken over the boilerplate responsibilities of
loaders.  These were previously performed by the
 method.


5.4.1. Loaders¶
Module loaders provide the critical function of loading: module execution.
The import machinery calls the 
method with a single argument, the module object to execute.  Any value
returned from  is ignored.
Loaders must satisfy the following requirements:


If the module is a Python module (as opposed to a built-in module or a
dynamically loaded extension), the loader should execute the module’s code
in the module’s global name space ().
If the loader cannot execute the module, it should raise an
, although any other exception raised during
 will be propagated.


In many cases, the finder and loader can be the same object; in such cases the
 method would just return a
spec with the loader set to .
Module loaders may opt in to creating the module object during loading
by implementing a  method.
It takes one argument, the module spec, and returns the new module object
to use during loading.   does not need to set any attributes
on the module object.  If the method returns , the
import machinery will create the new module itself.

New in version 3.4: The  method of loaders.


Changed in version 3.4: The  method was replaced by
 and the import
machinery assumed all the boilerplate responsibilities of loading.
For compatibility with existing loaders, the import machinery will use
the  method of loaders if it exists and the loader does
not also implement .  However,  has been
deprecated and loaders should implement  instead.
The  method must implement all the boilerplate loading
functionality described above in addition to executing the module.  All
the same constraints apply, with some additional clarification:


If there is an existing module object with the given name in
, the loader must use that existing module.
(Otherwise,  will not work correctly.)  If the
named module does not exist in , the loader
must create a new module object and add it to .
The module must exist in  before the loader
executes the module code, to prevent unbounded recursion or multiple
loading.
If loading fails, the loader must remove any modules it has inserted
into , but it must remove only the failing
module(s), and only if the loader itself has loaded the module(s)
explicitly.




Changed in version 3.5: A  is raised when  is defined but
 is not.


Changed in version 3.6: An  is raised when  is defined but
 is not.



5.4.2. Submodules¶
When a submodule is loaded using any mechanism (e.g.  APIs, the
 or  statements, or built-in ) a
binding is placed in the parent module’s namespace to the submodule object.
For example, if package  has a submodule , after importing
,  will have an attribute  which is bound to the
submodule.  Let’s say you have the following directory structure:


and  has the following lines in it:


then executing the following puts a name binding to  and  in the
 module:


Given Python’s familiar name binding rules this might seem surprising, but
it’s actually a fundamental feature of the import system.  The invariant
holding is that if you have  and
 (as you would after the above import), the latter
must appear as the  attribute of the former.


5.4.3. Module spec¶
The import machinery uses a variety of information about each module
during import, especially before loading.  Most of the information is
common to all modules.  The purpose of a module’s spec is to encapsulate
this import-related information on a per-module basis.
Using a spec during import allows state to be transferred between import
system components, e.g. between the finder that creates the module spec
and the loader that executes it.  Most importantly, it allows the
import machinery to perform the boilerplate operations of loading,
whereas without a module spec the loader had that responsibility.
The module’s spec is exposed as the  attribute on a module object.
See  for details on the contents of
the module spec.

New in version 3.4.



5.4.4. Import-related module attributes¶
The import machinery fills in these attributes on each module object
during loading, based on the module’s spec, before the loader executes
the module.


¶
The  attribute must be set to the fully-qualified name of
the module.  This name is used to uniquely identify the module in
the import system.



¶
The  attribute must be set to the loader object that
the import machinery used when loading the module.  This is mostly
for introspection, but can be used for additional loader-specific
functionality, for example getting data associated with a loader.



¶
The module’s  attribute must be set.  Its value must
be a string, but it can be the same value as its .  When
the module is a package, its  value should be set to
its .  When the module is not a package, 
should be set to the empty string for top-level modules, or for
submodules, to the parent package’s name.  See PEP 366 for further
details.
This attribute is used instead of  to calculate explicit
relative imports for main modules, as defined in PEP 366. It is
expected to have the same value as .

Changed in version 3.6: The value of  is expected to be the same as
.




¶
The  attribute must be set to the module spec that was
used when importing the module. Setting 
appropriately applies equally to modules initialized during
interpreter startup.  The one exception is ,
where  is set to None in some cases.
When  is not defined,  is used as
a fallback.

New in version 3.4.


Changed in version 3.6:  is used as a fallback when  is
not defined.




¶
If the module is a package (either regular or namespace), the module
object’s  attribute must be set.  The value must be
iterable, but may be empty if  has no further significance.
If  is not empty, it must produce strings when iterated
over. More details on the semantics of  are given
below.
Non-package modules should not have a  attribute.



¶



¶
 is optional. If set, this attribute’s value must be a
string.  The import system may opt to leave  unset if it
has no semantic meaning (e.g. a module loaded from a database).
If  is set, it may also be appropriate to set the
 attribute which is the path to any compiled version of
the code (e.g. byte-compiled file). The file does not need to exist
to set this attribute; the path can simply point to where the
compiled file would exist (see PEP 3147).
It is also appropriate to set  when  is not
set.  However, that scenario is quite atypical.  Ultimately, the
loader is what makes use of  and/or .  So
if a loader can load from a cached module but otherwise does not load
from a file, that atypical scenario may be appropriate.



5.4.5. module.__path__¶
By definition, if a module has a  attribute, it is a package.
A package’s  attribute is used during imports of its subpackages.
Within the import machinery, it functions much the same as ,
i.e. providing a list of locations to search for modules during import.
However,  is typically much more constrained than
.
 must be an iterable of strings, but it may be empty.
The same rules used for  also apply to a package’s
, and  (described below) are
consulted when traversing a package’s .
A package’s  file may set or alter the package’s 
attribute, and this was typically the way namespace packages were implemented
prior to PEP 420.  With the adoption of PEP 420, namespace packages no
longer need to supply  files containing only 
manipulation code; the import machinery automatically sets 
correctly for the namespace package.


5.4.6. Module reprs¶
By default, all modules have a usable repr, however depending on the
attributes set above, and in the module’s spec, you can more explicitly
control the repr of module objects.
If the module has a spec (), the import machinery will try
to generate a repr from it.  If that fails or there is no spec, the import
system will craft a default repr using whatever information is available
on the module.  It will try to use the ,
, and  as input into the repr,
with defaults for whatever information is missing.
Here are the exact rules used:


If the module has a  attribute, the information in the spec
is used to generate the repr.  The “name”, “loader”, “origin”, and
“has_location” attributes are consulted.
If the module has a  attribute, this is used as part of the
module’s repr.
If the module has no  but does have a  that is not
, then the loader’s repr is used as part of the module’s repr.
Otherwise, just use the module’s  in the repr.



Changed in version 3.4: Use of 
has been deprecated and the module spec is now used by the import
machinery to generate a module repr.
For backward compatibility with Python 3.3, the module repr will be
generated by calling the loader’s
 method, if defined, before
trying either approach described above.  However, the method is deprecated.



5.4.7. Cached bytecode invalidation¶
Before Python loads cached bytecode from  file, it checks whether the
cache is up-to-date with the source  file. By default, Python does this
by storing the source’s last-modified timestamp and size in the cache file when
writing it. At runtime, the import system then validates the cache file by
checking the stored metadata in the cache file against at source’s
metadata.
Python also supports “hash-based” cache files, which store a hash of the source
file’s contents rather than its metadata. There are two variants of hash-based
 files: checked and unchecked. For checked hash-based  files,
Python validates the cache file by hashing the source file and comparing the
resulting hash with the hash in the cache file. If a checked hash-based cache
file is found to be invalid, Python regenerates it and writes a new checked
hash-based cache file. For unchecked hash-based  files, Python simply
assumes the cache file is valid if it exists. Hash-based  files
validation behavior may be overridden with the 
flag.

Changed in version 3.7: Added hash-based  files. Previously, Python only supported
timestamp-based invalidation of bytecode caches.


