link:
library/importlib.html#importlib.abc.ResourceReader

docs:


class ¶
An abstract base class to provide the ability to read
resources.
From the perspective of this ABC, a resource is a binary
artifact that is shipped within a package. Typically this is
something like a data file that lives next to the 
file of the package. The purpose of this class is to help abstract
out the accessing of such data files so that it does not matter if
the package and its data file(s) are stored in a e.g. zip file
versus on the file system.
For any of methods of this class, a resource argument is
expected to be a path-like object which represents
conceptually just a file name. This means that no subdirectory
paths should be included in the resource argument. This is
because the location of the package the reader is for, acts as the
“directory”. Hence the metaphor for directories and file
names is packages and resources, respectively. This is also why
instances of this class are expected to directly correlate to
a specific package (instead of potentially representing multiple
packages or a module).
Loaders that wish to support resource reading are expected to
provide a method called  which
returns an object implementing this ABC’s interface. If the module
specified by fullname is not a package, this method should return
. An object compatible with this ABC should only be
returned when the specified module is a package.

New in version 3.7.



abstractmethod (resource)¶
Returns an opened, file-like object for binary reading
of the resource.
If the resource cannot be found,  is
raised.



abstractmethod (resource)¶
Returns the file system path to the resource.
If the resource does not concretely exist on the file system,
raise .



abstractmethod (name)¶
Returns  if the named name is considered a resource.
 is raised if name does not exist.



abstractmethod ()¶
Returns an iterable of strings over the contents of
the package. Do note that it is not required that all names
returned by the iterator be actual resources, e.g. it is
acceptable to return names for which  would
be false.
Allowing non-resource names to be returned is to allow for
situations where how a package and its resources are stored
are known a priori and the non-resource names would be useful.
For instance, returning subdirectory names is allowed so that
when it is known that the package and resources are stored on
the file system then those subdirectory names can be used
directly.
The abstract method returns an iterable of no items.

