link:
library/concurrent.futures.html#processpoolexecutor

docs:

ProcessPoolExecutor¶
The  class is an  subclass that
uses a pool of processes to execute calls asynchronously.
 uses the  module, which
allows it to side-step the Global Interpreter Lock but also means that
only picklable objects can be executed and returned.
The  module must be importable by worker subprocesses. This means
that  will not work in the interactive interpreter.
Calling  or  methods from a callable submitted
to a  will result in deadlock.


class (max_workers=None, mp_context=None, initializer=None, initargs=())¶
An  subclass that executes calls asynchronously using a pool
of at most max_workers processes.  If max_workers is  or not
given, it will default to the number of processors on the machine.
If max_workers is lower or equal to , then a 
will be raised.
mp_context can be a multiprocessing context or None. It will be used to
launch the workers. If mp_context is  or not given, the default
multiprocessing context is used.
initializer is an optional callable that is called at the start of
each worker process; initargs is a tuple of arguments passed to the
initializer.  Should initializer raise an exception, all currently
pending jobs will raise a ,
as well any attempt to submit more jobs to the pool.

Changed in version 3.3: When one of the worker processes terminates abruptly, a
 error is now raised.  Previously, behaviour
was undefined but operations on the executor or its futures would often
freeze or deadlock.


Changed in version 3.7: The mp_context argument was added to allow users to control the
start_method for worker processes created by the pool.
Added the initializer and initargs arguments.



ProcessPoolExecutor Example¶



