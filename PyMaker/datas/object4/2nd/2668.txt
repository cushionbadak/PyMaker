link:
library/csv.html#module-csv

docs:

 — CSV File Reading and Writing¶
Source code: Lib/csv.py

The so-called CSV (Comma Separated Values) format is the most common import and
export format for spreadsheets and databases.  CSV format was used for many
years prior to attempts to describe the format in a standardized way in
RFC 4180.  The lack of a well-defined standard means that subtle differences
often exist in the data produced and consumed by different applications.  These
differences can make it annoying to process CSV files from multiple sources.
Still, while the delimiters and quoting characters vary, the overall format is
similar enough that it is possible to write a single module which can
efficiently manipulate such data, hiding the details of reading and writing the
data from the programmer.
The  module implements classes to read and write tabular data in CSV
format.  It allows programmers to say, “write this data in the format preferred
by Excel,” or “read data from this file which was generated by Excel,” without
knowing the precise details of the CSV format used by Excel.  Programmers can
also describe the CSV formats understood by other applications or define their
own special-purpose CSV formats.
The  module’s  and  objects read and
write sequences.  Programmers can also read and write data in dictionary form
using the  and  classes.

See also

PEP 305 - CSV File API
The Python Enhancement Proposal which proposed this addition to Python.



Module Contents¶
The  module defines the following functions:


(csvfile, dialect='excel', **fmtparams)¶
Return a reader object which will iterate over lines in the given csvfile.
csvfile can be any object which supports the iterator protocol and returns a
string each time its  method is called — file objects and list objects are both suitable.   If csvfile is a file object,
it should be opened with . [1]  An optional
dialect parameter can be given which is used to define a set of parameters
specific to a particular CSV dialect.  It may be an instance of a subclass of
the  class or one of the strings returned by the
 function.  The other optional fmtparams keyword arguments
can be given to override individual formatting parameters in the current
dialect.  For full details about the dialect and formatting parameters, see
section Dialects and Formatting Parameters.
Each row read from the csv file is returned as a list of strings.  No
automatic data type conversion is performed unless the  format
option is specified (in which case unquoted fields are transformed into floats).
A short usage example:





(csvfile, dialect='excel', **fmtparams)¶
Return a writer object responsible for converting the user’s data into delimited
strings on the given file-like object.  csvfile can be any object with a
 method.  If csvfile is a file object, it should be opened with
 [1].  An optional dialect
parameter can be given which is used to define a set of parameters specific to a
particular CSV dialect.  It may be an instance of a subclass of the
 class or one of the strings returned by the
 function.  The other optional fmtparams keyword arguments
can be given to override individual formatting parameters in the current
dialect.  For full details about the dialect and formatting parameters, see
section Dialects and Formatting Parameters. To make it
as easy as possible to interface with modules which implement the DB API, the
value  is written as the empty string.  While this isn’t a
reversible transformation, it makes it easier to dump SQL NULL data values to
CSV files without preprocessing the data returned from a  call.
All other non-string data are stringified with  before being written.
A short usage example:





(name[, dialect[, **fmtparams]])¶
Associate dialect with name.  name must be a string. The
dialect can be specified either by passing a sub-class of , or
by fmtparams keyword arguments, or both, with keyword arguments overriding
parameters of the dialect. For full details about the dialect and formatting
parameters, see section Dialects and Formatting Parameters.



(name)¶
Delete the dialect associated with name from the dialect registry.  An
 is raised if name is not a registered dialect name.



(name)¶
Return the dialect associated with name.  An  is raised if
name is not a registered dialect name.  This function returns an immutable
.



()¶
Return the names of all registered dialects.



([new_limit])¶
Returns the current maximum field size allowed by the parser. If new_limit is
given, this becomes the new limit.

The  module defines the following classes:


class (f, fieldnames=None, restkey=None, restval=None, dialect='excel', *args, **kwds)¶
Create an object that operates like a regular reader but maps the
information in each row to an 
whose keys are given by the optional fieldnames parameter.
The fieldnames parameter is a sequence.  If fieldnames is
omitted, the values in the first row of file f will be used as the
fieldnames.  Regardless of how the fieldnames are determined, the ordered
dictionary preserves their original ordering.
If a row has more fields than fieldnames, the remaining data is put in a
list and stored with the fieldname specified by restkey (which defaults
to ).  If a non-blank row has fewer fields than fieldnames, the
missing values are filled-in with .
All other optional or keyword arguments are passed to the underlying
 instance.

Changed in version 3.6: Returned rows are now of type .

A short usage example:





class (f, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds)¶
Create an object which operates like a regular writer but maps dictionaries
onto output rows.  The fieldnames parameter is a  of keys that identify the order in which values in the
dictionary passed to the  method are written to file
f.  The optional restval parameter specifies the value to be
written if the dictionary is missing a key in fieldnames.  If the
dictionary passed to the  method contains a key not found in
fieldnames, the optional extrasaction parameter indicates what action to
take.
If it is set to , the default value, a 
is raised.
If it is set to , extra values in the dictionary are ignored.
Any other optional or keyword arguments are passed to the underlying
 instance.
Note that unlike the  class, the fieldnames parameter
of the  class is not optional.
A short usage example:





class ¶
The  class is a container class relied on primarily for its
attributes, which are used to define the parameters for a specific
 or  instance.



class ¶
The  class defines the usual properties of an Excel-generated CSV
file.  It is registered with the dialect name .



class ¶
The  class defines the usual properties of an Excel-generated
TAB-delimited file.  It is registered with the dialect name .



class ¶
The  class defines the usual properties of a CSV file
generated on UNIX systems, i.e. using  as line terminator and quoting
all fields.  It is registered with the dialect name .

New in version 3.2.




class ¶
The  class is used to deduce the format of a CSV file.
The  class provides two methods:


(sample, delimiters=None)¶
Analyze the given sample and return a  subclass
reflecting the parameters found.  If the optional delimiters parameter
is given, it is interpreted as a string containing possible valid
delimiter characters.



(sample)¶
Analyze the sample text (presumed to be in CSV format) and return
 if the first row appears to be a series of column headers.


An example for  use:


The  module defines the following constants:


¶
Instructs  objects to quote all fields.



¶
Instructs  objects to only quote those fields which contain
special characters such as delimiter, quotechar or any of the characters in
lineterminator.



¶
Instructs  objects to quote all non-numeric fields.
Instructs the reader to convert all non-quoted fields to type float.



¶
Instructs  objects to never quote fields.  When the current
delimiter occurs in output data it is preceded by the current escapechar
character.  If escapechar is not set, the writer will raise  if
any characters that require escaping are encountered.
Instructs  to perform no special processing of quote characters.

The  module defines the following exception:


exception ¶
Raised by any of the functions when an error is detected.



Dialects and Formatting Parameters¶
To make it easier to specify the format of input and output records, specific
formatting parameters are grouped together into dialects.  A dialect is a
subclass of the  class having a set of specific methods and a
single  method.  When creating  or
 objects, the programmer can specify a string or a subclass of
the  class as the dialect parameter.  In addition to, or instead
of, the dialect parameter, the programmer can also specify individual
formatting parameters, which have the same names as the attributes defined below
for the  class.
Dialects support the following attributes:


¶
A one-character string used to separate fields.  It defaults to .



¶
Controls how instances of quotechar appearing inside a field should
themselves be quoted.  When , the character is doubled. When
, the escapechar is used as a prefix to the quotechar.  It
defaults to .
On output, if doublequote is  and no escapechar is set,
 is raised if a quotechar is found in a field.



¶
A one-character string used by the writer to escape the delimiter if quoting
is set to  and the quotechar if doublequote is
. On reading, the escapechar removes any special meaning from
the following character. It defaults to , which disables escaping.



¶
The string used to terminate lines produced by the . It defaults
to .

Note
The  is hard-coded to recognise either  or  as
end-of-line, and ignores lineterminator. This behavior may change in the
future.




¶
A one-character string used to quote fields containing special characters, such
as the delimiter or quotechar, or which contain new-line characters.  It
defaults to .



¶
Controls when quotes should be generated by the writer and recognised by the
reader.  It can take on any of the  constants (see section
Module Contents) and defaults to .



¶
When , whitespace immediately following the delimiter is ignored.
The default is .



¶
When , raise exception  on bad CSV input.
The default is .



Reader Objects¶
Reader objects ( instances and objects returned by the
 function) have the following public methods:


()¶
Return the next row of the reader’s iterable object as a list (if the object
was returned from ) or a dict (if it is a 
instance), parsed according to the current dialect.  Usually you should call
this as .

Reader objects have the following public attributes:


¶
A read-only description of the dialect in use by the parser.



¶
The number of lines read from the source iterator. This is not the same as the
number of records returned, as records can span multiple lines.

DictReader objects have the following public attribute:


¶
If not passed as a parameter when creating the object, this attribute is
initialized upon first access or when the first record is read from the
file.



Writer Objects¶
 objects ( instances and objects returned by
the  function) have the following public methods.  A row must be
an iterable of strings or numbers for  objects and a dictionary
mapping fieldnames to strings or numbers (by passing them through 
first) for  objects.  Note that complex numbers are written
out surrounded by parens. This may cause some problems for other programs which
read CSV files (assuming they support complex numbers at all).


(row)¶
Write the row parameter to the writer’s file object, formatted according to
the current dialect.

Changed in version 3.5: Added support of arbitrary iterables.




(rows)¶
Write all elements in rows (an iterable of row objects as described
above) to the writer’s file object, formatted according to the current
dialect.

Writer objects have the following public attribute:


¶
A read-only description of the dialect in use by the writer.

DictWriter objects have the following public method:


()¶
Write a row with the field names (as specified in the constructor).

New in version 3.2.




Examples¶
The simplest example of reading a CSV file:


Reading a file with an alternate format:


The corresponding simplest possible writing example is:


Since  is used to open a CSV file for reading, the file
will by default be decoded into unicode using the system default
encoding (see ).  To decode a file
using a different encoding, use the  argument of open:


The same applies to writing in something other than the system default
encoding: specify the encoding argument when opening the output file.
Registering a new dialect:


A slightly more advanced use of the reader — catching and reporting errors:


And while the module doesn’t directly support parsing strings, it can easily be
done:


Footnotes



[1](1, 2) If  is not specified, newlines embedded inside quoted fields
will not be interpreted correctly, and on platforms that use  linendings
on write an extra  will be added.  It should always be safe to specify
, since the csv module does its own
(universal) newline handling.



