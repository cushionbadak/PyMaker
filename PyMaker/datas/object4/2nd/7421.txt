link:
library/ipaddress.html#ip-network-definitions

docs:

IP Network definitions¶
The  and  objects provide a mechanism
for defining and inspecting IP network definitions.  A network definition
consists of a mask and a network address, and as such defines a range of
IP addresses that equal the network address when masked (binary AND) with the
mask.  For example, a network definition with the mask  and
the network address  consists of IP addresses in the inclusive
range  to .

Prefix, net mask and host mask¶
There are several equivalent ways to specify IP network masks.  A prefix
 is a notation that denotes how many high-order bits are set in
the network mask.  A net mask is an IP address with some number of
high-order bits set.  Thus the prefix  is equivalent to the net mask
 in IPv4, or  in IPv6.  In addition, a
host mask is the logical inverse of a net mask, and is sometimes used
(for example in Cisco access control lists) to denote a network mask.  The
host mask equivalent to  in IPv4 is .


Network objects¶
All attributes implemented by address objects are implemented by network
objects as well.  In addition, network objects implement additional attributes.
All of these are common between  and ,
so to avoid duplication they are only documented for .
Network objects are hashable, so they can be used as keys in
dictionaries.


class (address, strict=True)¶
Construct an IPv4 network definition.  address can be one of the following:

A string consisting of an IP address and an optional mask, separated by
a slash ().  The IP address is the network address, and the mask
can be either a single number, which means it’s a prefix, or a string
representation of an IPv4 address.  If it’s the latter, the mask is
interpreted as a net mask if it starts with a non-zero field, or as a
host mask if it starts with a zero field, with the single exception of
an all-zero mask which is treated as a net mask.  If no mask is provided,
it’s considered to be .
For example, the following address specifications are equivalent:
,  and
.

An integer that fits into 32 bits.  This is equivalent to a
single-address network, with the network address being address and
the mask being .

An integer packed into a  object of length 4, big-endian.
The interpretation is similar to an integer address.

A two-tuple of an address description and a netmask, where the address
description is either a string, a 32-bits integer, a 4-bytes packed
integer, or an existing IPv4Address object; and the netmask is either
an integer representing the prefix length (e.g. ) or a string
representing the prefix mask (e.g. ).


An  is raised if address is not a valid IPv4
address.  A  is raised if the mask is not valid for
an IPv4 address.
If strict is  and host bits are set in the supplied address,
then  is raised.  Otherwise, the host bits are masked out
to determine the appropriate network address.
Unless stated otherwise, all network methods accepting other network/address
objects will raise  if the argument’s IP version is
incompatible to .

Changed in version 3.5: Added the two-tuple form for the address constructor parameter.



¶



¶
Refer to the corresponding attribute documentation in
.



¶



¶



¶



¶



¶



¶
These attributes are true for the network as a whole if they are true
for both the network address and the broadcast address.



¶
The network address for the network. The network address and the
prefix length together uniquely define a network.



¶
The broadcast address for the network. Packets sent to the broadcast
address should be received by every host on the network.



¶
The host mask, as an  object.



¶
The net mask, as an  object.



¶



¶



¶
A string representation of the network, with the mask in prefix
notation.
 and  are always the same as
.
 uses the exploded form the network address.



¶
A string representation of the network, with the mask in net mask
notation.



¶
A string representation of the network, with the mask in host mask
notation.



¶
The total number of addresses in the network.



¶
Length of the network prefix, in bits.



()¶
Returns an iterator over the usable hosts in the network.  The usable
hosts are all the IP addresses that belong to the network, except the
network address itself and the network broadcast address.  For networks
with a mask length of 31, the network address and network broadcast
address are also included in the result.





(other)¶
 if this network is partly or wholly contained in other or
other is wholly contained in this network.



(network)¶
Computes the network definitions resulting from removing the given
network from this one.  Returns an iterator of network objects.
Raises  if network is not completely contained in
this network.





(prefixlen_diff=1, new_prefix=None)¶
The subnets that join to make the current network definition, depending
on the argument values.  prefixlen_diff is the amount our prefix
length should be increased by.  new_prefix is the desired new
prefix of the subnets; it must be larger than our prefix.  One and
only one of prefixlen_diff and new_prefix must be set.  Returns an
iterator of network objects.





(prefixlen_diff=1, new_prefix=None)¶
The supernet containing this network definition, depending on the
argument values.  prefixlen_diff is the amount our prefix length
should be decreased by.  new_prefix is the desired new prefix of
the supernet; it must be smaller than our prefix.  One and only one
of prefixlen_diff and new_prefix must be set.  Returns a single
network object.





(other)¶
Returns True if this network is a subnet of other.



New in version 3.7.




(other)¶
Returns True if this network is a supernet of other.



New in version 3.7.




(other)¶
Compare this network to other.  In this comparison only the network
addresses are considered; host bits aren’t.  Returns either ,
 or .



Deprecated since version 3.7: It uses the same ordering and comparison algorithm as “<”, “==”, and “>”





class (address, strict=True)¶
Construct an IPv6 network definition.  address can be one of the following:

A string consisting of an IP address and an optional prefix length,
separated by a slash ().  The IP address is the network address,
and the prefix length must be a single number, the prefix.  If no
prefix length is provided, it’s considered to be .
Note that currently expanded netmasks are not supported.  That means
 is a valid argument while 
not.

An integer that fits into 128 bits.  This is equivalent to a
single-address network, with the network address being address and
the mask being .

An integer packed into a  object of length 16, big-endian.
The interpretation is similar to an integer address.

A two-tuple of an address description and a netmask, where the address
description is either a string, a 128-bits integer, a 16-bytes packed
integer, or an existing IPv6Address object; and the netmask is an
integer representing the prefix length.


An  is raised if address is not a valid IPv6
address.  A  is raised if the mask is not valid for
an IPv6 address.
If strict is  and host bits are set in the supplied address,
then  is raised.  Otherwise, the host bits are masked out
to determine the appropriate network address.

Changed in version 3.5: Added the two-tuple form for the address constructor parameter.



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



()¶
Returns an iterator over the usable hosts in the network.  The usable
hosts are all the IP addresses that belong to the network, except the
Subnet-Router anycast address.  For networks with a mask length of 127,
the Subnet-Router anycast address is also included in the result.



(other)¶



(network)¶



(prefixlen_diff=1, new_prefix=None)¶



(prefixlen_diff=1, new_prefix=None)¶



(other)¶



(other)¶



(other)¶
Refer to the corresponding attribute documentation in
.



¶
These attribute is true for the network as a whole if it is true
for both the network address and the broadcast address.




Operators¶
Network objects support some operators.  Unless stated otherwise, operators can
only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with
IPv6).

Logical operators¶
Network objects can be compared with the usual set of logical operators.
Network objects are ordered first by network address, then by net mask.


Iteration¶
Network objects can be iterated to list all the addresses belonging to the
network.  For iteration, all hosts are returned, including unusable hosts
(for usable hosts, use the  method).  An
example:




Networks as containers of addresses¶
Network objects can act as containers of addresses.  Some examples:




