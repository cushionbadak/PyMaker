link:
library/asyncio-subprocess.html#interacting-with-subprocesses

docs:

Interacting with Subprocesses¶
Both  and 
functions return instances of the Process class.  Process is a high-level
wrapper that allows communicating with subprocesses and watching for
their completion.


class ¶
An object that wraps OS processes created by the
 and 
functions.
This class is designed to have a similar API to the
 class, but there are some
notable differences:

unlike Popen, Process instances do not have an equivalent to
the  method;
the  and
 methods don’t have a
timeout parameter: use the  function;
the  method
is asynchronous, whereas  method
is implemented as a blocking busy loop;
the universal_newlines parameter is not supported.

This class is not thread safe.
See also the Subprocess and Threads
section.


coroutine ()¶
Wait for the child process to terminate.
Set and return the  attribute.

Note
This method can deadlock when using  or
 and the child process generates so much output
that it blocks waiting for the OS pipe buffer to accept
more data. Use the  method when using pipes
to avoid this condition.




coroutine (input=None)¶
Interact with process:

send data to stdin (if input is not );
read data from stdout and stderr, until EOF is reached;
wait for process to terminate.

The optional input argument is the data ( object)
that will be sent to the child process.
Return a tuple .
If either  or 
exception is raised when writing input into stdin, the
exception is ignored.  This condition occurs when the process
exits before all data are written into stdin.
If it is desired to send data to the process’ stdin,
the process needs to be created with .  Similarly,
to get anything other than  in the result tuple, the
process has to be created with  and/or
 arguments.
Note, that the data read is buffered in memory, so do not use
this method if the data size is large or unlimited.



(signal)¶
Sends the signal signal to the child process.

Note
On Windows,  is an alias for .
 and  can be sent to processes
started with a creationflags parameter which includes
.




()¶
Stop the child process.
On POSIX systems this method sends  to the
child process.
On Windows the Win32 API function  is
called to stop the child process.



()¶
Kill the child.
On POSIX systems this method sends  to the child
process.
On Windows this method is an alias for .



¶
Standard input stream () or 
if the process was created with .



¶
Standard output stream () or 
if the process was created with .



¶
Standard error stream () or 
if the process was created with .


Warning
Use the  method rather than
,
 or
.
This avoids deadlocks due to streams pausing reading or writing
and blocking the child process.



¶
Process identification number (PID).
Note that for processes created by the 
function, this attribute is the PID of the spawned shell.



¶
Return code of the process when it exits.
A  value indicates that the process has not terminated yet.
A negative value  indicates that the child was terminated
by signal  (POSIX only).



Subprocess and Threads¶
Standard asyncio event loop supports running subprocesses from
different threads, but there are limitations:

An event loop must run in the main thread.
The child watcher must be instantiated in the main thread
before executing subprocesses from other threads. Call the
 function in the main thread to instantiate
the child watcher.

Note that alternative event loop implementations might not share
the above limitations; please refer to their documentation.

See also
The Concurrency and multithreading in asyncio section.



Examples¶
An example using the  class to
control a subprocess and the  class to read from
its standard output.
The subprocess is created by the 
function:


See also the same example
written using low-level APIs.

