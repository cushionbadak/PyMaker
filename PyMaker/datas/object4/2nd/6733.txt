link:
library/urllib.parse.html

docs:


 — Parse URLs into components¶
Source code: Lib/urllib/parse.py

This module defines a standard interface to break Uniform Resource Locator (URL)
strings up in components (addressing scheme, network location, path etc.), to
combine the components back into a URL string, and to convert a “relative URL”
to an absolute URL given a “base URL.”
The module has been designed to match the Internet RFC on Relative Uniform
Resource Locators. It supports the following URL schemes: , ,
, , , , , , ,
, , , , , , ,
, , , , , , ,
, , .
The  module defines functions that fall into two broad
categories: URL parsing and URL quoting. These are covered in detail in
the following sections.

URL Parsing¶
The URL parsing functions focus on splitting a URL string into its components,
or on combining URL components into a URL string.


(urlstring, scheme='', allow_fragments=True)¶
Parse a URL into six components, returning a 6-item named tuple.  This
corresponds to the general structure of a URL:
.
Each tuple item is a string, possibly empty. The components are not broken up in
smaller parts (for example, the network location is a single string), and %
escapes are not expanded. The delimiters as shown above are not part of the
result, except for a leading slash in the path component, which is retained if
present.  For example:


Following the syntax specifications in RFC 1808, urlparse recognizes
a netloc only if it is properly introduced by ‘//’.  Otherwise the
input is presumed to be a relative URL and thus to start with
a path component.


The scheme argument gives the default addressing scheme, to be
used only if the URL does not specify one.  It should be the same type
(text or bytes) as urlstring, except that the default value  is
always allowed, and is automatically converted to  if appropriate.
If the allow_fragments argument is false, fragment identifiers are not
recognized.  Instead, they are parsed as part of the path, parameters
or query component, and  is set to the empty string in
the return value.
The return value is a named tuple, which means that its items can
be accessed by index or as named attributes, which are:








Attribute
Index
Value
Value if not present




0
URL scheme specifier
scheme parameter


1
Network location part
empty string


2
Hierarchical path
empty string


3
Parameters for last path
element
empty string


4
Query component
empty string


5
Fragment identifier
empty string


 
User name



 
Password



 
Host name (lower case)



 
Port number as integer,
if present




Reading the  attribute will raise a  if
an invalid port is specified in the URL.  See section
Structured Parse Results for more information on the result object.
Unmatched square brackets in the  attribute will raise a
.
Characters in the  attribute that decompose under NFKC
normalization (as used by the IDNA encoding) into any of , ,
, , or  will raise a . If the URL is
decomposed before parsing, no error will be raised.
As is the case with all named tuples, the subclass has a few additional methods
and attributes that are particularly useful. One such method is .
The  method will return a new ParseResult object replacing specified
fields with new values.



Changed in version 3.2: Added IPv6 URL parsing capabilities.


Changed in version 3.3: The fragment is now parsed for all URL schemes (unless allow_fragment is
false), in accordance with RFC 3986.  Previously, a whitelist of
schemes that support fragments existed.


Changed in version 3.6: Out-of-range port numbers now raise , instead of
returning .


Changed in version 3.7.3: Characters that affect netloc parsing under NFKC normalization will
now raise .




(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None)¶
Parse a query string given as a string argument (data of type
application/x-www-form-urlencoded).  Data are returned as a
dictionary.  The dictionary keys are the unique query variable names and the
values are lists of values for each name.
The optional argument keep_blank_values is a flag indicating whether blank
values in percent-encoded queries should be treated as blank strings. A true value
indicates that blanks should be retained as  blank strings.  The default false
value indicates that blank values are to be ignored and treated as if they were
not included.
The optional argument strict_parsing is a flag indicating what to do with
parsing errors.  If false (the default), errors are silently ignored.  If true,
errors raise a  exception.
The optional encoding and errors parameters specify how to decode
percent-encoded sequences into Unicode characters, as accepted by the
 method.
The optional argument max_num_fields is the maximum number of fields to
read. If set, then throws a  if there are more than
max_num_fields fields read.
Use the  function (with the 
parameter set to ) to convert such dictionaries into query
strings.

Changed in version 3.2: Add encoding and errors parameters.


Changed in version 3.7.2: Added max_num_fields parameter.




(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None)¶
Parse a query string given as a string argument (data of type
application/x-www-form-urlencoded).  Data are returned as a list of
name, value pairs.
The optional argument keep_blank_values is a flag indicating whether blank
values in percent-encoded queries should be treated as blank strings. A true value
indicates that blanks should be retained as  blank strings.  The default false
value indicates that blank values are to be ignored and treated as if they were
not included.
The optional argument strict_parsing is a flag indicating what to do with
parsing errors.  If false (the default), errors are silently ignored.  If true,
errors raise a  exception.
The optional encoding and errors parameters specify how to decode
percent-encoded sequences into Unicode characters, as accepted by the
 method.
The optional argument max_num_fields is the maximum number of fields to
read. If set, then throws a  if there are more than
max_num_fields fields read.
Use the  function to convert such lists of pairs into
query strings.

Changed in version 3.2: Add encoding and errors parameters.


Changed in version 3.7.2: Added max_num_fields parameter.




(parts)¶
Construct a URL from a tuple as returned by . The parts
argument can be any six-item iterable. This may result in a slightly
different, but equivalent URL, if the URL that was parsed originally had
unnecessary delimiters (for example, a  with an empty query; the RFC
states that these are equivalent).



(urlstring, scheme='', allow_fragments=True)¶
This is similar to , but does not split the params from the URL.
This should generally be used instead of  if the more recent URL
syntax allowing parameters to be applied to each segment of the path portion
of the URL (see RFC 2396) is wanted.  A separate function is needed to
separate the path segments and parameters.  This function returns a 5-item
named tuple:


The return value is a named tuple, its items can be accessed by index
or as named attributes:








Attribute
Index
Value
Value if not present




0
URL scheme specifier
scheme parameter


1
Network location part
empty string


2
Hierarchical path
empty string


3
Query component
empty string


4
Fragment identifier
empty string


 
User name



 
Password



 
Host name (lower case)



 
Port number as integer,
if present




Reading the  attribute will raise a  if
an invalid port is specified in the URL.  See section
Structured Parse Results for more information on the result object.
Unmatched square brackets in the  attribute will raise a
.
Characters in the  attribute that decompose under NFKC
normalization (as used by the IDNA encoding) into any of , ,
, , or  will raise a . If the URL is
decomposed before parsing, no error will be raised.

Changed in version 3.6: Out-of-range port numbers now raise , instead of
returning .


Changed in version 3.7.3: Characters that affect netloc parsing under NFKC normalization will
now raise .




(parts)¶
Combine the elements of a tuple as returned by  into a
complete URL as a string. The parts argument can be any five-item
iterable. This may result in a slightly different, but equivalent URL, if the
URL that was parsed originally had unnecessary delimiters (for example, a ?
with an empty query; the RFC states that these are equivalent).



(base, url, allow_fragments=True)¶
Construct a full (“absolute”) URL by combining a “base URL” (base) with
another URL (url).  Informally, this uses components of the base URL, in
particular the addressing scheme, the network location and (part of) the
path, to provide missing components in the relative URL.  For example:


The allow_fragments argument has the same meaning and default as for
.

Note
If url is an absolute URL (that is, starting with  or ),
the url’s host name and/or scheme will be present in the result.  For example:



If you do not want that behavior, preprocess the url with  and
, removing possible scheme and netloc parts.

Changed in version 3.5: Behaviour updated to match the semantics defined in RFC 3986.




(url)¶
If url contains a fragment identifier, return a modified version of url
with no fragment identifier, and the fragment identifier as a separate
string.  If there is no fragment identifier in url, return url unmodified
and an empty string.
The return value is a named tuple, its items can be accessed by index
or as named attributes:








Attribute
Index
Value
Value if not present




0
URL with no fragment
empty string


1
Fragment identifier
empty string



See section Structured Parse Results for more information on the result
object.

Changed in version 3.2: Result is a structured object rather than a simple 2-tuple.




Parsing ASCII Encoded Bytes¶
The URL parsing functions were originally designed to operate on character
strings only. In practice, it is useful to be able to manipulate properly
quoted and encoded URLs as sequences of ASCII bytes. Accordingly, the
URL parsing functions in this module all operate on  and
 objects in addition to  objects.
If  data is passed in, the result will also contain only
 data. If  or  data is
passed in, the result will contain only  data.
Attempting to mix  data with  or
 in a single function call will result in a
 being raised, while attempting to pass in non-ASCII
byte values will trigger .
To support easier conversion of result objects between  and
, all return values from URL parsing functions provide
either an  method (when the result contains 
data) or a  method (when the result contains 
data). The signatures of these methods match those of the corresponding
 and  methods (except that the default encoding
is  rather than ). Each produces a value of a
corresponding type that contains either  data (for
 methods) or  data (for
 methods).
Applications that need to operate on potentially improperly quoted URLs
that may contain non-ASCII data will need to do their own decoding from
bytes to characters before invoking the URL parsing methods.
The behaviour described in this section applies only to the URL parsing
functions. The URL quoting functions use their own rules when producing
or consuming byte sequences as detailed in the documentation of the
individual URL quoting functions.

Changed in version 3.2: URL parsing functions now accept ASCII encoded byte sequences



Structured Parse Results¶
The result objects from the ,   and
 functions are subclasses of the  type.
These subclasses add the attributes listed in the documentation for
those functions, the encoding and decoding support described in the
previous section, as well as an additional method:


()¶
Return the re-combined version of the original URL as a string. This may
differ from the original URL in that the scheme may be normalized to lower
case and empty components may be dropped. Specifically, empty parameters,
queries, and fragment identifiers will be removed.
For  results, only empty fragment identifiers will be removed.
For  and  results, all noted changes will be
made to the URL returned by this method.
The result of this method remains unchanged if passed back through the original
parsing function:



The following classes provide the implementations of the structured parse
results when operating on  objects:


class (url, fragment)¶
Concrete class for  results containing 
data. The  method returns a 
instance.

New in version 3.2.




class (scheme, netloc, path, params, query, fragment)¶
Concrete class for  results containing 
data. The  method returns a 
instance.



class (scheme, netloc, path, query, fragment)¶
Concrete class for  results containing 
data. The  method returns a 
instance.

The following classes provide the implementations of the parse results when
operating on  or  objects:


class (url, fragment)¶
Concrete class for  results containing 
data. The  method returns a 
instance.

New in version 3.2.




class (scheme, netloc, path, params, query, fragment)¶
Concrete class for  results containing 
data. The  method returns a 
instance.

New in version 3.2.




class (scheme, netloc, path, query, fragment)¶
Concrete class for  results containing 
data. The  method returns a 
instance.

New in version 3.2.




URL Quoting¶
The URL quoting functions focus on taking program data and making it safe
for use as URL components by quoting special characters and appropriately
encoding non-ASCII text. They also support reversing these operations to
recreate the original data from the contents of a URL component if that
task isn’t already covered by the URL parsing functions above.


(string, safe='/', encoding=None, errors=None)¶
Replace special characters in string using the  escape. Letters,
digits, and the characters  are never quoted. By default, this
function is intended for quoting the path section of URL. The optional safe
parameter specifies additional ASCII characters that should not be quoted
— its default value is .
string may be either a  or a .

Changed in version 3.7: Moved from RFC 2396 to RFC 3986 for quoting URL strings. “~” is now
included in the set of reserved characters.

The optional encoding and errors parameters specify how to deal with
non-ASCII characters, as accepted by the  method.
encoding defaults to .
errors defaults to , meaning unsupported characters raise a
.
encoding and errors must not be supplied if string is a
, or a  is raised.
Note that  is equivalent to
.
Example:  yields .



(string, safe='', encoding=None, errors=None)¶
Like , but also replace spaces by plus signs, as required for
quoting HTML form values when building up a query string to go into a URL.
Plus signs in the original string are escaped unless they are included in
safe.  It also does not have safe default to .
Example:  yields .



(bytes, safe='/')¶
Like , but accepts a  object rather than a
, and does not perform string-to-bytes encoding.
Example:  yields
.



(string, encoding='utf-8', errors='replace')¶
Replace  escapes by their single-character equivalent.
The optional encoding and errors parameters specify how to decode
percent-encoded sequences into Unicode characters, as accepted by the
 method.
string must be a .
encoding defaults to .
errors defaults to , meaning invalid sequences are replaced
by a placeholder character.
Example:  yields .



(string, encoding='utf-8', errors='replace')¶
Like , but also replace plus signs by spaces, as required for
unquoting HTML form values.
string must be a .
Example:  yields .



(string)¶
Replace  escapes by their single-octet equivalent, and return a
 object.
string may be either a  or a .
If it is a , unescaped non-ASCII characters in string
are encoded into UTF-8 bytes.
Example:  yields .



(query, doseq=False, safe='', encoding=None, errors=None, quote_via=quote_plus)¶
Convert a mapping object or a sequence of two-element tuples, which may
contain  or  objects, to a percent-encoded ASCII
text string.  If the resultant string is to be used as a data for POST
operation with the  function, then
it should be encoded to bytes, otherwise it would result in a
.
The resulting string is a series of  pairs separated by 
characters, where both key and value are quoted using the quote_via
function.  By default,  is used to quote the values, which
means spaces are quoted as a  character and ‘/’ characters are
encoded as , which follows the standard for GET requests
().  An alternate function that can be
passed as quote_via is , which will encode spaces as 
and not encode ‘/’ characters.  For maximum control of what is quoted, use
 and specify a value for safe.
When a sequence of two-element tuples is used as the query
argument, the first element of each tuple is a key and the second is a
value. The value element in itself can be a sequence and in that case, if
the optional parameter doseq is evaluates to , individual
 pairs separated by  are generated for each element of
the value sequence for the key.  The order of parameters in the encoded
string will match the order of parameter tuples in the sequence.
The safe, encoding, and errors parameters are passed down to
quote_via (the encoding and errors parameters are only passed
when a query element is a ).
To reverse this encoding process,  and  are
provided in this module to parse query strings into Python data structures.
Refer to urllib examples to find out how urlencode
method can be used for generating query string for a URL or data for POST.

Changed in version 3.2: Query parameter supports bytes and string objects.


New in version 3.5: quote_via parameter.



See also

RFC 3986 - Uniform Resource Identifiers
This is the current standard (STD66). Any changes to urllib.parse module
should conform to this. Certain deviations could be observed, which are
mostly for backward compatibility purposes and for certain de-facto
parsing requirements as commonly observed in major browsers.
RFC 2732 - Format for Literal IPv6 Addresses in URL’s.
This specifies the parsing requirements of IPv6 URLs.
RFC 2396 - Uniform Resource Identifiers (URI): Generic Syntax
Document describing the generic syntactic requirements for both Uniform Resource
Names (URNs) and Uniform Resource Locators (URLs).
RFC 2368 - The mailto URL scheme.
Parsing requirements for mailto URL schemes.
RFC 1808 - Relative Uniform Resource Locators
This Request For Comments includes the rules for joining an absolute and a
relative URL, including a fair number of “Abnormal Examples” which govern the
treatment of border cases.
RFC 1738 - Uniform Resource Locators (URL)
This specifies the formal syntax and semantics of absolute URLs.




