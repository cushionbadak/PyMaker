link:
library/sys.html#module-sys

docs:

 — System-specific parameters and functions¶

This module provides access to some variables used or maintained by the
interpreter and to functions that interact strongly with the interpreter. It is
always available.


¶
On POSIX systems where Python was built with the standard 
script, this contains the ABI flags as specified by PEP 3149.

New in version 3.2.




¶
The list of command line arguments passed to a Python script.  is the
script name (it is operating system dependent whether this is a full pathname or
not).  If the command was executed using the  command line option to
the interpreter,  is set to the string .  If no script name
was passed to the Python interpreter,  is the empty string.
To loop over the standard input, or the list of files given on the
command line, see the  module.

Note
On Unix, command line arguments are passed by bytes from OS.  Python decodes
them with filesystem encoding and “surrogateescape” error handler.
When you need original bytes, you can get it by
.




¶
Set during Python startup, before  is run, to the same value as
. If not running in a
virtual environment, the values will stay the same; if
 finds that a virtual environment is in use, the values of
 and  will be changed to point to the
virtual environment, whereas  and
 will remain pointing to the base Python
installation (the one which the virtual environment was created from).

New in version 3.3.




¶
Set during Python startup, before  is run, to the same value as
. If not running in a virtual environment, the values
will stay the same; if  finds that a virtual environment is in
use, the values of  and  will be changed to
point to the virtual environment, whereas  and
 will remain pointing to the base Python
installation (the one which the virtual environment was created from).

New in version 3.3.




¶
An indicator of the native byte order.  This will have the value  on
big-endian (most-significant byte first) platforms, and  on
little-endian (least-significant byte first) platforms.



¶
A tuple of strings giving the names of all modules that are compiled into this
Python interpreter.  (This information is not available in any other way —
 only lists the imported modules.)



(func, args)¶
Call , while tracing is enabled.  The tracing state is saved,
and restored afterwards.  This is intended to be called from a debugger from
a checkpoint, to recursively debug some other code.



¶
A string containing the copyright pertaining to the Python interpreter.



()¶
Clear the internal type cache. The type cache is used to speed up attribute
and method lookups. Use the function only to drop unnecessary references
during reference leak debugging.
This function should be used for internal and specialized purposes only.



()¶
Return a dictionary mapping each thread’s identifier to the topmost stack frame
currently active in that thread at the time the function is called. Note that
functions in the  module can build the call stack given such a
frame.
This is most useful for debugging deadlock:  this function does not require the
deadlocked threads’ cooperation, and such threads’ call stacks are frozen for as
long as they remain deadlocked.  The frame returned for a non-deadlocked thread
may bear no relationship to that thread’s current activity by the time calling
code examines the frame.
This function should be used for internal and specialized purposes only.



()¶
This hook function is called by built-in .  By default,
it drops you into the  debugger, but it can be set to any other
function so that you can choose which debugger gets used.
The signature of this function is dependent on what it calls.  For example,
the default binding (e.g. ) expects no arguments, but
you might bind it to a function that expects additional arguments
(positional and/or keyword).  The built-in  function passes
its  and  straight through.  Whatever
 returns is returned from .
The default implementation first consults the environment variable
.  If that is set to  then this function
returns immediately; i.e. it is a no-op.  If the environment variable is
not set, or is set to the empty string,  is called.
Otherwise this variable should name a function to run, using Python’s
dotted-import nomenclature, e.g. .
In this case,  would be imported and the
resulting module must have a callable named .  This is run,
passing in  and , and whatever  returns,
 returns to the built-in 
function.
Note that if anything goes wrong while importing the callable named by
, a  is reported and the
breakpoint is ignored.
Also note that if  is overridden programmatically,
 is not consulted.

New in version 3.7.




()¶
Print low-level information to stderr about the state of CPython’s memory
allocator.
If Python is configured –with-pydebug, it also performs some expensive
internal consistency checks.

New in version 3.3.


CPython implementation detail: This function is specific to CPython.  The exact output format is not
defined here, and may change.




¶
Integer specifying the handle of the Python DLL.
Availability: Windows.



(value)¶
If value is not , this function prints  to
, and saves value in . If  is
not encodable to  with  error
handler (which is probably ), encode it to
 with  error handler.
 is called on the result of evaluating an expression
entered in an interactive Python session.  The display of these values can be
customized by assigning another one-argument function to .
Pseudo-code:



Changed in version 3.2: Use  error handler on .




¶
If this is true, Python won’t try to write  files on the
import of source modules.  This value is initially set to  or
 depending on the  command line option and the
 environment variable, but you can set it
yourself to control bytecode file generation.



(type, value, traceback)¶
This function prints out a given traceback and exception to .
When an exception is raised and uncaught, the interpreter calls
 with three arguments, the exception class, exception
instance, and a traceback object.  In an interactive session this happens just
before control is returned to the prompt; in a Python program this happens just
before the program exits.  The handling of such top-level exceptions can be
customized by assigning another three-argument function to .



¶

¶

¶
These objects contain the original values of ,
, and  at the start of the program.  They are
saved so that ,  and  can be
restored in case they happen to get replaced with broken or alternative
objects.

New in version 3.7: __breakpointhook__




()¶
This function returns a tuple of three values that give information about the
exception that is currently being handled.  The information returned is specific
both to the current thread and to the current stack frame.  If the current stack
frame is not handling an exception, the information is taken from the calling
stack frame, or its caller, and so on until a stack frame is found that is
handling an exception.  Here, “handling an exception” is defined as “executing
an except clause.”  For any stack frame, only information about the exception
being currently handled is accessible.
If no exception is being handled anywhere on the stack, a tuple containing
three  values is returned.  Otherwise, the values returned are
.  Their meaning is: type gets the type of the
exception being handled (a subclass of ); value gets
the exception instance (an instance of the exception type); traceback gets
a traceback object (see the Reference Manual) which encapsulates the call
stack at the point where the exception originally occurred.



¶
A string giving the site-specific directory prefix where the platform-dependent
Python files are installed; by default, this is also .  This can
be set at build time with the  argument to the
configure script.  Specifically, all configuration files (e.g. the
 header file) are installed in the directory
, and shared library modules are
installed in , where X.Y
is the version number of Python, for example .

Note
If a virtual environment is in effect, this
value will be changed in  to point to the virtual environment.
The value for the Python installation will still be available, via
.




¶
A string giving the absolute path of the executable binary for the Python
interpreter, on systems where this makes sense. If Python is unable to retrieve
the real path to its executable,  will be an empty string
or .



([arg])¶
Exit from Python.  This is implemented by raising the 
exception, so cleanup actions specified by finally clauses of 
statements are honored, and it is possible to intercept the exit attempt at
an outer level.
The optional argument arg can be an integer giving the exit status
(defaulting to zero), or another type of object.  If it is an integer, zero
is considered “successful termination” and any nonzero value is considered
“abnormal termination” by shells and the like.  Most systems require it to be
in the range 0–127, and produce undefined results otherwise.  Some systems
have a convention for assigning specific meanings to specific exit codes, but
these are generally underdeveloped; Unix programs generally use 2 for command
line syntax errors and 1 for all other kind of errors.  If another type of
object is passed,  is equivalent to passing zero, and any other
object is printed to  and results in an exit code of 1.  In
particular,  is a quick way to exit a
program when an error occurs.
Since  ultimately “only” raises an exception, it will only exit
the process when called from the main thread, and the exception is not
intercepted.

Changed in version 3.6: If an error occurs in the cleanup after the Python interpreter
has caught  (such as an error flushing buffered data
in the standard streams), the exit status is changed to 120.




¶
The struct sequence flags exposes the status of command line
flags. The attributes are read only.






attribute
flag
















 or 


























 


 




Changed in version 3.2: Added  attribute for the new  flag.


New in version 3.2.3: The  attribute.


Changed in version 3.3: Removed obsolete  attribute.


Changed in version 3.4: Added  attribute for   flag.


Changed in version 3.7: Added  attribute for the new   flag
and  attribute for the new    flag.




¶
A struct sequence holding information about the float type. It
contains low level information about the precision and internal
representation.  The values correspond to the various floating-point
constants defined in the standard header file  for the ‘C’
programming language; see section 5.2.4.2.2 of the 1999 ISO/IEC C standard
[C99], ‘Characteristics of floating types’, for details.







attribute
float.h macro
explanation




DBL_EPSILON
difference between 1 and the least value greater
than 1 that is representable as a float


DBL_DIG
maximum number of decimal digits that can be
faithfully represented in a float;  see below


DBL_MANT_DIG
float precision: the number of base-
digits in the significand of a float


DBL_MAX
maximum representable finite float


DBL_MAX_EXP
maximum integer e such that  is
a representable finite float


DBL_MAX_10_EXP
maximum integer e such that  is in the
range of representable finite floats


DBL_MIN
minimum positive normalized float


DBL_MIN_EXP
minimum integer e such that  is
a normalized float


DBL_MIN_10_EXP
minimum integer e such that  is a
normalized float


FLT_RADIX
radix of exponent representation


FLT_ROUNDS
integer constant representing the rounding mode
used for arithmetic operations.  This reflects
the value of the system FLT_ROUNDS macro at
interpreter startup time.  See section 5.2.4.2.2
of the C99 standard for an explanation of the
possible values and their meanings.



The attribute  needs further explanation.  If
 is any string representing a decimal number with at most
 significant digits, then converting  to a
float and back again will recover a string representing the same decimal
value:


But for strings with more than  significant digits,
this isn’t always true:





¶
A string indicating how the  function behaves for
floats.  If the string has value  then for a finite
float ,  aims to produce a short string with the
property that .  This is the usual behaviour
in Python 3.1 and later.  Otherwise,  has value
 and  behaves in the same way as it did in
versions of Python prior to 3.1.

New in version 3.1.




()¶
Return the number of memory blocks currently allocated by the interpreter,
regardless of their size.  This function is mainly useful for tracking
and debugging memory leaks.  Because of the interpreter’s internal
caches, the result can vary from call to call; you may have to call
 and  to get more
predictable results.
If a Python build or implementation cannot reasonably compute this
information,  is allowed to return 0 instead.

New in version 3.4.




()¶
Return the build time API version of Android as an integer.
Availability: Android.

New in version 3.7.




()¶
Return the interpreter’s “check interval”; see .

Deprecated since version 3.2: Use  instead.




()¶
Return the name of the current default string encoding used by the Unicode
implementation.



()¶
Return the current value of the flags that are used for
 calls.  Symbolic names for the flag values can be
found in the  module ( constants, e.g.
).
Availability: Unix.



()¶
Return the name of the encoding used to convert between Unicode
filenames and bytes filenames. For best compatibility, str should be
used for filenames in all cases, although representing filenames as bytes
is also supported. Functions accepting or returning filenames should support
either str or bytes and internally convert to the system’s preferred
representation.
This encoding is always ASCII-compatible.
 and  should be used to ensure that
the correct encoding and errors mode are used.

In the UTF-8 mode, the encoding is  on any platform.
On Mac OS X, the encoding is .
On Unix, the encoding is the locale encoding.
On Windows, the encoding may be  or , depending
on user configuration.


Changed in version 3.2:  result cannot be  anymore.


Changed in version 3.6: Windows is no longer guaranteed to return . See PEP 529
and  for more information.


Changed in version 3.7: Return ‘utf-8’ in the UTF-8 mode.




()¶
Return the name of the error mode used to convert between Unicode filenames
and bytes filenames. The encoding name is returned from
.
 and  should be used to ensure that
the correct encoding and errors mode are used.

New in version 3.6.




(object)¶
Return the reference count of the object.  The count returned is generally one
higher than you might expect, because it includes the (temporary) reference as
an argument to .



()¶
Return the current value of the recursion limit, the maximum depth of the Python
interpreter stack.  This limit prevents infinite recursion from causing an
overflow of the C stack and crashing Python.  It can be set by
.



(object[, default])¶
Return the size of an object in bytes. The object can be any type of
object. All built-in objects will return correct results, but this
does not have to hold true for third-party extensions as it is implementation
specific.
Only the memory consumption directly attributed to the object is
accounted for, not the memory consumption of objects it refers to.
If given, default will be returned if the object does not provide means to
retrieve the size.  Otherwise a  will be raised.
 calls the object’s  method and adds an
additional garbage collector overhead if the object is managed by the garbage
collector.
See recursive sizeof recipe
for an example of using  recursively to find the size of
containers and all their contents.



()¶
Return the interpreter’s “thread switch interval”; see
.

New in version 3.2.




([depth])¶
Return a frame object from the call stack.  If optional integer depth is
given, return the frame object that many calls below the top of the stack.  If
that is deeper than the call stack,  is raised.  The default
for depth is zero, returning the frame at the top of the call stack.

CPython implementation detail: This function should be used for internal and specialized purposes only.
It is not guaranteed to exist in all implementations of Python.




()¶
Get the profiler function as set by .



()¶
Get the trace function as set by .

CPython implementation detail: The  function is intended only for implementing debuggers,
profilers, coverage tools and the like.  Its behavior is part of the
implementation platform, rather than part of the language definition, and
thus may not be available in all Python implementations.




()¶
Return a named tuple describing the Windows version
currently running.  The named elements are major, minor,
build, platform, service_pack, service_pack_minor,
service_pack_major, suite_mask, product_type and
platform_version. service_pack contains a string,
platform_version a 3-tuple and all other values are
integers. The components can also be accessed by name, so
 is equivalent to
. For compatibility with prior
versions, only the first 5 elements are retrievable by indexing.
platform will be .
product_type may be one of the following values:






Constant
Meaning




The system is a workstation.


The system is a domain
controller.


The system is a server, but not
a domain controller.



This function wraps the Win32  function; see the
Microsoft documentation on  for more information
about these fields.
platform_version returns the accurate major version, minor version and
build number of the current operating system, rather than the version that
is being emulated for the process. It is intended for use in logging rather
than for feature detection.
Availability: Windows.

Changed in version 3.2: Changed to a named tuple and added service_pack_minor,
service_pack_major, suite_mask, and product_type.


Changed in version 3.6: Added platform_version




()¶
Returns an asyncgen_hooks object, which is similar to a
 of the form (firstiter, finalizer),
where firstiter and finalizer are expected to be either  or
functions which take an asynchronous generator iterator as an
argument, and are used to schedule finalization of an asynchronous
generator by an event loop.

New in version 3.6: See PEP 525 for more details.


Note
This function has been added on a provisional basis (see PEP 411
for details.)




()¶
Get the current coroutine origin tracking depth, as set by
.

New in version 3.7.


Note
This function has been added on a provisional basis (see PEP 411
for details.)  Use it only for debugging purposes.




()¶
Returns , or a wrapper set by .

New in version 3.5: See PEP 492 for more details.


Note
This function has been added on a provisional basis (see PEP 411
for details.)  Use it only for debugging purposes.


Deprecated since version 3.7: The coroutine wrapper functionality has been deprecated, and
will be removed in 3.8. See bpo-32591 for details.




¶
A struct sequence giving parameters of the numeric hash
implementation.  For more details about hashing of numeric types, see
Hashing of numeric types.






attribute
explanation




width in bits used for hash values


prime modulus P used for numeric hash scheme


hash value returned for a positive infinity


hash value returned for a nan


multiplier used for the imaginary part of a
complex number


name of the algorithm for hashing of str, bytes,
and memoryview


internal output size of the hash algorithm


size of the seed key of the hash algorithm




New in version 3.2.


Changed in version 3.4: Added algorithm, hash_bits and seed_bits




¶
The version number encoded as a single integer.  This is guaranteed to increase
with each version, including proper support for non-production releases.  For
example, to test that the Python interpreter is at least version 1.5.2, use:


This is called  since it only really looks meaningful when viewed
as the result of passing it to the built-in  function.  The
struct sequence  may be used for a more
human-friendly encoding of the same information.
More details of  can be found at API and ABI Versioning.



¶
An object containing information about the implementation of the
currently running Python interpreter.  The following attributes are
required to exist in all Python implementations.
name is the implementation’s identifier, e.g. .  The actual
string is defined by the Python implementation, but it is guaranteed to be
lower case.
version is a named tuple, in the same format as
.  It represents the version of the Python
implementation.  This has a distinct meaning from the specific
version of the Python language to which the currently running
interpreter conforms, which  represents.  For
example, for PyPy 1.8  might be
, whereas 
would be .  For CPython they
are the same value, since it is the reference implementation.
hexversion is the implementation version in hexadecimal format, like
.
cache_tag is the tag used by the import machinery in the filenames of
cached modules.  By convention, it would be a composite of the
implementation’s name and version, like .  However, a
Python implementation may use some other value if appropriate.  If
 is set to , it indicates that module caching should
be disabled.
 may contain additional attributes specific to
the Python implementation.  These non-standard attributes must start with
an underscore, and are not described here.  Regardless of its contents,
 will not change during a run of the interpreter,
nor between implementation versions.  (It may change between Python
language versions, however.)  See PEP 421 for more information.

New in version 3.3.




¶
A struct sequence that holds information about Python’s internal
representation of integers.  The attributes are read only.






Attribute
Explanation




number of bits held in each digit.  Python
integers are stored internally in base



size in bytes of the C type used to
represent a digit




New in version 3.1.




¶
When this attribute exists, its value is automatically called (with no
arguments) when the interpreter is launched in interactive mode.  This is done after the  file is
read, so that you can set this hook there.  The  module
sets this.

New in version 3.4.




(string)¶
Enter string in the table of “interned” strings and return the interned string
– which is string itself or a copy. Interning strings is useful to gain a
little performance on dictionary lookup – if the keys in a dictionary are
interned, and the lookup key is interned, the key comparisons (after hashing)
can be done by a pointer compare instead of a string compare.  Normally, the
names used in Python programs are automatically interned, and the dictionaries
used to hold module, class or instance attributes have interned keys.
Interned strings are not immortal; you must keep a reference to the return
value of  around to benefit from it.



()¶
Return  if the Python interpreter is
shutting down,  otherwise.

New in version 3.5.




¶

¶

¶
These three variables are not always defined; they are set when an exception is
not handled and the interpreter prints an error message and a stack traceback.
Their intended use is to allow an interactive user to import a debugger module
and engage in post-mortem debugging without having to re-execute the command
that caused the error.  (Typical use is  to enter the
post-mortem debugger; see  module for
more information.)
The meaning of the variables is the same as that of the return values from
 above.



¶
An integer giving the maximum value a variable of type  can
take.  It’s usually  on a 32-bit platform and  on a
64-bit platform.



¶
An integer giving the value of the largest Unicode code point,
i.e.  ( in hexadecimal).

Changed in version 3.3: Before PEP 393,  used to be either 
or , depending on the configuration option that specified
whether Unicode characters were stored as UCS-2 or UCS-4.




¶
A list of meta path finder objects that have their
 methods called to see if one
of the objects can find the module to be imported. The
 method is called with at
least the absolute name of the module being imported. If the module to be
imported is contained in a package, then the parent package’s 
attribute is passed in as a second argument. The method returns a
module spec, or  if the module cannot be found.

See also


The abstract base class defining the interface of finder objects on
.

The concrete class which
 should return
instances of.



Changed in version 3.4: Module specs were introduced in Python 3.4, by
PEP 451. Earlier versions of Python looked for a method called
.
This is still called as a fallback if a  entry doesn’t
have a  method.




¶
This is a dictionary that maps module names to modules which have already been
loaded.  This can be manipulated to force reloading of modules and other tricks.
However, replacing the dictionary will not necessarily work as expected and
deleting essential items from the dictionary may cause Python to fail.



¶
A list of strings that specifies the search path for modules. Initialized from
the environment variable , plus an installation-dependent
default.
As initialized upon program startup, the first item of this list, ,
is the directory containing the script that was used to invoke the Python
interpreter.  If the script directory is not available (e.g.  if the interpreter
is invoked interactively or if the script is read from standard input),
 is the empty string, which directs Python to search modules in the
current directory first.  Notice that the script directory is inserted before
the entries inserted as a result of .
A program is free to modify this list for its own purposes.  Only strings
and bytes should be added to ; all other data types are
ignored during import.

See also
Module  This describes how to use .pth files to extend
.




¶
A list of callables that take a path argument to try to create a
finder for the path. If a finder can be created, it is to be
returned by the callable, else raise .
Originally specified in PEP 302.



¶
A dictionary acting as a cache for finder objects. The keys are
paths that have been passed to  and the values are
the finders that are found. If a path is a valid file system path but no
finder is found on  then  is
stored.
Originally specified in PEP 302.

Changed in version 3.3:  is stored instead of  when no finder
is found.




¶
This string contains a platform identifier that can be used to append
platform-specific components to , for instance.
For Unix systems, except on Linux, this is the lowercased OS name as
returned by  with the first part of the version as returned by
 appended, e.g.  or , at the time
when Python was built.  Unless you want to test for a specific system
version, it is therefore recommended to use the following idiom:


For other systems, the values are:






System
 value



Linux


Windows


Windows/Cygwin


Mac OS X





Changed in version 3.3: On Linux,  doesn’t contain the major version anymore.
It is always , instead of  or .  Since
older Python versions include the version number, it is recommended to
always use the  idiom presented above.


See also
 has a coarser granularity.   gives
system-dependent version information.
The  module provides detailed checks for the
system’s identity.




¶
A string giving the site-specific directory prefix where the platform
independent Python files are installed; by default, this is the string
.  This can be set at build time with the 
argument to the configure script.  The main collection of Python
library modules is installed in the directory 
while the platform independent header files (all except ) are
stored in , where X.Y is the version
number of Python, for example .

Note
If a virtual environment is in effect, this
value will be changed in  to point to the virtual
environment. The value for the Python installation will still be
available, via .




¶

¶
Strings specifying the primary and secondary prompt of the interpreter.  These
are only defined if the interpreter is in interactive mode.  Their initial
values in this case are  and .  If a non-string object is
assigned to either variable, its  is re-evaluated each time the
interpreter prepares to read a new interactive command; this can be used to
implement a dynamic prompt.



(interval)¶
Set the interpreter’s “check interval”.  This integer value determines how often
the interpreter checks for periodic things such as thread switches and signal
handlers.  The default is , meaning the check is performed every 100
Python virtual instructions. Setting it to a larger value may increase
performance for programs using threads.  Setting it to a value  0 checks
every virtual instruction, maximizing responsiveness as well as overhead.

Deprecated since version 3.2: This function doesn’t have an effect anymore, as the internal logic for
thread switching and asynchronous tasks has been rewritten.  Use
 instead.




(n)¶
Set the flags used by the interpreter for  calls, such as when
the interpreter loads extension modules.  Among other things, this will enable a
lazy resolving of symbols when importing a module, if called as
.  To share symbols across extension modules, call as
.  Symbolic names for the flag values
can be found in the  module ( constants, e.g.
).
Availability: Unix.



(profilefunc)¶
Set the system’s profile function, which allows you to implement a Python source
code profiler in Python.  See chapter The Python Profilers for more information on the
Python profiler.  The system’s profile function is called similarly to the
system’s trace function (see ), but it is called with different events,
for example it isn’t called for each executed line of code (only on call and return,
but the return event is reported even when an exception has been set). The function is
thread-specific, but there is no way for the profiler to know about context switches between
threads, so it does not make sense to use this in the presence of multiple threads. Also,
its return value is not used, so it can simply return .  Error in the profile
function will cause itself unset.
Profile functions should have three arguments: frame, event, and
arg. frame is the current stack frame.  event is a string: ,
, , , or . arg depends
on the event type.
The events have the following meaning:


A function is called (or some other code block entered).  The
profile function is called; arg is .

A function (or other code block) is about to return.  The profile
function is called; arg is the value that will be returned, or 
if the event is caused by an exception being raised.

A C function is about to be called.  This may be an extension function or
a built-in.  arg is the C function object.

A C function has returned. arg is the C function object.

A C function has raised an exception.  arg is the C function object.




(limit)¶
Set the maximum depth of the Python interpreter stack to limit.  This limit
prevents infinite recursion from causing an overflow of the C stack and crashing
Python.
The highest possible limit is platform-dependent.  A user may need to set the
limit higher when they have a program that requires deep recursion and a platform
that supports a higher limit.  This should be done with care, because a too-high
limit can lead to a crash.
If the new limit is too low at the current recursion depth, a
 exception is raised.

Changed in version 3.5.1: A  exception is now raised if the new limit is too
low at the current recursion depth.




(interval)¶
Set the interpreter’s thread switch interval (in seconds).  This floating-point
value determines the ideal duration of the “timeslices” allocated to
concurrently running Python threads.  Please note that the actual value
can be higher, especially if long-running internal functions or methods
are used.  Also, which thread becomes scheduled at the end of the interval
is the operating system’s decision.  The interpreter doesn’t have its
own scheduler.

New in version 3.2.




(tracefunc)¶
Set the system’s trace function, which allows you to implement a Python
source code debugger in Python.  The function is thread-specific; for a
debugger to support multiple threads, it must register a trace function using
 for each thread being debugged or use .
Trace functions should have three arguments: frame, event, and
arg. frame is the current stack frame.  event is a string: ,
, ,  or .  arg depends on
the event type.
The trace function is invoked (with event set to ) whenever a new
local scope is entered; it should return a reference to a local trace
function to be used that scope, or  if the scope shouldn’t be traced.
The local trace function should return a reference to itself (or to another
function for further tracing in that scope), or  to turn off tracing
in that scope.
If there is any error occurred in the trace function, it will be unset, just
like  is called.
The events have the following meaning:


A function is called (or some other code block entered).  The
global trace function is called; arg is ; the return value
specifies the local trace function.

The interpreter is about to execute a new line of code or re-execute the
condition of a loop.  The local trace function is called; arg is
; the return value specifies the new local trace function.  See
 for a detailed explanation of how this
works.
Per-line events may be disabled for a frame by setting
 to  on that frame.

A function (or other code block) is about to return.  The local trace
function is called; arg is the value that will be returned, or 
if the event is caused by an exception being raised.  The trace function’s
return value is ignored.

An exception has occurred.  The local trace function is called; arg is a
tuple ; the return value specifies the
new local trace function.

The interpreter is about to execute a new opcode (see  for
opcode details).  The local trace function is called; arg is
; the return value specifies the new local trace function.
Per-opcode events are not emitted by default: they must be explicitly
requested by setting  to  on the
frame.

Note that as an exception is propagated down the chain of callers, an
 event is generated at each level.
For more information on code and frame objects, refer to The standard type hierarchy.

CPython implementation detail: The  function is intended only for implementing debuggers,
profilers, coverage tools and the like.  Its behavior is part of the
implementation platform, rather than part of the language definition, and
thus may not be available in all Python implementations.


Changed in version 3.7:  event type added;  and
 attributes added to frames




(firstiter, finalizer)¶
Accepts two optional keyword arguments which are callables that accept an
asynchronous generator iterator as an argument. The firstiter
callable will be called when an asynchronous generator is iterated for the
first time. The finalizer will be called when an asynchronous generator
is about to be garbage collected.

New in version 3.6: See PEP 525 for more details, and for a reference example of a
finalizer method see the implementation of
 in
Lib/asyncio/base_events.py


Note
This function has been added on a provisional basis (see PEP 411
for details.)




(depth)¶
Allows enabling or disabling coroutine origin tracking. When
enabled, the  attribute on coroutine objects will
contain a tuple of (filename, line number, function name) tuples
describing the traceback where the coroutine object was created,
with the most recent call first. When disabled,  will
be None.
To enable, pass a depth value greater than zero; this sets the
number of frames whose information will be captured. To disable,
pass set depth to zero.
This setting is thread-specific.

New in version 3.7.


Note
This function has been added on a provisional basis (see PEP 411
for details.)  Use it only for debugging purposes.




(wrapper)¶
Allows intercepting creation of coroutine objects (only ones that
are created by an  function; generators decorated with
 or  will not be
intercepted).
The wrapper argument must be either:

a callable that accepts one argument (a coroutine object);
, to reset the wrapper.

If called twice, the new wrapper replaces the previous one.  The function
is thread-specific.
The wrapper callable cannot define new coroutines directly or indirectly:


See also .

New in version 3.5: See PEP 492 for more details.


Note
This function has been added on a provisional basis (see PEP 411
for details.)  Use it only for debugging purposes.


Deprecated since version 3.7: The coroutine wrapper functionality has been deprecated, and
will be removed in 3.8. See bpo-32591 for details.




()¶
Changes the default filesystem encoding and errors mode to ‘mbcs’ and
‘replace’ respectively, for consistency with versions of Python prior to 3.6.
This is equivalent to defining the 
environment variable before launching Python.
Availability: Windows.

New in version 3.6: See PEP 529 for more details.




¶

¶

¶
File objects used by the interpreter for standard
input, output and errors:

 is used for all interactive input (including calls to
);
 is used for the output of  and expression
statements and for the prompts of ;
The interpreter’s own prompts and its error messages go to .

These streams are regular text files like those
returned by the  function.  Their parameters are chosen as
follows:

The character encoding is platform-dependent.  Non-Windows
platforms use the locale encoding (see
).
On Windows, UTF-8 is used for the console device.  Non-character
devices such as disk files and pipes use the system locale
encoding (i.e. the ANSI codepage).  Non-console character
devices such as NUL (i.e. where isatty() returns True) use the
value of the console input and output codepages at startup,
respectively for stdin and stdout/stderr. This defaults to the
system locale encoding if the process is not initially attached
to a console.
The special behaviour of the console can be overridden
by setting the environment variable PYTHONLEGACYWINDOWSSTDIO
before starting Python. In that case, the console codepages are
used as for any other character device.
Under all platforms, you can override the character encoding by
setting the  environment variable before
starting Python or by using the new   command
line option and  environment variable.  However,
for the Windows console, this only applies when
 is also set.

When interactive,  and  streams are line-buffered.
Otherwise, they are block-buffered like regular text files.  You can
override this value with the  command-line option.



Note
To write or read binary data from/to the standard streams, use the
underlying binary  object.  For example, to
write bytes to , use .
However, if you are writing a library (and do not control in which
context its code will be executed), be aware that the standard streams
may be replaced with file-like objects like  which
do not support the  attribute.




¶

¶

¶
These objects contain the original values of ,  and
 at the start of the program.  They are used during finalization,
and could be useful to print to the actual standard stream no matter if the
 object has been redirected.
It can also be used to restore the actual files to known working file objects
in case they have been overwritten with a broken object.  However, the
preferred way to do this is to explicitly save the previous stream before
replacing it, and restore the saved object.

Note
Under some conditions ,  and  as well as the
original values ,  and  can be
. It is usually the case for Windows GUI apps that aren’t connected
to a console and Python apps started with pythonw.




¶
A struct sequence holding information about the thread
implementation.






Attribute
Explanation




Name of the thread implementation:


: Windows threads
: POSIX threads
: Solaris threads





Name of the lock implementation:


: a lock uses a semaphore
: a lock uses a mutex
and a condition variable
 if this information is unknown





Name and version of the thread library. It is a string,
or  if this information is unknown.




New in version 3.3.




¶
When this variable is set to an integer value, it determines the maximum number
of levels of traceback information printed when an unhandled exception occurs.
The default is .  When set to  or less, all traceback information
is suppressed and only the exception type and value are printed.



¶
A string containing the version number of the Python interpreter plus additional
information on the build number and compiler used.  This string is displayed
when the interactive interpreter is started.  Do not extract version information
out of it, rather, use  and the functions provided by the
 module.



¶
The C API version for this interpreter.  Programmers may find this useful when
debugging version conflicts between Python and extension modules.



¶
A tuple containing the five components of the version number: major, minor,
micro, releaselevel, and serial.  All values except releaselevel are
integers; the release level is , , , or
.  The  value corresponding to the Python version 2.0
is .  The components can also be accessed by name,
so  is equivalent to 
and so on.

Changed in version 3.1: Added named component attributes.




¶
This is an implementation detail of the warnings framework; do not modify this
value.  Refer to the  module for more information on the warnings
framework.



¶
The version number used to form registry keys on Windows platforms. This is
stored as string resource 1000 in the Python DLL.  The value is normally the
first three characters of .  It is provided in the 
module for informational purposes; modifying this value has no effect on the
registry keys used by Python.
Availability: Windows.



¶
A dictionary of the various implementation-specific flags passed through
the  command-line option.  Option names are either mapped to
their values, if given explicitly, or to .  Example:



CPython implementation detail: This is a CPython-specific way of accessing options passed through
.  Other implementations may export them through other
means, or not at all.


New in version 3.2.


Citations



[C99]ISO/IEC 9899:1999.  “Programming languages – C.”  A public draft of this standard is available at http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf.


