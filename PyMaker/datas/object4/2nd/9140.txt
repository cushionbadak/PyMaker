link:
library/venv.html

docs:


 — Creation of virtual environments¶

New in version 3.3.

Source code: Lib/venv/

The  module provides support for creating lightweight “virtual
environments” with their own site directories, optionally isolated from system
site directories.  Each virtual environment has its own Python binary (which
matches the version of the binary that was used to create this environment) and
can have its own independent set of installed Python packages in its site
directories.
See PEP 405 for more information about Python virtual environments.

See also
Python Packaging User Guide: Creating and using virtual environments


Note
The  script has been deprecated as of Python 3.6 in favor of using
 to help prevent any potential confusion as to which
Python interpreter a virtual environment will be based on.


Creating virtual environments¶
Creation of virtual environments is done by executing the
command :


Running this command creates the target directory (creating any parent
directories that don’t exist already) and places a  file in it
with a  key pointing to the Python installation from which the command
was run.  It also creates a  (or  on Windows) subdirectory
containing a copy/symlink of the Python binary/binaries (as appropriate for the
platform or arguments used at environment creation time). It also creates an
(initially empty)  subdirectory
(on Windows, this is ). If an existing
directory is specified, it will be re-used.

Deprecated since version 3.6:  was the recommended tool for creating virtual environments for
Python 3.3 and 3.4, and is deprecated in Python 3.6.


Changed in version 3.5: The use of  is now recommended for creating virtual environments.

On Windows, invoke the  command as follows:


Alternatively, if you configured the  and  variables for
your Python installation:


The command, if run with , will show the available options:



Changed in version 3.4: Installs pip by default, added the   and 
options


Changed in version 3.4: In earlier versions, if the target directory already existed, an error was
raised, unless the  or  option was provided.


Note
While symlinks are supported on Windows, they are not recommended. Of
particular note is that double-clicking  in File Explorer
will resolve the symlink eagerly and ignore the virtual environment.

The created  file also includes the
 key, set to  if  is
run with the  option,  otherwise.
Unless the  option is given,  will be
invoked to bootstrap  into the virtual environment.
Multiple paths can be given to , in which case an identical virtual
environment will be created, according to the given options, at each provided
path.
Once a virtual environment has been created, it can be “activated” using a
script in the virtual environment’s binary directory. The invocation of the
script is platform-specific (<venv> must be replaced by the path of the
directory containing the virtual environment):







Platform
Shell
Command to activate virtual environment



Posix
bash/zsh
$ source <venv>/bin/activate

 
fish
$ . <venv>/bin/activate.fish

 
csh/tcsh
$ source <venv>/bin/activate.csh

Windows
cmd.exe
C:\> <venv>\Scripts\activate.bat

 
PowerShell
PS C:\> <venv>\Scripts\Activate.ps1



You don’t specifically need to activate an environment; activation just
prepends the virtual environment’s binary directory to your path, so that
“python” invokes the virtual environment’s Python interpreter and you can run
installed scripts without having to use their full path. However, all scripts
installed in a virtual environment should be runnable without activating it,
and run with the virtual environment’s Python automatically.
You can deactivate a virtual environment by typing “deactivate” in your shell.
The exact mechanism is platform-specific: for example, the Bash activation
script defines a “deactivate” function, whereas on Windows there are separate
scripts called  and  which are installed
when the virtual environment is created.

New in version 3.4:  and  activation scripts.


Note
A virtual environment is a Python environment such that the Python
interpreter, libraries and scripts installed into it are isolated from those
installed in other virtual environments, and (by default) any libraries
installed in a “system” Python, i.e., one which is installed as part of your
operating system.
A virtual environment is a directory tree which contains Python executable
files and other files which indicate that it is a virtual environment.
Common installation tools such as  and  work as
expected with virtual environments. In other words, when a virtual
environment is active, they install Python packages into the virtual
environment without needing to be told to do so explicitly.
When a virtual environment is active (i.e., the virtual environment’s Python
interpreter is running), the attributes  and
 point to the base directory of the virtual
environment, whereas  and
 point to the non-virtual environment Python
installation which was used to create the virtual environment. If a virtual
environment is not active, then  is the same as
 and  is the same as
 (they all point to a non-virtual environment
Python installation).
When a virtual environment is active, any options that change the
installation path will be ignored from all distutils configuration files to
prevent projects being inadvertently installed outside of the virtual
environment.
When working in a command shell, users can make a virtual environment active
by running an  script in the virtual environment’s executables
directory (the precise filename is shell-dependent), which prepends the
virtual environment’s directory for executables to the  environment
variable for the running shell. There should be no need in other
circumstances to activate a virtual environment—scripts installed into
virtual environments have a “shebang” line which points to the virtual
environment’s Python interpreter. This means that the script will run with
that interpreter regardless of the value of . On Windows, “shebang”
line processing is supported if you have the Python Launcher for Windows
installed (this was added to Python in 3.3 - see PEP 397 for more
details). Thus, double-clicking an installed script in a Windows Explorer
window should run the script with the correct interpreter without there
needing to be any reference to its virtual environment in .



API¶
The high-level method described above makes use of a simple API which provides
mechanisms for third-party virtual environment creators to customize environment
creation according to their needs, the  class.


class (system_site_packages=False, clear=False, symlinks=False, upgrade=False, with_pip=False, prompt=None)¶
The  class accepts the following keyword arguments on
instantiation:

 – a Boolean value indicating that the system Python
site-packages should be available to the environment (defaults to ).
 – a Boolean value which, if true, will delete the contents of
any existing target directory, before creating the environment.
 – a Boolean value indicating whether to attempt to symlink the
Python binary rather than copying.
 – a Boolean value which, if true, will upgrade an existing
environment with the running Python - for use when that Python has been
upgraded in-place (defaults to ).
 – a Boolean value which, if true, ensures pip is
installed in the virtual environment. This uses  with
the  option.
 – a String to be used after virtual environment is activated
(defaults to  which means directory name of the environment would
be used).


Changed in version 3.4: Added the  parameter


New in version 3.6: Added the  parameter

Creators of third-party virtual environment tools will be free to use the
provided  class as a base class.
The returned env-builder is an object which has a method, :


(env_dir)¶
This method takes as required argument the path (absolute or relative to
the current directory) of the target directory which is to contain the
virtual environment.  The  method will either create the
environment in the specified directory, or raise an appropriate
exception.
The  method of the  class illustrates the hooks
available for subclass customization:


Each of the methods ,
, ,
 and  can be overridden.



(env_dir)¶
Creates the environment directory and all necessary directories, and
returns a context object.  This is just a holder for attributes (such as
paths), for use by the other methods. The directories are allowed to
exist already, as long as either  or  were
specified to allow operating on an existing environment directory.



(context)¶
Creates the  configuration file in the environment.



(context)¶
Creates a copy or symlink to the Python executable in the environment.
On POSIX systems, if a specific executable  was used,
symlinks to  and  will be created pointing to that
executable, unless files with those names already exist.



(context)¶
Installs activation scripts appropriate to the platform into the virtual
environment.



(context)¶
A placeholder method which can be overridden in third party
implementations to pre-install packages in the virtual environment or
perform other post-creation steps.


Changed in version 3.7.2: Windows now uses redirector scripts for  instead of
copying the actual binaries. In 3.7.2 only  does
nothing unless running from a build in the source tree.


Changed in version 3.7.3: Windows copies the redirector scripts as part of 
instead of . This was not the case in 3.7.2.
When using symlinks, the original executables will be linked.

In addition,  provides this utility method that can be
called from  or  in subclasses to
assist in installing custom scripts into the virtual environment.


(context, path)¶
path is the path to a directory that should contain subdirectories
“common”, “posix”, “nt”, each containing scripts destined for the bin
directory in the environment.  The contents of “common” and the
directory corresponding to  are copied after some text
replacement of placeholders:

 is replaced with the absolute path of the environment
directory.
 is replaced with the environment name (final path
segment of environment directory).
 is replaced with the prompt (the environment
name surrounded by parentheses and with a following space)
 is replaced with the name of the bin directory
(either  or ).
 is replaced with the absolute path of the
environment’s executable.

The directories are allowed to exist (for when an existing environment
is being upgraded).


There is also a module-level convenience function:


(env_dir, system_site_packages=False, clear=False, symlinks=False, with_pip=False, prompt=None)¶
Create an  with the given keyword arguments, and call its
 method with the env_dir argument.

New in version 3.3.


Changed in version 3.4: Added the  parameter


Changed in version 3.6: Added the  parameter




An example of extending ¶
The following script shows how to extend  by implementing a
subclass which installs setuptools and pip into a created virtual environment:


This script is also available for download online.


