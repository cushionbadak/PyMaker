link:
library/functools.html#functools.total_ordering

docs:


Â¶
Given a class defining one or more rich comparison ordering methods, this
class decorator supplies the rest.  This simplifies the effort involved
in specifying all of the possible rich comparison operations:
The class must define one of , ,
, or .
In addition, the class should supply an  method.
For example:



Note
While this decorator makes it easy to create well behaved totally
ordered types, it does come at the cost of slower execution and
more complex stack traces for the derived comparison methods. If
performance benchmarking indicates this is a bottleneck for a given
application, implementing all six rich comparison methods instead is
likely to provide an easy speed boost.


New in version 3.2.


Changed in version 3.4: Returning NotImplemented from the underlying comparison function for
unrecognised types is now supported.

