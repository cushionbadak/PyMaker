link:
library/unittest.html#unittest.TestLoader

docs:


class ¶
The  class is used to create test suites from classes and
modules.  Normally, there is no need to create an instance of this class; the
 module provides an instance that can be shared as
.  Using a subclass or instance, however,
allows customization of some configurable properties.
 objects have the following attributes:


¶
A list of the non-fatal errors encountered while loading tests. Not reset
by the loader at any point. Fatal errors are signalled by the relevant
a method raising an exception to the caller. Non-fatal errors are also
indicated by a synthetic test that will raise the original error when
run.

New in version 3.5.


 objects have the following methods:


(testCaseClass)¶
Return a suite of all test cases contained in the -derived
.
A test case instance is created for each method named by
. By default these are the method names
beginning with . If  returns no
methods, but the  method is implemented, a single test
case is created for that method instead.



(module, pattern=None)¶
Return a suite of all test cases contained in the given module. This
method searches module for classes derived from  and
creates an instance of the class for each test method defined for the
class.

Note
While using a hierarchy of -derived classes can be
convenient in sharing fixtures and helper functions, defining test
methods on base classes that are not intended to be instantiated
directly does not play well with this method.  Doing so, however, can
be useful when the fixtures are different and defined in subclasses.

If a module provides a  function it will be called to
load the tests. This allows modules to customize test loading.
This is the load_tests protocol.  The pattern argument is passed as
the third argument to .

Changed in version 3.2: Support for  added.


Changed in version 3.5: The undocumented and unofficial use_load_tests default argument is
deprecated and ignored, although it is still accepted for backward
compatibility.  The method also now accepts a keyword-only argument
pattern which is passed to  as the third argument.




(name, module=None)¶
Return a suite of all test cases given a string specifier.
The specifier name is a “dotted name” that may resolve either to a
module, a test case class, a test method within a test case class, a
 instance, or a callable object which returns a
 or  instance.  These checks are
applied in the order listed here; that is, a method on a possible test
case class will be picked up as “a test method within a test case class”,
rather than “a callable object”.
For example, if you have a module  containing a
-derived class  with three test
methods (, , and ), the
specifier  would cause this method to
return a suite which will run all three test methods. Using the specifier
 would cause it to return a test
suite which will run only the  test method. The specifier
can refer to modules and packages which have not been imported; they will
be imported as a side-effect.
The method optionally resolves name relative to the given module.

Changed in version 3.5: If an  or  occurs while traversing
name then a synthetic test that raises that error when run will be
returned. These errors are included in the errors accumulated by
self.errors.




(names, module=None)¶
Similar to , but takes a sequence of names rather
than a single name.  The return value is a test suite which supports all
the tests defined for each name.



(testCaseClass)¶
Return a sorted sequence of method names found within testCaseClass;
this should be a subclass of .



(start_dir, pattern='test*.py', top_level_dir=None)¶
Find all the test modules by recursing into subdirectories from the
specified start directory, and return a TestSuite object containing them.
Only test files that match pattern will be loaded. (Using shell style
pattern matching.) Only module names that are importable (i.e. are valid
Python identifiers) will be loaded.
All test modules must be importable from the top level of the project. If
the start directory is not the top level directory then the top level
directory must be specified separately.
If importing a module fails, for example due to a syntax error, then
this will be recorded as a single error and discovery will continue.  If
the import failure is due to  being raised, it will be
recorded as a skip instead of an error.
If a package (a directory containing a file named ) is
found, the package will be checked for a  function. If this
exists then it will be called
. Test discovery takes care
to ensure that a package is only checked for tests once during an
invocation, even if the load_tests function itself calls
.
If  exists then discovery does not recurse into the
package,  is responsible for loading all tests in the
package.
The pattern is deliberately not stored as a loader attribute so that
packages can continue discovery themselves. top_level_dir is stored so
 does not need to pass this argument in to
.
start_dir can be a dotted module name as well as a directory.

New in version 3.2.


Changed in version 3.4: Modules that raise  on import are recorded as skips,
  not errors.
Discovery works for namespace packages.
Paths are sorted before being imported so that execution order is
  the same even if the underlying file system’s ordering is not
  dependent on file name.


Changed in version 3.5: Found packages are now checked for  regardless of
whether their path matches pattern, because it is impossible for
a package name to match the default pattern.


The following attributes of a  can be configured either by
subclassing or assignment on an instance:


¶
String giving the prefix of method names which will be interpreted as test
methods.  The default value is .
This affects  and all the 
methods.



¶
Function to be used to compare method names when sorting them in
 and all the  methods.



¶
Callable object that constructs a test suite from a list of tests. No
methods on the resulting object are needed.  The default value is the
 class.
This affects all the  methods.



¶
List of Unix shell-style wildcard test name patterns that test methods
have to match to be included in test suites (see  option).
If this attribute is not  (the default), all test methods to be
included in test suites must match one of the patterns in this list.
Note that matches are always performed using ,
so unlike patterns passed to the  option, simple substring patterns
will have to be converted using  wildcards.
This affects all the  methods.

New in version 3.7.


