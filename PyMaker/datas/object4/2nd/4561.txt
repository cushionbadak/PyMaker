link:
library/_thread.html#module-_thread

docs:

 — Low-level threading API¶

This module provides low-level primitives for working with multiple threads
(also called light-weight processes or tasks) — multiple threads of
control sharing their global data space.  For synchronization, simple locks
(also called mutexes or binary semaphores) are provided.
The  module provides an easier to use and higher-level
threading API built on top of this module.

Changed in version 3.7: This module used to be optional, it is now always available.

This module defines the following constants and functions:


exception ¶
Raised on thread-specific errors.

Changed in version 3.3: This is now a synonym of the built-in .




¶
This is the type of lock objects.



(function, args[, kwargs])¶
Start a new thread and return its identifier.  The thread executes the function
function with the argument list args (which must be a tuple).  The optional
kwargs argument specifies a dictionary of keyword arguments. When the function
returns, the thread silently exits.  When the function terminates with an
unhandled exception, a stack trace is printed and then the thread exits (but
other threads continue to run).



()¶
Raise a  exception in the main thread.  A subthread can
use this function to interrupt the main thread.



()¶
Raise the  exception.  When not caught, this will cause the
thread to exit silently.



()¶
Return a new lock object.  Methods of locks are described below.  The lock is
initially unlocked.



()¶
Return the ‘thread identifier’ of the current thread.  This is a nonzero
integer.  Its value has no direct meaning; it is intended as a magic cookie to
be used e.g. to index a dictionary of thread-specific data.  Thread identifiers
may be recycled when a thread exits and another thread is created.



([size])¶
Return the thread stack size used when creating new threads.  The optional
size argument specifies the stack size to be used for subsequently created
threads, and must be 0 (use platform or configured default) or a positive
integer value of at least 32,768 (32 KiB). If size is not specified,
0 is used.  If changing the thread stack size is
unsupported, a  is raised.  If the specified stack size is
invalid, a  is raised and the stack size is unmodified.  32 KiB
is currently the minimum supported stack size value to guarantee sufficient
stack space for the interpreter itself.  Note that some platforms may have
particular restrictions on values for the stack size, such as requiring a
minimum stack size > 32 KiB or requiring allocation in multiples of the system
memory page size - platform documentation should be referred to for more
information (4 KiB pages are common; using multiples of 4096 for the stack size is
the suggested approach in the absence of more specific information).
Availability: Windows, systems with POSIX threads.



¶
The maximum value allowed for the timeout parameter of
. Specifying a timeout greater than this value will
raise an .

New in version 3.2.


Lock objects have the following methods:


(waitflag=1, timeout=-1)¶
Without any optional argument, this method acquires the lock unconditionally, if
necessary waiting until it is released by another thread (only one thread at a
time can acquire a lock — that’s their reason for existence).
If the integer waitflag argument is present, the action depends on its
value: if it is zero, the lock is only acquired if it can be acquired
immediately without waiting, while if it is nonzero, the lock is acquired
unconditionally as above.
If the floating-point timeout argument is present and positive, it
specifies the maximum wait time in seconds before returning.  A negative
timeout argument specifies an unbounded wait.  You cannot specify
a timeout if waitflag is zero.
The return value is  if the lock is acquired successfully,
 if not.

Changed in version 3.2: The timeout parameter is new.


Changed in version 3.2: Lock acquires can now be interrupted by signals on POSIX.




()¶
Releases the lock.  The lock must have been acquired earlier, but not
necessarily by the same thread.



()¶
Return the status of the lock:  if it has been acquired by some thread,
 if not.

In addition to these methods, lock objects can also be used via the
 statement, e.g.:


Caveats:



Threads interact strangely with interrupts: the 
exception will be received by an arbitrary thread.  (When the 
module is available, interrupts always go to the main thread.)
Calling  or raising the  exception is
equivalent to calling .
It is not possible to interrupt the  method on a lock — the
 exception will happen after the lock has been acquired.
When the main thread exits, it is system defined whether the other threads
survive.  On most systems, they are killed without executing
 …  clauses or executing object
destructors.
When the main thread exits, it does not do any of its usual cleanup (except
that  …  clauses are honored), and the
standard I/O files are not flushed.

