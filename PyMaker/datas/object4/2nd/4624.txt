link:
library/asyncio-task.html#asyncio.run_coroutine_threadsafe

docs:


(coro, loop)Â¶
Submit a coroutine to the given event loop.  Thread-safe.
Return a  to wait for the result
from another OS thread.
This function is meant to be called from a different OS thread
than the one where the event loop is running.  Example:


If an exception is raised in the coroutine, the returned Future
will be notified.  It can also be used to cancel the task in
the event loop:


See the concurrency and multithreading
section of the documentation.
Unlike other asyncio functions this function requires the loop
argument to be passed explicitly.

New in version 3.5.1.

