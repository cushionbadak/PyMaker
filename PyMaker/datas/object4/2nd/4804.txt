link:
library/asyncio-eventloop.html#working-with-socket-objects-directly

docs:

Working with socket objects directly¶
In general, protocol implementations that use transport-based APIs
such as  and 
are faster than implementations that work with sockets directly.
However, there are some use cases when performance is not critical, and
working with  objects directly is more
convenient.


coroutine (sock, nbytes)¶
Receive up to nbytes from sock.  Asynchronous version of
.
Return the received data as a bytes object.
sock must be a non-blocking socket.

Changed in version 3.7: Even though this method was always documented as a coroutine
method, releases before Python 3.7 returned a .
Since Python 3.7 this is an  method.




coroutine (sock, buf)¶
Receive data from sock into the buf buffer.  Modeled after the blocking
 method.
Return the number of bytes written to the buffer.
sock must be a non-blocking socket.

New in version 3.7.




coroutine (sock, data)¶
Send data to the sock socket. Asynchronous version of
.
This method continues to send to the socket until either all data
in data has been sent or an error occurs.   is returned
on success.  On error, an exception is raised. Additionally, there is no way
to determine how much data, if any, was successfully processed by the
receiving end of the connection.
sock must be a non-blocking socket.

Changed in version 3.7: Even though the method was always documented as a coroutine
method, before Python 3.7 it returned an .
Since Python 3.7, this is an  method.




coroutine (sock, address)¶
Connect sock to a remote socket at address.
Asynchronous version of .
sock must be a non-blocking socket.

Changed in version 3.5.2:  no longer needs to be resolved.  
will try to check if the address is already resolved by calling
.  If not,
 will be used to resolve the
address.


See also

and  .




coroutine (sock)¶
Accept a connection.  Modeled after the blocking
 method.
The socket must be bound to an address and listening
for connections. The return value is a pair  where conn
is a new socket object usable to send and receive data on the connection,
and address is the address bound to the socket on the other end of the
connection.
sock must be a non-blocking socket.

Changed in version 3.7: Even though the method was always documented as a coroutine
method, before Python 3.7 it returned a .
Since Python 3.7, this is an  method.


See also
 and .




coroutine (sock, file, offset=0, count=None, *, fallback=True)¶
Send a file using high-performance  if possible.
Return the total number of bytes sent.
Asynchronous version of .
sock must be a non-blocking 
.
file must be a regular file object open in binary mode.
offset tells from where to start reading the file. If specified,
count is the total number of bytes to transmit as opposed to
sending the file until EOF is reached. File position is always updated,
even when this method raises an error, and
 can be used to obtain the actual
number of bytes sent.
fallback, when set to , makes asyncio manually read and send
the file when the platform does not support the sendfile syscall
(e.g. Windows or SSL socket on Unix).
Raise  if the system does not support
sendfile syscall and fallback is .
sock must be a non-blocking socket.

New in version 3.7.


