link:
library/email.header.html#module-email.header

docs:

: Internationalized headers¶
Source code: Lib/email/header.py

This module is part of the legacy () email API.  In the current API
encoding and decoding of headers is handled transparently by the
dictionary-like API of the  class.  In
addition to uses in legacy code, this module can be useful in applications that
need to completely control the character sets used when encoding headers.
The remaining text in this section is the original documentation of the module.
RFC 2822 is the base standard that describes the format of email messages.
It derives from the older RFC 822 standard which came into widespread use at
a time when most email was composed of ASCII characters only.  RFC 2822 is a
specification written assuming email contains only 7-bit ASCII characters.
Of course, as email has been deployed worldwide, it has become
internationalized, such that language specific character sets can now be used in
email messages.  The base standard still requires email messages to be
transferred using only 7-bit ASCII characters, so a slew of RFCs have been
written describing how to encode email containing non-ASCII characters into
RFC 2822-compliant format. These RFCs include RFC 2045, RFC 2046,
RFC 2047, and RFC 2231. The  package supports these standards
in its  and  modules.
If you want to include non-ASCII characters in your email headers, say in the
Subject or To fields, you should use the
 class and assign the field in the 
object to an instance of  instead of using a string for the header
value.  Import the  class from the  module.
For example:


Notice here how we wanted the Subject field to contain a non-ASCII
character?  We did this by creating a  instance and passing in
the character set that the byte string was encoded in.  When the subsequent
 instance was flattened, the Subject
field was properly RFC 2047 encoded.  MIME-aware mail readers would show this
header using the embedded ISO-8859-1 character.
Here is the  class description:


class (s=None, charset=None, maxlinelen=None, header_name=None, continuation_ws=' ', errors='strict')¶
Create a MIME-compliant header that can contain strings in different character
sets.
Optional s is the initial header value.  If  (the default), the
initial header value is not set.  You can later append to the header with
 method calls.  s may be an instance of  or
, but see the  documentation for semantics.
Optional charset serves two purposes: it has the same meaning as the charset
argument to the  method.  It also sets the default character set
for all subsequent  calls that omit the charset argument.  If
charset is not provided in the constructor (the default), the 
character set is used both as s’s initial charset and as the default for
subsequent  calls.
The maximum line length can be specified explicitly via maxlinelen.  For
splitting the first line to a shorter value (to account for the field header
which isn’t included in s, e.g. Subject) pass in the name of the
field in header_name.  The default maxlinelen is 76, and the default value
for header_name is , meaning it is not taken into account for the
first line of a long, split header.
Optional continuation_ws must be RFC 2822-compliant folding
whitespace, and is usually either a space or a hard tab character.  This
character will be prepended to continuation lines.  continuation_ws
defaults to a single space character.
Optional errors is passed straight through to the  method.


(s, charset=None, errors='strict')¶
Append the string s to the MIME header.
Optional charset, if given, should be a 
instance (see ) or the name of a character set, which
will be converted to a  instance.  A value
of  (the default) means that the charset given in the constructor
is used.
s may be an instance of  or .  If it is an
instance of , then charset is the encoding of that byte
string, and a  will be raised if the string cannot be
decoded with that character set.
If s is an instance of , then charset is a hint specifying
the character set of the characters in the string.
In either case, when producing an RFC 2822-compliant header using
RFC 2047 rules, the string will be encoded using the output codec of
the charset.  If the string cannot be encoded using the output codec, a
UnicodeError will be raised.
Optional errors is passed as the errors argument to the decode call
if s is a byte string.



(splitchars=';, \t', maxlinelen=None, linesep='\n')¶
Encode a message header into an RFC-compliant format, possibly wrapping
long lines and encapsulating non-ASCII parts in base64 or quoted-printable
encodings.
Optional splitchars is a string containing characters which should be
given extra weight by the splitting algorithm during normal header
wrapping.  This is in very rough support of RFC 2822’s ‘higher level
syntactic breaks’:  split points preceded by a splitchar are preferred
during line splitting, with the characters preferred in the order in
which they appear in the string.  Space and tab may be included in the
string to indicate whether preference should be given to one over the
other as a split point when other split chars do not appear in the line
being split.  Splitchars does not affect RFC 2047 encoded lines.
maxlinelen, if given, overrides the instance’s value for the maximum
line length.
linesep specifies the characters used to separate the lines of the
folded header.  It defaults to the most useful value for Python
application code (), but  can be specified in order
to produce headers with RFC-compliant line separators.

Changed in version 3.2: Added the linesep argument.


The  class also provides a number of methods to support
standard operators and built-in functions.


()¶
Returns an approximation of the  as a string, using an
unlimited line length.  All pieces are converted to unicode using the
specified encoding and joined together appropriately.  Any pieces with a
charset of  are decoded as ASCII using the 
error handler.

Changed in version 3.2: Added handling for the  charset.




(other)¶
This method allows you to compare two  instances for
equality.



(other)¶
This method allows you to compare two  instances for
inequality.


The  module also provides the following convenient functions.


(header)¶
Decode a message header value without converting the character set. The header
value is in header.
This function returns a list of  pairs containing
each of the decoded parts of the header.  charset is  for non-encoded
parts of the header, otherwise a lower case string containing the name of the
character set specified in the encoded string.
Here’s an example:





(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' ')¶
Create a  instance from a sequence of pairs as returned by
.
 takes a header value string and returns a sequence of
pairs of the format  where charset is the name of
the character set.
This function takes one of those sequence of pairs and returns a
 instance.  Optional maxlinelen, header_name, and
continuation_ws are as in the  constructor.

