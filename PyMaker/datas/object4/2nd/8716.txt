link:
library/test.html

docs:


 — Regression tests package for Python¶

Note
The  package is meant for internal use by Python only. It is
documented for the benefit of the core developers of Python. Any use of
this package outside of Python’s standard library is discouraged as code
mentioned here can change or be removed without notice between releases of
Python.


The  package contains all regression tests for Python as well as the
modules  and .
 is used to enhance your tests while
 drives the testing suite.
Each module in the  package whose name starts with  is a
testing suite for a specific module or feature. All new tests should be written
using the  or  module.  Some older tests are
written using a “traditional” testing style that compares output printed to
; this style of test is considered deprecated.

See also

Module 
Writing PyUnit regression tests.
Module 
Tests embedded in documentation strings.



Writing Unit Tests for the  package¶
It is preferred that tests that use the  module follow a few
guidelines. One is to name the test module by starting it with  and end
it with the name of the module being tested. The test methods in the test module
should start with  and end with a description of what the method is
testing. This is needed so that the methods are recognized by the test driver as
test methods. Also, no documentation string for the method should be included. A
comment (such as ) should be used
to provide documentation for test methods. This is done because documentation
strings get printed out if they exist and thus what test is being run is not
stated.
A basic boilerplate is often used:


This code pattern allows the testing suite to be run by ,
on its own as a script that supports the  CLI, or via the
 CLI.
The goal for regression testing is to try to break code. This leads to a few
guidelines to be followed:

The testing suite should exercise all classes, functions, and constants. This
includes not just the external API that is to be presented to the outside
world but also “private” code.

Whitebox testing (examining the code being tested when the tests are being
written) is preferred. Blackbox testing (testing only the published user
interface) is not complete enough to make sure all boundary and edge cases
are tested.

Make sure all possible values are tested including invalid ones. This makes
sure that not only all valid values are acceptable but also that improper
values are handled correctly.

Exhaust as many code paths as possible. Test where branching occurs and thus
tailor input to make sure as many different paths through the code are taken.

Add an explicit test for any bugs discovered for the tested code. This will
make sure that the error does not crop up again if the code is changed in the
future.

Make sure to clean up after your tests (such as close and remove all temporary
files).

If a test is dependent on a specific condition of the operating system then
verify the condition already exists before attempting the test.

Import as few modules as possible and do it as soon as possible. This
minimizes external dependencies of tests and also minimizes possible anomalous
behavior from side-effects of importing a module.

Try to maximize code reuse. On occasion, tests will vary by something as small
as what type of input is used. Minimize code duplication by subclassing a
basic test class with a class that specifies the input:


When using this pattern, remember that all classes that inherit from
 are run as tests.  The  class in the example above
does not have any data and so can’t be run by itself, thus it does not
inherit from .



See also

Test Driven Development
A book by Kent Beck on writing tests before code.




Running tests using the command-line interface¶
The  package can be run as a script to drive Python’s regression
test suite, thanks to the  option: python -m test. Under
the hood, it uses ; the call python -m
test.regrtest used in previous Python versions still works.  Running the
script by itself automatically starts running all regression tests in the
 package. It does this by finding all modules in the package whose
name starts with , importing them, and executing the function
 if present or loading the tests via
unittest.TestLoader.loadTestsFromModule if  does not exist.  The
names of tests to execute may also be passed to the script. Specifying a single
regression test (python -m test test_spam) will minimize output and
only print whether the test passed or failed.
Running  directly allows what resources are available for
tests to use to be set. You do this by using the  command-line
option. Specifying  as the value for the  option enables all
possible resources: python -m test -uall.
If all but one resource is desired (a more common case), a
comma-separated list of resources that are not desired may be listed after
. The command python -m test -uall,-audio,-largefile
will run  with all resources except the  and
 resources. For a list of all resources and more command-line
options, run python -m test -h.
Some other ways to execute the regression tests depend on what platform the
tests are being executed on. On Unix, you can run make test at the
top-level directory where Python was built. On Windows,
executing rt.bat from your  directory will run all
regression tests.



 — Utilities for the Python test suite¶
The  module provides support for Python’s regression
test suite.

Note
 is not a public module.  It is documented here to help
Python developers write tests.  The API of this module is subject to change
without backwards compatibility concerns between releases.

This module defines the following exceptions:


exception ¶
Exception to be raised when a test fails. This is deprecated in favor of
-based tests and ’s assertion
methods.



exception ¶
Subclass of . Raised when a resource (such as a
network connection) is not available. Raised by the 
function.

The  module defines the following constants:


¶
 when verbose output is enabled. Should be checked when more
detailed information is desired about a running test. verbose is set by
.



¶
 if the running interpreter is Jython.



¶
 if the system is Android.



¶
Path for shell if not on Windows; otherwise .



¶
A non-ASCII character encodable by .



¶
Set to a name that is safe to use as the name of a temporary file.  Any
temporary file that is created should be closed and unlinked (removed).



¶
Set to a non-ASCII name for a temporary file.



¶
Set to .



¶
Set to a filename (str type) that should not be able to be encoded by file
system encoding in strict mode.  It may be  if it’s not possible to
generate such a filename.



¶
Set to a filename (bytes type) that should not be able to be decoded by
file system encoding in strict mode.  It may be  if it’s not
possible to generate such a filename.



¶
Set to a filename containing the  character.



¶
Set to  if IPV6 is enabled on this host,  otherwise.



¶
Set to .



¶
Set when tests can be skipped when they are not useful for PGO.



¶
A constant that is likely larger than the underlying OS pipe buffer size,
to make writes blocking.



¶
A constant that is likely larger than the underlying OS socket buffer size,
to make writes blocking.



¶
Set to the top level directory that contains .



¶
Set to the top level directory for the test package.



¶
Set to the  directory within the test package.



¶
Set to  for big memory tests.



¶
Set by  as the memory limit for big memory tests.
Limited by .



¶
Set by  as the memory limit for big memory tests.  Not
limited by .



¶
Return  if running on CPython, not on Windows, and configuration
not set with .



¶
Check for presence of docstrings.



¶
Define the URL of a dedicated HTTP server for the network tests.

The  module defines the following functions:


(module_name)¶
Remove the module named module_name from  and delete any
byte-compiled files of the module.



(name)¶
Delete name from .



(filename)¶
Call  on filename.  On Windows platforms, this is
wrapped with a wait loop that checks for the existence fo the file.



(filename)¶
Call  on filename.  On Windows platforms, this is
wrapped with a wait loop that checks for the existence of the file.



(path)¶
Call  on path or call  and
 to remove a path and its contents.  On Windows platforms,
this is wrapped with a wait loop that checks for the existence of the files.



(source)¶
Move a PEP 3147/488 pyc file to its legacy pyc location and return the file
system path to the legacy pyc file.  The source value is the file system
path to the source file.  It does not need to exist, however the PEP
3147/488 pyc file must exist.



(resource)¶
Return  if resource is enabled and available. The list of
available resources is only set when  is executing the
tests.



()¶
Return  if Python was not built with  or .



()¶
Return .



(resource, msg=None)¶
Raise  if resource is not available. msg is the
argument to  if it is raised. Always returns
 if called by a function whose  is .
Used when tests are executed by .



(f)¶
Raise  on TLS certification validation failures.



(dict)¶
Return a repr of dict with keys sorted.



(filename, subdir=None)¶
Return the path to the file named filename. If no match is found
filename is returned. This does not equal a failure since it could be the
path to the file.
Setting subdir indicates a relative path to use to find the file
rather than looking directly in the path directories.



(filename)¶
Create an empty file with filename.  If it already exists, truncate it.



()¶
Count the number of open file descriptors.



(test)¶
Match test to patterns set in .



(patterns)¶
Define match test with regular expression patterns.



(*classes)¶
Execute  subclasses passed to the function. The
function scans the classes for methods starting with the prefix 
and executes the tests individually.
It is also legal to pass strings as parameters; these should be keys in
. Each associated module will be scanned by
. This is usually seen in the
following  function:


This will run all tests defined in the named module.



(module, verbosity=None, optionflags=0)¶
Run  on the given module.  Return
.
If verbosity is ,  is run with verbosity
set to .  Otherwise, it is run with verbosity set to
.  optionflags is passed as  to
.



(interval)¶
Set the  to the given interval.  Defines
a minimum interval for Android systems to prevent the system from hanging.



(**guards)¶
Use this check to guard CPython’s implementation-specific tests or to
run them only on the implementations guarded by the arguments:





(*filters, quiet=True)¶
A convenience wrapper for  that makes it
easier to test that a warning was correctly raised.  It is approximately
equivalent to calling  with
 set to  and with the option to
automatically validate the results that are recorded.
 accepts 2-tuples of the form  as positional arguments. If one or more filters are
provided, or if the optional keyword argument quiet is ,
it checks to make sure the warnings are as expected:  each specified filter
must match at least one of the warnings raised by the enclosed code or the
test fails, and if any warnings are raised that do not match any of the
specified filters the test fails.  To disable the first of these checks,
set quiet to .
If no arguments are specified, it defaults to:


In this case all warnings are caught and no errors are raised.
On entry to the context manager, a  instance is
returned. The underlying warnings list from
 is available via the recorder object’s
 attribute.  As a convenience, the attributes of the object
representing the most recent warning can also be accessed directly through
the recorder object (see example below).  If no warning has been raised,
then any of the attributes that would otherwise be expected on an object
representing a warning will return .
The recorder object also has a  method, which clears the
warnings list.
The context manager is designed to be used like this:


In this case if either warning was not raised, or some other warning was
raised,  would raise an error.
When a test needs to look more deeply into the warnings, rather than
just checking whether or not they occurred, code like this can be used:


Here all warnings will be caught, and the test code tests the captured
warnings directly.

Changed in version 3.2: New optional arguments filters and quiet.




(testcase)¶
Context manager to check that no  was raised.  You
must remove the object which may emit  before the
end of the context manager.



(limit)¶
Set the values for  and  for big
memory tests.



(stdout)¶
Store the value from stdout.  It is meant to hold the stdout at the
time the regrtest began.



()¶
Return the original stdout set by  or
 if it’s not set.



(stderr)¶
Strip the stderr of a Python process from potential debug output
emitted by the interpreter.  This will typically be run on the result of
.



()¶
Return a list of command line arguments reproducing the current settings
in  and .



()¶
Return a list of command line arguments reproducing the current
optimization settings in .



()¶

()¶

()¶
A context managers that temporarily replaces the named stream with
 object.
Example use with output streams:


Example use with input stream:





(path=None, quiet=False)¶
A context manager that creates a temporary directory at path and
yields the directory.
If path is , the temporary directory is created using
.  If quiet is , the context manager
raises an exception on error.  Otherwise, if path is specified and
cannot be created, only a warning is issued.



(path, quiet=False)¶
A context manager that temporarily changes the current working
directory to path and yields the directory.
If quiet is , the context manager raises an exception
on error.  Otherwise, it issues only a warning and keeps the current
working directory the same.



(name='tempcwd', quiet=False)¶
A context manager that temporarily creates a new directory and
changes the current working directory (CWD).
The context manager creates a temporary directory in the current
directory with name name before temporarily changing the current
working directory.  If name is , the temporary directory is
created using .
If quiet is  and it is not possible to create or change
the CWD, an error is raised.  Otherwise, only a warning is raised
and the original CWD is used.



(umask)¶
A context manager that temporarily sets the process umask.



(resource_name, *, timeout=30.0, errnos=())¶
A context manager that raises  when various issues
with the internet connection manifest themselves as exceptions.



()¶
A context manager that replaces  with .



()¶
Force as many objects as possible to be collected.  This is needed because
timely deallocation is not guaranteed by the garbage collector.  This means
that  methods may be called later than expected and weakrefs
may remain alive for longer than expected.



()¶
A context manager that disables the garbage collector upon entry and
reenables it upon exit.



(obj, attr, new_val)¶
Context manager to swap out an attribute with a new object.
Usage:


This will set  to 5 for the duration of the  block,
restoring the old value at the end of the block.  If  doesn’t
exist on , it will be created and then deleted at the end of the
block.
The old value (or  if it doesn’t exist) will be assigned to the
target of the “as” clause, if there is one.



(obj, attr, new_val)¶
Context manager to swap out an item with a new object.
Usage:


This will set  to 5 for the duration of the  block,
restoring the old value at the end of the block. If  doesn’t
exist on , it will be created and then deleted at the end of the
block.
The old value (or  if it doesn’t exist) will be assigned to the
target of the “as” clause, if there is one.



(timeout=60.0)¶
Context manager to wait until all threads created in the  statement
exit.



(threads, unlock=None)¶
Context manager to start threads.  It attempts to join the threads upon
exit.



(fmt)¶
Return  for  or, if 
exists, .



(fmt)¶
Return  for  or, if 
exists, .



(test, o, size)¶
For testcase test, assert that the  for o plus the GC
header size equals size.



()¶
Return  if the OS supports symbolic links, 
otherwise.



()¶
Return  if the OS supports xattr, 
otherwise.



¶
A decorator for running tests that require support for symbolic links.



¶
A decorator for running tests that require support for xattr.



¶
A decorator for running tests that require a functional bind() for Unix
sockets.



(condition)¶
A decorator to conditionally mark tests with
. Any use of this decorator should
have an associated comment identifying the relevant tracker issue.



(catstr, *locales)¶
A decorator for running a function in a different locale, correctly
resetting it after it has finished.  catstr is the locale category as
a string (for example ).  The locales passed will be tried
sequentially, and the first valid locale will be used.



(tz)¶
A decorator for running a function in a specific timezone, correctly
resetting it after it has finished.



(*min_version)¶
Decorator for the minimum version when running test on FreeBSD.  If the
FreeBSD version is less than the minimum, raise .



(*min_version)¶
Decorator for the minimum version when running test on Linux.  If the
Linux version is less than the minimum, raise .



(*min_version)¶
Decorator for the minimum version when running test on Mac OS X.  If the
MAC OS X version is less than the minimum, raise .



¶
Decorator for skipping tests on non-IEEE 754 platforms.



¶
Decorator for skipping tests if  doesn’t exist.



¶
Decorator for skipping tests if  doesn’t exist.



¶
Decorator for skipping tests if  doesn’t exist.



¶
Decorator for skipping tests if  doesn’t exist.



(resource)¶
Decorator for skipping tests if resource is not available.



¶
Decorator for only running the test if .



(test)¶
Decorator for tests only applicable to CPython.



(msg=None, **guards)¶
Decorator for invoking  on guards.  If that
returns , then uses msg as the reason for skipping the test.



(func)¶
Decorator to temporarily turn off tracing for the duration of the test.



(test)¶
Decorator for tests which involve reference counting.  The decorator does
not run the test if it is not run by CPython.  Any trace function is unset
for the duration of the test to prevent unexpected refcounts caused by
the trace function.



(func)¶
Decorator to ensure the threads are cleaned up even if the test fails.



(size, memuse, dry_run=True)¶
Decorator for bigmem tests.
size is a requested size for the test (in arbitrary, test-interpreted
units.)  memuse is the number of bytes per unit for the test, or a good
estimate of it.  For example, a test that needs two byte buffers, of 4 GiB
each, could be decorated with .
The size argument is normally passed to the decorated test method as an
extra argument.  If dry_run is , the value passed to the test
method may be less than the requested value.  If dry_run is , it
means the test doesn’t support dummy runs when  is not specified.



(f)¶
Decorator for tests that fill the address space.  f is the function to
wrap.



()¶
Create an invalid file descriptor by opening and closing a temporary file,
and returning its descriptor.



(testcase, statement, errtext='', *, lineno=None, offset=None)¶
Test for syntax errors in statement by attempting to compile statement.
testcase is the  instance for the test.  errtext is the
text of the error raised by .  If lineno is not None,
compares to the line of the .  If offset is not None,
compares to the offset of the .



(url, *args, **kw)¶
Open url.  If open fails, raises .



(name, deprecated=False, *, required_on())¶
This function imports and returns the named module. Unlike a normal
import, this function raises  if the module
cannot be imported.
Module and package deprecation messages are suppressed during this import
if deprecated is .  If a module is required on a platform but
optional for others, set required_on to an iterable of platform prefixes
which will be compared against .

New in version 3.1.




(name, fresh=(), blocked=(), deprecated=False)¶
This function imports and returns a fresh copy of the named Python module
by removing the named module from  before doing the import.
Note that unlike , the original module is not affected by
this operation.
fresh is an iterable of additional module names that are also removed
from the  cache before doing the import.
blocked is an iterable of module names that are replaced with 
in the module cache during the import to ensure that attempts to import
them raise .
The named module and any modules named in the fresh and blocked
parameters are saved before starting the import and then reinserted into
 when the fresh import is complete.
Module and package deprecation messages are suppressed during this import
if deprecated is .
This function will raise  if the named module cannot be
imported.
Example use:



New in version 3.1.




()¶
Return a copy of .



(oldmodules)¶
Remove modules except for oldmodules and  in order to
preserve internal cache.



()¶
Return current thread count and copy of dangling threads.



(*original_values)¶
Cleanup up threads not specified in original_values.  Designed to emit
a warning if a test leaves running threads in the background.



(thread, timeout=30.0)¶
Join a thread within timeout.  Raise an  if thread
is still alive after timeout seconds.



()¶
Use this at the end of  whenever sub-processes are started.
This will help ensure that no extra children (zombies) stick around to
hog resources and create problems when looking for refleaks.



(obj, name)¶
Get an attribute, raising  if 
is raised.



(sock, host=HOST)¶
Bind the socket to a free port and return the port number.  Relies on
ephemeral ports in order to ensure we are using an unbound port.  This is
important as many tests may be running simultaneously, especially in a
buildbot environment.  This method raises an exception if the
 is  and  is
, and the socket has
 or  set on it.
Tests should never set these socket options for TCP/IP sockets.
The only case for setting these options is testing multicasting via
multiple UDP sockets.
Additionally, if the  socket option is
available (i.e. on Windows), it will be set on the socket.  This will
prevent anyone else from binding to our host/port for the duration of the
test.



(sock, addr)¶
Bind a unix socket, raising  if
 is raised.



(family=socket.AF_INET, socktype=socket.SOCK_STREAM)¶
Returns an unused port that should be suitable for binding.  This is
achieved by creating a temporary socket with the same family and type as
the  parameter (default is ,
),
and binding it to the specified host address (defaults to )
with the port set to 0, eliciting an unused ephemeral port from the OS.
The temporary socket is then closed and deleted, and the ephemeral port is
returned.
Either this method or  should be used for any tests
where a server socket needs to be bound to a particular port for the
duration of the test.
Which one to use depends on whether the calling code is creating a Python
socket, or if an unused port needs to be provided in a constructor
or passed to an external program (i.e. the  argument to
openssl’s s_server mode).  Always prefer  over
 where possible.  Using a hard coded port is
discouraged since it can make multiple instances of the test impossible to
run simultaneously, which is a problem for buildbots.



(pkg_dir, loader, standard_tests, pattern)¶
Generic implementation of the   protocol for
use in test packages.  pkg_dir is the root directory of the package;
loader, standard_tests, and pattern are the arguments expected by
.  In simple cases, the test package’s 
can be the following:





(directory)¶
Return  if the file system for directory is case-insensitive.



(ref_api, other_api, *, ignore=())¶
Returns the set of attributes, functions or methods of ref_api not
found on other_api, except for a defined list of items to be
ignored in this check specified in ignore.
By default this skips private attributes beginning with ‘_’ but
includes all magic methods, i.e. those starting and ending in ‘__’.

New in version 3.5.




(test_instance, object_to_patch, attr_name, new_value)¶
Override object_to_patch.attr_name with new_value.  Also add
cleanup procedure to test_instance to restore object_to_patch for
attr_name.  The attr_name should be a valid attribute for
object_to_patch.



(code)¶
Run code in subinterpreter.  Raise  if
 is enabled.



(test, iter, cls, args=())¶
Assert that iter is deallocated after iterating.



(cmd_names=[])¶
Check for the existence of the compiler executables whose names are listed
in cmd_names or all the compiler executables when cmd_names is empty
and return the first missing executable or  when none is found
missing.



(test_case, module, name_of_module=None, extra=(), blacklist=())¶
Assert that the  variable of module contains all public names.
The module’s public names (its API) are detected automatically
based on whether they match the public name convention and were defined in
module.
The name_of_module argument can specify (as a string or tuple thereof) what
module(s) an API could be defined in order to be detected as a public
API. One case for this is when module imports part of its public API from
other modules, possibly a C backend (like  and its ).
The extra argument can be a set of names that wouldn’t otherwise be automatically
detected as “public”, like objects without a proper 
attribute. If provided, it will be added to the automatically detected ones.
The blacklist argument can be a set of names that must not be treated as part of
the public API even though their names indicate otherwise.
Example use:



New in version 3.6.


The  module defines the following classes:


class (exc, **kwargs)¶
Instances are a context manager that raises  if the
specified exception type is raised.  Any keyword arguments are treated as
attribute/value pairs to be compared against any exception raised within the
 statement.  Only if all pairs match properly against
attributes on the exception is  raised.



class ¶
Class used to temporarily set or unset environment variables.  Instances can
be used as a context manager and have a complete dictionary interface for
querying/modifying the underlying . After exit from the
context manager all changes to environment variables done through this
instance will be rolled back.

Changed in version 3.1: Added dictionary interface.




(envvar, value)¶
Temporarily set the environment variable  to the value of
.



(envvar)¶
Temporarily unset the environment variable .



class ¶
A context manager used to try to prevent crash dialog popups on tests that
are expected to crash a subprocess.
On Windows, it disables Windows Error Reporting dialogs using
SetErrorMode.
On UNIX,  is used to set
’s soft limit to 0 to prevent coredump file
creation.
On both platforms, the old value is restored by .



class (*module_names)¶
A context manager to force import to return a new module reference.  This
is useful for testing module-level behaviors, such as the emission of a
DeprecationWarning on import.  Example usage:





class (*paths)¶
A context manager to temporarily add directories to sys.path.
This makes a copy of , appends any directories given
as positional arguments, then reverts  to the copied
settings when the context ends.
Note that all  modifications in the body of the
context manager, including replacement of the object,
will be reverted at the end of the block.



class ¶
Class to save and restore signal handlers registered by the Python signal
handler.



class ¶


(self, d, **kwargs)¶
Try to match a single dict with the supplied arguments.



(self, k, dv, v)¶
Try to match a single stored value (dv) with a supplied value (v).




class ¶
Class used to record warnings for unit tests. See documentation of
 above for more details.



class ¶


(test)¶
Run test and return the result.




class (logging.handlers.BufferingHandler)¶
Class for logging support.



class (path)¶
Simple path-like object.  It implements the 
method which just returns the path argument.  If path is an exception,
it will be raised in .



 — Utilities for the Python execution tests¶
The  module provides support for Python’s
script execution tests.


()¶
Return  if  requires environment
variables in order to be able to run at all.
This is designed to be used with  to annotate tests
that need to use an  function to launch an isolated
mode () or no environment mode () sub-interpreter process.
A normal build & test does not run into this situation but it can happen
when trying to run the standard library test suite from an interpreter that
doesn’t have an obvious home with Python’s current home finding logic.
Setting  is one way to get most of the testsuite to run
in that situation.   or  are
other common environment variables that might impact whether or not the
interpreter can start.



(*args, **env_vars)¶
Set up the environment based on env_vars for running the interpreter
in a subprocess.  The values can include , ,
, and .



(*args, **env_vars)¶
Assert that running the interpreter with args and optional environment
variables env_vars succeeds () and return a  tuple.
If the  keyword is set, env_vars is used as a fresh
environment.
Python is started in isolated mode (command line option ),
except if the  keyword is set to .



(*args, **env_vars)¶
Assert that running the interpreter with args and optional environment
variables env_vars fails () and return a  tuple.
See  for more options.



(*args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, **kw)¶
Run a Python subprocess with the given arguments.
kw is extra keyword args to pass to . Returns a
 object.



(p)¶
Run the given  process until completion and return
stdout.



(script_dir, script_basename, source, omit_suffix=False)¶
Create script containing source in path script_dir and script_basename.
If omit_suffix is , append  to the name.  Return the full
script path.



(zip_dir, zip_basename, script_name, name_in_zip=None)¶
Create zip file at zip_dir and zip_basename with extension  which
contains the files in script_name. name_in_zip is the archive name.
Return a tuple containing .



(pkg_dir, init_source='')¶
Create a directory named pkg_dir containing an  file with
init_source as its contents.



(zip_dir, zip_basename, pkg_name, script_basename, source, depth=1, compiled=False)¶
Create a zip package directory with a path of zip_dir and zip_basename
containing an empty  file and a file script_basename
containing the source.  If compiled is , both source files will
be compiled and added to the zip package.  Return a tuple of the full zip
path and the archive name for the zip file.


