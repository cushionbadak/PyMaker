link:
library/ast.html#node-classes

docs:

Node classes¶


class ¶
This is the base of all AST node classes.  The actual node classes are
derived from the  file, which is reproduced
below.  They are defined in the  C
module and re-exported in .
There is one class defined for each left-hand side symbol in the abstract
grammar (for example,  or ).  In addition,
there is one class defined for each constructor on the right-hand side; these
classes inherit from the classes for the left-hand side trees.  For example,
 inherits from .  For production rules
with alternatives (aka “sums”), the left-hand side class is abstract: only
instances of specific constructor nodes are ever created.


¶
Each concrete class has an attribute  which gives the names
of all child nodes.
Each instance of a concrete class has one attribute for each child node,
of the type as defined in the grammar.  For example, 
instances have an attribute  of type .
If these attributes are marked as optional in the grammar (using a
question mark), the value might be .  If the attributes can have
zero-or-more values (marked with an asterisk), the values are represented
as Python lists.  All possible attributes must be present and have valid
values when compiling an AST with .



¶

¶
Instances of  and  subclasses have
 and  attributes.  The  is
the line number of source text (1-indexed so the first line is line 1) and
the  is the UTF-8 byte offset of the first token that
generated the node.  The UTF-8 offset is recorded because the parser uses
UTF-8 internally.

The constructor of a class  parses its arguments as follows:

If there are positional arguments, there must be as many as there are items
in ; they will be assigned as attributes of these names.
If there are keyword arguments, they will set the attributes of the same
names to the given values.

For example, to create and populate an  node, you could
use


or the more compact



