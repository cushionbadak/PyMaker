link:
library/datetime.html

docs:


 — Basic date and time types¶
Source code: Lib/datetime.py

The  module supplies classes for manipulating dates and times in
both simple and complex ways.  While date and time arithmetic is supported, the
focus of the implementation is on efficient attribute extraction for output
formatting and manipulation. For related functionality, see also the
 and  modules.
There are two kinds of date and time objects: “naive” and “aware”.
An aware object has sufficient knowledge of applicable algorithmic and
political time adjustments, such as time zone and daylight saving time
information, to locate itself relative to other aware objects.  An aware object
is used to represent a specific moment in time that is not open to
interpretation [1].
A naive object does not contain enough information to unambiguously locate
itself relative to other date/time objects.  Whether a naive object represents
Coordinated Universal Time (UTC), local time, or time in some other timezone is
purely up to the program, just like it is up to the program whether a
particular number represents metres, miles, or mass.  Naive objects are easy to
understand and to work with, at the cost of ignoring some aspects of reality.
For applications requiring aware objects,  and 
objects have an optional time zone information attribute, , that
can be set to an instance of a subclass of the abstract  class.
These  objects capture information about the offset from UTC
time, the time zone name, and whether Daylight Saving Time is in effect.  Note
that only one concrete  class, the  class, is
supplied by the  module.  The  class can
represent simple timezones with fixed offset from UTC, such as UTC itself or
North American EST and EDT timezones.  Supporting timezones at deeper levels of
detail is up to the application.  The rules for time adjustment across the
world are more political than rational, change frequently, and there is no
standard suitable for every application aside from UTC.
The  module exports the following constants:


¶
The smallest year number allowed in a  or  object.
 is .



¶
The largest year number allowed in a  or  object.
 is .


See also

Module 
General calendar related functions.
Module 
Time access and conversions.



Available Types¶


class 
An idealized naive date, assuming the current Gregorian calendar always was, and
always will be, in effect. Attributes: , , and
.



class 
An idealized time, independent of any particular day, assuming that every day
has exactly 24*60*60 seconds (there is no notion of “leap seconds” here).
Attributes: , , , ,
and .



class 
A combination of a date and a time. Attributes: , ,
, , , , ,
and .



class 
A duration expressing the difference between two , ,
or  instances to microsecond resolution.



class 
An abstract base class for time zone information objects.  These are used by the
 and  classes to provide a customizable notion of
time adjustment (for example, to account for time zone and/or daylight saving
time).



class 
A class that implements the  abstract base class as a
fixed offset from the UTC.

New in version 3.2.


Objects of these types are immutable.
Objects of the  type are always naive.
An object of type  or  may be naive or aware.
A  object d is aware if  is not  and
 does not return .  If  is
, or if  is not  but 
returns , d is naive.  A  object t is aware
if  is not  and  does not return
.  Otherwise, t is naive.
The distinction between naive and aware doesn’t apply to 
objects.
Subclass relationships:




 Objects¶
A  object represents a duration, the difference between two
dates or times.


class (days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)¶
All arguments are optional and default to .  Arguments may be integers
or floats, and may be positive or negative.
Only days, seconds and microseconds are stored internally.  Arguments are
converted to those units:

A millisecond is converted to 1000 microseconds.
A minute is converted to 60 seconds.
An hour is converted to 3600 seconds.
A week is converted to 7 days.

and days, seconds and microseconds are then normalized so that the
representation is unique, with


 (the number of seconds in one day)


If any argument is a float and there are fractional microseconds,
the fractional microseconds left over from all arguments are
combined and their sum is rounded to the nearest microsecond using
round-half-to-even tiebreaker.  If no argument is a float, the
conversion and normalization processes are exact (no information is
lost).
If the normalized value of days lies outside the indicated range,
 is raised.
Note that normalization of negative values may be surprising at first. For
example,



Class attributes are:


¶
The most negative  object, .



¶
The most positive  object, .



¶
The smallest possible difference between non-equal  objects,
.

Note that, because of normalization,  > .
 is not representable as a  object.
Instance attributes (read-only):






Attribute
Value




Between -999999999 and 999999999 inclusive


Between 0 and 86399 inclusive


Between 0 and 999999 inclusive



Supported operations:






Operation
Result




Sum of t2 and t3. Afterwards t1-t2 ==
t3 and t1-t3 == t2 are true. (1)


Difference of t2 and t3. Afterwards t1
== t2 - t3 and t2 == t1 + t3 are
true. (1)(6)


Delta multiplied by an integer.
Afterwards t1 // i == t2 is true,
provided .

 
In general, t1 * i == t1 * (i-1) + t1
is true. (1)


Delta multiplied by a float. The result is
rounded to the nearest multiple of
timedelta.resolution using round-half-to-even.


Division (3) of overall duration t2 by
interval unit t3. Returns a 
object.


Delta divided by a float or an int. The result
is rounded to the nearest multiple of
timedelta.resolution using round-half-to-even.

 or

The floor is computed and the remainder (if
any) is thrown away.  In the second case, an
integer is returned. (3)


The remainder is computed as a
 object. (3)


Computes the quotient and the remainder:
 (3) and .
q is an integer and r is a 
object.


Returns a  object with the
same value. (2)


equivalent to
(-t1.days,
-t1.seconds, -t1.microseconds),
and to t1* -1. (1)(4)


equivalent to +t when , and
to -t when . (2)


Returns a string in the form
, where D
is negative for negative . (5)


Returns a string representation of the
 object as a constructor
call with canonical attribute values.



Notes:

This is exact, but may overflow.

This is exact, and cannot overflow.

Division by 0 raises .

-timedelta.max is not representable as a  object.

String representations of  objects are normalized
similarly to their internal representation.  This leads to somewhat
unusual results for negative timedeltas.  For example:



The expression  will always be equal to the expression  except
when t3 is equal to ; in that case the former will produce a result
while the latter will overflow.


In addition to the operations listed above  objects support
certain additions and subtractions with  and 
objects (see below).

Changed in version 3.2: Floor division and true division of a  object by another
 object are now supported, as are remainder operations and
the  function.  True division and multiplication of a
 object by a  object are now supported.

Comparisons of  objects are supported with the
 object representing the smaller duration considered to be the
smaller timedelta. In order to stop mixed-type comparisons from falling back to
the default comparison by object address, when a  object is
compared to an object of a different type,  is raised unless the
comparison is  or .  The latter cases return  or
, respectively.
 objects are hashable (usable as dictionary keys), support
efficient pickling, and in Boolean contexts, a  object is
considered to be true if and only if it isn’t equal to .
Instance methods:


()¶
Return the total number of seconds contained in the duration. Equivalent to
. For interval units other than seconds, use the
division form directly (e.g. ).
Note that for very large time intervals (greater than 270 years on
most platforms) this method will lose microsecond accuracy.

New in version 3.2.


Example usage:




 Objects¶
A  object represents a date (year, month and day) in an idealized
calendar, the current Gregorian calendar indefinitely extended in both
directions.  January 1 of year 1 is called day number 1, January 2 of year 1 is
called day number 2, and so on.  This matches the definition of the “proleptic
Gregorian” calendar in Dershowitz and Reingold’s book Calendrical Calculations,
where it’s the base calendar for all computations.  See the book for algorithms
for converting between proleptic Gregorian ordinals and many other calendar
systems.


class (year, month, day)¶
All arguments are required.  Arguments may be integers, in the following
ranges:





If an argument outside those ranges is given,  is raised.

Other constructors, all class methods:


classmethod ()¶
Return the current local date.  This is equivalent to
.



classmethod (timestamp)¶
Return the local date corresponding to the POSIX timestamp, such as is returned
by .  This may raise , if the timestamp is out
of the range of values supported by the platform C  function,
and  on  failure.
It’s common for this to be restricted to years from 1970 through 2038.  Note
that on non-POSIX systems that include leap seconds in their notion of a
timestamp, leap seconds are ignored by .

Changed in version 3.3: Raise  instead of  if the timestamp
is out of the range of values supported by the platform C
 function. Raise  instead of
 on  failure.




classmethod (ordinal)¶
Return the date corresponding to the proleptic Gregorian ordinal, where January
1 of year 1 has ordinal 1.   is raised unless . For any date d, .



classmethod (date_string)¶
Return a  corresponding to a date_string in the format emitted
by . Specifically, this function supports strings in
the format(s) .

Caution
This does not support parsing arbitrary ISO 8601 strings - it is only intended
as the inverse operation of .


New in version 3.7.


Class attributes:


¶
The earliest representable date, .



¶
The latest representable date, .



¶
The smallest possible difference between non-equal date objects,
.

Instance attributes (read-only):


¶
Between  and  inclusive.



¶
Between 1 and 12 inclusive.



¶
Between 1 and the number of days in the given month of the given year.

Supported operations:






Operation
Result




date2 is  days removed
from date1.  (1)


Computes date2 such that . (2)


(3)


date1 is considered less than date2 when
date1 precedes date2 in time. (4)



Notes:

date2 is moved forward in time if , or backward if
.  Afterward .
 and  are ignored.
 is raised if  would be smaller than
 or larger than .
 and  are ignored.
This is exact, and cannot overflow.  timedelta.seconds and
timedelta.microseconds are 0, and date2 + timedelta == date1 after.
In other words,  if and only if . Date comparison raises  if
the other comparand isn’t also a  object. However,
 is returned instead if the other comparand has a
 attribute.  This hook gives other kinds of date objects a
chance at implementing mixed-type comparison. If not, when a 
object is compared to an object of a different type,  is raised
unless the comparison is  or .  The latter cases return
 or , respectively.

Dates can be used as dictionary keys. In Boolean contexts, all 
objects are considered to be true.
Instance methods:


(year=self.year, month=self.month, day=self.day)¶
Return a date with the same value, except for those parameters given new
values by whichever keyword arguments are specified.  For example, if , then .



()¶
Return a  such as returned by .
The hours, minutes and seconds are 0, and the DST flag is -1. 
is equivalent to , where  is the day number within the current year starting with
 for January 1st.



()¶
Return the proleptic Gregorian ordinal of the date, where January 1 of year 1
has ordinal 1.  For any  object d,
.



()¶
Return the day of the week as an integer, where Monday is 0 and Sunday is 6.
For example, , a Wednesday. See also
.



()¶
Return the day of the week as an integer, where Monday is 1 and Sunday is 7.
For example, , a Wednesday. See also
, .



()¶
Return a 3-tuple, (ISO year, ISO week number, ISO weekday).
The ISO calendar is a widely used variant of the Gregorian calendar. See
https://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm for a good
explanation.
The ISO year consists of 52 or 53 full weeks, and where a week starts on a
Monday and ends on a Sunday.  The first week of an ISO year is the first
(Gregorian) calendar week of a year containing a Thursday. This is called week
number 1, and the ISO year of that Thursday is the same as its Gregorian year.
For example, 2004 begins on a Thursday, so the first week of ISO year 2004
begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that
 and .



()¶
Return a string representing the date in ISO 8601 format, ‘YYYY-MM-DD’.  For
example, .



()¶
For a date d,  is equivalent to .



()¶
Return a string representing the date, for example .  is equivalent to
 on platforms where the native C
 function (which  invokes, but which
 does not invoke) conforms to the C standard.



(format)¶
Return a string representing the date, controlled by an explicit format string.
Format codes referring to hours, minutes or seconds will see 0 values. For a
complete list of formatting directives, see
strftime() and strptime() Behavior.



(format)¶
Same as . This makes it possible to specify a format
string for a  object in formatted string
literals and when using . For a
complete list of formatting directives, see
strftime() and strptime() Behavior.

Example of counting days to an event:


Example of working with :




 Objects¶
A  object is a single object containing all the information
from a  object and a  object.  Like a 
object,  assumes the current Gregorian calendar extended in
both directions; like a time object,  assumes there are exactly
3600*24 seconds in every day.
Constructor:


class (year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)¶
The year, month and day arguments are required.  tzinfo may be , or an
instance of a  subclass.  The remaining arguments may be integers,
in the following ranges:

,
,
,
,
,
,
,
.

If an argument outside those ranges is given,  is raised.

New in version 3.6: Added the  argument.


Other constructors, all class methods:


classmethod ()¶
Return the current local datetime, with  . This is
equivalent to . See also ,
.



classmethod (tz=None)¶
Return the current local date and time.  If optional argument tz is 
or not specified, this is like , but, if possible, supplies more
precision than can be gotten from going through a  timestamp
(for example, this may be possible on platforms supplying the C
 function).
If tz is not , it must be an instance of a  subclass, and the
current date and time are converted to tz’s time zone.  In this case the
result is equivalent to .
See also , .



classmethod ()¶
Return the current UTC date and time, with  . This is like
, but returns the current UTC date and time, as a naive
 object.  An aware current UTC datetime can be obtained by
calling .  See also .



classmethod (timestamp, tz=None)¶
Return the local date and time corresponding to the POSIX timestamp, such as is
returned by . If optional argument tz is  or not
specified, the timestamp is converted to the platform’s local date and time, and
the returned  object is naive.
If tz is not , it must be an instance of a  subclass, and the
timestamp is converted to tz’s time zone.  In this case the result is
equivalent to
.
 may raise , if the timestamp is out of
the range of values supported by the platform C  or
 functions, and  on  or
 failure.
It’s common for this to be restricted to years in
1970 through 2038. Note that on non-POSIX systems that include leap seconds in
their notion of a timestamp, leap seconds are ignored by ,
and then it’s possible to have two timestamps differing by a second that yield
identical  objects. See also .

Changed in version 3.3: Raise  instead of  if the timestamp
is out of the range of values supported by the platform C
 or  functions. Raise 
instead of  on  or 
failure.


Changed in version 3.6:  may return instances with  set to 1.




classmethod (timestamp)¶
Return the UTC  corresponding to the POSIX timestamp, with
 . This may raise , if the timestamp is
out of the range of values supported by the platform C  function,
and  on  failure.
It’s common for this to be restricted to years in 1970 through 2038.
To get an aware  object, call :


On the POSIX compliant platforms, it is equivalent to the following
expression:


except the latter formula always supports the full years range: between
 and  inclusive.

Changed in version 3.3: Raise  instead of  if the timestamp
is out of the range of values supported by the platform C
 function. Raise  instead of
 on  failure.




classmethod (ordinal)¶
Return the  corresponding to the proleptic Gregorian ordinal,
where January 1 of year 1 has ordinal 1.  is raised unless .  The hour, minute, second and
microsecond of the result are all 0, and  is .



classmethod (date, time, tzinfo=self.tzinfo)¶
Return a new  object whose date components are equal to the
given  object’s, and whose time components
are equal to the given  object’s.  If the tzinfo
argument is provided, its value is used to set the  attribute
of the result, otherwise the  attribute of the time argument
is used.
For any  object d,
.  If date is a
 object, its time components and  attributes
are ignored.

Changed in version 3.6: Added the tzinfo argument.




classmethod (date_string)¶
Return a  corresponding to a date_string in one of the
formats emitted by  and .
Specifically, this function supports strings in the format(s)
,
where  can match any single character.

Caution
This does not support parsing arbitrary ISO 8601 strings - it is only intended
as the inverse operation of .


New in version 3.7.




classmethod (date_string, format)¶
Return a  corresponding to date_string, parsed according to
format.  This is equivalent to .  is raised if the date_string and format
can’t be parsed by  or if it returns a value which isn’t a
time tuple. For a complete list of formatting directives, see
strftime() and strptime() Behavior.

Class attributes:


¶
The earliest representable , .



¶
The latest representable , .



¶
The smallest possible difference between non-equal  objects,
.

Instance attributes (read-only):


¶
Between  and  inclusive.



¶
Between 1 and 12 inclusive.



¶
Between 1 and the number of days in the given month of the given year.



¶
In .



¶
In .



¶
In .



¶
In .



¶
The object passed as the tzinfo argument to the  constructor,
or  if none was passed.



¶
In .  Used to disambiguate wall times during a repeated interval.  (A
repeated interval occurs when clocks are rolled back at the end of daylight saving
time or when the UTC offset for the current zone is decreased for political reasons.)
The value 0 (1) represents the earlier (later) of the two moments with the same wall
time representation.

New in version 3.6.


Supported operations:






Operation
Result




(1)


(2)


(3)


Compares  to
. (4)




datetime2 is a duration of timedelta removed from datetime1, moving forward in
time if  > 0, or backward if  < 0.  The
result has the same  attribute as the input datetime, and
datetime2 - datetime1 == timedelta after.  is raised if
datetime2.year would be smaller than  or larger than
. Note that no time zone adjustments are done even if the
input is an aware object.

Computes the datetime2 such that datetime2 + timedelta == datetime1. As for
addition, the result has the same  attribute as the input
datetime, and no time zone adjustments are done even if the input is aware.

Subtraction of a  from a  is defined only if
both operands are naive, or if both are aware.  If one is aware and the other is
naive,  is raised.
If both are naive, or both are aware and have the same  attribute,
the  attributes are ignored, and the result is a 
object t such that .  No time zone adjustments
are done in this case.
If both are aware and have different  attributes,  acts
as if a and b were first converted to naive UTC datetimes first.  The
result is  except that the implementation never overflows.

datetime1 is considered less than datetime2 when datetime1 precedes
datetime2 in time.
If one comparand is naive and the other is aware, 
is raised if an order comparison is attempted.  For equality
comparisons, naive instances are never equal to aware instances.
If both comparands are aware, and have the same  attribute, the
common  attribute is ignored and the base datetimes are
compared.  If both comparands are aware and have different 
attributes, the comparands are first adjusted by subtracting their UTC
offsets (obtained from ).

Changed in version 3.3: Equality comparisons between naive and aware 
instances don’t raise .


Note
In order to stop comparison from falling back to the default scheme of comparing
object addresses, datetime comparison normally raises  if the
other comparand isn’t also a  object.  However,
 is returned instead if the other comparand has a
 attribute.  This hook gives other kinds of date objects a
chance at implementing mixed-type comparison.  If not, when a 
object is compared to an object of a different type,  is raised
unless the comparison is  or .  The latter cases return
 or , respectively.



 objects can be used as dictionary keys. In Boolean contexts,
all  objects are considered to be true.
Instance methods:


()¶
Return  object with same year, month and day.



()¶
Return  object with same hour, minute, second, microsecond and fold.
 is .  See also method .

Changed in version 3.6: The fold value is copied to the returned  object.




()¶
Return  object with same hour, minute, second, microsecond, fold, and
tzinfo attributes.  See also method .

Changed in version 3.6: The fold value is copied to the returned  object.




(year=self.year, month=self.month, day=self.day, hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0)¶
Return a datetime with the same attributes, except for those attributes given
new values by whichever keyword arguments are specified.  Note that
 can be specified to create a naive datetime from an aware
datetime with no conversion of date and time data.

New in version 3.6: Added the  argument.




(tz=None)¶
Return a  object with new  attribute tz,
adjusting the date and time data so the result is the same UTC time as
self, but in tz’s local time.
If provided, tz must be an instance of a  subclass, and its
 and  methods must not return .  If self
is naive, it is presumed to represent time in the system timezone.
If called without arguments (or with ) the system local
timezone is assumed for the target timezone.  The  attribute of the converted
datetime instance will be set to an instance of 
with the zone name and offset obtained from the OS.
If  is tz,  is equal to self:  no
adjustment of date or time data is performed. Else the result is local
time in the timezone tz, representing the same UTC time as self:  after
,  will have
the same date and time data as .
If you merely want to attach a time zone object tz to a datetime dt without
adjustment of date and time data, use .  If you
merely want to remove the time zone object from an aware datetime dt without
conversion of date and time data, use .
Note that the default  method can be overridden in a
 subclass to affect the result returned by .
Ignoring error cases,  acts like:



Changed in version 3.3: tz now can be omitted.


Changed in version 3.6: The  method can now be called on naive instances that
are presumed to represent system local time.




()¶
If  is , returns , else returns
, and raises an exception if the latter doesn’t
return  or a  object with magnitude less than one day.

Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes.




()¶
If  is , returns , else returns
, and raises an exception if the latter doesn’t return
 or a  object with magnitude less than one day.

Changed in version 3.7: The DST offset is not restricted to a whole number of minutes.




()¶
If  is , returns , else returns
, raises an exception if the latter doesn’t return
 or a string object,



()¶
Return a  such as returned by .
 is equivalent to , where  is the day number within
the current year starting with  for January 1st. The  flag
of the result is set according to the  method:  is
 or  returns ,  is set to ;
else if  returns a non-zero value,  is set to ;
else  is set to .



()¶
If  instance d is naive, this is the same as
 except that  is forced to 0 regardless of what
 returns.  DST is never in effect for a UTC time.
If d is aware, d is normalized to UTC time, by subtracting
, and a  for the
normalized time is returned.   is forced to 0. Note
that an  may be raised if d.year was
 or  and UTC adjustment spills over a year
boundary.



()¶
Return the proleptic Gregorian ordinal of the date.  The same as
.



()¶
Return POSIX timestamp corresponding to the 
instance.  The return value is a  similar to that
returned by .
Naive  instances are assumed to represent local
time and this method relies on the platform C 
function to perform the conversion.  Since 
supports wider range of values than  on many
platforms, this method may raise  for times far
in the past or far in the future.
For aware  instances, the return value is computed
as:



New in version 3.3.


Changed in version 3.6: The  method uses the  attribute to
disambiguate the times during a repeated interval.


Note
There is no method to obtain the POSIX timestamp directly from a
naive  instance representing UTC time.  If your
application uses this convention and your system timezone is not
set to UTC, you can obtain the POSIX timestamp by supplying
:


or by calculating the timestamp directly:






()¶
Return the day of the week as an integer, where Monday is 0 and Sunday is 6.
The same as . See also .



()¶
Return the day of the week as an integer, where Monday is 1 and Sunday is 7.
The same as . See also ,
.



()¶
Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The same as
.



(sep='T', timespec='auto')¶
Return a string representing the date and time in ISO 8601 format,
YYYY-MM-DDTHH:MM:SS.ffffff or, if  is 0,
YYYY-MM-DDTHH:MM:SS
If  does not return , a string is
appended, giving the UTC offset:
YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]] or, if 
is 0 YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]].
The optional argument sep (default ) is a one-character separator,
placed between the date and time portions of the result.  For example,


The optional argument timespec specifies the number of additional
components of the time to include (the default is ).
It can be one of the following:

: Same as  if  is 0,
same as  otherwise.
: Include the  in the two-digit HH format.
: Include  and  in HH:MM format.
: Include , , and 
in HH:MM:SS format.
: Include full time, but truncate fractional second
part to milliseconds. HH:MM:SS.sss format.
: Include full time in HH:MM:SS.ffffff format.


Note
Excluded time components are truncated, not rounded.

 will be raised on an invalid timespec argument.



New in version 3.6: Added the timespec argument.




()¶
For a  instance d,  is equivalent to
.



()¶
Return a string representing the date and time, for example .  is
equivalent to  on platforms where the
native C  function (which  invokes, but which
 does not invoke) conforms to the C standard.



(format)¶
Return a string representing the date and time, controlled by an explicit format
string.  For a complete list of formatting directives, see
strftime() and strptime() Behavior.



(format)¶
Same as .  This makes it possible to specify a format
string for a  object in formatted string
literals and when using .  For a
complete list of formatting directives, see
strftime() and strptime() Behavior.

Examples of working with datetime objects:


Using datetime with tzinfo:




 Objects¶
A time object represents a (local) time of day, independent of any particular
day, and subject to adjustment via a  object.


class (hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)¶
All arguments are optional.  tzinfo may be , or an instance of a
 subclass.  The remaining arguments may be integers, in the
following ranges:

,
,
,
,
.

If an argument outside those ranges is given,  is raised.  All
default to  except tzinfo, which defaults to .

Class attributes:


¶
The earliest representable , .



¶
The latest representable , .



¶
The smallest possible difference between non-equal  objects,
, although note that arithmetic on
 objects is not supported.

Instance attributes (read-only):


¶
In .



¶
In .



¶
In .



¶
In .



¶
The object passed as the tzinfo argument to the  constructor, or
 if none was passed.



¶
In .  Used to disambiguate wall times during a repeated interval.  (A
repeated interval occurs when clocks are rolled back at the end of daylight saving
time or when the UTC offset for the current zone is decreased for political reasons.)
The value 0 (1) represents the earlier (later) of the two moments with the same wall
time representation.

New in version 3.6.


Supported operations:

comparison of  to , where a is considered less
than b when a precedes b in time.  If one comparand is naive and the other
is aware,  is raised if an order comparison is attempted. For equality
comparisons, naive instances are never equal to aware instances.
If both comparands are aware, and have
the same  attribute, the common  attribute is
ignored and the base times are compared.  If both comparands are aware and
have different  attributes, the comparands are first adjusted by
subtracting their UTC offsets (obtained from ). In order
to stop mixed-type comparisons from falling back to the default comparison by
object address, when a  object is compared to an object of a
different type,  is raised unless the comparison is  or
.  The latter cases return  or , respectively.

Changed in version 3.3: Equality comparisons between naive and aware  instances
don’t raise .


hash, use as dict key

efficient pickling


In boolean contexts, a  object is always considered to be true.

Changed in version 3.5: Before Python 3.5, a  object was considered to be false if it
represented midnight in UTC.  This behavior was considered obscure and
error-prone and has been removed in Python 3.5.  See bpo-13936 for full
details.

Other constructor:


classmethod (time_string)¶
Return a  corresponding to a time_string in one of the
formats emitted by . Specifically, this function supports
strings in the format(s) .

Caution
This does not support parsing arbitrary ISO 8601 strings - it is only intended
as the inverse operation of .


New in version 3.7.


Instance methods:


(hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0)¶
Return a  with the same value, except for those attributes given
new values by whichever keyword arguments are specified.  Note that
 can be specified to create a naive  from an
aware , without conversion of the time data.

New in version 3.6: Added the  argument.




(timespec='auto')¶
Return a string representing the time in ISO 8601 format, HH:MM:SS.ffffff or, if
 is 0, HH:MM:SS If  does not return , a
string is appended, giving the UTC offset: HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]
or, if self.microsecond is 0, HH:MM:SS+HH:MM[:SS[.ffffff]].
The optional argument timespec specifies the number of additional
components of the time to include (the default is ).
It can be one of the following:

: Same as  if  is 0,
same as  otherwise.
: Include the  in the two-digit HH format.
: Include  and  in HH:MM format.
: Include , , and 
in HH:MM:SS format.
: Include full time, but truncate fractional second
part to milliseconds. HH:MM:SS.sss format.
: Include full time in HH:MM:SS.ffffff format.


Note
Excluded time components are truncated, not rounded.

 will be raised on an invalid timespec argument.



New in version 3.6: Added the timespec argument.




()¶
For a time t,  is equivalent to .



(format)¶
Return a string representing the time, controlled by an explicit format
string.  For a complete list of formatting directives, see
strftime() and strptime() Behavior.



(format)¶
Same as . This makes it possible to specify a format string
for a  object in formatted string
literals and when using .  For a
complete list of formatting directives, see
strftime() and strptime() Behavior.



()¶
If  is , returns , else returns
, and raises an exception if the latter doesn’t
return  or a  object with magnitude less than one day.

Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes.




()¶
If  is , returns , else returns
, and raises an exception if the latter doesn’t return
, or a  object with magnitude less than one day.

Changed in version 3.7: The DST offset is not restricted to a whole number of minutes.




()¶
If  is , returns , else returns
, or raises an exception if the latter doesn’t
return  or a string object.

Example:




 Objects¶


class ¶
This is an abstract base class, meaning that this class should not be
instantiated directly.  You need to derive a concrete subclass, and (at least)
supply implementations of the standard  methods needed by the
 methods you use.  The  module supplies
a simple concrete subclass of , , which can represent
timezones with fixed offset from UTC such as UTC itself or North American EST and
EDT.
An instance of (a concrete subclass of)  can be passed to the
constructors for  and  objects. The latter objects
view their attributes as being in local time, and the  object
supports methods revealing offset of local time from UTC, the name of the time
zone, and DST offset, all relative to a date or time object passed to them.
Special requirement for pickling:  A  subclass must have an
 method that can be called with no arguments, else it can be
pickled but possibly not unpickled again.  This is a technical requirement that
may be relaxed in the future.
A concrete subclass of  may need to implement the following
methods.  Exactly which methods are needed depends on the uses made of aware
 objects.  If in doubt, simply implement all of them.



(dt)¶
Return offset of local time from UTC, as a  object that is
positive east of UTC.  If local time is
west of UTC, this should be negative.  Note that this is intended to be the
total offset from UTC; for example, if a  object represents both
time zone and DST adjustments,  should return their sum.  If
the UTC offset isn’t known, return .  Else the value returned must be a
 object strictly between  and
 (the magnitude of the offset must be less
than one day).  Most implementations of  will probably look
like one of these two:


If  does not return ,  should not return
 either.
The default implementation of  raises
.

Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes.




(dt)¶
Return the daylight saving time (DST) adjustment, as a 
object or
 if DST information isn’t known.  Return  if DST is not
in effect. If DST is in effect, return the offset as a  object
(see  for details). Note that DST offset, if applicable, has
already been added to the UTC offset returned by , so there’s
no need to consult  unless you’re interested in obtaining DST info
separately.  For example,  calls its 
attribute’s  method to determine how the  flag
should be set, and  calls  to account for
DST changes when crossing time zones.
An instance tz of a  subclass that models both standard and
daylight times must be consistent in this sense:

must return the same result for every  dt with   For sane  subclasses, this expression yields the time
zone’s “standard offset”, which should not depend on the date or the time, but
only on geographic location.  The implementation of 
relies on this, but cannot detect violations; it’s the programmer’s
responsibility to ensure it.  If a  subclass cannot guarantee
this, it may be able to override the default implementation of
 to work correctly with  regardless.
Most implementations of  will probably look like one of these two:


or


The default implementation of  raises .

Changed in version 3.7: The DST offset is not restricted to a whole number of minutes.




(dt)¶
Return the time zone name corresponding to the  object dt, as
a string. Nothing about string names is defined by the  module,
and there’s no requirement that it mean anything in particular.  For example,
“GMT”, “UTC”, “-500”, “-5:00”, “EDT”, “US/Eastern”, “America/New York” are all
valid replies.  Return  if a string name isn’t known.  Note that this is
a method rather than a fixed string primarily because some 
subclasses will wish to return different names depending on the specific value
of dt passed, especially if the  class is accounting for
daylight time.
The default implementation of  raises .

These methods are called by a  or  object, in
response to their methods of the same names.  A  object passes
itself as the argument, and a  object passes  as the
argument.  A  subclass’s methods should therefore be prepared to
accept a dt argument of , or of class .
When  is passed, it’s up to the class designer to decide the best
response.  For example, returning  is appropriate if the class wishes to
say that time objects don’t participate in the  protocols.  It
may be more useful for  to return the standard UTC offset, as
there is no other convention for discovering the standard offset.
When a  object is passed in response to a 
method,  is the same object as self.   methods can
rely on this, unless user code calls  methods directly.  The
intent is that the  methods interpret dt as being in local
time, and not need worry about objects in other timezones.
There is one more  method that a subclass may wish to override:


(dt)¶
This is called from the default 
implementation.  When called from that,  is self, and dt’s
date and time data are to be viewed as expressing a UTC time.  The purpose
of  is to adjust the date and time data, returning an
equivalent datetime in self’s local time.
Most  subclasses should be able to inherit the default
 implementation without problems.  It’s strong enough to handle
fixed-offset time zones, and time zones accounting for both standard and
daylight time, and the latter even if the DST transition times differ in
different years.  An example of a time zone the default 
implementation may not handle correctly in all cases is one where the standard
offset (from UTC) depends on the specific date and time passed, which can happen
for political reasons. The default implementations of  and
 may not produce the result you want if the result is one of the
hours straddling the moment the standard offset changes.
Skipping code for error cases, the default  implementation acts
like:



In the following  file there are some examples of
 classes:


Note that there are unavoidable subtleties twice per year in a 
subclass accounting for both standard and daylight time, at the DST transition
points.  For concreteness, consider US Eastern (UTC -0500), where EDT begins the
minute after 1:59 (EST) on the second Sunday in March, and ends the minute after
1:59 (EDT) on the first Sunday in November:


When DST starts (the “start” line), the local wall clock leaps from 1:59 to
3:00.  A wall time of the form 2:MM doesn’t really make sense on that day, so
 won’t deliver a result with  on the day DST
begins.  For example, at the Spring forward transition of 2016, we get


When DST ends (the “end” line), there’s a potentially worse problem: there’s an
hour that can’t be spelled unambiguously in local wall time: the last hour of
daylight time.  In Eastern, that’s times of the form 5:MM UTC on the day
daylight time ends.  The local wall clock leaps from 1:59 (daylight time) back
to 1:00 (standard time) again. Local times of the form 1:MM are ambiguous.
 mimics the local clock’s behavior by mapping two adjacent UTC
hours into the same local hour then.  In the Eastern example, UTC times of the
form 5:MM and 6:MM both map to 1:MM when converted to Eastern, but earlier times
have the  attribute set to 0 and the later times have it set to 1.
For example, at the Fall back transition of 2016, we get


Note that the  instances that differ only by the value of the
 attribute are considered equal in comparisons.
Applications that can’t bear wall-time ambiguities should explicitly check the
value of the  attribute or avoid using hybrid
 subclasses; there are no ambiguities when using ,
or any other fixed-offset  subclass (such as a class representing
only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours)).

See also

dateutil.tz
The standard library has  class for handling arbitrary
fixed offsets from UTC and  as UTC timezone instance.
dateutil.tz library brings the IANA timezone database (also known as the
Olson database) to Python and its usage is recommended.

IANA timezone database
The Time Zone Database (often called tz, tzdata or zoneinfo) contains code and
data that represent the history of local time for many representative
locations around the globe. It is updated periodically to reflect changes
made by political bodies to time zone boundaries, UTC offsets, and
daylight-saving rules.




 Objects¶
The  class is a subclass of , each
instance of which represents a timezone defined by a fixed offset from
UTC.  Note that objects of this class cannot be used to represent
timezone information in the locations where different offsets are used
in different days of the year or where historical changes have been
made to civil time.


class (offset, name=None)¶
The offset argument must be specified as a 
object representing the difference between the local time and UTC.  It must
be strictly between  and
, otherwise  is raised.
The name argument is optional.  If specified it must be a string that
will be used as the value returned by the  method.

New in version 3.2.


Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes.




(dt)¶
Return the fixed value specified when the  instance is
constructed.  The dt argument is ignored.  The return value is a
 instance equal to the difference between the
local time and UTC.

Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes.




(dt)¶
Return the fixed value specified when the  instance
is constructed.  If name is not provided in the constructor, the
name returned by  is generated from the value of the
 as follows.  If offset is , the name
is “UTC”, otherwise it is a string ‘UTC±HH:MM’, where ± is the sign
of , HH and MM are two digits of  and
 respectively.

Changed in version 3.6: Name generated from  is now plain ‘UTC’, not
‘UTC+00:00’.




(dt)¶
Always returns .



(dt)¶
Return .  The dt argument must be an aware
 instance, with  set to .

Class attributes:


¶
The UTC timezone, .



 and  Behavior¶
, , and  objects all support a
 method, to create a string representing the time under the
control of an explicit format string.  Broadly speaking, 
acts like the  module’s 
although not all objects support a  method.
Conversely, the  class method creates a
 object from a string representing a date and time and a
corresponding format string.  is
equivalent to , except
when the format includes sub-second components or timezone offset information,
which are supported in  but are discarded by .
For  objects, the format codes for year, month, and day should not
be used, as time objects have no such values.  If they’re used anyway, 
is substituted for the year, and  for the month and day.
For  objects, the format codes for hours, minutes, seconds, and
microseconds should not be used, as  objects have no such
values.  If they’re used anyway,  is substituted for them.
The full set of format codes supported varies across platforms, because Python
calls the platform C library’s  function, and platform
variations are common.  To see the full set of format codes supported on your
platform, consult the strftime(3) documentation.
For the same reason, handling of format strings containing Unicode code points
that can’t be represented in the charset of the current locale is also
platform-dependent. On some platforms such code points are preserved intact in
the output, while on others  may raise  or return
an empty string instead.
The following is a list of all the format codes that the C standard (1989
version) requires, and these work on all platforms with a standard C
implementation.  Note that the 1999 version of the C standard added additional
format codes.








Directive
Meaning
Example
Notes




Weekday as locale’s
abbreviated name.

Sun, Mon, …, Sat
(en_US);
So, Mo, …, Sa
(de_DE)


(1)


Weekday as locale’s full name.

Sunday, Monday, …,
Saturday (en_US);
Sonntag, Montag, …,
Samstag (de_DE)


(1)


Weekday as a decimal number,
where 0 is Sunday and 6 is
Saturday.
0, 1, …, 6
 


Day of the month as a
zero-padded decimal number.
01, 02, …, 31
 


Month as locale’s abbreviated
name.

Jan, Feb, …, Dec
(en_US);
Jan, Feb, …, Dez
(de_DE)


(1)


Month as locale’s full name.

January, February,
…, December (en_US);
Januar, Februar, …,
Dezember (de_DE)


(1)


Month as a zero-padded
decimal number.
01, 02, …, 12
 


Year without century as a
zero-padded decimal number.
00, 01, …, 99
 


Year with century as a decimal
number.
0001, 0002, …, 2013,
2014, …, 9998, 9999
(2)


Hour (24-hour clock) as a
zero-padded decimal number.
00, 01, …, 23
 


Hour (12-hour clock) as a
zero-padded decimal number.
01, 02, …, 12
 


Locale’s equivalent of either
AM or PM.

AM, PM (en_US);
am, pm (de_DE)


(1),
(3)


Minute as a zero-padded
decimal number.
00, 01, …, 59
 


Second as a zero-padded
decimal number.
00, 01, …, 59
(4)


Microsecond as a decimal
number, zero-padded on the
left.
000000, 000001, …,
999999
(5)


UTC offset in the form
±HHMM[SS[.ffffff]] (empty
string if the object is
naive).
(empty), +0000,
-0400, +1030,
+063415,
-030712.345216
(6)


Time zone name (empty string
if the object is naive).
(empty), UTC, EST, CST
 


Day of the year as a
zero-padded decimal number.
001, 002, …, 366
 


Week number of the year
(Sunday as the first day of
the week) as a zero padded
decimal number. All days in a
new year preceding the first
Sunday are considered to be in
week 0.
00, 01, …, 53
(7)


Week number of the year
(Monday as the first day of
the week) as a decimal number.
All days in a new year
preceding the first Monday
are considered to be in
week 0.
00, 01, …, 53
(7)


Locale’s appropriate date and
time representation.

Tue Aug 16 21:30:00
1988 (en_US);
Di 16 Aug 21:30:00
1988 (de_DE)


(1)


Locale’s appropriate date
representation.

08/16/88 (None);
08/16/1988 (en_US);
16.08.1988 (de_DE)


(1)


Locale’s appropriate time
representation.

21:30:00 (en_US);
21:30:00 (de_DE)


(1)


A literal  character.
%
 



Several additional directives not required by the C89 standard are included for
convenience. These parameters all correspond to ISO 8601 date values. These
may not be available on all platforms when used with the 
method. The ISO 8601 year and ISO 8601 week directives are not interchangeable
with the year and week number directives above. Calling  with
incomplete or ambiguous ISO 8601 directives will raise a .








Directive
Meaning
Example
Notes




ISO 8601 year with century
representing the year that
contains the greater part of
the ISO week ().
0001, 0002, …, 2013,
2014, …, 9998, 9999
(8)


ISO 8601 weekday as a decimal
number where 1 is Monday.
1, 2, …, 7
 


ISO 8601 week as a decimal
number with Monday as
the first day of the week.
Week 01 is the week containing
Jan 4.
01, 02, …, 53
(8)




New in version 3.6: ,  and  were added.

Notes:

Because the format depends on the current locale, care should be taken when
making assumptions about the output value. Field orderings will vary (for
example, “month/day/year” versus “day/month/year”), and the output may
contain Unicode characters encoded using the locale’s default encoding (for
example, if the current locale is , the default encoding could be
any one of , , or ; use 
to determine the current locale’s encoding).

The  method can parse years in the full [1, 9999] range, but
years < 1000 must be zero-filled to 4-digit width.

Changed in version 3.2: In previous versions,  method was restricted to
years >= 1900.


Changed in version 3.3: In version 3.2,  method was restricted to
years >= 1000.


When used with the  method, the  directive only affects
the output hour field if the  directive is used to parse the hour.

Unlike the  module, the  module does not support
leap seconds.

When used with the  method, the  directive
accepts from one to six digits and zero pads on the right.   is
an extension to the set of format characters in the C standard (but
implemented separately in datetime objects, and therefore always
available).

For a naive object, the  and  format codes are replaced by empty
strings.
For an aware object:


 is transformed into a string of the form
±HHMM[SS[.ffffff]], where HH is a 2-digit string giving the number of UTC
offset hours, MM is a 2-digit string giving the number of UTC offset
minutes, SS is a 2-digit string giving the number of UTC offset
seconds and ffffff is a 6-digit string giving the number of UTC
offset microseconds.  The ffffff part is omitted when the offset is a
whole number of seconds and both the ffffff and the SS part is omitted
when the offset is a whole number of minutes.  For example, if
 returns ,  is
replaced with the string .



Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes.


Changed in version 3.7: When the  directive is provided to the   method,
the UTC offsets can have a colon as a separator between hours, minutes
and seconds.
For example,  will be parsed as an offset of one hour.
In addition, providing  is identical to .



If  returns ,  is replaced by an empty
string.  Otherwise  is replaced by the returned value, which must
be a string.



Changed in version 3.2: When the  directive is provided to the  method, an
aware  object will be produced.  The  of the
result will be set to a  instance.


When used with the  method,  and  are only used
in calculations when the day of the week and the calendar year ()
are specified.

Similar to  and ,  is only used in calculations when the
day of the week and the ISO year () are specified in a
 format string. Also note that  and  are not
interchangeable.


Footnotes



[1]If, that is, we ignore the effects of Relativity




