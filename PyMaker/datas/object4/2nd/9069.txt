link:
library/tracemalloc.html#module-tracemalloc

docs:

 — Trace memory allocations¶

New in version 3.4.

Source code: Lib/tracemalloc.py

The tracemalloc module is a debug tool to trace memory blocks allocated by
Python. It provides the following information:

Traceback where an object was allocated
Statistics on allocated memory blocks per filename and per line number:
total size, number and average size of allocated memory blocks
Compute the differences between two snapshots to detect memory leaks

To trace most memory blocks allocated by Python, the module should be started
as early as possible by setting the  environment
variable to , or by using   command line
option. The  function can be called at runtime to
start tracing Python memory allocations.
By default, a trace of an allocated memory block only stores the most recent
frame (1 frame). To store 25 frames at startup: set the
 environment variable to , or use the
  command line option.

Examples¶

Display the top 10¶
Display the 10 files allocating the most memory:


Example of output of the Python test suite:


We can see that Python loaded  data (bytecode and constants) from
modules and that the  module allocated  to build
 types.
See  for more options.


Compute differences¶
Take two snapshots and display the differences:


Example of output before/after running some tests of the Python test suite:


We can see that Python has loaded  of module data (bytecode and
constants), and that this is  more than had been loaded before the
tests, when the previous snapshot was taken. Similarly, the 
module has cached  of Python source code to format tracebacks, all
of it since the previous snapshot.
If the system has little free memory, snapshots can be written on disk using
the  method to analyze the snapshot offline. Then use the
 method reload the snapshot.


Get the traceback of a memory block¶
Code to display the traceback of the biggest memory block:


Example of output of the Python test suite (traceback limited to 25 frames):


We can see that the most memory was allocated in the  module to
load data (bytecode and constants) from modules: . The traceback is
where the  loaded data most recently: on the 
line of the  module. The traceback may change if a new module is
loaded.


Pretty top¶
Code to display the 10 lines allocating the most memory with a pretty output,
ignoring  and  files:


Example of output of the Python test suite:


See  for more options.



API¶

Functions¶


()¶
Clear traces of memory blocks allocated by Python.
See also .



(obj)¶
Get the traceback where the Python object obj was allocated.
Return a  instance, or  if the 
module is not tracing memory allocations or did not trace the allocation of
the object.
See also  and  functions.



()¶
Get the maximum number of frames stored in the traceback of a trace.
The  module must be tracing memory allocations to
get the limit, otherwise an exception is raised.
The limit is set by the  function.



()¶
Get the current size and peak size of memory blocks traced by the
 module as a tuple: .



()¶
Get the memory usage in bytes of the  module used to store
traces of memory blocks.
Return an .



()¶
 if the  module is tracing Python memory
allocations,  otherwise.
See also  and  functions.



(nframe: int=1)¶
Start tracing Python memory allocations: install hooks on Python memory
allocators. Collected tracebacks of traces will be limited to nframe
frames. By default, a trace of a memory block only stores the most recent
frame: the limit is . nframe must be greater or equal to .
Storing more than  frame is only useful to compute statistics grouped
by  or to compute cumulative statistics: see the
 and  methods.
Storing more frames increases the memory and CPU overhead of the
 module. Use the  function
to measure how much memory is used by the  module.
The  environment variable
() and the  
command line option can be used to start tracing at startup.
See also ,  and 
functions.



()¶
Stop tracing Python memory allocations: uninstall hooks on Python memory
allocators. Also clears all previously collected traces of memory blocks
allocated by Python.
Call  function to take a snapshot of traces before
clearing them.
See also ,  and 
functions.



()¶
Take a snapshot of traces of memory blocks allocated by Python. Return a new
 instance.
The snapshot does not include memory blocks allocated before the
 module started to trace memory allocations.
Tracebacks of traces are limited to  frames. Use
the nframe parameter of the  function to store more frames.
The  module must be tracing memory allocations to take a
snapshot, see the  function.
See also the  function.



DomainFilter¶


class (inclusive: bool, domain: int)¶
Filter traces of memory blocks by their address space (domain).

New in version 3.6.



¶
If inclusive is  (include), match memory blocks allocated
in the address space .
If inclusive is  (exclude), match memory blocks not allocated
in the address space .



¶
Address space of a memory block (). Read-only property.




Filter¶


class (inclusive: bool, filename_pattern: str, lineno: int=None, all_frames: bool=False, domain: int=None)¶
Filter on traces of memory blocks.
See the  function for the syntax of
filename_pattern. The  file extension is
replaced with .
Examples:

 only includes traces of the
 module
 excludes traces of the
 module
 excludes empty tracebacks


Changed in version 3.5: The  file extension is no longer replaced with .


Changed in version 3.6: Added the  attribute.



¶
Address space of a memory block ( or ).
tracemalloc uses the domain  to trace memory allocations made by
Python. C extensions can use other domains to trace other resources.



¶
If inclusive is  (include), only match memory blocks allocated
in a file with a name matching  at line number
.
If inclusive is  (exclude), ignore memory blocks allocated in
a file with a name matching  at line number
.



¶
Line number () of the filter. If lineno is , the filter
matches any line number.



¶
Filename pattern of the filter (). Read-only property.



¶
If all_frames is , all frames of the traceback are checked. If
all_frames is , only the most recent frame is checked.
This attribute has no effect if the traceback limit is .  See the
 function and 
attribute.




Frame¶


class ¶
Frame of a traceback.
The  class is a sequence of  instances.


¶
Filename ().



¶
Line number ().




Snapshot¶


class ¶
Snapshot of traces of memory blocks allocated by Python.
The  function creates a snapshot instance.


(old_snapshot: Snapshot, key_type: str, cumulative: bool=False)¶
Compute the differences with an old snapshot. Get statistics as a sorted
list of  instances grouped by key_type.
See the  method for key_type and cumulative
parameters.
The result is sorted from the biggest to the smallest by: absolute value
of , , absolute
value of ,  and
then by .



(filename)¶
Write the snapshot into a file.
Use  to reload the snapshot.



(filters)¶
Create a new  instance with a filtered 
sequence, filters is a list of  and
 instances.  If filters is an empty list, return a new
 instance with a copy of the traces.
All inclusive filters are applied at once, a trace is ignored if no
inclusive filters match it. A trace is ignored if at least one exclusive
filter matches it.

Changed in version 3.6:  instances are now also accepted in filters.




classmethod (filename)¶
Load a snapshot from a file.
See also .



(key_type: str, cumulative: bool=False)¶
Get statistics as a sorted list of  instances grouped
by key_type:






key_type
description




filename


filename and line number


traceback



If cumulative is , cumulate size and count of memory blocks of
all frames of the traceback of a trace, not only the most recent frame.
The cumulative mode can only be used with key_type equals to
 and .
The result is sorted from the biggest to the smallest by:
,  and then by
.



¶
Maximum number of frames stored in the traceback of :
result of the  when the snapshot was taken.



¶
Traces of all memory blocks allocated by Python: sequence of
 instances.
The sequence has an undefined order. Use the 
method to get a sorted list of statistics.




Statistic¶


class ¶
Statistic on memory allocations.
 returns a list of  instances.
See also the  class.


¶
Number of memory blocks ().



¶
Total size of memory blocks in bytes ().



¶
Traceback where the memory block was allocated, 
instance.




StatisticDiff¶


class ¶
Statistic difference on memory allocations between an old and a new
 instance.
 returns a list of 
instances. See also the  class.


¶
Number of memory blocks in the new snapshot ():  if
the memory blocks have been released in the new snapshot.



¶
Difference of number of memory blocks between the old and the new
snapshots ():  if the memory blocks have been allocated in
the new snapshot.



¶
Total size of memory blocks in bytes in the new snapshot ():
 if the memory blocks have been released in the new snapshot.



¶
Difference of total size of memory blocks in bytes between the old and
the new snapshots ():  if the memory blocks have been
allocated in the new snapshot.



¶
Traceback where the memory blocks were allocated, 
instance.




Trace¶


class ¶
Trace of a memory block.
The  attribute is a sequence of 
instances.

Changed in version 3.6: Added the  attribute.



¶
Address space of a memory block (). Read-only property.
tracemalloc uses the domain  to trace memory allocations made by
Python. C extensions can use other domains to trace other resources.



¶
Size of the memory block in bytes ().



¶
Traceback where the memory block was allocated, 
instance.




Traceback¶


class ¶
Sequence of  instances sorted from the oldest frame to the
most recent frame.
A traceback contains at least  frame. If the  module
failed to get a frame, the filename  at line number  is
used.
When a snapshot is taken, tracebacks of traces are limited to
 frames. See the  function.
The  attribute is an instance of 
instance.

Changed in version 3.7: Frames are now sorted from the oldest to the most recent, instead of most recent to oldest.



(limit=None, most_recent_first=False)¶
Format the traceback as a list of lines with newlines. Use the
 module to retrieve lines from the source code.
If limit is set, format the limit most recent frames if limit
is positive. Otherwise, format the  oldest frames.
If most_recent_first is , the order of the formatted frames
is reversed, returning the most recent frame first instead of last.
Similar to the  function, except that
 does not include newlines.
Example:


Output:






