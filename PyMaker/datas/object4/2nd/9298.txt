link:
library/warnings.html#available-functions

docs:

Available Functions¶


(message, category=None, stacklevel=1, source=None)¶
Issue a warning, or maybe ignore it or raise an exception.  The category
argument, if given, must be a warning category class (see above); it defaults to
.  Alternatively message can be a  instance,
in which case category will be ignored and  will be used.
In this case the message text will be . This function raises an
exception if the particular warning issued is changed into an error by the
warnings filter see above.  The stacklevel argument can be used by wrapper
functions written in Python, like this:


This makes the warning refer to ’s caller, rather than to the
source of  itself (since the latter would defeat the purpose
of the warning message).
source, if supplied, is the destroyed object which emitted a
.

Changed in version 3.6: Added source parameter.




(message, category, filename, lineno, module=None, registry=None, module_globals=None, source=None)¶
This is a low-level interface to the functionality of , passing in
explicitly the message, category, filename and line number, and optionally the
module name and the registry (which should be the 
dictionary of the module).  The module name defaults to the filename with
 stripped; if no registry is passed, the warning is never suppressed.
message must be a string and category a subclass of  or
message may be a  instance, in which case category will be
ignored.
module_globals, if supplied, should be the global namespace in use by the code
for which the warning is issued.  (This argument is used to support displaying
source for modules found in zipfiles or other non-filesystem import
sources).
source, if supplied, is the destroyed object which emitted a
.

Changed in version 3.6: Add the source parameter.




(message, category, filename, lineno, file=None, line=None)¶
Write a warning to a file.  The default implementation calls
 and writes the
resulting string to file, which defaults to .  You may replace
this function with any callable by assigning to .
line is a line of source code to be included in the warning
message; if line is not supplied,  will
try to read the line specified by filename and lineno.



(message, category, filename, lineno, line=None)¶
Format a warning the standard way.  This returns a string which may contain
embedded newlines and ends in a newline.  line is a line of source code to
be included in the warning message; if line is not supplied,
 will try to read the line specified by filename and
lineno.



(action, message='', category=Warning, module='', lineno=0, append=False)¶
Insert an entry into the list of warnings filter specifications.  The entry is inserted at the front by default; if
append is true, it is inserted at the end.  This checks the types of the
arguments, compiles the message and module regular expressions, and
inserts them as a tuple in the list of warnings filters.  Entries closer to
the front of the list override entries later in the list, if both match a
particular warning.  Omitted arguments default to a value that matches
everything.



(action, category=Warning, lineno=0, append=False)¶
Insert a simple entry into the list of warnings filter specifications.  The meaning of the function parameters is as for
, but regular expressions are not needed as the filter
inserted always matches any message in any module as long as the category and
line number match.



()¶
Reset the warnings filter.  This discards the effect of all previous calls to
, including that of the  command line options
and calls to .

