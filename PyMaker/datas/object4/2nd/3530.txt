link:
library/logging.html#filter-objects

docs:

Filter Objects¶
 can be used by  and  for more sophisticated
filtering than is provided by levels. The base filter class only allows events
which are below a certain point in the logger hierarchy. For example, a filter
initialized with ‘A.B’ will allow events logged by loggers ‘A.B’, ‘A.B.C’,
‘A.B.C.D’, ‘A.B.D’ etc. but not ‘A.BB’, ‘B.A.B’ etc. If initialized with the
empty string, all events are passed.


class (name='')¶
Returns an instance of the  class. If name is specified, it
names a logger which, together with its children, will have its events allowed
through the filter. If name is the empty string, allows every event.


(record)¶
Is the specified record to be logged? Returns zero for no, nonzero for
yes. If deemed appropriate, the record may be modified in-place by this
method.


Note that filters attached to handlers are consulted before an event is
emitted by the handler, whereas filters attached to loggers are consulted
whenever an event is logged (using , ,
etc.), before sending an event to handlers. This means that events which have
been generated by descendant loggers will not be filtered by a logger’s filter
setting, unless the filter has also been applied to those descendant loggers.
You don’t actually need to subclass : you can pass any instance
which has a  method with the same semantics.

Changed in version 3.2: You don’t need to create specialized  classes, or use other
classes with a  method: you can use a function (or other
callable) as a filter. The filtering logic will check to see if the filter
object has a  attribute: if it does, it’s assumed to be a
 and its  method is called. Otherwise, it’s
assumed to be a callable and called with the record as the single
parameter. The returned value should conform to that returned by
.

Although filters are used primarily to filter records based on more
sophisticated criteria than levels, they get to see every record which is
processed by the handler or logger they’re attached to: this can be useful if
you want to do things like counting how many records were processed by a
particular logger or handler, or adding, changing or removing attributes in
the LogRecord being processed. Obviously changing the LogRecord needs to be
done with some care, but it does allow the injection of contextual information
into logs (see Using Filters to impart contextual information).
