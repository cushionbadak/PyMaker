link:
library/traceback.html#module-traceback

docs:

 — Print or retrieve a stack traceback¶
Source code: Lib/traceback.py

This module provides a standard interface to extract, format and print stack
traces of Python programs.  It exactly mimics the behavior of the Python
interpreter when it prints a stack trace.  This is useful when you want to print
stack traces under program control, such as in a “wrapper” around the
interpreter.
The module uses traceback objects — this is the object type that is stored in
the  variable and returned as the third item from
.
The module defines the following functions:


(tb, limit=None, file=None)¶
Print up to limit stack trace entries from traceback object tb (starting
from the caller’s frame) if limit is positive.  Otherwise, print the last
 entries.  If limit is omitted or , all entries are
printed.  If file is omitted or , the output goes to
; otherwise it should be an open file or file-like object to
receive the output.

Changed in version 3.5: Added negative limit support.




(etype, value, tb, limit=None, file=None, chain=True)¶
Print exception information and stack trace entries from traceback object
tb to file. This differs from  in the following
ways:

if tb is not , it prints a header 
it prints the exception etype and value after the stack trace


if type(value) is  and value has the appropriate
format, it prints the line where the syntax error occurred with a caret
indicating the approximate position of the error.

The optional limit argument has the same meaning as for .
If chain is true (the default), then chained exceptions (the
 or  attributes of the exception) will be
printed as well, like the interpreter itself does when printing an unhandled
exception.

Changed in version 3.5: The etype argument is ignored and inferred from the type of value.




(limit=None, file=None, chain=True)¶
This is a shorthand for .



(limit=None, file=None, chain=True)¶
This is a shorthand for .  In general it will work only
after an exception has reached an interactive prompt (see
).



(f=None, limit=None, file=None)¶
Print up to limit stack trace entries (starting from the invocation
point) if limit is positive.  Otherwise, print the last 
entries.  If limit is omitted or , all entries are printed.
The optional f argument can be used to specify an alternate stack frame
to start.  The optional file argument has the same meaning as for
.

Changed in version 3.5: Added negative limit support.




(tb, limit=None)¶
Return a  object representing a list of “pre-processed”
stack trace entries extracted from the traceback object tb.  It is useful
for alternate formatting of stack traces.  The optional limit argument has
the same meaning as for .  A “pre-processed” stack trace
entry is a  object containing attributes
, ,
, and  representing the
information that is usually printed for a stack trace.  The
 is a string with leading and trailing
whitespace stripped; if the source is not available it is .



(f=None, limit=None)¶
Extract the raw traceback from the current stack frame.  The return value has
the same format as for .  The optional f and limit
arguments have the same meaning as for .



(extracted_list)¶
Given a list of tuples or  objects as returned by
 or , return a list of strings ready
for printing.  Each string in the resulting list corresponds to the item with
the same index in the argument list.  Each string ends in a newline; the
strings may contain internal newlines as well, for those items whose source
text line is not .



(etype, value)¶
Format the exception part of a traceback.  The arguments are the exception
type and value such as given by  and .
The return value is a list of strings, each ending in a newline.  Normally,
the list contains a single string; however, for 
exceptions, it contains several lines that (when printed) display detailed
information about where the syntax error occurred.  The message indicating
which exception occurred is the always last string in the list.



(etype, value, tb, limit=None, chain=True)¶
Format a stack trace and the exception information.  The arguments  have the
same meaning as the corresponding arguments to .  The
return value is a list of strings, each ending in a newline and some
containing internal newlines.  When these lines are concatenated and printed,
exactly the same text is printed as does .

Changed in version 3.5: The etype argument is ignored and inferred from the type of value.




(limit=None, chain=True)¶
This is like  but returns a string instead of printing to
a file.



(tb, limit=None)¶
A shorthand for .



(f=None, limit=None)¶
A shorthand for .



(tb)¶
Clears the local variables of all the stack frames in a traceback tb
by calling the  method of each frame object.

New in version 3.4.




(f)¶
Walk a stack following  from the given frame, yielding the frame
and line number for each frame. If f is , the current stack is
used. This helper is used with .

New in version 3.5.




(tb)¶
Walk a traceback following  yielding the frame and line number
for each frame. This helper is used with .

New in version 3.5.


The module also defines the following classes:

 Objects¶

New in version 3.5.

 objects are created from actual exceptions to
capture data for later printing in a lightweight fashion.


class (exc_type, exc_value, exc_traceback, *, limit=None, lookup_lines=True, capture_locals=False)¶
Capture an exception for later rendering. limit, lookup_lines and
capture_locals are as for the  class.
Note that when locals are captured, they are also shown in the traceback.


¶
A  of the original .



¶
A  of the original .



¶
The  value from the original exception.



¶
A  representing the traceback.



¶
The class of the original traceback.



¶
For syntax errors - the file name where the error occurred.



¶
For syntax errors - the line number where the error occurred.



¶
For syntax errors - the text where the error occurred.



¶
For syntax errors - the offset into the text where the error occurred.



¶
For syntax errors - the compiler error message.



classmethod (exc, *, limit=None, lookup_lines=True, capture_locals=False)¶
Capture an exception for later rendering. limit, lookup_lines and
capture_locals are as for the  class.
Note that when locals are captured, they are also shown in the traceback.



(*, chain=True)¶
Format the exception.
If chain is not ,  and  will not
be formatted.
The return value is a generator of strings, each ending in a newline and
some containing internal newlines. 
is a wrapper around this method which just prints the lines to a file.
The message indicating which exception occurred is always the last
string in the output.



()¶
Format the exception part of the traceback.
The return value is a generator of strings, each ending in a newline.
Normally, the generator emits a single string; however, for
 exceptions, it emits several lines that (when
printed) display detailed information about where the syntax
error occurred.
The message indicating which exception occurred is always the last
string in the output.




 Objects¶

New in version 3.5.

 objects represent a call stack ready for formatting.


class ¶


classmethod (frame_gen, *, limit=None, lookup_lines=True, capture_locals=False)¶
Construct a  object from a frame generator (such as
is returned by  or
).
If limit is supplied, only this many frames are taken from frame_gen.
If lookup_lines is , the returned 
objects will not have read their lines in yet, making the cost of
creating the  cheaper (which may be valuable if it
may not actually get formatted). If capture_locals is  the
local variables in each  are captured as object
representations.



classmethod (a_list)¶
Construct a  object from a supplied list of
 objects or old-style list of tuples.  Each tuple
should be a 4-tuple with filename, lineno, name, line as the elements.



()¶
Returns a list of strings ready for printing.  Each string in the
resulting list corresponds to a single frame from the stack.
Each string ends in a newline; the strings may contain internal
newlines as well, for those items with source text lines.
For long sequences of the same frame and line, the first few
repetitions are shown, followed by a summary line stating the exact
number of further repetitions.

Changed in version 3.6: Long sequences of repeated frames are now abbreviated.





 Objects¶

New in version 3.5.

 objects represent a single frame in a traceback.


class (filename, lineno, name, lookup_line=True, locals=None, line=None)¶
Represent a single frame in the traceback or stack that is being formatted
or printed. It may optionally have a stringified version of the frames
locals included in it. If lookup_line is , the source code is not
looked up until the  has the 
attribute accessed (which also happens when casting it to a tuple).
 may be directly provided, and will prevent line
lookups happening at all. locals is an optional local variable
dictionary, and if supplied the variable representations are stored in the
summary for later display.



Traceback Examples¶
This simple example implements a basic read-eval-print loop, similar to (but
less useful than) the standard Python interactive interpreter loop.  For a more
complete implementation of the interpreter loop, refer to the 
module.


The following example demonstrates the different ways to print and format the
exception and traceback:


The output for the example would look similar to this:


The following example shows the different ways to print and format the stack:


This last example demonstrates the final few formatting functions:



