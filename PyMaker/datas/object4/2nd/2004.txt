link:
library/pathlib.html

docs:


 — Object-oriented filesystem paths¶

New in version 3.4.

Source code: Lib/pathlib.py

This module offers classes representing filesystem paths with semantics
appropriate for different operating systems.  Path classes are divided
between pure paths, which provide purely computational
operations without I/O, and concrete paths, which
inherit from pure paths but also provide I/O operations.

If you’ve never used this module before or just aren’t sure which class is
right for your task,  is most likely what you need. It instantiates
a concrete path for the platform the code is running on.
Pure paths are useful in some special cases; for example:

If you want to manipulate Windows paths on a Unix machine (or vice versa).
You cannot instantiate a  when running on Unix, but you
can instantiate .
You want to make sure that your code only manipulates paths without actually
accessing the OS. In this case, instantiating one of the pure classes may be
useful since those simply don’t have any OS-accessing operations.


See also
PEP 428: The pathlib module – object-oriented filesystem paths.


See also
For low-level path manipulation on strings, you can also use the
 module.


Basic use¶
Importing the main class:


Listing subdirectories:


Listing Python source files in this directory tree:


Navigating inside a directory tree:


Querying path properties:


Opening a file:




Pure paths¶
Pure path objects provide path-handling operations which don’t actually
access a filesystem.  There are three ways to access these classes, which
we also call flavours:


class (*pathsegments)¶
A generic class that represents the system’s path flavour (instantiating
it creates either a  or a ):


Each element of pathsegments can be either a string representing a
path segment, an object implementing the  interface
which returns a string, or another path object:


When pathsegments is empty, the current directory is assumed:


When several absolute paths are given, the last is taken as an anchor
(mimicking ’s behaviour):


However, in a Windows path, changing the local root doesn’t discard the
previous drive setting:


Spurious slashes and single dots are collapsed, but double dots ()
are not, since this would change the meaning of a path in the face of
symbolic links:


(a naïve approach would make  equivalent
to , which is wrong if  is a symbolic link
to another directory)
Pure path objects implement the  interface, allowing them
to be used anywhere the interface is accepted.

Changed in version 3.6: Added support for the  interface.




class (*pathsegments)¶
A subclass of , this path flavour represents non-Windows
filesystem paths:


pathsegments is specified similarly to .



class (*pathsegments)¶
A subclass of , this path flavour represents Windows
filesystem paths:


pathsegments is specified similarly to .

Regardless of the system you’re running on, you can instantiate all of
these classes, since they don’t provide any operation that does system calls.

General properties¶
Paths are immutable and hashable.  Paths of a same flavour are comparable
and orderable.  These properties respect the flavour’s case-folding
semantics:


Paths of a different flavour compare unequal and cannot be ordered:




Operators¶
The slash operator helps create child paths, similarly to :


A path object can be used anywhere an object implementing 
is accepted:


The string representation of a path is the raw filesystem path itself
(in native form, e.g. with backslashes under Windows), which you can
pass to any function taking a file path as a string:


Similarly, calling  on a path gives the raw filesystem path as a
bytes object, as encoded by :



Note
Calling  is only recommended under Unix.  Under Windows,
the unicode form is the canonical representation of filesystem paths.



Accessing individual parts¶
To access the individual “parts” (components) of a path, use the following
property:


¶
A tuple giving access to the path’s various components:


(note how the drive and local root are regrouped in a single part)



Methods and properties¶
Pure paths provide the following methods and properties:


¶
A string representing the drive letter or name, if any:


UNC shares are also considered drives:





¶
A string representing the (local or global) root, if any:


UNC shares always have a root:





¶
The concatenation of the drive and root:





¶
An immutable sequence providing access to the logical ancestors of
the path:





¶
The logical parent of the path:


You cannot go past an anchor, or empty path:



Note
This is a purely lexical operation, hence the following behaviour:


If you want to walk an arbitrary filesystem path upwards, it is
recommended to first call  so as to resolve
symlinks and eliminate “..” components.




¶
A string representing the final path component, excluding the drive and
root, if any:


UNC drive names are not considered:





¶
The file extension of the final component, if any:





¶
A list of the path’s file extensions:





¶
The final path component, without its suffix:





()¶
Return a string representation of the path with forward slashes ():





()¶
Represent the path as a  URI.   is raised if
the path isn’t absolute.





()¶
Return whether the path is absolute or not.  A path is considered absolute
if it has both a root and (if the flavour allows) a drive:





()¶
With , return  if the path is considered
reserved under Windows,  otherwise.  With ,
 is always returned.


File system calls on reserved paths can fail mysteriously or have
unintended effects.



(*other)¶
Calling this method is equivalent to combining the path with each of
the other arguments in turn:





(pattern)¶
Match this path against the provided glob-style pattern.  Return 
if matching is successful,  otherwise.
If pattern is relative, the path can be either relative or absolute,
and matching is done from the right:


If pattern is absolute, the path must be absolute, and the whole path
must match:


As with other methods, case-sensitivity is observed:





(*other)¶
Compute a version of this path relative to the path represented by
other.  If it’s impossible, ValueError is raised:





(name)¶
Return a new path with the  changed.  If the original path
doesn’t have a name, ValueError is raised:





(suffix)¶
Return a new path with the  changed.  If the original path
doesn’t have a suffix, the new suffix is appended instead.  If the
suffix is an empty string, the original suffix is removed:






Concrete paths¶
Concrete paths are subclasses of the pure path classes.  In addition to
operations provided by the latter, they also provide methods to do system
calls on path objects.  There are three ways to instantiate concrete paths:


class (*pathsegments)¶
A subclass of , this class represents concrete paths of
the system’s path flavour (instantiating it creates either a
 or a ):


pathsegments is specified similarly to .



class (*pathsegments)¶
A subclass of  and , this class
represents concrete non-Windows filesystem paths:


pathsegments is specified similarly to .



class (*pathsegments)¶
A subclass of  and , this class
represents concrete Windows filesystem paths:


pathsegments is specified similarly to .

You can only instantiate the class flavour that corresponds to your system
(allowing system calls on non-compatible path flavours could lead to
bugs or failures in your application):



Methods¶
Concrete paths provide the following methods in addition to pure paths
methods.  Many of these methods can raise an  if a system
call fails (for example because the path doesn’t exist):


classmethod ()¶
Return a new path object representing the current directory (as returned
by ):





classmethod ()¶
Return a new path object representing the user’s home directory (as
returned by  with  construct):



New in version 3.5.




()¶
Return information about this path (similarly to ).
The result is looked up at each call to this method.





(mode)¶
Change the file mode and permissions, like :





()¶
Whether the path points to an existing file or directory:



Note
If the path points to a symlink,  returns whether the
symlink points to an existing file or directory.




()¶
Return a new path with expanded  and  constructs,
as returned by :



New in version 3.5.




(pattern)¶
Glob the given relative pattern in the directory represented by this path,
yielding all matching files (of any kind):


The “” pattern means “this directory and all subdirectories,
recursively”.  In other words, it enables recursive globbing:



Note
Using the “” pattern in large directory trees may consume
an inordinate amount of time.




()¶
Return the name of the group owning the file.   is raised
if the file’s gid isn’t found in the system database.



()¶
Return  if the path points to a directory (or a symbolic link
pointing to a directory),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
Return  if the path points to a regular file (or a symbolic link
pointing to a regular file),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
Return  if the path is a mount point: a point in a
file system where a different file system has been mounted.  On POSIX, the
function checks whether path’s parent, , is on a different
device than path, or whether  and path point to the same
i-node on the same device — this should detect mount points for all Unix
and POSIX variants.  Not implemented on Windows.

New in version 3.7.




()¶
Return  if the path points to a symbolic link,  otherwise.
 is also returned if the path doesn’t exist; other errors (such
as permission errors) are propagated.



()¶
Return  if the path points to a Unix socket (or a symbolic link
pointing to a Unix socket),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
Return  if the path points to a FIFO (or a symbolic link
pointing to a FIFO),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
Return  if the path points to a block device (or a symbolic link
pointing to a block device),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
Return  if the path points to a character device (or a symbolic link
pointing to a character device),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
When the path points to a directory, yield path objects of the directory
contents:





(mode)¶
Like  but, if the path points to a symbolic link, the
symbolic link’s mode is changed rather than its target’s.



()¶
Like  but, if the path points to a symbolic link, return
the symbolic link’s information rather than its target’s.



(mode=0o777, parents=False, exist_ok=False)¶
Create a new directory at this given path.  If mode is given, it is
combined with the process’  value to determine the file mode
and access flags.  If the path already exists, 
is raised.
If parents is true, any missing parents of this path are created
as needed; they are created with the default permissions without taking
mode into account (mimicking the POSIX  command).
If parents is false (the default), a missing parent raises
.
If exist_ok is false (the default),  is
raised if the target directory already exists.
If exist_ok is true,  exceptions will be
ignored (same behavior as the POSIX  command), but only if the
last path component is not an existing non-directory file.

Changed in version 3.5: The exist_ok parameter was added.




(mode='r', buffering=-1, encoding=None, errors=None, newline=None)¶
Open the file pointed to by the path, like the built-in 
function does:





()¶
Return the name of the user owning the file.   is raised
if the file’s uid isn’t found in the system database.



()¶
Return the binary contents of the pointed-to file as a bytes object:



New in version 3.5.




(encoding=None, errors=None)¶
Return the decoded contents of the pointed-to file as a string:


The file is opened and then closed. The optional parameters have the same
meaning as in .

New in version 3.5.




(target)¶
Rename this file or directory to the given target.  On Unix, if
target exists and is a file, it will be replaced silently if the user
has permission.  target can be either a string or another path object:





(target)¶
Rename this file or directory to the given target.  If target points
to an existing file or directory, it will be unconditionally replaced.



(strict=False)¶
Make the path absolute, resolving any symlinks.  A new path object is
returned:


“” components are also eliminated (this is the only method to do so):


If the path doesn’t exist and strict is , 
is raised.  If strict is , the path is resolved as far as possible
and any remainder is appended without checking whether it exists.  If an
infinite loop is encountered along the resolution path, 
is raised.

New in version 3.6: The strict argument (pre-3.6 behavior is strict).




(pattern)¶
This is like calling  with “” added in front of the
given relative pattern:





()¶
Remove this directory.  The directory must be empty.



(other_path)¶
Return whether this path points to the same file as other_path, which
can be either a Path object, or a string.  The semantics are similar
to  and .
An  can be raised if either file cannot be accessed for some
reason.



New in version 3.5.




(target, target_is_directory=False)¶
Make this path a symbolic link to target.  Under Windows,
target_is_directory must be true (default ) if the link’s target
is a directory.  Under POSIX, target_is_directory’s value is ignored.



Note
The order of arguments (link, target) is the reverse
of ’s.




(mode=0o666, exist_ok=True)¶
Create a file at this given path.  If mode is given, it is combined
with the process’  value to determine the file mode and access
flags.  If the file already exists, the function succeeds if exist_ok
is true (and its modification time is updated to the current time),
otherwise  is raised.



()¶
Remove this file or symbolic link.  If the path points to a directory,
use  instead.



(data)¶
Open the file pointed to in bytes mode, write data to it, and close the
file:


An existing file of the same name is overwritten.

New in version 3.5.




(data, encoding=None, errors=None)¶
Open the file pointed to in text mode, write data to it, and close the
file:



New in version 3.5.





Correspondence to tools in the  module¶
Below is a table mapping various  functions to their corresponding
/ equivalent.

Note
Although  and  have some
overlapping use-cases, their semantics differ enough to warrant not
considering them equivalent.







os and os.path
pathlib





















, 









 and












,
,
























