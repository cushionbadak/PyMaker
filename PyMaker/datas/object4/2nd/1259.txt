link:
library/collections.html#deque-recipes

docs:

 RecipesÂ¶
This section shows various approaches to working with deques.
Bounded length deques provide functionality similar to the  filter
in Unix:


Another approach to using deques is to maintain a sequence of recently
added elements by appending to the right and popping to the left:


A round-robin scheduler can be implemented with
input iterators stored in a .  Values are yielded from the active
iterator in position zero.  If that iterator is exhausted, it can be removed
with ; otherwise, it can be cycled back to the end with
the  method:


The  method provides a way to implement  slicing and
deletion.  For example, a pure Python implementation of  relies on
the  method to position elements to be popped:


To implement  slicing, use a similar approach applying
 to bring a target element to the left side of the deque. Remove
old entries with , add new entries with , and then
reverse the rotation.
With minor variations on that approach, it is easy to implement Forth style
stack manipulations such as , , , , ,
, and .
