link:
library/sunau.html#module-sunau

docs:

 — Read and write Sun AU files¶
Source code: Lib/sunau.py

The  module provides a convenient interface to the Sun AU sound
format.  Note that this module is interface-compatible with the modules
 and .
An audio file consists of a header followed by the data.  The fields of the
header are:






Field
Contents



magic word
The four bytes .

header size
Size of the header, including info, in bytes.

data size
Physical size of the data, in bytes.

encoding
Indicates how the audio samples are encoded.

sample rate
The sampling rate.

# of channels
The number of channels in the samples.

info
ASCII string giving a description of the
audio file (padded with null bytes).



Apart from the info field, all header fields are 4 bytes in size. They are all
32-bit unsigned integers encoded in big-endian byte order.
The  module defines the following functions:


(file, mode)¶
If file is a string, open the file by that name, otherwise treat it as a
seekable file-like object. mode can be any of


Read only mode.

Write only mode.

Note that it does not allow read/write files.
A mode of  returns an  object, while a mode of 
or  returns an  object.



(file, mode)¶
A synonym for , maintained for backwards compatibility.

Deprecated since version 3.7, will be removed in version 3.9.


The  module defines the following exception:


exception ¶
An error raised when something is impossible because of Sun AU specs or
implementation deficiency.

The  module defines the following data items:


¶
An integer every valid Sun AU file begins with, stored in big-endian form.  This
is the string  interpreted as an integer.



¶

¶

¶

¶

¶

¶
Values of the encoding field from the AU header which are supported by this
module.



¶

¶

¶

¶

¶

¶
Additional known values of the encoding field from the AU header, but which are
not supported by this module.


AU_read Objects¶
AU_read objects, as returned by  above, have the following methods:


()¶
Close the stream, and make the instance unusable. (This is  called automatically
on deletion.)



()¶
Returns number of audio channels (1 for mono, 2 for stereo).



()¶
Returns sample width in bytes.



()¶
Returns sampling frequency.



()¶
Returns number of audio frames.



()¶
Returns compression type. Supported compression types are , 
and .



()¶
Human-readable version of .  The supported types have the
respective names ,  and .



()¶
Returns a  , equivalent to output of the
 methods.



(n)¶
Reads and returns at most n frames of audio, as a  object.  The data
will be returned in linear format.  If the original data is in u-LAW format, it
will be converted.



()¶
Rewind the file pointer to the beginning of the audio stream.

The following two methods define a term “position” which is compatible between
them, and is otherwise implementation dependent.


(pos)¶
Set the file pointer to the specified position.  Only values returned from
 should be used for pos.



()¶
Return current file pointer position.  Note that the returned value has nothing
to do with the actual position in the file.

The following two functions are defined for compatibility with the  ,
and don’t do anything interesting.


()¶
Returns .



(id)¶
Raise an error.



AU_write Objects¶
AU_write objects, as returned by  above, have the following methods:


(n)¶
Set the number of channels.



(n)¶
Set the sample width (in bytes.)

Changed in version 3.4: Added support for 24-bit samples.




(n)¶
Set the frame rate.



(n)¶
Set the number of frames. This can be later changed, when and if more  frames
are written.



(type, name)¶
Set the compression type and description. Only  and  are
supported on output.



(tuple)¶
The tuple should be , with values valid for the  methods.  Set all
parameters.



()¶
Return current position in the file, with the same disclaimer for the
 and  methods.



(data)¶
Write audio frames, without correcting nframes.

Changed in version 3.4: Any bytes-like object is now accepted.




(data)¶
Write audio frames and make sure nframes is correct.

Changed in version 3.4: Any bytes-like object is now accepted.




()¶
Make sure nframes is correct, and close the file.
This method is called upon deletion.

Note that it is invalid to set any parameters after calling  
or .

