link:
library/bdb.html#module-bdb

docs:

 — Debugger framework¶
Source code: Lib/bdb.py

The  module handles basic debugger functions, like setting breakpoints
or managing execution via the debugger.
The following exception is defined:


exception ¶
Exception raised by the  class for quitting the debugger.

The  module also defines two classes:


class (self, file, line, temporary=0, cond=None, funcname=None)¶
This class implements temporary breakpoints, ignore counts, disabling and
(re-)enabling, and conditionals.
Breakpoints are indexed by number through a list called 
and by  pairs through .  The former points to a
single instance of class .  The latter points to a list of
such instances since there may be more than one breakpoint per line.
When creating a breakpoint, its associated filename should be in canonical
form.  If a funcname is defined, a breakpoint hit will be counted when the
first line of that function is executed.  A conditional breakpoint always
counts a hit.
 instances have the following methods:


()¶
Delete the breakpoint from the list associated to a file/line.  If it is
the last breakpoint in that position, it also deletes the entry for the
file/line.



()¶
Mark the breakpoint as enabled.



()¶
Mark the breakpoint as disabled.



()¶
Return a string with all the information about the breakpoint, nicely
formatted:

The breakpoint number.
If it is temporary or not.
Its file,line position.
The condition that causes a break.
If it must be ignored the next N times.
The breakpoint hit count.


New in version 3.2.




(out=None)¶
Print the output of  to the file out, or if it is
, to standard output.




class (skip=None)¶
The  class acts as a generic Python debugger base class.
This class takes care of the details of the trace facility; a derived class
should implement user interaction.  The standard debugger class
() is an example.
The skip argument, if given, must be an iterable of glob-style
module name patterns.  The debugger will not step into frames that
originate in a module that matches one of these patterns. Whether a
frame is considered to originate in a certain module is determined
by the  in the frame globals.

New in version 3.1: The skip argument.

The following methods of  normally don’t need to be overridden.


(filename)¶
Auxiliary method for getting a filename in a canonical form, that is, as a
case-normalized (on case-insensitive filesystems) absolute path, stripped
of surrounding angle brackets.



()¶
Set the , ,  and
 attributes with values ready to start debugging.



(frame, event, arg)¶
This function is installed as the trace function of debugged frames.  Its
return value is the new trace function (in most cases, that is, itself).
The default implementation decides how to dispatch a frame, depending on
the type of event (passed as a string) that is about to be executed.
event can be one of the following:

: A new line of code is going to be executed.
: A function is about to be called, or another code block
entered.
: A function or other code block is about to return.
: An exception has occurred.
: A C function is about to be called.
: A C function has returned.
: A C function has raised an exception.

For the Python events, specialized functions (see below) are called.  For
the C events, no action is taken.
The arg parameter depends on the previous event.
See the documentation for  for more information on the
trace function.  For more information on code and frame objects, refer to
The standard type hierarchy.



(frame)¶
If the debugger should stop on the current line, invoke the
 method (which should be overridden in subclasses).
Raise a  exception if the  flag is set
(which can be set from ).  Return a reference to the
 method for further tracing in that scope.



(frame, arg)¶
If the debugger should stop on this function call, invoke the
 method (which should be overridden in subclasses).
Raise a  exception if the  flag is set
(which can be set from ).  Return a reference to the
 method for further tracing in that scope.



(frame, arg)¶
If the debugger should stop on this function return, invoke the
 method (which should be overridden in subclasses).
Raise a  exception if the  flag is set
(which can be set from ).  Return a reference to the
 method for further tracing in that scope.



(frame, arg)¶
If the debugger should stop at this exception, invokes the
 method (which should be overridden in subclasses).
Raise a  exception if the  flag is set
(which can be set from ).  Return a reference to the
 method for further tracing in that scope.

Normally derived classes don’t override the following methods, but they may
if they want to redefine the definition of stopping and breakpoints.


(frame)¶
This method checks if the frame is somewhere below  in
the call stack.   is the frame in which debugging started.



(frame)¶
This method checks if there is a breakpoint in the filename and line
belonging to frame or, at least, in the current function.  If the
breakpoint is a temporary one, this method deletes it.



(frame)¶
This method checks if there is a breakpoint in the filename of the current
frame.

Derived classes should override these methods to gain control over debugger
operation.


(frame, argument_list)¶
This method is called from  when there is the
possibility that a break might be necessary anywhere inside the called
function.



(frame)¶
This method is called from  when either
 or  yields .



(frame, return_value)¶
This method is called from  when 
yields .



(frame, exc_info)¶
This method is called from  when
 yields .



(arg)¶
Handle how a breakpoint must be removed when it is a temporary one.
This method must be implemented by derived classes.

Derived classes and clients can call the following methods to affect the
stepping state.


()¶
Stop after one line of code.



(frame)¶
Stop on the next line in or below the given frame.



(frame)¶
Stop when returning from the given frame.



(frame)¶
Stop when the line with the line no greater than the current one is
reached or when returning from current frame.



([frame])¶
Start debugging from frame.  If frame is not specified, debugging
starts from caller’s frame.



()¶
Stop only at breakpoints or when finished.  If there are no breakpoints,
set the system trace function to .



()¶
Set the  attribute to .  This raises  in
the next call to one of the  methods.

Derived classes and clients can call the following methods to manipulate
breakpoints.  These methods return a string containing an error message if
something went wrong, or  if all is well.


(filename, lineno, temporary=0, cond, funcname)¶
Set a new breakpoint.  If the lineno line doesn’t exist for the
filename passed as argument, return an error message.  The filename
should be in canonical form, as described in the  method.



(filename, lineno)¶
Delete the breakpoints in filename and lineno.  If none were set, an
error message is returned.



(arg)¶
Delete the breakpoint which has the index arg in the
.  If arg is not numeric or out of range,
return an error message.



(filename)¶
Delete all breakpoints in filename.  If none were set, an error message
is returned.



()¶
Delete all existing breakpoints.



(arg)¶
Return a breakpoint specified by the given number.  If arg is a string,
it will be converted to a number.  If arg is a non-numeric string, if
the given breakpoint never existed or has been deleted, a
 is raised.

New in version 3.2.




(filename, lineno)¶
Check if there is a breakpoint for lineno of filename.



(filename, lineno)¶
Return all breakpoints for lineno in filename, or an empty list if
none are set.



(filename)¶
Return all breakpoints in filename, or an empty list if none are set.



()¶
Return all breakpoints that are set.

Derived classes and clients can call the following methods to get a data
structure representing a stack trace.


(f, t)¶
Get a list of records for a frame and all higher (calling) and lower
frames, and the size of the higher part.



(frame_lineno, lprefix=': ')¶
Return a string with information about a stack entry, identified by a
 tuple:

The canonical form of the filename which contains the frame.
The function name, or .
The input arguments.
The return value.
The line of code (if it exists).


The following two methods can be called by clients to use a debugger to debug
a statement, given as a string.


(cmd, globals=None, locals=None)¶
Debug a statement executed via the  function.  globals
defaults to , locals defaults to globals.



(expr, globals=None, locals=None)¶
Debug an expression executed via the  function.  globals and
locals have the same meaning as in .



(cmd, globals, locals)¶
For backwards compatibility.  Calls the  method.



(func, *args, **kwds)¶
Debug a single function call, and return its result.


Finally, the module defines the following functions:


(b, frame)¶
Check whether we should break here, depending on the way the breakpoint b
was set.
If it was set via line number, it checks if  is the same as the one
in the frame also passed as argument.  If the breakpoint was set via function
name, we have to check we are in the right frame (the right function) and if
we are in its first executable line.



(file, line, frame)¶
Determine if there is an effective (active) breakpoint at this line of code.
Return a tuple of the breakpoint and a boolean that indicates if it is ok
to delete a temporary breakpoint.  Return  if there is no
matching breakpoint.



()¶
Start debugging with a  instance from caller’s frame.

