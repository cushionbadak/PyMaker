link:
library/formatter.html#the-formatter-interface

docs:

The Formatter Interface¶
Interfaces to create formatters are dependent on the specific formatter class
being instantiated.  The interfaces described below are the required interfaces
which all formatters must support once initialized.
One data element is defined at the module level:


¶
Value which can be used in the font specification passed to the 
method described below, or as the new value to any other 
method.  Pushing the  value allows the corresponding 
method to be called without having to track whether the property was changed.

The following attributes are defined for formatter instance objects:


¶
The writer instance with which the formatter interacts.



(blanklines)¶
Close any open paragraphs and insert at least blanklines before the next
paragraph.



()¶
Add a hard line break if one does not already exist.  This does not break the
logical paragraph.



(*args, **kw)¶
Insert a horizontal rule in the output.  A hard break is inserted if there is
data in the current paragraph, but the logical paragraph is not broken.  The
arguments and keywords are passed on to the writer’s 
method.



(data)¶
Provide data which should be formatted with collapsed whitespace. Whitespace
from preceding and successive calls to  is considered as
well when the whitespace collapse is performed.  The data which is passed to
this method is expected to be word-wrapped by the output device.  Note that any
word-wrapping still must be performed by the writer object due to the need to
rely on device and font information.



(data)¶
Provide data which should be passed to the writer unchanged. Whitespace,
including newline and tab characters, are considered legal in the value of
data.



(format, counter)¶
Insert a label which should be placed to the left of the current left margin.
This should be used for constructing bulleted or numbered lists.  If the
format value is a string, it is interpreted as a format specification for
counter, which should be an integer. The result of this formatting becomes the
value of the label; if format is not a string it is used as the label value
directly. The label value is passed as the only argument to the writer’s
 method.  Interpretation of non-string label values is
dependent on the associated writer.
Format specifications are strings which, in combination with a counter value,
are used to compute label values.  Each character in the format string is copied
to the label value, with some characters recognized to indicate a transform on
the counter value.  Specifically, the character  represents the counter
value formatter as an Arabic number, the characters  and 
represent alphabetic representations of the counter value in upper and lower
case, respectively, and  and  represent the counter value in Roman
numerals, in upper and lower case.  Note that the alphabetic and roman
transforms require that the counter value be greater than zero.



()¶
Send any pending whitespace buffered from a previous call to
 to the associated writer object.  This should be called
before any direct manipulation of the writer object.



(align)¶
Push a new alignment setting onto the alignment stack.  This may be
 if no change is desired.  If the alignment value is changed from
the previous setting, the writer’s  method is called with
the align value.



()¶
Restore the previous alignment.



((size, italic, bold, teletype))¶
Change some or all font properties of the writer object.  Properties which are
not set to  are set to the values passed in while others are
maintained at their current settings.  The writer’s  method is
called with the fully resolved font specification.



()¶
Restore the previous font.



(margin)¶
Increase the number of left margin indentations by one, associating the logical
tag margin with the new indentation.  The initial margin level is .
Changed values of the logical tag must be true values; false values other than
 are not sufficient to change the margin.



()¶
Restore the previous margin.



(*styles)¶
Push any number of arbitrary style specifications.  All styles are pushed onto
the styles stack in order.  A tuple representing the entire stack, including
 values, is passed to the writer’s  method.



(n=1)¶
Pop the last n style specifications passed to .  A tuple
representing the revised stack, including  values, is passed to
the writer’s  method.



(spacing)¶
Set the spacing style for the writer.



(flag=1)¶
Inform the formatter that data has been added to the current paragraph
out-of-band.  This should be used when the writer has been manipulated
directly.  The optional flag argument can be set to false if the writer
manipulations produced a hard line break at the end of the output.

