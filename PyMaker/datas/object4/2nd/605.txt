link:
library/stdtypes.html#other-built-in-types

docs:

Other Built-in Types¶
The interpreter supports several other kinds of objects. Most of these support
only one or two operations.

Modules¶
The only special operation on a module is attribute access: , where
m is a module and name accesses a name defined in m’s symbol table.
Module attributes can be assigned to.  (Note that the 
statement is not, strictly speaking, an operation on a module object;  does not require a module object named foo to exist, rather it requires
an (external) definition for a module named foo somewhere.)
A special attribute of every module is . This is the
dictionary containing the module’s symbol table. Modifying this dictionary will
actually change the module’s symbol table, but direct assignment to the
 attribute is not possible (you can write
, which defines  to be , but you can’t write
).  Modifying  directly is
not recommended.
Modules built into the interpreter are written like this: .  If loaded from a file, they are written as .


Classes and Class Instances¶
See Objects, values and types and Class definitions for these.


Functions¶
Function objects are created by function definitions.  The only operation on a
function object is to call it: .
There are really two flavors of function objects: built-in functions and
user-defined functions.  Both support the same operation (to call the function),
but the implementation is different, hence the different object types.
See Function definitions for more information.


Methods¶
Methods are functions that are called using the attribute notation. There are
two flavors: built-in methods (such as  on lists) and class
instance methods.  Built-in methods are described with the types that support
them.
If you access a method (a function defined in a class namespace) through an
instance, you get a special object: a bound method (also called
instance method) object. When called, it will add the  argument
to the argument list.  Bound methods have two special read-only attributes:
 is the object on which the method operates, and  is
the function implementing the method.  Calling 
is completely equivalent to calling .
Like function objects, bound method objects support getting arbitrary
attributes.  However, since method attributes are actually stored on the
underlying function object (), setting method attributes on
bound methods is disallowed.  Attempting to set an attribute on a method
results in an  being raised.  In order to set a method
attribute, you need to explicitly set it on the underlying function object:


See The standard type hierarchy for more information.


Code Objects¶
Code objects are used by the implementation to represent “pseudo-compiled”
executable Python code such as a function body. They differ from function
objects because they don’t contain a reference to their global execution
environment.  Code objects are returned by the built-in  function
and can be extracted from function objects through their 
attribute. See also the  module.
A code object can be executed or evaluated by passing it (instead of a source
string) to the  or   built-in functions.
See The standard type hierarchy for more information.


Type Objects¶
Type objects represent the various object types.  An object’s type is accessed
by the built-in function .  There are no special operations on
types.  The standard module  defines names for all standard built-in
types.
Types are written like this: .


The Null Object¶
This object is returned by functions that don’t explicitly return a value.  It
supports no special operations.  There is exactly one null object, named
 (a built-in name).   produces the same singleton.
It is written as .


The Ellipsis Object¶
This object is commonly used by slicing (see Slicings).  It supports no
special operations.  There is exactly one ellipsis object, named
 (a built-in name).   produces the
 singleton.
It is written as  or .


The NotImplemented Object¶
This object is returned from comparisons and binary operations when they are
asked to operate on types they don’t support. See Comparisons for more
information.  There is exactly one  object.
 produces the singleton instance.
It is written as .


Boolean Values¶
Boolean values are the two constant objects  and .  They are
used to represent truth values (although other values can also be considered
false or true).  In numeric contexts (for example when used as the argument to
an arithmetic operator), they behave like the integers 0 and 1, respectively.
The built-in function  can be used to convert any value to a
Boolean, if the value can be interpreted as a truth value (see section
Truth Value Testing above).
They are written as  and , respectively.


Internal Objects¶
See The standard type hierarchy for this information.  It describes stack frame objects,
traceback objects, and slice objects.

