link:
library/email.parser.html#feedparser-api

docs:

FeedParser API¶
The , imported from the  module,
provides an API that is conducive to incremental parsing of email messages,
such as would be necessary when reading the text of an email message from a
source that can block (such as a socket).  The  can of
course be used to parse an email message fully contained in a bytes-like
object, string, or file, but the  API may be more
convenient for such use cases.  The semantics and results of the two parser
APIs are identical.
The ’s API is simple; you create an instance, feed it a
bunch of bytes until there’s no more to feed it, then close the parser to
retrieve the root message object.  The  is extremely
accurate when parsing standards-compliant messages, and it does a very good job
of parsing non-compliant messages, providing information about how a message
was deemed broken.  It will populate a message object’s
 attribute with a list of any
problems it found in a message.  See the  module for the
list of defects that it can find.
Here is the API for the :


class (_factory=None, *, policy=policy.compat32)¶
Create a  instance.  Optional _factory is a
no-argument callable; if not specified use the
 from the policy.  Call
_factory whenever a new message object is needed.
If policy is specified use the rules it specifies to update the
representation of the message.  If policy is not set, use the
 policy, which maintains backward
compatibility with the Python 3.2 version of the email package and provides
 as the default factory.  All other policies
provide  as the default _factory. For
more information on what else policy controls, see the
 documentation.
Note: The policy keyword should always be specified; The default will
change to  in a future version of Python.

New in version 3.2.


Changed in version 3.3: Added the policy keyword.


Changed in version 3.6: _factory defaults to the policy .



(data)¶
Feed the parser some more data.  data should be a bytes-like
object containing one or more lines.  The lines can be partial and the
parser will stitch such partial lines together properly.  The lines can
have any of the three common line endings: carriage return, newline, or
carriage return and newline (they can even be mixed).



()¶
Complete the parsing of all previously fed data and return the root
message object.  It is undefined what happens if  is called
after this method has been called.




class (_factory=None, *, policy=policy.compat32)¶
Works like  except that the input to the
 method must be a string.  This is of limited
utility, since the only way for such a message to be valid is for it to
contain only ASCII text or, if  is
, no binary attachments.

Changed in version 3.3: Added the policy keyword.


