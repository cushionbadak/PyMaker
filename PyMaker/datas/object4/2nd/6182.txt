link:
library/xml.dom.html#node-objects

docs:

Node Objects¶
All of the components of an XML document are subclasses of .


¶
An integer representing the node type.  Symbolic constants for the types are on
the  object: , ,
, , ,
, ,
, , .
This is a read-only attribute.



¶
The parent of the current node, or  for the document node. The value is
always a  object or .  For  nodes, this
will be the parent element, except for the root element, in which case it will
be the  object. For  nodes, this is always
. This is a read-only attribute.



¶
A  of attribute objects.  Only elements have actual values
for this; others provide  for this attribute. This is a read-only
attribute.



¶
The node that immediately precedes this one with the same parent.  For
instance the element with an end-tag that comes just before the self
element’s start-tag.  Of course, XML documents are made up of more than just
elements so the previous sibling could be text, a comment, or something else.
If this node is the first child of the parent, this attribute will be
. This is a read-only attribute.



¶
The node that immediately follows this one with the same parent.  See also
.  If this is the last child of the parent, this
attribute will be . This is a read-only attribute.



¶
A list of nodes contained within this node. This is a read-only attribute.



¶
The first child of the node, if there are any, or . This is a read-only
attribute.



¶
The last child of the node, if there are any, or . This is a read-only
attribute.



¶
The part of the  following the colon if there is one, else the
entire .  The value is a string.



¶
The part of the  preceding the colon if there is one, else the
empty string.  The value is a string, or .



¶
The namespace associated with the element name.  This will be a string or
.  This is a read-only attribute.



¶
This has a different meaning for each node type; see the DOM specification for
details.  You can always get the information you would get here from another
property such as the  property for elements or the 
property for attributes. For all node types, the value of this attribute will be
either a string or .  This is a read-only attribute.



¶
This has a different meaning for each node type; see the DOM specification for
details.  The situation is similar to that with .  The value is
a string or .



()¶
Returns true if the node has any attributes.



()¶
Returns true if the node has any child nodes.



(other)¶
Returns true if other refers to the same node as this node. This is especially
useful for DOM implementations which use any sort of proxy architecture (because
more than one object can refer to the same node).

Note
This is based on a proposed DOM Level 3 API which is still in the “working
draft” stage, but this particular interface appears uncontroversial.  Changes
from the W3C will not necessarily affect this method in the Python DOM interface
(though any new W3C API for this would also be supported).




(newChild)¶
Add a new child node to this node at the end of the list of
children, returning newChild. If the node was already in
the tree, it is removed first.



(newChild, refChild)¶
Insert a new child node before an existing child.  It must be the case that
refChild is a child of this node; if not,  is raised.
newChild is returned. If refChild is , it inserts newChild at the
end of the children’s list.



(oldChild)¶
Remove a child node.  oldChild must be a child of this node; if not,
 is raised.  oldChild is returned on success.  If oldChild
will not be used further, its  method should be called.



(newChild, oldChild)¶
Replace an existing node with a new node. It must be the case that  oldChild
is a child of this node; if not,  is raised.



()¶
Join adjacent text nodes so that all stretches of text are stored as single
 instances.  This simplifies processing text from a DOM tree for
many applications.



(deep)¶
Clone this node.  Setting deep means to clone all child nodes as well.  This
returns the clone.

