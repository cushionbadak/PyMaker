link:
library/profile.html#pstats.Stats

docs:


class (*filenames or profile, stream=sys.stdout)¶
This class constructor creates an instance of a “statistics object” from a
filename (or list of filenames) or from a  instance. Output
will be printed to the stream specified by stream.
The file selected by the above constructor must have been created by the
corresponding version of  or .  To be specific,
there is no file compatibility guaranteed with future versions of this
profiler, and there is no compatibility with files produced by other
profilers, or the same profiler run on a different operating system.  If
several files are provided, all the statistics for identical functions will
be coalesced, so that an overall view of several processes can be considered
in a single report.  If additional files need to be combined with data in an
existing  object, the  method
can be used.
Instead of reading the profile data from a file, a 
or  object can be used as the profile data source.
 objects have the following methods:


()¶
This method for the  class removes all leading path
information from file names.  It is very useful in reducing the size of
the printout to fit within (close to) 80 columns.  This method modifies
the object, and the stripped information is lost.  After performing a
strip operation, the object is considered to have its entries in a
“random” order, as it was just after object initialization and loading.
If  causes two function names to be
indistinguishable (they are on the same line of the same filename, and
have the same function name), then the statistics for these two entries
are accumulated into a single entry.



(*filenames)¶
This method of the  class accumulates additional profiling
information into the current profiling object.  Its arguments should refer
to filenames created by the corresponding version of 
or . Statistics for identically named (re: file, line,
name) functions are automatically accumulated into single function
statistics.



(filename)¶
Save the data loaded into the  object to a file named
filename.  The file is created if it does not exist, and is overwritten
if it already exists.  This is equivalent to the method of the same name
on the  and  classes.



(*keys)¶
This method modifies the  object by sorting it according to
the supplied criteria.  The argument can be either a string or a SortKey
enum identifying the basis of a sort (example: , ,
 or ). The SortKey enums argument have
advantage over the string argument in that it is more robust and less
error prone.
When more than one key is provided, then additional keys are used as
secondary criteria when there is equality in all keys selected before
them.  For example,  will sort
all the entries according to their function name, and resolve all ties
(identical function names) by sorting by file name.
For the string argument, abbreviations can be used for any key names, as
long as the abbreviation is unambiguous.
The following are the valid string and SortKey:







Valid String Arg
Valid enum Arg
Meaning




SortKey.CALLS
call count


SortKey.CUMULATIVE
cumulative time


N/A
cumulative time


N/A
file name


SortKey.FILENAME
file name


N/A
file name


N/A
call count


SortKey.PCALLS
primitive call count


SortKey.LINE
line number


SortKey.NAME
function name


SortKey.NFL
name/file/line


SortKey.STDNAME
standard name


SortKey.TIME
internal time


N/A
internal time



Note that all sorts on statistics are in descending order (placing most
time consuming items first), where as name, file, and line number searches
are in ascending order (alphabetical). The subtle distinction between
 and  is that the standard name is a
sort of the name as printed, which means that the embedded line numbers
get compared in an odd way.  For example, lines 3, 20, and 40 would (if
the file names were the same) appear in the string order 20, 3 and 40.
In contrast,  does a numeric compare of the line numbers.
In fact,  is the same as
.
For backward-compatibility reasons, the numeric arguments , ,
, and  are permitted.  They are interpreted as ,
, , and  respectively.  If this old
style format (numeric) is used, only one sort key (the numeric key) will
be used, and additional arguments will be silently ignored.

New in version 3.7: Added the SortKey enum.




()¶
This method for the  class reverses the ordering of the
basic list within the object.  Note that by default ascending vs
descending order is properly selected based on the sort key of choice.



(*restrictions)¶
This method for the  class prints out a report as described
in the  definition.
The order of the printing is based on the last
 operation done on the object (subject to
caveats in  and
).
The arguments provided (if any) can be used to limit the list down to the
significant entries.  Initially, the list is taken to be the complete set
of profiled functions.  Each restriction is either an integer (to select a
count of lines), or a decimal fraction between 0.0 and 1.0 inclusive (to
select a percentage of lines), or a string that will interpreted as a
regular expression (to pattern match the standard name that is printed).
If several restrictions are provided, then they are applied sequentially.
For example:


would first limit the printing to first 10% of list, and then only print
functions that were part of filename .  In contrast, the
command:


would limit the list to all functions having file names ,
and then proceed to only print the first 10% of them.



(*restrictions)¶
This method for the  class prints a list of all functions
that called each function in the profiled database.  The ordering is
identical to that provided by , and the
definition of the restricting argument is also identical.  Each caller is
reported on its own line.  The format differs slightly depending on the
profiler that produced the stats:

With , a number is shown in parentheses after each caller
to show how many times this specific call was made.  For convenience, a
second non-parenthesized number repeats the cumulative time spent in the
function at the right.
With , each caller is preceded by three numbers: the
number of times this specific call was made, and the total and
cumulative times spent in the current function while it was invoked by
this specific caller.




(*restrictions)¶
This method for the  class prints a list of all function
that were called by the indicated function.  Aside from this reversal of
direction of calls (re: called vs was called by), the arguments and
ordering are identical to the  method.

