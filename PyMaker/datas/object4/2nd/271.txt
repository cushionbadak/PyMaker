link:
reference/simple_stmts.html#the-import-statement

docs:

7.11. The  statement¶

The basic import statement (no  clause) is executed in two
steps:

find a module, loading and initializing it if necessary
define a name or names in the local namespace for the scope where
the  statement occurs.

When the statement contains multiple clauses (separated by
commas) the two steps are carried out separately for each clause, just
as though the clauses had been separated out into individual import
statements.
The details of the first step, finding and loading modules are described in
greater detail in the section on the import system,
which also describes the various types of packages and modules that can
be imported, as well as all the hooks that can be used to customize
the import system. Note that failures in this step may indicate either
that the module could not be located, or that an error occurred while
initializing the module, which includes execution of the module’s code.
If the requested module is retrieved successfully, it will be made
available in the local namespace in one of three ways:

If the module name is followed by , then the name
following  is bound directly to the imported module.
If no other name is specified, and the module being imported is a top
level module, the module’s name is bound in the local namespace as a
reference to the imported module
If the module being imported is not a top level module, then the name
of the top level package that contains the module is bound in the local
namespace as a reference to the top level package. The imported module
must be accessed using its full qualified name rather than directly

The  form uses a slightly more complex process:

find the module specified in the  clause, loading and
initializing it if necessary;
for each of the identifiers specified in the  clauses:
check if the imported module has an attribute by that name
if not, attempt to import a submodule with that name and then
check the imported module again for that attribute
if the attribute is not found,  is raised.
otherwise, a reference to that value is stored in the local namespace,
using the name in the  clause if it is present,
otherwise using the attribute name



Examples:


If the list of identifiers is replaced by a star (), all public
names defined in the module are bound in the local namespace for the scope
where the  statement occurs.
The public names defined by a module are determined by checking the module’s
namespace for a variable named ; if defined, it must be a sequence
of strings which are names defined or imported by that module.  The names
given in  are all considered public and are required to exist.  If
 is not defined, the set of public names includes all names found
in the module’s namespace which do not begin with an underscore character
().   should contain the entire public API. It is intended
to avoid accidentally exporting items that are not part of the API (such as
library modules which were imported and used within the module).
The wild card form of import —  — is only allowed at
the module level.  Attempting to use it in class or function definitions will
raise a .
When specifying what module to import you do not have to specify the absolute
name of the module. When a module or package is contained within another
package it is possible to make a relative import within the same top package
without having to mention the package name. By using leading dots in the
specified module or package after  you can specify how high to
traverse up the current package hierarchy without specifying exact names. One
leading dot means the current package where the module making the import
exists. Two dots means up one package level. Three dots is up two levels, etc.
So if you execute  from a module in the  package
then you will end up importing . If you execute  from within  you will import .
The specification for relative imports is contained in
the Package Relative Imports section.
 is provided to support applications that
determine dynamically the modules to be loaded.

7.11.1. Future statements¶
A future statement is a directive to the compiler that a particular
module should be compiled using syntax or semantics that will be available in a
specified future release of Python where the feature becomes standard.
The future statement is intended to ease migration to future versions of Python
that introduce incompatible changes to the language.  It allows use of the new
features on a per-module basis before the release in which the feature becomes
standard.

A future statement must appear near the top of the module.  The only lines that
can appear before a future statement are:

the module docstring (if any),
comments,
blank lines, and
other future statements.

The only feature in Python 3.7 that requires using the future statement is
.
All historical features enabled by the future statement are still recognized
by Python 3.  The list includes , ,
, , ,
,  and .  They are
all redundant because they are always enabled, and only kept for
backwards compatibility.
A future statement is recognized and treated specially at compile time: Changes
to the semantics of core constructs are often implemented by generating
different code.  It may even be the case that a new feature introduces new
incompatible syntax (such as a new reserved word), in which case the compiler
may need to parse the module differently.  Such decisions cannot be pushed off
until runtime.
For any given release, the compiler knows which feature names have been defined,
and raises a compile-time error if a future statement contains a feature not
known to it.
The direct runtime semantics are the same as for any import statement: there is
a standard module , described later, and it will be imported in
the usual way at the time the future statement is executed.
The interesting runtime semantics depend on the specific feature enabled by the
future statement.
Note that there is nothing special about the statement:


That is not a future statement; it’s an ordinary import statement with no
special semantics or syntax restrictions.
Code compiled by calls to the built-in functions  and 
that occur in a module  containing a future statement will, by default,
use the new syntax or semantics associated with the future statement.  This can
be controlled by optional arguments to  — see the documentation
of that function for details.
A future statement typed at an interactive interpreter prompt will take effect
for the rest of the interpreter session.  If an interpreter is started with the
 option, is passed a script name to execute, and the script includes
a future statement, it will be in effect in the interactive session started
after the script is executed.

See also

PEP 236 - Back to the __future__
The original proposal for the __future__ mechanism.



