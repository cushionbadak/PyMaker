link:
library/unittest.mock-examples.html#tracking-order-of-calls-and-less-verbose-call-assertions

docs:

Tracking order of calls and less verbose call assertions¶
The  class allows you to track the order of method calls on
your mock objects through the  attribute. This
doesn’t allow you to track the order of calls between separate mock objects,
however we can use  to achieve the same effect.
Because mocks track calls to child mocks in , and accessing an
arbitrary attribute of a mock creates a child mock, we can create our separate
mocks from a parent one. Calls to those child mock will then all be recorded,
in order, in the  of the parent:






We can then assert about the calls, including the order, by comparing with
the  attribute on the manager mock:


If  is creating, and putting in place, your mocks then you can attach
them to a manager mock using the  method. After
attaching calls will be recorded in  of the manager.


If many calls have been made, but you’re only interested in a particular
sequence of them then an alternative is to use the
 method. This takes a list of calls (constructed
with the  object). If that sequence of calls are in
 then the assert succeeds.


Even though the chained call  aren’t the only calls that
have been made to the mock, the assert still succeeds.
Sometimes a mock may have several calls made to it, and you are only interested
in asserting about some of those calls. You may not even care about the
order. In this case you can pass  to :


