link:
library/unittest.mock-examples.html#partial-mocking

docs:

Partial mocking¶
In some tests I wanted to mock out a call to 
to return a known date, but I didn’t want to prevent the code under test from
creating new date objects. Unfortunately  is written in C, and
so I couldn’t just monkey-patch out the static  method.
I found a simple way of doing this that involved effectively wrapping the date
class with a mock, but passing through calls to the constructor to the real
class (and returning real instances).
The  is used here to
mock out the  class in the module under test. The 
attribute on the mock date class is then set to a lambda function that returns
a real date. When the mock date class is called a real date will be
constructed and returned by .


Note that we don’t patch  globally, we patch  in the
module that uses it. See where to patch.
When  is called a known date is returned, but calls to the
 constructor still return normal dates. Without this you can find
yourself having to calculate an expected result using exactly the same
algorithm as the code under test, which is a classic testing anti-pattern.
Calls to the date constructor are recorded in the  attributes
( and friends) which may also be useful for your tests.
An alternative way of dealing with mocking dates, or other builtin classes,
is discussed in this blog entry.
