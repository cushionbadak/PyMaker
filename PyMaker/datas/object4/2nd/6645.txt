link:
library/urllib.request.html#request-objects

docs:

Request Objects¶
The following methods describe ’s public interface,
and so all may be overridden in subclasses.  It also defines several
public attributes that can be used by clients to inspect the parsed
request.


¶
The original URL passed to the constructor.

Changed in version 3.4.

Request.full_url is a property with setter, getter and a deleter. Getting
 returns the original request URL with the
fragment, if it was present.



¶
The URI scheme.



¶
The URI authority, typically a host, but may also contain a port
separated by a colon.



¶
The original host for the request, without port.



¶
The URI path.  If the  uses a proxy, then selector
will be the full URL that is passed to the proxy.



¶
The entity body for the request, or  if not specified.

Changed in version 3.4: Changing value of  now deletes “Content-Length”
header if it was previously set or calculated.




¶
boolean, indicates whether the request is unverifiable as defined
by RFC 2965.



¶
The HTTP request method to use.  By default its value is ,
which means that  will do its normal computation
of the method to be used.  Its value can be set (thus overriding the default
computation in ) either by providing a default
value by setting it at the class level in a  subclass, or by
passing a value in to the  constructor via the method
argument.

New in version 3.3.


Changed in version 3.4: A default value can now be set in subclasses; previously it could only
be set via the constructor argument.




()¶
Return a string indicating the HTTP request method.  If
 is not , return its value, otherwise return
 if  is , or  if it’s not.
This is only meaningful for HTTP requests.

Changed in version 3.3: get_method now looks at the value of .




(key, val)¶
Add another header to the request.  Headers are currently ignored by all
handlers except HTTP handlers, where they are added to the list of headers sent
to the server.  Note that there cannot be more than one header with the same
name, and later calls will overwrite previous calls in case the key collides.
Currently, this is no loss of HTTP functionality, since all headers which have
meaning when used more than once have a (header-specific) way of gaining the
same functionality using only one header.



(key, header)¶
Add a header that will not be added to a redirected request.



(header)¶
Return whether the instance has the named header (checks both regular and
unredirected).



(header)¶
Remove named header from the request instance (both from regular and
unredirected headers).

New in version 3.4.




()¶
Return the URL given in the constructor.

Changed in version 3.4.

Returns 



(host, type)¶
Prepare the request by connecting to a proxy server. The host and type will
replace those of the instance, and the instance’s selector will be the original
URL given in the constructor.



(header_name, default=None)¶
Return the value of the given header. If the header is not present, return
the default value.



()¶
Return a list of tuples (header_name, header_value) of the Request headers.


Changed in version 3.4: The request methods add_data, has_data, get_data, get_type, get_host,
get_selector, get_origin_req_host and is_unverifiable that were deprecated
since 3.3 have been removed.

