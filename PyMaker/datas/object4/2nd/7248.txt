link:
library/http.cookiejar.html#cookiejar-and-filecookiejar-objects

docs:

CookieJar and FileCookieJar Objects¶
 objects support the iterator protocol for iterating over
contained  objects.
 has the following methods:


(request)¶
Add correct Cookie header to request.
If policy allows (ie. the  and  attributes of
the ’s  instance are true and false
respectively), the Cookie2 header is also added when appropriate.
The request object (usually a  instance)
must support the methods , ,
, , ,
, , 
and  attribute as documented by
.

Changed in version 3.3: request object needs  attribute. Dependency on a
deprecated method  has been removed.




(response, request)¶
Extract cookies from HTTP response and store them in the ,
where allowed by policy.
The  will look for allowable Set-Cookie and
Set-Cookie2 headers in the response argument, and store cookies
as appropriate (subject to the  method’s approval).
The response object (usually the result of a call to
, or similar) should support an 
method, which returns an  instance.
The request object (usually a  instance)
must support the methods , ,
, and  attribute, as documented
by .  The request is used to set default values for
cookie-attributes as well as for checking that the cookie is allowed to be
set.

Changed in version 3.3: request object needs  attribute. Dependency on a
deprecated method  has been removed.




(policy)¶
Set the  instance to be used.



(response, request)¶
Return sequence of  objects extracted from response object.
See the documentation for  for the interfaces required of
the response and request arguments.



(cookie, request)¶
Set a  if policy says it’s OK to do so.



(cookie)¶
Set a , without checking with policy to see whether or not it
should be set.



([domain[, path[, name]]])¶
Clear some cookies.
If invoked without arguments, clear all cookies.  If given a single argument,
only cookies belonging to that domain will be removed. If given two arguments,
cookies belonging to the specified domain and URL path are removed.  If
given three arguments, then the cookie with the specified domain, path and
name is removed.
Raises  if no matching cookie exists.



()¶
Discard all session cookies.
Discards all contained cookies that have a true  attribute
(usually because they had either no  or  cookie-attribute,
or an explicit  cookie-attribute).  For interactive browsers, the end
of a session usually corresponds to closing the browser window.
Note that the  method won’t save session cookies anyway, unless you
ask otherwise by passing a true ignore_discard argument.

 implements the following additional methods:


(filename=None, ignore_discard=False, ignore_expires=False)¶
Save cookies to a file.
This base class raises .  Subclasses may leave this
method unimplemented.
filename is the name of file in which to save cookies.  If filename is not
specified,  is used (whose default is the value passed to
the constructor, if any); if  is ,
 is raised.
ignore_discard: save even cookies set to be discarded. ignore_expires: save
even cookies that have expired
The file is overwritten if it already exists, thus wiping all the cookies it
contains.  Saved cookies can be restored later using the  or
 methods.



(filename=None, ignore_discard=False, ignore_expires=False)¶
Load cookies from a file.
Old cookies are kept unless overwritten by newly loaded ones.
Arguments are as for .
The named file must be in the format understood by the class, or
 will be raised.  Also,  may be raised, for
example if the file does not exist.

Changed in version 3.3:  used to be raised, it is now an alias of .




(filename=None, ignore_discard=False, ignore_expires=False)¶
Clear all cookies and reload cookies from a saved file.
 can raise the same exceptions as . If there is a
failure, the object’s state will not be altered.

 instances have the following public attributes:


¶
Filename of default file in which to keep cookies.  This attribute may be
assigned to.



¶
If true, load cookies lazily from disk.  This attribute should not be assigned
to.  This is only a hint, since this only affects performance, not behaviour
(unless the cookies on disk are changing). A  object may
ignore it.  None of the  classes included in the standard
library lazily loads cookies.

