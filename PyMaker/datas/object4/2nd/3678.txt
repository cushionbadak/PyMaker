link:
library/curses.html#module-curses

docs:

 — Terminal handling for character-cell displays¶

The  module provides an interface to the curses library, the
de-facto standard for portable advanced terminal handling.
While curses is most widely used in the Unix environment, versions are available
for Windows, DOS, and possibly other systems as well.  This extension module is
designed to match the API of ncurses, an open-source curses library hosted on
Linux and the BSD variants of Unix.

Note
Whenever the documentation mentions a character it can be specified
as an integer, a one-character Unicode string or a one-byte byte string.
Whenever the documentation mentions a character string it can be specified
as a Unicode string or a byte string.


Note
Since version 5.4, the ncurses library decides how to interpret non-ASCII data
using the  function.  That means that you have to call
 in the application and encode Unicode strings
using one of the system’s available encodings.  This example uses the
system’s default encoding:


Then use code as the encoding for  calls.


See also

Module 
Utilities for working with ASCII characters, regardless of your locale settings.
Module 
A panel stack extension that adds depth to  curses windows.
Module 
Editable text widget for curses supporting  Emacs-like bindings.
Curses Programming with Python
Tutorial material on using curses with Python, by Andrew Kuchling and Eric
Raymond.

The Tools/demo/ directory in the Python source distribution contains
some example programs using the curses bindings provided by this module.


Functions¶
The module  defines the following exception:


exception ¶
Exception raised when a curses library function returns an error.


Note
Whenever x or y arguments to a function or a method are optional, they
default to the current cursor location. Whenever attr is optional, it defaults
to .

The module  defines the following functions:


()¶
Return the output speed of the terminal in bits per second.  On software
terminal emulators it will have a fixed high value. Included for historical
reasons; in former times, it was used to  write output loops for time delays and
occasionally to change interfaces depending on the line speed.



()¶
Emit a short attention sound.



()¶
Return  or , depending on whether the programmer can change the colors
displayed by the terminal.



()¶
Enter cbreak mode.  In cbreak mode (sometimes called “rare” mode) normal tty
line buffering is turned off and characters are available to be read one by one.
However, unlike raw mode, special characters (interrupt, quit, suspend, and flow
control) retain their effects on the tty driver and calling program.  Calling
first  then  leaves the terminal in cbreak mode.



(color_number)¶
Return the intensity of the red, green, and blue (RGB) components in the color
color_number, which must be between  and .  Return a 3-tuple,
containing the R,G,B values for the given color, which will be between
 (no component) and  (maximum amount of component).



(color_number)¶
Return the attribute value for displaying text in the specified color.  This
attribute value can be combined with , ,
and the other  attributes.   is the counterpart
to this function.



(visibility)¶
Set the cursor state.  visibility can be set to , , or , for invisible,
normal, or very visible.  If the terminal supports the visibility requested, return the
previous cursor state; otherwise raise an exception.  On many
terminals, the “visible” mode is an underline cursor and the “very visible” mode
is a block cursor.



()¶
Save the current terminal mode as the “program” mode, the mode when the running
program is using curses.  (Its counterpart is the “shell” mode, for when the
program is not in curses.)  Subsequent calls to  will
restore this mode.



()¶
Save the current terminal mode as the “shell” mode, the mode when the running
program is not using curses.  (Its counterpart is the “program” mode, when the
program is using curses capabilities.) Subsequent calls to
 will restore this mode.



(ms)¶
Insert an ms millisecond pause in output.



()¶
Update the physical screen.  The curses library keeps two data structures, one
representing the current physical screen contents and a virtual screen
representing the desired next state.  The  ground updates the
physical screen to match the virtual screen.
The virtual screen may be updated by a  call after write
operations such as  have been performed on a window.  The normal
 call is simply  followed by ;
if you have to update multiple windows, you can speed performance and perhaps
reduce screen flicker by issuing  calls on all windows,
followed by a single .



()¶
Enter echo mode.  In echo mode, each character input is echoed to the screen as
it is entered.



()¶
De-initialize the library, and return terminal to normal status.



()¶
Return the user’s current erase character as a one-byte bytes object.  Under Unix operating systems this
is a property of the controlling tty of the curses program, and is not set by
the curses library itself.



()¶
The  routine, if used, must be called before  is
called.  The effect is that, during those calls,  is set to ; the
capabilities , , , , , ,  are disabled; and the 
string is set to the value of . The effect is that the cursor is confined to
the current line, and so are screen updates.  This may be used for enabling
character-at-a-time  line editing without touching the rest of the screen.



()¶
Flash the screen.  That is, change it to reverse-video and then change it back
in a short interval.  Some people prefer such as ‘visible bell’ to the audible
attention signal produced by .



()¶
Flush all input buffers.  This throws away any  typeahead  that  has been typed
by the user and has not yet been processed by the program.



()¶
After  returns  to signal a mouse event, this
method should be call to retrieve the queued mouse event, represented as a
5-tuple . id is an ID value used to distinguish
multiple devices, and x, y, z are the event’s coordinates.  (z is
currently unused.)  bstate is an integer value whose bits will be set to
indicate the type of event, and will be the bitwise OR of one or more of the
following constants, where n is the button number from 1 to 4:
, , ,
, ,
, , .



()¶
Return the current coordinates of the virtual screen cursor as a tuple
.  If  is currently , then return .



(file)¶
Read window related data stored in the file by an earlier  call.
The routine then creates and initializes a new window using that data, returning
the new window object.



()¶
Return  if the terminal can display colors; otherwise, return .



()¶
Return  if the terminal has insert- and delete-character capabilities.
This function is included for historical reasons only, as all modern software
terminal emulators have such capabilities.



()¶
Return  if the terminal has insert- and delete-line capabilities, or can
simulate  them  using scrolling regions. This function is included for
historical reasons only, as all modern software terminal emulators have such
capabilities.



(ch)¶
Take a key value ch, and return  if the current terminal type recognizes
a key with that value.



(tenths)¶
Used for half-delay mode, which is similar to cbreak mode in that characters
typed by the user are immediately available to the program. However, after
blocking for tenths tenths of seconds, raise an exception if nothing has
been typed.  The value of tenths must be a number between  and .  Use
 to leave half-delay mode.



(color_number, r, g, b)¶
Change the definition of a color, taking the number of the color to be changed
followed by three RGB values (for the amounts of red, green, and blue
components).  The value of color_number must be between  and
.  Each of r, g, b, must be a value between  and
.  When  is used, all occurrences of that color on the
screen immediately change to the new definition.  This function is a no-op on
most terminals; it is active only if  returns .



(pair_number, fg, bg)¶
Change the definition of a color-pair.  It takes three arguments: the number of
the color-pair to be changed, the foreground color number, and the background
color number.  The value of pair_number must be between  and
 (the  color pair is wired to white on black and cannot
be changed).  The value of fg and bg arguments must be between  and
.  If the color-pair was previously initialized, the screen is
refreshed and all occurrences of that color-pair are changed to the new
definition.



()¶
Initialize the library. Return a window object
which represents the whole screen.

Note
If there is an error opening the terminal, the underlying curses library may
cause the interpreter to exit.




(nlines, ncols)¶
Return  if  would modify the window structure,
 otherwise.



()¶
Return  if  has been called (that is, the  curses library has
been deinitialized).



(k)¶
Return the name of the key numbered k as a bytes object.  The name of a key generating printable
ASCII character is the key’s character.  The name of a control-key combination
is a two-byte bytes object consisting of a caret () followed by the corresponding
printable ASCII character.  The name of an alt-key combination (128–255) is a
bytes object consisting of the prefix  followed by the name of the corresponding
ASCII character.



()¶
Return the user’s current line kill character as a one-byte bytes object. Under Unix operating systems
this is a property of the controlling tty of the curses program, and is not set
by the curses library itself.



()¶
Return a bytes object containing the terminfo long name field describing the current
terminal.  The maximum length of a verbose description is 128 characters.  It is
defined only after the call to .



(flag)¶
If flag is , allow 8-bit characters to be input.  If
flag is ,  allow only 7-bit chars.



(interval)¶
Set the maximum time in milliseconds that can elapse between press and release
events in order for them to be recognized as a click, and return the previous
interval value.  The default value is 200 msec, or one fifth of a second.



(mousemask)¶
Set the mouse events to be reported, and return a tuple .   availmask indicates which of the specified mouse events can be
reported; on complete failure it returns .  oldmask is the previous value of
the given window’s mouse event mask.  If this function is never called, no mouse
events are ever reported.



(ms)¶
Sleep for ms milliseconds.



(nlines, ncols)¶
Create and return a pointer to a new pad data structure with the given number
of lines and columns.  Return a pad as a window object.
A pad is like a window, except that it is not restricted by the screen size, and
is not necessarily associated with a particular part of the screen.  Pads can be
used when a large window is needed, and only a part of the window will be on the
screen at one time.  Automatic refreshes of pads (such as from scrolling or
echoing of input) do not occur.  The  and 
methods of a pad require 6 arguments to specify the part of the pad to be
displayed and the location on the screen to be used for the display. The
arguments are pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol; the p
arguments refer to the upper left corner of the pad region to be displayed and
the s arguments define a clipping box on the screen within which the pad region
is to be displayed.



(nlines, ncols)¶

(nlines, ncols, begin_y, begin_x)
Return a new window, whose left-upper corner
is at  , and whose height/width is  nlines/ncols.
By default, the window will extend from the  specified position to the lower
right corner of the screen.



()¶
Enter newline mode.  This mode translates the return key into newline on input,
and translates newline into return and line-feed on output. Newline mode is
initially on.



()¶
Leave cbreak mode.  Return to normal “cooked” mode with line buffering.



()¶
Leave echo mode.  Echoing of input characters is turned off.



()¶
Leave newline mode.  Disable translation of return into newline on input, and
disable low-level translation of newline into newline/return on output (but this
does not change the behavior of , which always does the
equivalent of return and line feed on the virtual screen).  With translation
off, curses can sometimes speed up vertical motion a little; also, it will be
able to detect the return key on input.



()¶
When the  routine is used, normal flush of input and output queues
associated with the ,  and  characters will not be done.  You may
want to call  in a signal handler if you want output to
continue as though the interrupt had not occurred, after the handler exits.



()¶
Leave raw mode. Return to normal “cooked” mode with line buffering.



(pair_number)¶
Return a tuple  containing the colors for the requested color pair.
The value of pair_number must be between  and .



(attr)¶
Return the number of the color-pair set by the attribute value attr.
 is the counterpart to this function.



(str)¶
Equivalent to ; emit the value of a specified
terminfo capability for the current terminal.  Note that the output of 
always goes to standard output.



([flag])¶
If flag is , the effect is the same as calling . If
flag is , or no argument is provided, the queues will be flushed when
these control characters are read.



()¶
Enter raw mode.  In raw mode, normal line buffering and  processing of
interrupt, quit, suspend, and flow control keys are turned off; characters are
presented to curses input functions one by one.



()¶
Restore the  terminal  to “program” mode, as previously saved  by
.



()¶
Restore the  terminal  to “shell” mode, as previously saved  by
.



()¶
Restore the state of the terminal modes to what it was at the last call to
.



(nlines, ncols)¶
Backend function used by , performing most of the work;
when resizing the windows,  blank-fills the areas that are
extended.  The calling application should fill in these areas with
appropriate data.  The  function attempts to resize all
windows.  However, due to the calling convention of pads, it is not possible
to resize these without additional interaction with the application.



(nlines, ncols)¶
Resize the standard and current windows to the specified dimensions, and
adjusts other bookkeeping data used by the curses library that record the
window dimensions (in particular the SIGWINCH handler).



()¶
Save the current state of the terminal modes in a buffer, usable by
.



(y, x)¶
Set the virtual screen cursor to y, x. If y and x are both , then
 is set .



(term=None, fd=-1)¶
Initialize the terminal.  term is a string giving
the terminal name, or ; if omitted or , the value of the
 environment variable will be used.  fd is the
file descriptor to which any initialization sequences will be sent; if not
supplied or , the file descriptor for  will be used.



()¶
Must be called if the programmer wants to use colors, and before any other color
manipulation routine is called.  It is good practice to call this routine right
after .
 initializes eight basic colors (black, red,  green, yellow,
blue, magenta, cyan, and white), and two global variables in the 
module,  and , containing the maximum number
of colors and color-pairs the terminal can support.  It also restores the colors
on the terminal to the values they had when the terminal was just turned on.



()¶
Return a logical OR of all video attributes supported by the terminal.  This
information is useful when a curses program needs complete control over the
appearance of the screen.



()¶
Return the value of the environment variable , as a bytes object,
truncated to 14 characters.



(capname)¶
Return the value of the Boolean capability corresponding to the terminfo
capability name capname as an integer.  Return the value  if capname is not a
Boolean capability, or  if it is canceled or absent from the terminal
description.



(capname)¶
Return the value of the numeric capability corresponding to the terminfo
capability name capname as an integer.  Return the value  if capname is not a
numeric capability, or  if it is canceled or absent from the terminal
description.



(capname)¶
Return the value of the string capability corresponding to the terminfo
capability name capname as a bytes object.  Return  if capname
is not a terminfo “string capability”, or is canceled or absent from the
terminal description.



(str[, ...])¶
Instantiate the bytes object str with the supplied parameters, where str should
be a parameterized string obtained from the terminfo database.  E.g.
 could result in , the exact
result depending on terminal type.



(fd)¶
Specify that the file descriptor fd be used for typeahead checking.  If fd
is , then no typeahead checking is done.
The curses library does “line-breakout optimization” by looking for typeahead
periodically while updating the screen.  If input is found, and it is coming
from a tty, the current update is postponed until refresh or doupdate is called
again, allowing faster response to commands typed in advance. This function
allows specifying a different file descriptor for typeahead checking.



(ch)¶
Return a bytes object which is a printable representation of the character ch.
Control characters are represented as a caret followed by the character, for
example as . Printing characters are left as they are.



(ch)¶
Push ch so the next  will return it.

Note
Only one ch can be pushed before  is called.




()¶
Update  and . Useful for detecting manual screen resize.

New in version 3.5.




(ch)¶
Push ch so the next  will return it.

Note
Only one ch can be pushed before  is called.


New in version 3.3.




(id, x, y, z, bstate)¶
Push a  event onto the input queue, associating the given
state data with it.



(flag)¶
If used, this function should be called before  or newterm are
called.  When flag is , the values of lines and columns specified in the
terminfo database will be used, even if environment variables 
and  (used by default) are set, or if curses is running in a
window (in which case default behavior would be to use the window size if
 and  are not set).



()¶
Allow use of default values for colors on terminals supporting this feature. Use
this to support transparency in your application.  The default color is assigned
to the color number . After calling this function,   initializes, for instance, color pair x to a red
foreground color on the default background.



(func, ...)¶
Initialize curses and call another callable object, func, which should be the
rest of your curses-using application.  If the application raises an exception,
this function will restore the terminal to a sane state before re-raising the
exception and generating a traceback.  The callable object func is then passed
the main window ‘stdscr’ as its first argument, followed by any other arguments
passed to .  Before calling func,  turns on
cbreak mode, turns off echo, enables the terminal keypad, and initializes colors
if the terminal has color support.  On exit (whether normally or by exception)
it restores cooked mode, turns on echo, and disables the terminal keypad.



Window Objects¶
Window objects, as returned by  and  above, have
the following methods and attributes:


(ch[, attr])¶

(y, x, ch[, attr])
Paint character ch at  with attributes attr, overwriting any
character previously painter at that location.  By default, the character
position and attributes are the current settings for the window object.

Note
Writing outside the window, subwindow, or pad raises a .
Attempting to write to the lower right corner of a window, subwindow,
or pad will cause an exception to be raised after the character is printed.




(str, n[, attr])¶

(y, x, str, n[, attr])
Paint at most n characters of the character string str at
 with attributes
attr, overwriting anything previously on the display.



(str[, attr])¶

(y, x, str[, attr])
Paint the character string str at  with attributes
attr, overwriting anything previously on the display.

Note
Writing outside the window, subwindow, or pad raises .
Attempting to write to the lower right corner of a window, subwindow,
or pad will cause an exception to be raised after the string is printed.




(attr)¶
Remove attribute attr from the “background” set applied to all writes to the
current window.



(attr)¶
Add attribute attr from the “background” set applied to all writes to the
current window.



(attr)¶
Set the “background” set of attributes to attr.  This set is initially
 (no attributes).



(ch[, attr])¶
Set the background property of the window to the character ch, with
attributes attr.  The change is then applied to every character position in
that window:

The attribute of every character in the window  is changed to the new
background attribute.
Wherever  the  former background character appears, it is changed to the new
background character.




(ch[, attr])¶
Set the window’s background.  A window’s background consists of a character and
any combination of attributes.  The attribute part of the background is combined
(OR’ed) with all non-blank characters that are written into the window.  Both
the character and attribute parts of the background are combined with the blank
characters.  The background becomes a property of the character and moves with
the character through any scrolling and insert/delete line/character operations.



([ls[, rs[, ts[, bs[, tl[, tr[, bl[, br]]]]]]]])¶
Draw a border around the edges of the window. Each parameter specifies  the
character to use for a specific part of the border; see the table below for more
details.

Note
A  value for any parameter will cause the default character to be used for
that parameter.  Keyword parameters can not be used.  The defaults are listed
in this table:








Parameter
Description
Default value



ls
Left side


rs
Right side


ts
Top


bs
Bottom


tl
Upper-left corner


tr
Upper-right corner


bl
Bottom-left corner


br
Bottom-right corner







([vertch, horch])¶
Similar to , but both ls and rs are vertch and both ts and
bs are horch.  The default corner characters are always used by this function.



(attr)¶

(num, attr)

(y, x, attr)

(y, x, num, attr)
Set the attributes of num characters at the current cursor position, or at
position  if supplied. If num is not given or is ,
the attribute will be set on all the characters to the end of the line.  This
function moves cursor to position  if supplied. The changed line
will be touched using the  method so that the contents will
be redisplayed by the next window refresh.



()¶
Like , but also cause the whole window to be repainted upon next
call to .



(flag)¶
If flag is , the next call to  will clear the window
completely.



()¶
Erase from cursor to the end of the window: all lines below the cursor are
deleted, and then the equivalent of  is performed.



()¶
Erase from cursor to the end of the line.



()¶
Update the current cursor position of all the ancestors of the window to
reflect the current cursor position of the window.



([y, x])¶
Delete any character at .



()¶
Delete the line under the cursor. All following lines are moved up by one line.



(begin_y, begin_x)¶

(nlines, ncols, begin_y, begin_x)
An abbreviation for “derive window”,  is the same as calling
, except that begin_y and begin_x are relative to the origin
of the window, rather than relative to the entire screen.  Return a window
object for the derived window.



(ch[, attr])¶
Add character ch with attribute attr, and immediately  call 
on the window.



(y, x)¶
Test whether the given pair of screen-relative character-cell coordinates are
enclosed by the given window, returning  or .  It is useful for
determining what subset of the screen windows enclose the location of a mouse
event.



¶
Encoding used to encode method arguments (Unicode strings and characters).
The encoding attribute is inherited from the parent window when a subwindow
is created, for example with . By default, the locale
encoding is used (see ).

New in version 3.3.




()¶
Clear the window.



()¶
Return a tuple  of co-ordinates of upper-left corner.



()¶
Return the given window’s current background character/attribute pair.



([y, x])¶
Get a character. Note that the integer returned does not have to be in ASCII
range: function keys, keypad keys and so on are represented by numbers higher
than 255.  In no-delay mode, return  if there is no input, otherwise
wait until a key is pressed.



([y, x])¶
Get a wide character. Return a character for most keys, or an integer for
function keys, keypad keys, and other special keys.
In no-delay mode, raise an exception if there is no input.

New in version 3.3.




([y, x])¶
Get a character, returning a string instead of an integer, as 
does. Function keys, keypad keys and other special keys return a multibyte
string containing the key name.  In no-delay mode, raise an exception if
there is no input.



()¶
Return a tuple  of the height and width of the window.



()¶
Return the beginning coordinates of this window relative to its parent window
as a tuple .  Return  if this window has no
parent.



()¶

(n)

(y, x)

(y, x, n)
Read a bytes object from the user, with primitive line editing capacity.



()¶
Return a tuple  of current cursor position  relative to the window’s
upper-left corner.



(ch, n)¶

(y, x, ch, n)
Display a horizontal line starting at  with length n consisting of
the character ch.



(flag)¶
If flag is , curses no longer considers using the hardware insert/delete
character feature of the terminal; if flag is , use of character insertion
and deletion is enabled.  When curses is first initialized, use of character
insert/delete is enabled by default.



(flag)¶
If flag is ,  will try and use hardware line
editing facilities. Otherwise, line insertion/deletion are disabled.



(flag)¶
If flag is , any change in the window image automatically causes the
window to be refreshed; you no longer have to call  yourself.
However, it may degrade performance considerably, due to repeated calls to
wrefresh.  This option is disabled by default.



([y, x])¶
Return the character at the given position in the window. The bottom 8 bits are
the character proper, and upper bits are the attributes.



(ch[, attr])¶

(y, x, ch[, attr])
Paint character ch at  with attributes attr, moving the line from
position x right by one character.



(nlines)¶
Insert nlines lines into the specified window above the current line.  The
nlines bottom lines are lost.  For negative nlines, delete nlines lines
starting with the one under the cursor, and move the remaining lines up.  The
bottom nlines lines are cleared.  The current cursor position remains the
same.



()¶
Insert a blank line under the cursor. All following lines are moved down by one
line.



(str, n[, attr])¶

(y, x, str, n[, attr])
Insert a character string (as many characters as will fit on the line) before
the character under the cursor, up to n characters.   If n is zero or
negative, the entire string is inserted. All characters to the right of the
cursor are shifted right, with the rightmost characters on the line being lost.
The cursor position does not change (after moving to y, x, if specified).



(str[, attr])¶

(y, x, str[, attr])
Insert a character string (as many characters as will fit on the line) before
the character under the cursor.  All characters to the right of the cursor are
shifted right, with the rightmost characters on the line being lost.  The cursor
position does not change (after moving to y, x, if specified).



([n])¶

(y, x[, n])
Return a bytes object of characters, extracted from the window starting at the
current cursor position, or at y, x if specified. Attributes are stripped
from the characters.  If n is specified,  returns a string
at most n characters long (exclusive of the trailing NUL).



(line)¶
Return  if the specified line was modified since the last call to
; otherwise return .  Raise a 
exception if line is not valid for the given window.



()¶
Return  if the specified window was modified since the last call to
; otherwise return .



(flag)¶
If flag is , escape sequences generated by some keys (keypad,  function keys)
will be interpreted by . If flag is , escape sequences will be
left as is in the input stream.



(flag)¶
If flag is , cursor is left where it is on update, instead of being at “cursor
position.”  This reduces cursor movement where possible. If possible the cursor
will be made invisible.
If flag is , cursor will always be at “cursor position” after an update.



(new_y, new_x)¶
Move cursor to .



(y, x)¶
Move the window inside its parent window.  The screen-relative parameters of
the window are not changed.  This routine is used to display different parts of
the parent window at the same physical position on the screen.



(new_y, new_x)¶
Move the window so its upper-left corner is at .



(flag)¶
If flag is ,  will be non-blocking.



(flag)¶
If flag is , escape sequences will not be timed out.
If flag is , after a few milliseconds, an escape sequence will not be
interpreted, and will be left in the input stream as is.



()¶
Mark for refresh but wait.  This function updates the data structure
representing the desired state of the window, but does not force an update of
the physical screen.  To accomplish that, call  .



(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])¶
Overlay the window on top of destwin. The windows need not be the same size,
only the overlapping region is copied. This copy is non-destructive, which means
that the current background character does not overwrite the old contents of
destwin.
To get fine-grained control over the copied region, the second form of
 can be used. sminrow and smincol are the upper-left
coordinates of the source window, and the other variables mark a rectangle in
the destination window.



(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])¶
Overwrite the window on top of destwin. The windows need not be the same size,
in which case only the overlapping region is copied. This copy is destructive,
which means that the current background character overwrites the old contents of
destwin.
To get fine-grained control over the copied region, the second form of
 can be used. sminrow and smincol are the upper-left
coordinates of the source window, the other variables mark a rectangle in the
destination window.



(file)¶
Write all data associated with the window into the provided file object.  This
information can be later retrieved using the  function.



(beg, num)¶
Indicate that the num screen lines, starting at line beg, are corrupted and
should be completely redrawn on the next  call.



()¶
Touch the entire window, causing it to be completely redrawn on the next
 call.



([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])¶
Update the display immediately (sync actual screen with previous
drawing/deleting methods).
The 6 optional arguments can only be specified when the window is a pad created
with .  The additional parameters are needed to indicate what part
of the pad and screen are involved. pminrow and pmincol specify the upper
left-hand corner of the rectangle to be displayed in the pad.  sminrow,
smincol, smaxrow, and smaxcol specify the edges of the rectangle to be
displayed on the screen.  The lower right-hand corner of the rectangle to be
displayed in the pad is calculated from the screen coordinates, since the
rectangles must be the same size.  Both rectangles must be entirely contained
within their respective structures.  Negative values of pminrow, pmincol,
sminrow, or smincol are treated as if they were zero.



(nlines, ncols)¶
Reallocate storage for a curses window to adjust its dimensions to the
specified values.  If either dimension is larger than the current values, the
window’s data is filled with blanks that have the current background
rendition (as set by ) merged into them.



([lines=1])¶
Scroll the screen or scrolling region upward by lines lines.



(flag)¶
Control what happens when the cursor of a window is moved off the edge of the
window or scrolling region, either as a result of a newline action on the bottom
line, or typing the last character of the last line.  If flag is , the
cursor is left on the bottom line.  If flag is , the window is scrolled up
one line.  Note that in order to get the physical scrolling effect on the
terminal, it is also necessary to call .



(top, bottom)¶
Set the scrolling region from line top to line bottom. All scrolling actions
will take place in this region.



()¶
Turn off the standout attribute.  On some terminals this has the side effect of
turning off all attributes.



()¶
Turn on attribute A_STANDOUT.



(begin_y, begin_x)¶

(nlines, ncols, begin_y, begin_x)
Return a sub-window, whose upper-left corner is at , and
whose width/height is ncols/nlines.



(begin_y, begin_x)¶

(nlines, ncols, begin_y, begin_x)
Return a sub-window, whose upper-left corner is at , and
whose width/height is ncols/nlines.
By default, the sub-window will extend from the specified position to the lower
right corner of the window.



()¶
Touch each location in the window that has been touched in any of its ancestor
windows.  This routine is called by , so it should almost never
be necessary to call it manually.



(flag)¶
If flag is , then  is called automatically
whenever there is a change in the window.



()¶
Touch all locations in ancestors of the window that have been changed in  the
window.



(delay)¶
Set blocking or non-blocking read behavior for the window.  If delay is
negative, blocking read is used (which will wait indefinitely for input).  If
delay is zero, then non-blocking read is used, and  will
return  if no input is waiting.  If delay is positive, then
 will block for delay milliseconds, and return  if there is
still no input at the end of that time.



(start, count[, changed])¶
Pretend count lines have been changed, starting with line start.  If
changed is supplied, it specifies whether the affected lines are marked as
having been changed (changed) or unchanged (changed).



()¶
Pretend the whole window has been changed, for purposes of drawing
optimizations.



()¶
Mark all lines in  the  window  as unchanged since the last call to
.



(ch, n)¶

(y, x, ch, n)
Display a vertical line starting at  with length n consisting of the
character ch.



Constants¶
The  module defines the following data members:


¶
Some curses routines  that  return  an integer, such as  , return
 upon failure.



¶
Some curses routines  that  return  an integer, such as  , return
 upon success.



¶
A bytes object representing the current version of the module.  Also available as
.

Some constants are available to specify character cell attributes.
The exact constants available are system dependent.






Attribute
Meaning




Alternate character set mode


Blink mode


Bold mode


Dim mode


Invisible or blank mode


Italic mode


Normal attribute


Protected mode


Reverse background and
foreground colors


Standout mode


Underline mode


Horizontal highlight


Left highlight


Low highlight


Right highlight


Top highlight


Vertical highlight


Bit-mask to extract a
character




New in version 3.7:  was added.

Several constants are available to extract corresponding attributes returned
by some methods.






Bit-mask
Meaning




Bit-mask to extract
attributes


Bit-mask to extract a
character


Bit-mask to extract
color-pair field information



Keys are referred to by integer constants with names starting with  .
The exact keycaps available are system dependent.






Key constant
Key




Minimum key value


Break key (unreliable)


Down-arrow


Up-arrow


Left-arrow


Right-arrow


Home key (upward+left arrow)


Backspace (unreliable)


Function keys.  Up to 64 function keys are
supported.


Value of function key n


Delete line


Insert line


Delete character


Insert char or enter insert mode


Exit insert char mode


Clear screen


Clear to end of screen


Clear to end of line


Scroll 1 line forward


Scroll 1 line backward (reverse)


Next page


Previous page


Set tab


Clear tab


Clear all tabs


Enter or send (unreliable)


Soft (partial) reset (unreliable)


Reset or hard reset (unreliable)


Print


Home down or bottom (lower left)


Upper left of keypad


Upper right of keypad


Center of keypad


Lower left of keypad


Lower right of keypad


Back tab


Beg (beginning)


Cancel


Close


Cmd (command)


Copy


Create


End


Exit


Find


Help


Mark


Message


Move


Next


Open


Options


Prev (previous)


Redo


Ref (reference)


Refresh


Replace


Restart


Resume


Save


Shifted Beg (beginning)


Shifted Cancel


Shifted Command


Shifted Copy


Shifted Create


Shifted Delete char


Shifted Delete line


Select


Shifted End


Shifted Clear line


Shifted Exit


Shifted Find


Shifted Help


Shifted Home


Shifted Input


Shifted Left arrow


Shifted Message


Shifted Move


Shifted Next


Shifted Options


Shifted Prev


Shifted Print


Shifted Redo


Shifted Replace


Shifted Right arrow


Shifted Resume


Shifted Save


Shifted Suspend


Shifted Undo


Suspend


Undo


Mouse event has occurred


Terminal resize event


Maximum key value



On VT100s and their software emulations, such as X terminal emulators, there are
normally at least four function keys (, ,
, ) available, and the arrow keys mapped to
, ,  and  in
the obvious way.  If your machine has a PC keyboard, it is safe to expect arrow
keys and twelve function keys (older PC keyboards may have only ten function
keys); also, the following keypad mappings are standard:






Keycap
Constant



Insert
KEY_IC

Delete
KEY_DC

Home
KEY_HOME

End
KEY_END

Page Up
KEY_PPAGE

Page Down
KEY_NPAGE



The following table lists characters from the alternate character set. These are
inherited from the VT100 terminal, and will generally be  available on software
emulations such as X terminals.  When there is no graphic available, curses
falls back on a crude printable ASCII approximation.

Note
These are available only after  has  been called.







ACS code
Meaning




alternate name for upper right corner


solid square block


board of squares


alternate name for horizontal line


alternate name for upper left corner


alternate name for top tee


bottom tee


bullet


checker board (stipple)


arrow pointing down


degree symbol


diamond


greater-than-or-equal-to


horizontal line


lantern symbol


left arrow


less-than-or-equal-to


lower left-hand corner


lower right-hand corner


left tee


not-equal sign


letter pi


plus-or-minus sign


big plus sign


right arrow


right tee


scan line 1


scan line 3


scan line 7


scan line 9


alternate name for lower right corner


alternate name for vertical line


alternate name for right tee


alternate name for lower left corner


alternate name for bottom tee


alternate name for left tee


alternate name for crossover or big plus


pound sterling


top tee


up arrow


upper left corner


upper right corner


vertical line



The following table lists the predefined colors:






Constant
Color




Black


Blue


Cyan (light greenish blue)


Green


Magenta (purplish red)


Red


White


Yellow




