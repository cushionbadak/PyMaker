link:
library/asyncio-sync.html#asyncio.Condition

docs:


class (lock=None, *, loop=None)¶
A Condition object.  Not thread-safe.
An asyncio condition primitive can be used by a task to wait for
some event to happen and then get exclusive access to a shared
resource.
In essence, a Condition object combines the functionality
of an  and a .  It is possible to have
multiple Condition objects share one Lock, which allows coordinating
exclusive access to a shared resource between different tasks
interested in particular states of that shared resource.
The optional lock argument must be a  object or
.  In the latter case a new Lock object is created
automatically.
The preferred way to use a Condition is an 
statement:


which is equivalent to:




coroutine ()¶
Acquire the underlying lock.
This method waits until the underlying lock is unlocked,
sets it to locked and returns .



(n=1)¶
Wake up at most n tasks (1 by default) waiting on this
condition.  The method is no-op if no tasks are waiting.
The lock must be acquired before this method is called and
released shortly after.  If called with an unlocked lock
a  error is raised.



()¶
Return  if the underlying lock is acquired.



()¶
Wake up all tasks waiting on this condition.
This method acts like , but wakes up all waiting
tasks.
The lock must be acquired before this method is called and
released shortly after.  If called with an unlocked lock
a  error is raised.



()¶
Release the underlying lock.
When invoked on an unlocked lock, a  is
raised.



coroutine ()¶
Wait until notified.
If the calling task has not acquired the lock when this method is
called, a  is raised.
This method releases the underlying lock, and then blocks until
it is awakened by a  or  call.
Once awakened, the Condition re-acquires its lock and this method
returns .



coroutine (predicate)¶
Wait until a predicate becomes true.
The predicate must be a callable which result will be
interpreted as a boolean value.  The final value is the
return value.

