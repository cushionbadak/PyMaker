link:
library/stdtypes.html#bytearray-objects

docs:

Bytearray Objects¶
 objects are a mutable counterpart to 
objects.


class ([source[, encoding[, errors]]])¶
There is no dedicated literal syntax for bytearray objects, instead
they are always created by calling the constructor:

Creating an empty instance: 
Creating a zero-filled instance with a given length: 
From an iterable of integers: 
Copying existing binary data via the buffer protocol:  

As bytearray objects are mutable, they support the
mutable sequence operations in addition to the
common bytes and bytearray operations described in Bytes and Bytearray Operations.
Also see the bytearray built-in.
Since 2 hexadecimal digits correspond precisely to a single byte, hexadecimal
numbers are a commonly used format for describing binary data. Accordingly,
the bytearray type has an additional class method to read data in that format:


classmethod (string)¶
This  class method returns bytearray object, decoding
the given string object.  The string must contain two hexadecimal digits
per byte, with ASCII whitespace being ignored.



Changed in version 3.7:  now skips all ASCII whitespace in the string,
not just spaces.


A reverse conversion function exists to transform a bytearray object into its
hexadecimal representation.


()¶
Return a string object containing two hexadecimal digits for each
byte in the instance.



New in version 3.5.



Since bytearray objects are sequences of integers (akin to a list), for a
bytearray object b,  will be an integer, while  will be
a bytearray object of length 1.  (This contrasts with text strings, where
both indexing and slicing will produce a string of length 1)
The representation of bytearray objects uses the bytes literal format
() since it is often more useful than e.g.
.  You can always convert a bytearray object into
a list of integers using .
