link:
library/unittest.mock.html#quick-guide

docs:

Quick Guide¶
 and  objects create all attributes and
methods as you access them and store details of how they have been used. You
can configure them, to specify return values or limit what attributes are
available, and then make assertions about how they have been used:


 allows you to perform side effects, including raising an
exception when a mock is called:




Mock has many other ways you can configure it and control its behaviour. For
example the spec argument configures the mock to take its specification
from another object. Attempting to access attributes or methods on the mock
that don’t exist on the spec will fail with an .
The  decorator / context manager makes it easy to mock classes or
objects in a module under test. The object you specify will be replaced with a
mock (or other object) during the test and restored when the test ends:



Note
When you nest patch decorators the mocks are passed in to the decorated
function in the same order they applied (the normal Python order that
decorators are applied). This means from the bottom up, so in the example
above the mock for  is passed in first.
With  it matters that you patch objects in the namespace where they
are looked up. This is normally straightforward, but for a quick guide
read where to patch.

As well as a decorator  can be used as a context manager in a with
statement:


There is also  for setting values in a dictionary just
during a scope and restoring the dictionary to its original state when the test
ends:


Mock supports the mocking of Python magic methods. The
easiest way of using magic methods is with the  class. It
allows you to do things like:


Mock allows you to assign functions (or other Mock instances) to magic methods
and they will be called appropriately. The  class is just a Mock
variant that has all of the magic methods pre-created for you (well, all the
useful ones anyway).
The following is an example of using magic methods with the ordinary Mock
class:


For ensuring that the mock objects in your tests have the same api as the
objects they are replacing, you can use auto-speccing.
Auto-speccing can be done through the autospec argument to patch, or the
 function. Auto-speccing creates mock objects that
have the same attributes and methods as the objects they are replacing, and
any functions and methods (including constructors) have the same call
signature as the real object.
This ensures that your mocks will fail in the same way as your production
code if they are used incorrectly:


 can also be used on classes, where it copies the signature of
the  method, and on callable objects where it copies the signature of
the  method.
