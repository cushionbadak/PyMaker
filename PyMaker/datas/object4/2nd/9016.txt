link:
library/profile.html#using-a-custom-timer

docs:

Using a custom timer¶
If you want to change how current time is determined (for example, to force use
of wall-clock time or elapsed process time), pass the timing function you want
to the  class constructor:


The resulting profiler will then call . Depending on whether
you are using  or ,
’s return value will be interpreted differently:


 should return a single number, or a list of numbers whose
sum is the current time (like what  returns).  If the
function returns a single time number, or the list of returned numbers has
length 2, then you will get an especially fast version of the dispatch
routine.
Be warned that you should calibrate the profiler class for the timer function
that you choose (see Calibration).  For most machines, a timer
that returns a lone integer value will provide the best results in terms of
low overhead during profiling.  ( is pretty bad, as it
returns a tuple of floating point values).  If you want to substitute a
better timer in the cleanest fashion, derive a class and hardwire a
replacement dispatch method that best handles your timer call, along with the
appropriate calibration constant.


 should return a single number.  If it returns integers,
you can also invoke the class constructor with a second argument specifying
the real duration of one unit of time.  For example, if
 returns times measured in thousands of seconds,
you would construct the  instance as follows:


As the  class cannot be calibrated, custom timer
functions should be used with care and should be as fast as possible.  For
the best results with a custom timer, it might be necessary to hard-code it
in the C source of the internal  module.


Python 3.3 adds several new functions in  that can be used to make
precise measurements of process or wall-clock time. For example, see
.
