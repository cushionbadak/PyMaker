link:
library/stdtypes.html#list

docs:


class ([iterable])¶
Lists may be constructed in several ways:

Using a pair of square brackets to denote the empty list: 
Using square brackets, separating items with commas: , 
Using a list comprehension: 
Using the type constructor:  or 

The constructor builds a list whose items are the same and in the same
order as iterable’s items.  iterable may be either a sequence, a
container that supports iteration, or an iterator object.  If iterable
is already a list, a copy is made and returned, similar to .
For example,  returns  and
 returns .
If no argument is given, the constructor creates a new empty list, .
Many other operations also produce lists, including the 
built-in.
Lists implement all of the common and
mutable sequence operations. Lists also provide the
following additional method:


(*, key=None, reverse=False)¶
This method sorts the list in place, using only  comparisons
between items. Exceptions are not suppressed - if any comparison operations
fail, the entire sort operation will fail (and the list will likely be left
in a partially modified state).
 accepts two arguments that can only be passed by keyword
(keyword-only arguments):
key specifies a function of one argument that is used to extract a
comparison key from each list element (for example, ).
The key corresponding to each item in the list is calculated once and
then used for the entire sorting process. The default value of 
means that list items are sorted directly without calculating a separate
key value.
The  utility is available to convert a 2.x
style cmp function to a key function.
reverse is a boolean value.  If set to , then the list elements
are sorted as if each comparison were reversed.
This method modifies the sequence in place for economy of space when
sorting a large sequence.  To remind users that it operates by side
effect, it does not return the sorted sequence (use  to
explicitly request a new sorted list instance).
The  method is guaranteed to be stable.  A sort is stable if it
guarantees not to change the relative order of elements that compare equal
— this is helpful for sorting in multiple passes (for example, sort by
department, then by salary grade).

CPython implementation detail: While a list is being sorted, the effect of attempting to mutate, or even
inspect, the list is undefined.  The C implementation of Python makes the
list appear empty for the duration, and raises  if it can
detect that the list has been mutated during a sort.


