link:
library/collections.html#ordereddict-objects

docs:

 objects¶
Ordered dictionaries are just like regular dictionaries but have some extra
capabilities relating to ordering operations.  They have become less
important now that the built-in  class gained the ability
to remember insertion order (this new behavior became guaranteed in
Python 3.7).
Some differences from  still remain:

The regular  was designed to be very good at mapping
operations.  Tracking insertion order was secondary.
The  was designed to be good at reordering operations.
Space efficiency, iteration speed, and the performance of update
operations were secondary.
Algorithmically,  can handle frequent reordering
operations better than .  This makes it suitable for tracking
recent accesses (for example in an LRU cache).
The equality operation for  checks for matching order.
The  method of  has a different
signature.  It accepts an optional argument to specify which item is popped.
 has a  method to
efficiently reposition an element to an endpoint.
Until Python 3.8,  lacked a  method.



class ([items])¶
Return an instance of a  subclass that has methods
specialized for rearranging dictionary order.

New in version 3.1.



(last=True)¶
The  method for ordered dictionaries returns and removes a
(key, value) pair.  The pairs are returned in
LIFO order if last is true
or FIFO order if false.



(key, last=True)¶
Move an existing key to either end of an ordered dictionary.  The item
is moved to the right end if last is true (the default) or to the
beginning if last is false.  Raises  if the key does
not exist:



New in version 3.2.



In addition to the usual mapping methods, ordered dictionaries also support
reverse iteration using .
Equality tests between  objects are order-sensitive
and are implemented as .
Equality tests between  objects and other
 objects are order-insensitive like regular
dictionaries.  This allows  objects to be substituted
anywhere a regular dictionary is used.

Changed in version 3.5: The items, keys, and values views
of  now support reverse iteration using .


Changed in version 3.6: With the acceptance of PEP 468, order is retained for keyword arguments
passed to the  constructor and its 
method.


 Examples and Recipes¶
It is straightforward to create an ordered dictionary variant
that remembers the order the keys were last inserted.
If a new entry overwrites an existing entry, the
original insertion position is changed and moved to the end:


An  would also be useful for implementing
variants of :



