link:
library/contextlib.html#replacing-any-use-of-try-finally-and-flag-variables

docs:

Replacing any use of  and flag variables¶
A pattern you will sometimes see is a  statement with a flag
variable to indicate whether or not the body of the  clause should
be executed. In its simplest form (that can’t already be handled just by
using an  clause instead), it looks something like this:


As with any  statement based code, this can cause problems for
development and review, because the setup code and the cleanup code can end
up being separated by arbitrarily long sections of code.
 makes it possible to instead register a callback for
execution at the end of a  statement, and then later decide to skip
executing that callback:


This allows the intended cleanup up behaviour to be made explicit up front,
rather than requiring a separate flag variable.
If a particular application uses this pattern a lot, it can be simplified
even further by means of a small helper class:


If the resource cleanup isn’t already neatly bundled into a standalone
function, then it is still possible to use the decorator form of
 to declare the resource cleanup in
advance:


Due to the way the decorator protocol works, a callback function
declared this way cannot take any parameters. Instead, any resources to
be released must be accessed as closure variables.
