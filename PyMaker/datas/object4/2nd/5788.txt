link:
library/json.html#module-json

docs:

 — JSON encoder and decoder¶
Source code: Lib/json/__init__.py

JSON (JavaScript Object Notation), specified by
RFC 7159 (which obsoletes RFC 4627) and by
ECMA-404,
is a lightweight data interchange format inspired by
JavaScript object literal syntax
(although it is not a strict subset of JavaScript [1] ).
 exposes an API familiar to users of the standard library
 and  modules.
Encoding basic Python object hierarchies:


Compact encoding:


Pretty printing:


Decoding JSON:


Specializing JSON object decoding:


Extending :


Using  from the shell to validate and pretty-print:


See Command Line Interface for detailed documentation.

Note
JSON is a subset of YAML 1.2.  The JSON produced by
this module’s default settings (in particular, the default separators
value) is also a subset of YAML 1.0 and 1.1.  This module can thus also be
used as a YAML serializer.


Basic Usage¶


(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)¶
Serialize obj as a JSON formatted stream to fp (a -supporting
file-like object) using this conversion table.
If skipkeys is true (default: ), then dict keys that are not
of a basic type (, , , ,
) will be skipped instead of raising a .
The  module always produces  objects, not
 objects. Therefore,  must support 
input.
If ensure_ascii is true (the default), the output is guaranteed to
have all incoming non-ASCII characters escaped.  If ensure_ascii is
false, these characters will be output as-is.
If check_circular is false (default: ), then the circular
reference check for container types will be skipped and a circular reference
will result in an  (or worse).
If allow_nan is false (default: ), then it will be a
 to serialize out of range  values (,
, ) in strict compliance of the JSON specification.
If allow_nan is true, their JavaScript equivalents (,
, ) will be used.
If indent is a non-negative integer or string, then JSON array elements and
object members will be pretty-printed with that indent level.  An indent level
of 0, negative, or  will only insert newlines.   (the default)
selects the most compact representation. Using a positive integer indent
indents that many spaces per level.  If indent is a string (such as ),
that string is used to indent each level.

Changed in version 3.2: Allow strings for indent in addition to integers.

If specified, separators should be an 
tuple.  The default is  if indent is  and
 otherwise.  To get the most compact JSON representation,
you should specify  to eliminate whitespace.

Changed in version 3.4: Use  as default if indent is not .

If specified, default should be a function that gets called for objects that
can’t otherwise be serialized.  It should return a JSON encodable version of
the object or raise a .  If not specified, 
is raised.
If sort_keys is true (default: ), then the output of
dictionaries will be sorted by key.
To use a custom  subclass (e.g. one that overrides the
 method to serialize additional types), specify it with the
cls kwarg; otherwise  is used.

Changed in version 3.6: All optional parameters are now keyword-only.


Note
Unlike  and , JSON is not a framed protocol,
so trying to serialize multiple objects with repeated calls to
 using the same fp will result in an invalid JSON file.




(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)¶
Serialize obj to a JSON formatted  using this conversion
table.  The arguments have the same meaning as in
.

Note
Keys in key/value pairs of JSON are always of the type . When
a dictionary is converted into JSON, all the keys of the dictionary are
coerced to strings. As a result of this, if a dictionary is converted
into JSON and then back into a dictionary, the dictionary may not equal
the original one. That is,  if x has non-string
keys.




(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)¶
Deserialize fp (a -supporting text file or
binary file containing a JSON document) to a Python object using
this conversion table.
object_hook is an optional function that will be called with the result of
any object literal decoded (a ).  The return value of
object_hook will be used instead of the .  This feature can be used
to implement custom decoders (e.g. JSON-RPC
class hinting).
object_pairs_hook is an optional function that will be called with the
result of any object literal decoded with an ordered list of pairs.  The
return value of object_pairs_hook will be used instead of the
.  This feature can be used to implement custom decoders.
If object_hook is also defined, the object_pairs_hook takes priority.

Changed in version 3.1: Added support for object_pairs_hook.

parse_float, if specified, will be called with the string of every JSON
float to be decoded.  By default, this is equivalent to .
This can be used to use another datatype or parser for JSON floats
(e.g. ).
parse_int, if specified, will be called with the string of every JSON int
to be decoded.  By default, this is equivalent to .  This can
be used to use another datatype or parser for JSON integers
(e.g. ).
parse_constant, if specified, will be called with one of the following
strings: , , .
This can be used to raise an exception if invalid JSON numbers
are encountered.

Changed in version 3.1: parse_constant doesn’t get called on ‘null’, ‘true’, ‘false’ anymore.

To use a custom  subclass, specify it with the 
kwarg; otherwise  is used.  Additional keyword arguments
will be passed to the constructor of the class.
If the data being deserialized is not a valid JSON document, a
 will be raised.

Changed in version 3.6: All optional parameters are now keyword-only.


Changed in version 3.6: fp can now be a binary file. The input encoding should be
UTF-8, UTF-16 or UTF-32.




(s, *, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)¶
Deserialize s (a ,  or 
instance containing a JSON document) to a Python object using this
conversion table.
The other arguments have the same meaning as in , except
encoding which is ignored and deprecated.
If the data being deserialized is not a valid JSON document, a
 will be raised.

Changed in version 3.6: s can now be of type  or . The
input encoding should be UTF-8, UTF-16 or UTF-32.




Encoders and Decoders¶


class (*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)¶
Simple JSON decoder.
Performs the following translations in decoding by default:






JSON
Python



object
dict

array
list

string
str

number (int)
int

number (real)
float

true
True

false
False

null
None



It also understands , , and  as their
corresponding  values, which is outside the JSON spec.
object_hook, if specified, will be called with the result of every JSON
object decoded and its return value will be used in place of the given
.  This can be used to provide custom deserializations (e.g. to
support JSON-RPC class hinting).
object_pairs_hook, if specified will be called with the result of every
JSON object decoded with an ordered list of pairs.  The return value of
object_pairs_hook will be used instead of the .  This
feature can be used to implement custom decoders.  If object_hook is also
defined, the object_pairs_hook takes priority.

Changed in version 3.1: Added support for object_pairs_hook.

parse_float, if specified, will be called with the string of every JSON
float to be decoded.  By default, this is equivalent to .
This can be used to use another datatype or parser for JSON floats
(e.g. ).
parse_int, if specified, will be called with the string of every JSON int
to be decoded.  By default, this is equivalent to .  This can
be used to use another datatype or parser for JSON integers
(e.g. ).
parse_constant, if specified, will be called with one of the following
strings: , , .
This can be used to raise an exception if invalid JSON numbers
are encountered.
If strict is false ( is the default), then control characters
will be allowed inside strings.  Control characters in this context are
those with character codes in the 0–31 range, including  (tab),
,  and .
If the data being deserialized is not a valid JSON document, a
 will be raised.

Changed in version 3.6: All parameters are now keyword-only.



(s)¶
Return the Python representation of s (a  instance
containing a JSON document).
 will be raised if the given JSON document is not
valid.



(s)¶
Decode a JSON document from s (a  beginning with a
JSON document) and return a 2-tuple of the Python representation
and the index in s where the document ended.
This can be used to decode a JSON document from a string that may have
extraneous data at the end.




class (*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)¶
Extensible JSON encoder for Python data structures.
Supports the following objects and types by default:






Python
JSON



dict
object

list, tuple
array

str
string

int, float, int- & float-derived Enums
number

True
true

False
false

None
null




Changed in version 3.4: Added support for int- and float-derived Enum classes.

To extend this to recognize other objects, subclass and implement a
 method with another method that returns a serializable object
for  if possible, otherwise it should call the superclass implementation
(to raise ).
If skipkeys is false (the default), then it is a  to
attempt encoding of keys that are not , ,
 or .  If skipkeys is true, such items are simply
skipped.
If ensure_ascii is true (the default), the output is guaranteed to
have all incoming non-ASCII characters escaped.  If ensure_ascii is
false, these characters will be output as-is.
If check_circular is true (the default), then lists, dicts, and custom
encoded objects will be checked for circular references during encoding to
prevent an infinite recursion (which would cause an ).
Otherwise, no such check takes place.
If allow_nan is true (the default), then , , and
 will be encoded as such.  This behavior is not JSON
specification compliant, but is consistent with most JavaScript based
encoders and decoders.  Otherwise, it will be a  to encode
such floats.
If sort_keys is true (default: ), then the output of dictionaries
will be sorted by key; this is useful for regression tests to ensure that
JSON serializations can be compared on a day-to-day basis.
If indent is a non-negative integer or string, then JSON array elements and
object members will be pretty-printed with that indent level.  An indent level
of 0, negative, or  will only insert newlines.   (the default)
selects the most compact representation. Using a positive integer indent
indents that many spaces per level.  If indent is a string (such as ),
that string is used to indent each level.

Changed in version 3.2: Allow strings for indent in addition to integers.

If specified, separators should be an 
tuple.  The default is  if indent is  and
 otherwise.  To get the most compact JSON representation,
you should specify  to eliminate whitespace.

Changed in version 3.4: Use  as default if indent is not .

If specified, default should be a function that gets called for objects that
can’t otherwise be serialized.  It should return a JSON encodable version of
the object or raise a .  If not specified, 
is raised.

Changed in version 3.6: All parameters are now keyword-only.



(o)¶
Implement this method in a subclass such that it returns a serializable
object for o, or calls the base implementation (to raise a
).
For example, to support arbitrary iterators, you could implement default
like this:





(o)¶
Return a JSON string representation of a Python data structure, o.  For
example:





(o)¶
Encode the given object, o, and yield each string representation as
available.  For example:






Exceptions¶


exception (msg, doc, pos)¶
Subclass of  with the following additional attributes:


¶
The unformatted error message.



¶
The JSON document being parsed.



¶
The start index of doc where parsing failed.



¶
The line corresponding to pos.



¶
The column corresponding to pos.


New in version 3.5.




Standard Compliance and Interoperability¶
The JSON format is specified by RFC 7159 and by
ECMA-404.
This section details this module’s level of compliance with the RFC.
For simplicity,  and  subclasses, and
parameters other than those explicitly mentioned, are not considered.
This module does not comply with the RFC in a strict fashion, implementing some
extensions that are valid JavaScript but not valid JSON.  In particular:

Infinite and NaN number values are accepted and output;
Repeated names within an object are accepted, and only the value of the last
name-value pair is used.

Since the RFC permits RFC-compliant parsers to accept input texts that are not
RFC-compliant, this module’s deserializer is technically RFC-compliant under
default settings.

Character Encodings¶
The RFC requires that JSON be represented using either UTF-8, UTF-16, or
UTF-32, with UTF-8 being the recommended default for maximum interoperability.
As permitted, though not required, by the RFC, this module’s serializer sets
ensure_ascii=True by default, thus escaping the output so that the resulting
strings only contain ASCII characters.
Other than the ensure_ascii parameter, this module is defined strictly in
terms of conversion between Python objects and
, and thus does not otherwise directly address
the issue of character encodings.
The RFC prohibits adding a byte order mark (BOM) to the start of a JSON text,
and this module’s serializer does not add a BOM to its output.
The RFC permits, but does not require, JSON deserializers to ignore an initial
BOM in their input.  This module’s deserializer raises a 
when an initial BOM is present.
The RFC does not explicitly forbid JSON strings which contain byte sequences
that don’t correspond to valid Unicode characters (e.g. unpaired UTF-16
surrogates), but it does note that they may cause interoperability problems.
By default, this module accepts and outputs (when present in the original
) code points for such sequences.


Infinite and NaN Number Values¶
The RFC does not permit the representation of infinite or NaN number values.
Despite that, by default, this module accepts and outputs ,
, and  as if they were valid JSON number literal values:


In the serializer, the allow_nan parameter can be used to alter this
behavior.  In the deserializer, the parse_constant parameter can be used to
alter this behavior.


Repeated Names Within an Object¶
The RFC specifies that the names within a JSON object should be unique, but
does not mandate how repeated names in JSON objects should be handled.  By
default, this module does not raise an exception; instead, it ignores all but
the last name-value pair for a given name:


The object_pairs_hook parameter can be used to alter this behavior.


Top-level Non-Object, Non-Array Values¶
The old version of JSON specified by the obsolete RFC 4627 required that
the top-level value of a JSON text must be either a JSON object or array
(Python  or ), and could not be a JSON null,
boolean, number, or string value.  RFC 7159 removed that restriction, and
this module does not and has never implemented that restriction in either its
serializer or its deserializer.
Regardless, for maximum interoperability, you may wish to voluntarily adhere
to the restriction yourself.


Implementation Limitations¶
Some JSON deserializer implementations may set limits on:

the size of accepted JSON texts
the maximum level of nesting of JSON objects and arrays
the range and precision of JSON numbers
the content and maximum length of JSON strings

This module does not impose any such limits beyond those of the relevant
Python datatypes themselves or the Python interpreter itself.
When serializing to JSON, beware any such limitations in applications that may
consume your JSON.  In particular, it is common for JSON numbers to be
deserialized into IEEE 754 double precision numbers and thus subject to that
representation’s range and precision limitations.  This is especially relevant
when serializing Python  values of extremely large magnitude, or
when serializing instances of “exotic” numerical types such as
.



Command Line Interface¶
Source code: Lib/json/tool.py

The  module provides a simple command line interface to validate
and pretty-print JSON objects.
If the optional  and  arguments are not
specified,  and  will be used respectively:



Changed in version 3.5: The output is now in the same order as the input. Use the
 option to sort the output of dictionaries
alphabetically by key.


Command line options¶


¶
The JSON file to be validated or pretty-printed:


If infile is not specified, read from .



¶
Write the output of the infile to the given outfile. Otherwise, write it
to .



¶
Sort the output of dictionaries alphabetically by key.

New in version 3.5.




¶
Show the help message.

Footnotes



[1]As noted in the errata for RFC 7159,
JSON permits literal U+2028 (LINE SEPARATOR) and
U+2029 (PARAGRAPH SEPARATOR) characters in strings, whereas JavaScript
(as of ECMAScript Edition 5.1) does not.




