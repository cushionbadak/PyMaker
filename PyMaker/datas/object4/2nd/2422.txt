link:
library/sqlite3.html#cursor-objects

docs:

Cursor Objects¶


class ¶
A  instance has the following attributes and methods.


(sql[, parameters])¶
Executes an SQL statement. The SQL statement may be parameterized (i. e.
placeholders instead of SQL literals). The  module supports two
kinds of placeholders: question marks (qmark style) and named placeholders
(named style).
Here’s an example of both styles:


 will only execute a single SQL statement. If you try to execute
more than one statement with it, it will raise a . Use
 if you want to execute multiple SQL statements with one
call.



(sql, seq_of_parameters)¶
Executes an SQL command against all parameter sequences or mappings found in
the sequence seq_of_parameters.  The  module also allows
using an iterator yielding parameters instead of a sequence.


Here’s a shorter example using a generator:





(sql_script)¶
This is a nonstandard convenience method for executing multiple SQL statements
at once. It issues a  statement first, then executes the SQL script it
gets as a parameter.
sql_script can be an instance of .
Example:





()¶
Fetches the next row of a query result set, returning a single sequence,
or  when no more data is available.



(size=cursor.arraysize)¶
Fetches the next set of rows of a query result, returning a list.  An empty
list is returned when no more rows are available.
The number of rows to fetch per call is specified by the size parameter.
If it is not given, the cursor’s arraysize determines the number of rows
to be fetched. The method should try to fetch as many rows as indicated by
the size parameter. If this is not possible due to the specified number of
rows not being available, fewer rows may be returned.
Note there are performance considerations involved with the size parameter.
For optimal performance, it is usually best to use the arraysize attribute.
If the size parameter is used, then it is best for it to retain the same
value from one  call to the next.



()¶
Fetches all (remaining) rows of a query result, returning a list.  Note that
the cursor’s arraysize attribute can affect the performance of this operation.
An empty list is returned when no rows are available.



()¶
Close the cursor now (rather than whenever  is called).
The cursor will be unusable from this point forward; a 
exception will be raised if any operation is attempted with the cursor.



¶
Although the  class of the  module implements this
attribute, the database engine’s own support for the determination of “rows
affected”/”rows selected” is quirky.
For  statements, the number of modifications are summed up
into .
As required by the Python DB API Spec, the  attribute “is -1 in
case no  has been performed on the cursor or the rowcount of the
last operation is not determinable by the interface”. This includes 
statements because we cannot determine the number of rows a query produced
until all rows were fetched.
With SQLite versions before 3.6.5,  is set to 0 if
you make a  without any condition.



¶
This read-only attribute provides the rowid of the last modified row. It is
only set if you issued an  or a  statement using the
 method.  For operations other than  or
 or when  is called,  is
set to .
If the  or  statement failed to insert the previous
successful rowid is returned.

Changed in version 3.6: Added support for the  statement.




¶
Read/write attribute that controls the number of rows returned by .
The default value is 1 which means a single row would be fetched per call.



¶
This read-only attribute provides the column names of the last query. To
remain compatible with the Python DB API, it returns a 7-tuple for each
column where the last six items of each tuple are .
It is set for  statements without any matching rows as well.



¶
This read-only attribute provides the SQLite database 
used by the  object.  A  object created by
calling  will have a
 attribute that refers to con:




