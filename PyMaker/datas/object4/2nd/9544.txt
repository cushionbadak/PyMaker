link:
library/site.html#module-site

docs:

 — Site-specific configuration hook¶
Source code: Lib/site.py

This module is automatically imported during initialization. The automatic
import can be suppressed using the interpreter’s  option.
Importing this module will append site-specific paths to the module search path
and add a few builtins, unless  was used.  In that case, this module
can be safely imported with no automatic modifications to the module search path
or additions to the builtins.  To explicitly trigger the usual site-specific
additions, call the  function.

Changed in version 3.3: Importing the module used to trigger paths manipulation even when using
.

It starts by constructing up to four directories from a head and a tail part.
For the head part, it uses  and ; empty heads
are skipped.  For the tail part, it uses the empty string and then
 (on Windows) or
 (on Unix and Macintosh).  For each
of the distinct head-tail combinations, it sees if it refers to an existing
directory, and if so, adds it to  and also inspects the newly
added path for configuration files.

Changed in version 3.5: Support for the “site-python” directory has been removed.

If a file named “pyvenv.cfg” exists one directory above sys.executable,
sys.prefix and sys.exec_prefix are set to that directory and
it is also checked for site-packages (sys.base_prefix and
sys.base_exec_prefix will always be the “real” prefixes of the Python
installation). If “pyvenv.cfg” (a bootstrap configuration file) contains
the key “include-system-site-packages” set to anything other than “false”
(case-insensitive), the system-level prefixes will still also be
searched for site-packages; otherwise they won’t.
A path configuration file is a file whose name has the form 
and exists in one of the four directories mentioned above; its contents are
additional items (one per line) to be added to .  Non-existing items
are never added to , and no check is made that the item refers to a
directory rather than a file.  No item is added to  more than
once.  Blank lines and lines beginning with  are skipped.  Lines starting
with  (followed by space or tab) are executed.
For example, suppose  and  are set to
.  The Python X.Y library is then installed in
.  Suppose this has
a subdirectory  with three
subsubdirectories, ,  and , and two path
configuration files,  and .  Assume
 contains the following:


and  contains:


Then the following version-specific directories are added to
, in this order:


Note that  is omitted because it doesn’t exist; the 
directory precedes the  directory because  comes
alphabetically before ; and  is omitted because it is
not mentioned in either path configuration file.
After these path manipulations, an attempt is made to import a module named
, which can perform arbitrary site-specific customizations.
It is typically created by a system administrator in the site-packages
directory.  If this import fails with an  or its subclass
exception, and the exception’s  attribute equals to ,
it is silently ignored.  If Python is started without output streams available, as
with  on Windows (which is used by default to start IDLE),
attempted output from  is ignored.  Any other exception
causes a silent and perhaps mysterious failure of the process.
After this, an attempt is made to import a module named ,
which can perform arbitrary user-specific customizations, if
 is true.  This file is intended to be created in the
user site-packages directory (see below), which is part of  unless
disabled by .  If this import fails with an  or
its subclass exception, and the exception’s  attribute equals to
, it is silently ignored.
Note that for some non-Unix systems,  and  are
empty, and the path manipulations are skipped; however the import of
 and  is still attempted.

Readline configuration¶
On systems that support , this module will also import and
configure the  module, if Python is started in
interactive mode and without the  option.
The default behavior is enable tab-completion and to use
 as the history save file.  To disable it, delete (or
override) the  attribute in your
 or  module or your
 file.

Changed in version 3.4: Activation of rlcompleter and history was made automatic.



Module contents¶


¶
A list of prefixes for site-packages directories.



¶
Flag showing the status of the user site-packages directory.   means
that it is enabled and was added to .   means that it
was disabled by user request (with  or
).   means it was disabled for security
reasons (mismatch between user or group id and effective id) or by an
administrator.



¶
Path to the user site-packages for the running Python.  Can be  if
 hasn’t been called yet.  Default value is
 for UNIX and non-framework Mac
OS X builds,  for Mac
framework builds, and 
on Windows.  This directory is a site directory, which means that
 files in it will be processed.



¶
Path to the base directory for the user site-packages.  Can be  if
 hasn’t been called yet.  Default value is
 for UNIX and Mac OS X non-framework builds,
 for Mac framework builds, and
 for Windows.  This value is used by Distutils to
compute the installation directories for scripts, data files, Python modules,
etc. for the user installation scheme.
See also .



()¶
Adds all the standard site-specific directories to the module search
path.  This function is called automatically when this module is imported,
unless the Python interpreter was started with the  flag.

Changed in version 3.3: This function used to be called unconditionally.




(sitedir, known_paths=None)¶
Add a directory to sys.path and process its  files.  Typically
used in  or  (see above).



()¶
Return a list containing all global site-packages directories.

New in version 3.2.




()¶
Return the path of the user base directory, .  If it is not
initialized yet, this function will also set it, respecting
.

New in version 3.2.




()¶
Return the path of the user-specific site-packages directory,
.  If it is not initialized yet, this function will also set
it, respecting  and .

New in version 3.2.


The  module also provides a way to get the user directories from the
command line:


If it is called without arguments, it will print the contents of
 on the standard output, followed by the value of
 and whether the directory exists, then the same thing for
, and finally the value of .


¶
Print the path to the user base directory.



¶
Print the path to the user site-packages directory.

If both options are given, user base and user site will be printed (always in
this order), separated by .
If any option is given, the script will exit with one of these values:  if
the user site-packages directory is enabled,  if it was disabled by the
user,  if it is disabled for security reasons or by an administrator, and a
value greater than 2 if there is an error.

See also
PEP 370 – Per user site-packages directory


