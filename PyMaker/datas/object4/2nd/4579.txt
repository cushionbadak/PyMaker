link:
library/contextvars.html#module-contextvars

docs:

 — Context Variables¶

This module provides APIs to manage, store, and access context-local
state.  The  class is used to declare
and work with Context Variables.  The 
function and the  class should be used to
manage the current context in asynchronous frameworks.
Context managers that have state should use Context Variables
instead of  to prevent their state from
bleeding to other code unexpectedly, when used in concurrent code.
See also PEP 567 for additional details.

New in version 3.7.


Context Variables¶


class (name[, *, default])¶
This class is used to declare a new Context Variable, e.g.:


The required name parameter is used for introspection and debug
purposes.
The optional keyword-only default parameter is returned by
 when no value for the variable is found
in the current context.
Important: Context Variables should be created at the top module
level and never in closures.   objects hold strong
references to context variables which prevents context variables
from being properly garbage collected.


¶
The name of the variable.  This is a read-only property.

New in version 3.7.1.




([default])¶
Return a value for the context variable for the current context.
If there is no value for the variable in the current context,
the method will:

return the value of the default argument of the method,
if provided; or
return the default value for the context variable,
if it was created with one; or
raise a .




(value)¶
Call to set a new value for the context variable in the current
context.
The required value argument is the new value for the context
variable.
Returns a  object that can be used
to restore the variable to its previous value via the
 method.



(token)¶
Reset the context variable to the value it had before the
 that created the token was used.
For example:






class ¶
Token objects are returned by the  method.
They can be passed to the  method to revert
the value of the variable to what it was before the corresponding
set.


¶
A read-only property.  Points to the  object
that created the token.



¶
A read-only property.  Set to the value the variable had before
the  method call that created the token.
It points to  is the variable was not set
before the call.



¶
A marker object used by .




Manual Context Management¶


()¶
Returns a copy of the current  object.
The following snippet gets a copy of the current context and prints
all variables and their values that are set in it:


The function has an O(1) complexity, i.e. works equally fast for
contexts with a few context variables and for contexts that have
a lot of them.



class ¶
A mapping of  to their values.
 creates an empty context with no values in it.
To get a copy of the current context use the
 function.
Context implements the  interface.


(callable, *args, **kwargs)¶
Execute  code in the context object
the run method is called on.  Return the result of the execution
or propagate an exception if one occurred.
Any changes to any context variables that callable makes will
be contained in the context object:


The method raises a  when called on the same
context object from more than one OS thread, or when called
recursively.



()¶
Return a shallow copy of the context object.




Return  if the context has a value for var set;
return  otherwise.




Return the value of the var  variable.
If the variable is not set in the context object, a
 is raised.



(var[, default])¶
Return the value for var if var has the value in the context
object.  Return default otherwise.  If default is not given,
return .




Return an iterator over the variables stored in the context
object.




Return the number of variables set in the context object.



()¶
Return a list of all variables in the context object.



()¶
Return a list of all variables’ values in the context object.



()¶
Return a list of 2-tuples containing all variables and their
values in the context object.




asyncio support¶
Context variables are natively supported in  and are
ready to be used without any extra configuration.  For example, here
is a simple echo server, that uses a context variable to make the
address of a remote client available in the Task that handles that
client:



