link:
library/mailbox.html#message-objects

docs:

 objects¶


class (message=None)¶
A subclass of the  module’s
. Subclasses of  add
mailbox-format-specific state and behavior.
If message is omitted, the new instance is created in a default, empty state.
If message is an  instance, its contents are
copied; furthermore, any format-specific information is converted insofar as
possible if message is a  instance. If message is a string,
a byte string,
or a file, it should contain an RFC 2822-compliant message, which is read
and parsed.  Files should be open in binary mode, but text mode files
are accepted for backward compatibility.
The format-specific state and behaviors offered by subclasses vary, but in
general it is only the properties that are not specific to a particular
mailbox that are supported (although presumably the properties are specific
to a particular mailbox format). For example, file offsets for single-file
mailbox formats and file names for directory-based mailbox formats are not
retained, because they are only applicable to the original mailbox. But state
such as whether a message has been read by the user or marked as important is
retained, because it applies to the message itself.
There is no requirement that  instances be used to represent
messages retrieved using  instances. In some situations, the
time and memory required to generate  representations might
not be acceptable. For such situations,  instances also
offer string and file-like representations, and a custom message factory may
be specified when a  instance is initialized.


¶


class (message=None)¶
A message with Maildir-specific behaviors. Parameter message has the same
meaning as with the  constructor.
Typically, a mail user agent application moves all of the messages in the
 subdirectory to the  subdirectory after the first time
the user opens and closes the mailbox, recording that the messages are old
whether or not they’ve actually been read. Each message in  has an
“info” section added to its file name to store information about its state.
(Some mail readers may also add an “info” section to messages in
.)  The “info” section may take one of two forms: it may contain
“2,” followed by a list of standardized flags (e.g., “2,FR”) or it may
contain “1,” followed by so-called experimental information. Standard flags
for Maildir messages are as follows:







Flag
Meaning
Explanation



D
Draft
Under composition

F
Flagged
Marked as important

P
Passed
Forwarded, resent, or bounced

R
Replied
Replied to

S
Seen
Read

T
Trashed
Marked for subsequent deletion



 instances offer the following methods:


()¶
Return either “new” (if the message should be stored in the 
subdirectory) or “cur” (if the message should be stored in the 
subdirectory).

Note
A message is typically moved from  to  after its
mailbox has been accessed, whether or not the message is has been
read. A message  has been read if  is
.




(subdir)¶
Set the subdirectory the message should be stored in. Parameter subdir
must be either “new” or “cur”.



()¶
Return a string specifying the flags that are currently set. If the
message complies with the standard Maildir format, the result is the
concatenation in alphabetical order of zero or one occurrence of each of
, , , , , and . The empty string
is returned if no flags are set or if “info” contains experimental
semantics.



(flags)¶
Set the flags specified by flags and unset all others.



(flag)¶
Set the flag(s) specified by flag without changing other flags. To add
more than one flag at a time, flag may be a string of more than one
character. The current “info” is overwritten whether or not it contains
experimental information rather than flags.



(flag)¶
Unset the flag(s) specified by flag without changing other flags. To
remove more than one flag at a time, flag maybe a string of more than
one character.  If “info” contains experimental information rather than
flags, the current “info” is not modified.



()¶
Return the delivery date of the message as a floating-point number
representing seconds since the epoch.



(date)¶
Set the delivery date of the message to date, a floating-point number
representing seconds since the epoch.



()¶
Return a string containing the “info” for a message. This is useful for
accessing and modifying “info” that is experimental (i.e., not a list of
flags).



(info)¶
Set “info” to info, which should be a string.


When a  instance is created based upon an
 or  instance, the Status
and X-Status headers are omitted and the following conversions
take place:






Resulting state
 or 
state



“cur” subdirectory
O flag

F flag
F flag

R flag
A flag

S flag
R flag

T flag
D flag



When a  instance is created based upon an
 instance, the following conversions take place:






Resulting state
 state



“cur” subdirectory
“unseen” sequence

“cur” subdirectory and S flag
no “unseen” sequence

F flag
“flagged” sequence

R flag
“replied” sequence



When a  instance is created based upon a
 instance, the following conversions take place:






Resulting state
 state



“cur” subdirectory
“unseen” label

“cur” subdirectory and S flag
no “unseen” label

P flag
“forwarded” or “resent” label

R flag
“answered” label

T flag
“deleted” label





¶


class (message=None)¶
A message with mbox-specific behaviors. Parameter message has the same meaning
as with the  constructor.
Messages in an mbox mailbox are stored together in a single file. The
sender’s envelope address and the time of delivery are typically stored in a
line beginning with “From ” that is used to indicate the start of a message,
though there is considerable variation in the exact format of this data among
mbox implementations. Flags that indicate the state of the message, such as
whether it has been read or marked as important, are typically stored in
Status and X-Status headers.
Conventional flags for mbox messages are as follows:







Flag
Meaning
Explanation



R
Read
Read

O
Old
Previously detected by MUA

D
Deleted
Marked for subsequent deletion

F
Flagged
Marked as important

A
Answered
Replied to



The “R” and “O” flags are stored in the Status header, and the
“D”, “F”, and “A” flags are stored in the X-Status header. The
flags and headers typically appear in the order mentioned.
 instances offer the following methods:


()¶
Return a string representing the “From ” line that marks the start of the
message in an mbox mailbox. The leading “From ” and the trailing newline
are excluded.



(from_, time_=None)¶
Set the “From ” line to from_, which should be specified without a
leading “From ” or trailing newline. For convenience, time_ may be
specified and will be formatted appropriately and appended to from_. If
time_ is specified, it should be a  instance, a
tuple suitable for passing to , or  (to use
).



()¶
Return a string specifying the flags that are currently set. If the
message complies with the conventional format, the result is the
concatenation in the following order of zero or one occurrence of each of
, , , , and .



(flags)¶
Set the flags specified by flags and unset all others. Parameter flags
should be the concatenation in any order of zero or more occurrences of
each of , , , , and .



(flag)¶
Set the flag(s) specified by flag without changing other flags. To add
more than one flag at a time, flag may be a string of more than one
character.



(flag)¶
Unset the flag(s) specified by flag without changing other flags. To
remove more than one flag at a time, flag maybe a string of more than
one character.


When an  instance is created based upon a
 instance, a “From ” line is generated based upon the
 instance’s delivery date, and the following conversions
take place:






Resulting state
 state



R flag
S flag

O flag
“cur” subdirectory

D flag
T flag

F flag
F flag

A flag
R flag



When an  instance is created based upon an
 instance, the following conversions take place:






Resulting state
 state



R flag and O flag
no “unseen” sequence

O flag
“unseen” sequence

F flag
“flagged” sequence

A flag
“replied” sequence



When an  instance is created based upon a
 instance, the following conversions take place:






Resulting state
 state



R flag and O flag
no “unseen” label

O flag
“unseen” label

D flag
“deleted” label

A flag
“answered” label



When a  instance is created based upon an 
instance, the “From ” line is copied and all flags directly correspond:






Resulting state
 state



R flag
R flag

O flag
O flag

D flag
D flag

F flag
F flag

A flag
A flag





¶


class (message=None)¶
A message with MH-specific behaviors. Parameter message has the same meaning
as with the  constructor.
MH messages do not support marks or flags in the traditional sense, but they
do support sequences, which are logical groupings of arbitrary messages. Some
mail reading programs (although not the standard mh and
nmh) use sequences in much the same way flags are used with other
formats, as follows:






Sequence
Explanation



unseen
Not read, but previously detected by MUA

replied
Replied to

flagged
Marked as important



 instances offer the following methods:


()¶
Return a list of the names of sequences that include this message.



(sequences)¶
Set the list of sequences that include this message.



(sequence)¶
Add sequence to the list of sequences that include this message.



(sequence)¶
Remove sequence from the list of sequences that include this message.


When an  instance is created based upon a
 instance, the following conversions take place:






Resulting state
 state



“unseen” sequence
no S flag

“replied” sequence
R flag

“flagged” sequence
F flag



When an  instance is created based upon an
 or  instance, the Status
and X-Status headers are omitted and the following conversions
take place:






Resulting state
 or 
state



“unseen” sequence
no R flag

“replied” sequence
A flag

“flagged” sequence
F flag



When an  instance is created based upon a
 instance, the following conversions take place:






Resulting state
 state



“unseen” sequence
“unseen” label

“replied” sequence
“answered” label





¶


class (message=None)¶
A message with Babyl-specific behaviors. Parameter message has the same
meaning as with the  constructor.
Certain message labels, called attributes, are defined by convention
to have special meanings. The attributes are as follows:






Label
Explanation



unseen
Not read, but previously detected by MUA

deleted
Marked for subsequent deletion

filed
Copied to another file or mailbox

answered
Replied to

forwarded
Forwarded

edited
Modified by the user

resent
Resent



By default, Rmail displays only visible headers. The 
class, though, uses the original headers because they are more
complete. Visible headers may be accessed explicitly if desired.
 instances offer the following methods:


()¶
Return a list of labels on the message.



(labels)¶
Set the list of labels on the message to labels.



(label)¶
Add label to the list of labels on the message.



(label)¶
Remove label from the list of labels on the message.



()¶
Return an  instance whose headers are the message’s
visible headers and whose body is empty.



(visible)¶
Set the message’s visible headers to be the same as the headers in
message.  Parameter visible should be a  instance, an
 instance, a string, or a file-like object
(which should be open in text mode).



()¶
When a  instance’s original headers are modified, the
visible headers are not automatically modified to correspond. This method
updates the visible headers as follows: each visible header with a
corresponding original header is set to the value of the original header,
each visible header without a corresponding original header is removed,
and any of Date, From, Reply-To,
To, CC, and Subject that are
present in the original headers but not the visible headers are added to
the visible headers.


When a  instance is created based upon a
 instance, the following conversions take place:






Resulting state
 state



“unseen” label
no S flag

“deleted” label
T flag

“answered” label
R flag

“forwarded” label
P flag



When a  instance is created based upon an
 or  instance, the Status
and X-Status headers are omitted and the following conversions
take place:






Resulting state
 or 
state



“unseen” label
no R flag

“deleted” label
D flag

“answered” label
A flag



When a  instance is created based upon an
 instance, the following conversions take place:






Resulting state
 state



“unseen” label
“unseen” sequence

“answered” label
“replied” sequence





¶


class (message=None)¶
A message with MMDF-specific behaviors. Parameter message has the same meaning
as with the  constructor.
As with message in an mbox mailbox, MMDF messages are stored with the
sender’s address and the delivery date in an initial line beginning with
“From “.  Likewise, flags that indicate the state of the message are
typically stored in Status and X-Status headers.
Conventional flags for MMDF messages are identical to those of mbox message
and are as follows:







Flag
Meaning
Explanation



R
Read
Read

O
Old
Previously detected by MUA

D
Deleted
Marked for subsequent deletion

F
Flagged
Marked as important

A
Answered
Replied to



The “R” and “O” flags are stored in the Status header, and the
“D”, “F”, and “A” flags are stored in the X-Status header. The
flags and headers typically appear in the order mentioned.
 instances offer the following methods, which are
identical to those offered by :


()¶
Return a string representing the “From ” line that marks the start of the
message in an mbox mailbox. The leading “From ” and the trailing newline
are excluded.



(from_, time_=None)¶
Set the “From ” line to from_, which should be specified without a
leading “From ” or trailing newline. For convenience, time_ may be
specified and will be formatted appropriately and appended to from_. If
time_ is specified, it should be a  instance, a
tuple suitable for passing to , or  (to use
).



()¶
Return a string specifying the flags that are currently set. If the
message complies with the conventional format, the result is the
concatenation in the following order of zero or one occurrence of each of
, , , , and .



(flags)¶
Set the flags specified by flags and unset all others. Parameter flags
should be the concatenation in any order of zero or more occurrences of
each of , , , , and .



(flag)¶
Set the flag(s) specified by flag without changing other flags. To add
more than one flag at a time, flag may be a string of more than one
character.



(flag)¶
Unset the flag(s) specified by flag without changing other flags. To
remove more than one flag at a time, flag maybe a string of more than
one character.


When an  instance is created based upon a
 instance, a “From ” line is generated based upon the
 instance’s delivery date, and the following conversions
take place:






Resulting state
 state



R flag
S flag

O flag
“cur” subdirectory

D flag
T flag

F flag
F flag

A flag
R flag



When an  instance is created based upon an
 instance, the following conversions take place:






Resulting state
 state



R flag and O flag
no “unseen” sequence

O flag
“unseen” sequence

F flag
“flagged” sequence

A flag
“replied” sequence



When an  instance is created based upon a
 instance, the following conversions take place:






Resulting state
 state



R flag and O flag
no “unseen” label

O flag
“unseen” label

D flag
“deleted” label

A flag
“answered” label



When an  instance is created based upon an
 instance, the “From ” line is copied and all flags directly
correspond:






Resulting state
 state



R flag
R flag

O flag
O flag

D flag
D flag

F flag
F flag

A flag
A flag




