link:
library/argparse.html#argumentparser-objects

docs:

ArgumentParser objects¶


class (prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True, allow_abbrev=True)¶
Create a new  object. All parameters should be passed
as keyword arguments. Each parameter has its own more detailed description
below, but in short they are:

prog - The name of the program (default: )
usage - The string describing the program usage (default: generated from
arguments added to parser)
description - Text to display before the argument help (default: none)
epilog - Text to display after the argument help (default: none)
parents - A list of  objects whose arguments should
also be included
formatter_class - A class for customizing the help output
prefix_chars - The set of characters that prefix optional arguments
(default: ‘-‘)
fromfile_prefix_chars - The set of characters that prefix files from
which additional arguments should be read (default: )
argument_default - The global default value for arguments
(default: )
conflict_handler - The strategy for resolving conflicting optionals
(usually unnecessary)
add_help - Add a  option to the parser (default: )
allow_abbrev - Allows long options to be abbreviated if the
abbreviation is unambiguous. (default: )


Changed in version 3.5: allow_abbrev parameter was added.


The following sections describe how each of these are used.

prog¶
By default,  objects use  to determine
how to display the name of the program in help messages.  This default is almost
always desirable because it will make the help messages match how the program was
invoked on the command line.  For example, consider a file named
 with the following code:


The help for this program will display  as the program name
(regardless of where the program was invoked from):


To change this default behavior, another value can be supplied using the
 argument to :


Note that the program name, whether determined from  or from the
 argument, is available to help messages using the  format
specifier.




usage¶
By default,  calculates the usage message from the
arguments it contains:


The default message can be overridden with the  keyword argument:


The  format specifier is available to fill in the program name in
your usage messages.


description¶
Most calls to the  constructor will use the
 keyword argument.  This argument gives a brief description of
what the program does and how it works.  In help messages, the description is
displayed between the command-line usage string and the help messages for the
various arguments:


By default, the description will be line-wrapped so that it fits within the
given space.  To change this behavior, see the formatter_class argument.


epilog¶
Some programs like to display additional description of the program after the
description of the arguments.  Such text can be specified using the 
argument to :


As with the description argument, the  text is by default
line-wrapped, but this behavior can be adjusted with the formatter_class
argument to .


parents¶
Sometimes, several parsers share a common set of arguments. Rather than
repeating the definitions of these arguments, a single parser with all the
shared arguments and passed to  argument to 
can be used.  The  argument takes a list of 
objects, collects all the positional and optional actions from them, and adds
these actions to the  object being constructed:


Note that most parent parsers will specify .  Otherwise, the
 will see two  options (one in the parent
and one in the child) and raise an error.

Note
You must fully initialize the parsers before passing them via .
If you change the parent parsers after the child parser, those changes will
not be reflected in the child.



formatter_class¶
 objects allow the help formatting to be customized by
specifying an alternate formatting class.  Currently, there are four such
classes:


class ¶

class ¶

class ¶

class ¶

 and  give
more control over how textual descriptions are displayed.
By default,  objects line-wrap the description and
epilog texts in command-line help messages:


Passing  as 
indicates that description and epilog are already correctly formatted and
should not be line-wrapped:


 maintains whitespace for all sorts of help text,
including argument descriptions. However, multiple new lines are replaced with
one. If you wish to preserve multiple blank lines, add spaces between the
newlines.
 automatically adds information about
default values to each of the argument help messages:


 uses the name of the type argument for each
argument as the display name for its values (rather than using the dest
as the regular formatter does):




prefix_chars¶
Most command-line options will use  as the prefix, e.g. .
Parsers that need to support different or additional prefix
characters, e.g. for options
like  or , may specify them using the  argument
to the ArgumentParser constructor:


The  argument defaults to . Supplying a set of
characters that does not include  will cause  options to be
disallowed.


fromfile_prefix_chars¶
Sometimes, for example when dealing with a particularly long argument lists, it
may make sense to keep the list of arguments in a file rather than typing it out
at the command line.  If the  argument is given to the
 constructor, then arguments that start with any of the
specified characters will be treated as files, and will be replaced by the
arguments they contain.  For example:


Arguments read from a file must by default be one per line (but see also
) and are treated as if they
were in the same place as the original file referencing argument on the command
line.  So in the example above, the expression 
is considered equivalent to the expression .
The  argument defaults to , meaning that
arguments will never be treated as file references.


argument_default¶
Generally, argument defaults are specified either by passing a default to
 or by calling the
 methods with a specific set of name-value
pairs.  Sometimes however, it may be useful to specify a single parser-wide
default for arguments.  This can be accomplished by passing the
 keyword argument to .  For example,
to globally suppress attribute creation on 
calls, we supply :




allow_abbrev¶
Normally, when you pass an argument list to the
 method of an ,
it recognizes abbreviations of long options.
This feature can be disabled by setting  to :



New in version 3.5.



conflict_handler¶
 objects do not allow two actions with the same option
string.  By default,  objects raise an exception if an
attempt is made to create an argument with an option string that is already in
use:


Sometimes (e.g. when using parents) it may be useful to simply override any
older arguments with the same option string.  To get this behavior, the value
 can be supplied to the  argument of
:


Note that  objects only remove an action if all of its
option strings are overridden.  So, in the example above, the old 
action is retained as the  action, because only the  option
string was overridden.


add_help¶
By default, ArgumentParser objects add an option which simply displays
the parser’s help message. For example, consider a file named
 containing the following code:


If  or  is supplied at the command line, the ArgumentParser
help will be printed:


Occasionally, it may be useful to disable the addition of this help option.
This can be achieved by passing  as the  argument to
:


The help option is typically . The exception to this is
if the  is specified and does not include , in
which case  and  are not valid options.  In
this case, the first character in  is used to prefix
the help options:



