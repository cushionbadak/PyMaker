link:
library/random.html#module-random

docs:

 — Generate pseudo-random numbers¶
Source code: Lib/random.py

This module implements pseudo-random number generators for various
distributions.
For integers, there is uniform selection from a range. For sequences, there is
uniform selection of a random element, a function to generate a random
permutation of a list in-place, and a function for random sampling without
replacement.
On the real line, there are functions to compute uniform, normal (Gaussian),
lognormal, negative exponential, gamma, and beta distributions. For generating
distributions of angles, the von Mises distribution is available.
Almost all module functions depend on the basic function , which
generates a random float uniformly in the semi-open range [0.0, 1.0).  Python
uses the Mersenne Twister as the core generator.  It produces 53-bit precision
floats and has a period of 2**19937-1.  The underlying implementation in C is
both fast and threadsafe.  The Mersenne Twister is one of the most extensively
tested random number generators in existence.  However, being completely
deterministic, it is not suitable for all purposes, and is completely unsuitable
for cryptographic purposes.
The functions supplied by this module are actually bound methods of a hidden
instance of the  class.  You can instantiate your own
instances of  to get generators that don’t share state.
Class  can also be subclassed if you want to use a different
basic generator of your own devising: in that case, override the ,
, , and  methods.
Optionally, a new generator can supply a  method — this
allows  to produce selections over an arbitrarily large range.
The  module also provides the  class which
uses the system function  to generate random numbers
from sources provided by the operating system.

Warning
The pseudo-random generators of this module should not be used for
security purposes.  For security or cryptographic uses, see the
 module.


See also
M. Matsumoto and T. Nishimura, “Mersenne Twister: A 623-dimensionally
equidistributed uniform pseudorandom number generator”, ACM Transactions on
Modeling and Computer Simulation Vol. 8, No. 1, January pp.3–30 1998.
Complementary-Multiply-with-Carry recipe for a compatible alternative
random number generator with a long period and comparatively simple update
operations.


Bookkeeping functions¶


(a=None, version=2)¶
Initialize the random number generator.
If a is omitted or , the current system time is used.  If
randomness sources are provided by the operating system, they are used
instead of the system time (see the  function for details
on availability).
If a is an int, it is used directly.
With version 2 (the default), a , , or 
object gets converted to an  and all of its bits are used.
With version 1 (provided for reproducing random sequences from older versions
of Python), the algorithm for  and  generates a
narrower range of seeds.

Changed in version 3.2: Moved to the version 2 scheme which uses all of the bits in a string seed.




()¶
Return an object capturing the current internal state of the generator.  This
object can be passed to  to restore the state.



(state)¶
state should have been obtained from a previous call to , and
 restores the internal state of the generator to what it was at
the time  was called.



(k)¶
Returns a Python integer with k random bits. This method is supplied with
the MersenneTwister generator and some other generators may also provide it
as an optional part of the API. When available,  enables
 to handle arbitrarily large ranges.



Functions for integers¶


(stop)¶

(start, stop[, step])
Return a randomly selected element from .  This is
equivalent to , but doesn’t actually build a
range object.
The positional argument pattern matches that of .  Keyword arguments
should not be used because the function may use them in unexpected ways.

Changed in version 3.2:  is more sophisticated about producing equally distributed
values.  Formerly it used a style like  which could produce
slightly uneven distributions.




(a, b)¶
Return a random integer N such that .  Alias for
.



Functions for sequences¶


(seq)¶
Return a random element from the non-empty sequence seq. If seq is empty,
raises .



(population, weights=None, *, cum_weights=None, k=1)¶
Return a k sized list of elements chosen from the population with replacement.
If the population is empty, raises .
If a weights sequence is specified, selections are made according to the
relative weights.  Alternatively, if a cum_weights sequence is given, the
selections are made according to the cumulative weights (perhaps computed
using ).  For example, the relative weights
 are equivalent to the cumulative weights
.  Internally, the relative weights are converted to
cumulative weights before making selections, so supplying the cumulative
weights saves work.
If neither weights nor cum_weights are specified, selections are made
with equal probability.  If a weights sequence is supplied, it must be
the same length as the population sequence.  It is a 
to specify both weights and cum_weights.
The weights or cum_weights can use any numeric type that interoperates
with the  values returned by  (that includes
integers, floats, and fractions but excludes decimals).
For a given seed, the  function with equal weighting
typically produces a different sequence than repeated calls to
.  The algorithm used by  uses floating
point arithmetic for internal consistency and speed.  The algorithm used
by  defaults to integer arithmetic with repeated selections
to avoid small biases from round-off error.

New in version 3.6.




(x[, random])¶
Shuffle the sequence x in place.
The optional argument random is a 0-argument function returning a random
float in [0.0, 1.0); by default, this is the function .
To shuffle an immutable sequence and return a new shuffled list, use
 instead.
Note that even for small , the total number of permutations of x
can quickly grow larger than the period of most random number generators.
This implies that most permutations of a long sequence can never be
generated.  For example, a sequence of length 2080 is the largest that
can fit within the period of the Mersenne Twister random number generator.



(population, k)¶
Return a k length list of unique elements chosen from the population sequence
or set. Used for random sampling without replacement.
Returns a new list containing elements from the population while leaving the
original population unchanged.  The resulting list is in selection order so that
all sub-slices will also be valid random samples.  This allows raffle winners
(the sample) to be partitioned into grand prize and second place winners (the
subslices).
Members of the population need not be hashable or unique.  If the population
contains repeats, then each occurrence is a possible selection in the sample.
To choose a sample from a range of integers, use a  object as an
argument.  This is especially fast and space efficient for sampling from a large
population:  .
If the sample size is larger than the population size, a 
is raised.



Real-valued distributions¶
The following functions generate specific real-valued distributions. Function
parameters are named after the corresponding variables in the distribution’s
equation, as used in common mathematical practice; most of these equations can
be found in any statistics text.


()¶
Return the next random floating point number in the range [0.0, 1.0).



(a, b)¶
Return a random floating point number N such that  for
 and  for .
The end-point value  may or may not be included in the range
depending on floating-point rounding in the equation .



(low, high, mode)¶
Return a random floating point number N such that  and
with the specified mode between those bounds.  The low and high bounds
default to zero and one.  The mode argument defaults to the midpoint
between the bounds, giving a symmetric distribution.



(alpha, beta)¶
Beta distribution.  Conditions on the parameters are  and
. Returned values range between 0 and 1.



(lambd)¶
Exponential distribution.  lambd is 1.0 divided by the desired
mean.  It should be nonzero.  (The parameter would be called
“lambda”, but that is a reserved word in Python.)  Returned values
range from 0 to positive infinity if lambd is positive, and from
negative infinity to 0 if lambd is negative.



(alpha, beta)¶
Gamma distribution.  (Not the gamma function!)  Conditions on the
parameters are  and .
The probability distribution function is:





(mu, sigma)¶
Gaussian distribution.  mu is the mean, and sigma is the standard
deviation.  This is slightly faster than the  function
defined below.



(mu, sigma)¶
Log normal distribution.  If you take the natural logarithm of this
distribution, you’ll get a normal distribution with mean mu and standard
deviation sigma.  mu can have any value, and sigma must be greater than
zero.



(mu, sigma)¶
Normal distribution.  mu is the mean, and sigma is the standard deviation.



(mu, kappa)¶
mu is the mean angle, expressed in radians between 0 and 2*pi, and kappa
is the concentration parameter, which must be greater than or equal to zero.  If
kappa is equal to zero, this distribution reduces to a uniform random angle
over the range 0 to 2*pi.



(alpha)¶
Pareto distribution.  alpha is the shape parameter.



(alpha, beta)¶
Weibull distribution.  alpha is the scale parameter and beta is the shape
parameter.



Alternative Generator¶


class ([seed])¶
Class that implements the default pseudo-random number generator used by the
 module.



class ([seed])¶
Class that uses the  function for generating random numbers
from sources provided by the operating system. Not available on all systems.
Does not rely on software state, and sequences are not reproducible. Accordingly,
the  method has no effect and is ignored.
The  and  methods raise
 if called.



Notes on Reproducibility¶
Sometimes it is useful to be able to reproduce the sequences given by a pseudo
random number generator.  By re-using a seed value, the same sequence should be
reproducible from run to run as long as multiple threads are not running.
Most of the random module’s algorithms and seeding functions are subject to
change across Python versions, but two aspects are guaranteed not to change:

If a new seeding method is added, then a backward compatible seeder will be
offered.
The generator’s  method will continue to produce the same
sequence when the compatible seeder is given the same seed.



Examples and Recipes¶
Basic examples:


Simulations:


Example of statistical bootstrapping using resampling
with replacement to estimate a confidence interval for the mean of a sample of
size five:


Example of a resampling permutation test
to determine the statistical significance or p-value of an observed difference
between the effects of a drug versus a placebo:


Simulation of arrival times and service deliveries in a single server queue:



See also
Statistics for Hackers
a video tutorial by
Jake Vanderplas
on statistical analysis using just a few fundamental concepts
including simulation, sampling, shuffling, and cross-validation.
Economics Simulation
a simulation of a marketplace by
Peter Norvig that shows effective
use of many of the tools and distributions provided by this module
(gauss, uniform, sample, betavariate, choice, triangular, and randrange).
A Concrete Introduction to Probability (using Python)
a tutorial by Peter Norvig covering
the basics of probability theory, how to write simulations, and
how to perform data analysis using Python.


