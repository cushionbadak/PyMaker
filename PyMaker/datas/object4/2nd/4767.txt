link:
library/asyncio-eventloop.html#running-and-stopping-the-loop

docs:

Running and stopping the loop¶


(future)¶
Run until the future (an instance of ) has
completed.
If the argument is a coroutine object it
is implicitly scheduled to run as a .
Return the Future’s result or raise its exception.



()¶
Run the event loop until  is called.
If  is called before  is called,
the loop will poll the I/O selector once with a timeout of zero,
run all callbacks scheduled in response to I/O events (and
those that were already scheduled), and then exit.
If  is called while  is running,
the loop will run the current batch of callbacks and then exit.
Note that new callbacks scheduled by callbacks will not run in this
case; instead, they will run the next time  or
 is called.



()¶
Stop the event loop.



()¶
Return  if the event loop is currently running.



()¶
Return  if the event loop was closed.



()¶
Close the event loop.
The loop must not be running when this function is called.
Any pending callbacks will be discarded.
This method clears all queues and shuts down the executor, but does
not wait for the executor to finish.
This method is idempotent and irreversible.  No other methods
should be called after the event loop is closed.



coroutine ()¶
Schedule all currently open asynchronous generator objects to
close with an  call.  After calling this method,
the event loop will issue a warning if a new asynchronous generator
is iterated. This should be used to reliably finalize all scheduled
asynchronous generators.
Note that there is no need to call this function when
 is used.
Example:



New in version 3.6.


