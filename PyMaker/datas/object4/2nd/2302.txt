link:
library/pickle.html#comparison-with-marshal

docs:

Comparison with ¶
Python has a more primitive serialization module called , but in
general  should always be the preferred way to serialize Python
objects.   exists primarily to support Python’s 
files.
The  module differs from  in several significant ways:

The  module keeps track of the objects it has already serialized,
so that later references to the same object won’t be serialized again.
 doesn’t do this.
This has implications both for recursive objects and object sharing.  Recursive
objects are objects that contain references to themselves.  These are not
handled by marshal, and in fact, attempting to marshal recursive objects will
crash your Python interpreter.  Object sharing happens when there are multiple
references to the same object in different places in the object hierarchy being
serialized.   stores such objects only once, and ensures that all
other references point to the master copy.  Shared objects remain shared, which
can be very important for mutable objects.

 cannot be used to serialize user-defined classes and their
instances.   can save and restore class instances transparently,
however the class definition must be importable and live in the same module as
when the object was stored.

The  serialization format is not guaranteed to be portable
across Python versions.  Because its primary job in life is to support
 files, the Python implementers reserve the right to change the
serialization format in non-backwards compatible ways should the need arise.
The  serialization format is guaranteed to be backwards compatible
across Python releases provided a compatible pickle protocol is chosen and
pickling and unpickling code deals with Python 2 to Python 3 type differences
if your data is crossing that unique breaking change language boundary.


