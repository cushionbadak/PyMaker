link:
library/unittest.mock.html#mocking-magic-methods

docs:

Mocking Magic Methods¶
 supports mocking the Python protocol methods, also known as
“magic methods”. This allows mock objects to replace containers or other
objects that implement Python protocols.
Because magic methods are looked up differently from normal methods [2], this
support has been specially implemented. This means that only specific magic
methods are supported. The supported list includes almost all of them. If
there are any missing that you need please let us know.
You mock magic methods by setting the method you are interested in to a function
or a mock instance. If you are using a function then it must take  as
the first argument [3].






One use case for this is for mocking objects used as context managers in a
 statement:


Calls to magic methods do not appear in , but they
are recorded in .

Note
If you use the spec keyword argument to create a mock then attempting to
set a magic method that isn’t in the spec will raise an .

The full list of supported magic methods is:

, ,  and 
,  and 
,  and 
Comparisons: , , , ,
 and 
Container methods: , , ,
, , , 
and 
Context manager:  and 
Unary numeric methods: ,  and 
The numeric methods (including right hand and in-place variants):
, , , , , ,
, , , ,
, , , , and 
Numeric conversion methods: , , 
and 
Descriptor methods: ,  and 
Pickling: , , ,
,  and 

The following methods exist but are not supported as they are either in use
by mock, can’t be set dynamically, or can cause problems:

, ,  and 
, , , 

