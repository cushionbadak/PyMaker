link:
library/re.html#module-re

docs:

 — Regular expression operations¶
Source code: Lib/re.py

This module provides regular expression matching operations similar to
those found in Perl.
Both patterns and strings to be searched can be Unicode strings ()
as well as 8-bit strings ().
However, Unicode strings and 8-bit strings cannot be mixed:
that is, you cannot match a Unicode string with a byte pattern or
vice-versa; similarly, when asking for a substitution, the replacement
string must be of the same type as both the pattern and the search string.
Regular expressions use the backslash character () to indicate
special forms or to allow special characters to be used without invoking
their special meaning.  This collides with Python’s usage of the same
character for the same purpose in string literals; for example, to match
a literal backslash, one might have to write  as the pattern
string, because the regular expression must be , and each
backslash must be expressed as  inside a regular Python string
literal.
The solution is to use Python’s raw string notation for regular expression
patterns; backslashes are not handled in any special way in a string literal
prefixed with .  So  is a two-character string containing
 and , while  is a one-character string containing a
newline.  Usually patterns will be expressed in Python code using this raw
string notation.
It is important to note that most regular expression operations are available as
module-level functions and methods on
compiled regular expressions.  The functions are shortcuts
that don’t require you to compile a regex object first, but miss some
fine-tuning parameters.

See also
The third-party regex module,
which has an API compatible with the standard library  module,
but offers additional functionality and a more thorough Unicode support.


Regular Expression Syntax¶
A regular expression (or RE) specifies a set of strings that matches it; the
functions in this module let you check if a particular string matches a given
regular expression (or if a given regular expression matches a particular
string, which comes down to the same thing).
Regular expressions can be concatenated to form new regular expressions; if A
and B are both regular expressions, then AB is also a regular expression.
In general, if a string p matches A and another string q matches B, the
string pq will match AB.  This holds unless A or B contain low precedence
operations; boundary conditions between A and B; or have numbered group
references.  Thus, complex expressions can easily be constructed from simpler
primitive expressions like the ones described here.  For details of the theory
and implementation of regular expressions, consult the Friedl book [Frie09],
or almost any textbook about compiler construction.
A brief explanation of the format of regular expressions follows.  For further
information and a gentler presentation, consult the Regular Expression HOWTO.
Regular expressions can contain both special and ordinary characters. Most
ordinary characters, like , , or , are the simplest regular
expressions; they simply match themselves.  You can concatenate ordinary
characters, so  matches the string .  (In the rest of this
section, we’ll write RE’s in , usually without quotes, and
strings to be matched .)
Some characters, like  or , are special. Special
characters either stand for classes of ordinary characters, or affect
how the regular expressions around them are interpreted.
Repetition qualifiers (, , , , etc) cannot be
directly nested. This avoids ambiguity with the non-greedy modifier suffix
, and with other modifiers in other implementations. To apply a second
repetition to an inner repetition, parentheses may be used. For example,
the expression  matches any multiple of six  characters.
The special characters are:


(Dot.)  In the default mode, this matches any character except a newline.  If
the  flag has been specified, this matches any character
including a newline.



(Caret.)  Matches the start of the string, and in  mode also
matches immediately after each newline.



Matches the end of the string or just before the newline at the end of the
string, and in  mode also matches before a newline.  
matches both ‘foo’ and ‘foobar’, while the regular expression  matches
only ‘foo’.  More interestingly, searching for  in 
matches ‘foo2’ normally, but ‘foo1’ in  mode; searching for
a single  in  will find two (empty) matches: one just before
the newline, and one at the end of the string.



Causes the resulting RE to match 0 or more repetitions of the preceding RE, as
many repetitions as are possible.   will match ‘a’, ‘ab’, or ‘a’ followed
by any number of ‘b’s.



Causes the resulting RE to match 1 or more repetitions of the preceding RE.
 will match ‘a’ followed by any non-zero number of ‘b’s; it will not
match just ‘a’.



Causes the resulting RE to match 0 or 1 repetitions of the preceding RE.
 will match either ‘a’ or ‘ab’.


, , 
The , , and  qualifiers are all greedy; they match
as much text as possible.  Sometimes this behaviour isn’t desired; if the RE
 is matched against , it will match the entire
string, and not just .  Adding  after the qualifier makes it
perform the match in non-greedy or minimal fashion; as few
characters as possible will be matched.  Using the RE  will match
only .



Specifies that exactly m copies of the previous RE should be matched; fewer
matches cause the entire RE not to match.  For example,  will match
exactly six  characters, but not five.

Causes the resulting RE to match from m to n repetitions of the preceding
RE, attempting to match as many repetitions as possible.  For example,
 will match from 3 to 5  characters.  Omitting m specifies a
lower bound of zero,  and omitting n specifies an infinite upper bound.  As an
example,  will match  or a thousand  characters
followed by a , but not . The comma may not be omitted or the
modifier would be confused with the previously described form.

Causes the resulting RE to match from m to n repetitions of the preceding
RE, attempting to match as few repetitions as possible.  This is the
non-greedy version of the previous qualifier.  For example, on the
6-character string ,  will match 5  characters,
while  will only match 3 characters.



Either escapes special characters (permitting you to match characters like
, , and so forth), or signals a special sequence; special
sequences are discussed below.
If you’re not using a raw string to express the pattern, remember that Python
also uses the backslash as an escape sequence in string literals; if the escape
sequence isn’t recognized by Python’s parser, the backslash and subsequent
character are included in the resulting string.  However, if Python would
recognize the resulting sequence, the backslash should be repeated twice.  This
is complicated and hard to understand, so it’s highly recommended that you use
raw strings for all but the simplest expressions.




Used to indicate a set of characters.  In a set:

Characters can be listed individually, e.g.  will match ,
, or .


Ranges of characters can be indicated by giving two characters and separating
them by a , for example  will match any lowercase ASCII letter,
 will match all the two-digits numbers from  to , and
 will match any hexadecimal digit.  If  is escaped (e.g.
) or if it’s placed as the first or last character
(e.g.  or ), it will match a literal .
Special characters lose their special meaning inside sets.  For example,
 will match any of the literal characters , ,
, or .


Character classes such as  or  (defined below) are also accepted
inside a set, although the characters they match depends on whether
 or  mode is in force.


Characters that are not within a range can be matched by complementing
the set.  If the first character of the set is , all the characters
that are not in the set will be matched.  For example,  will match
any character except , and  will match any character except
.   has no special meaning if it’s not the first character in
the set.
To match a literal  inside a set, precede it with a backslash, or
place it at the beginning of the set.  For example, both  and
 will both match a parenthesis.


Support of nested sets and set operations as in Unicode Technical
Standard #18 might be added in the future.  This would change the
syntax, so to facilitate this change a  will be raised
in ambiguous cases for the time being.
That includes sets starting with a literal  or containing literal
character sequences , , , and .  To
avoid a warning escape them with a backslash.


Changed in version 3.7:  is raised if a character set contains constructs
that will change semantically in the future.





, where A and B can be arbitrary REs, creates a regular expression that
will match either A or B.  An arbitrary number of REs can be separated by the
 in this way.  This can be used inside groups (see below) as well.  As
the target string is scanned, REs separated by  are tried from left to
right. When one pattern completely matches, that branch is accepted. This means
that once A matches, B will not be tested further, even if it would
produce a longer overall match.  In other words, the  operator is never
greedy.  To match a literal , use , or enclose it inside a
character class, as in .



Matches whatever regular expression is inside the parentheses, and indicates the
start and end of a group; the contents of a group can be retrieved after a match
has been performed, and can be matched later in the string with the 
special sequence, described below.  To match the literals  or ,
use  or , or enclose them inside a character class: , .



This is an extension notation (a  following a  is not meaningful
otherwise).  The first character after the  determines what the meaning
and further syntax of the construct is. Extensions usually do not create a new
group;  is the only exception to this rule. Following are the
currently supported extensions.

(One or more letters from the set , , , ,
, , .)  The group matches the empty string; the
letters set the corresponding flags:  (ASCII-only matching),
 (ignore case),  (locale dependent),
 (multi-line),  (dot matches all),
 (Unicode matching), and  (verbose),
for the entire regular expression.
(The flags are described in Module Contents.)
This is useful if you wish to include the flags as part of the
regular expression, instead of passing a flag argument to the
 function.  Flags should be used first in the
expression string.



A non-capturing version of regular parentheses.  Matches whatever regular
expression is inside the parentheses, but the substring matched by the group
cannot be retrieved after performing a match or referenced later in the
pattern.

(Zero or more letters from the set , , , ,
, , , optionally followed by  followed by
one or more letters from the , , , .)
The letters set or remove the corresponding flags:
 (ASCII-only matching),  (ignore case),
 (locale dependent),  (multi-line),
 (dot matches all),  (Unicode matching),
and  (verbose), for the part of the expression.
(The flags are described in Module Contents.)
The letters ,  and  are mutually exclusive when used
as inline flags, so they can’t be combined or follow .  Instead,
when one of them appears in an inline group, it overrides the matching mode
in the enclosing group.  In Unicode patterns  switches to
ASCII-only matching, and  switches to Unicode matching
(default).  In byte pattern  switches to locale depending
matching, and  switches to ASCII-only matching (default).
This override is only in effect for the narrow inline group, and the
original matching mode is restored outside of the group.

New in version 3.6.


Changed in version 3.7: The letters ,  and  also can be used in a group.





Similar to regular parentheses, but the substring matched by the group is
accessible via the symbolic group name name.  Group names must be valid
Python identifiers, and each group name must be defined only once within a
regular expression.  A symbolic group is also a numbered group, just as if
the group were not named.
Named groups can be referenced in three contexts.  If the pattern is
 (i.e. matching a string quoted with either
single or double quotes):






Context of reference to group “quote”
Ways to reference it



in the same pattern itself

 (as shown)




when processing match object m


 (etc.)



in a string passed to the repl
argument of 













A backreference to a named group; it matches whatever text was matched by the
earlier group named name.



A comment; the contents of the parentheses are simply ignored.



Matches if  matches next, but doesn’t consume any of the string.  This is
called a lookahead assertion.  For example,  will match
 only if it’s followed by .



Matches if  doesn’t match next.  This is a negative lookahead assertion.
For example,  will match  only if it’s not
followed by .



Matches if the current position in the string is preceded by a match for 
that ends at the current position.  This is called a positive lookbehind
assertion.  will find a match in , since the
lookbehind will back up 3 characters and check if the contained pattern matches.
The contained pattern must only match strings of some fixed length, meaning that
 or  are allowed, but  and  are not.  Note that
patterns which start with positive lookbehind assertions will not match at the
beginning of the string being searched; you will most likely want to use the
 function rather than the  function:


This example looks for a word following a hyphen:



Changed in version 3.5: Added support for group references of fixed length.





Matches if the current position in the string is not preceded by a match for
.  This is called a negative lookbehind assertion.  Similar to
positive lookbehind assertions, the contained pattern must only match strings of
some fixed length.  Patterns which start with negative lookbehind assertions may
match at the beginning of the string being searched.

Will try to match with  if the group with given id or
name exists, and with  if it doesn’t.  is
optional and can be omitted. For example,
 is a poor email matching pattern, which
will match with  as well as , but
not with  nor .

The special sequences consist of  and a character from the list below.
If the ordinary character is not an ASCII digit or an ASCII letter, then the
resulting RE will match the second character.  For example,  matches the
character .


Matches the contents of the group of the same number.  Groups are numbered
starting from 1.  For example,  matches  or ,
but not  (note the space after the group).  This special sequence
can only be used to match one of the first 99 groups.  If the first digit of
number is 0, or number is 3 octal digits long, it will not be interpreted as
a group match, but as the character with octal value number. Inside the
 and  of a character class, all numeric escapes are treated as
characters.



Matches only at the start of the string.



Matches the empty string, but only at the beginning or end of a word.
A word is defined as a sequence of word characters.  Note that formally,
 is defined as the boundary between a  and a  character
(or vice versa), or between  and the beginning/end of the string.
This means that  matches , , ,
 but not  or .
By default Unicode alphanumerics are the ones used in Unicode patterns, but
this can be changed by using the  flag.  Word boundaries are
determined by the current locale if the  flag is used.
Inside a character range,  represents the backspace character, for
compatibility with Python’s string literals.




Matches the empty string, but only when it is not at the beginning or end
of a word.  This means that  matches , ,
, but not , , or .
 is just the opposite of , so word characters in Unicode
patterns are Unicode alphanumerics or the underscore, although this can
be changed by using the  flag.  Word boundaries are
determined by the current locale if the  flag is used.




For Unicode (str) patterns:
Matches any Unicode decimal digit (that is, any character in
Unicode character category [Nd]).  This includes , and
also many other digit characters.  If the  flag is
used only  is matched.
For 8-bit (bytes) patterns:
Matches any decimal digit; this is equivalent to .





Matches any character which is not a decimal digit. This is
the opposite of . If the  flag is used this
becomes the equivalent of .




For Unicode (str) patterns:
Matches Unicode whitespace characters (which includes
, and also many other characters, for example the
non-breaking spaces mandated by typography rules in many
languages). If the  flag is used, only
 is matched.
For 8-bit (bytes) patterns:
Matches characters considered whitespace in the ASCII character set;
this is equivalent to .





Matches any character which is not a whitespace character. This is
the opposite of . If the  flag is used this
becomes the equivalent of .




For Unicode (str) patterns:
Matches Unicode word characters; this includes most characters
that can be part of a word in any language, as well as numbers and
the underscore. If the  flag is used, only
 is matched.
For 8-bit (bytes) patterns:
Matches characters considered alphanumeric in the ASCII character set;
this is equivalent to .  If the  flag is
used, matches characters considered alphanumeric in the current locale
and the underscore.





Matches any character which is not a word character. This is
the opposite of . If the  flag is used this
becomes the equivalent of .  If the  flag is
used, matches characters considered alphanumeric in the current locale
and the underscore.



Matches only at the end of the string.

Most of the standard escapes supported by Python string literals are also
accepted by the regular expression parser:


(Note that  is used to represent word boundaries, and means “backspace”
only inside character classes.)
 and  escape sequences are only recognized in Unicode
patterns.  In bytes patterns they are errors.  Unknown escapes of ASCII
letters are reserved for future use and treated as errors.
Octal escapes are included in a limited form.  If the first digit is a 0, or if
there are three octal digits, it is considered an octal escape. Otherwise, it is
a group reference.  As for string literals, octal escapes are always at most
three digits in length.

Changed in version 3.3: The  and  escape sequences have been added.


Changed in version 3.6: Unknown escapes consisting of  and an ASCII letter now are errors.



Module Contents¶
The module defines several functions, constants, and an exception. Some of the
functions are simplified versions of the full featured methods for compiled
regular expressions.  Most non-trivial applications always use the compiled
form.

Changed in version 3.6: Flag constants are now instances of , which is a subclass of
.



(pattern, flags=0)¶
Compile a regular expression pattern into a regular expression object, which can be used for matching using its
,  and other methods, described
below.
The expression’s behaviour can be modified by specifying a flags value.
Values can be any of the following variables, combined using bitwise OR (the
 operator).
The sequence


is equivalent to


but using  and saving the resulting regular expression
object for reuse is more efficient when the expression will be used several
times in a single program.

Note
The compiled versions of the most recent patterns passed to
 and the module-level matching functions are cached, so
programs that use only a few regular expressions at a time needn’t worry
about compiling regular expressions.




¶

¶
Make , , , , , ,  and 
perform ASCII-only matching instead of full Unicode matching.  This is only
meaningful for Unicode patterns, and is ignored for byte patterns.
Corresponds to the inline flag .
Note that for backward compatibility, the  flag still
exists (as well as its synonym  and its embedded
counterpart ), but these are redundant in Python 3 since
matches are Unicode by default for strings (and Unicode matching
isn’t allowed for bytes).



¶
Display debug information about compiled expression.
No corresponding inline flag.



¶

¶
Perform case-insensitive matching; expressions like  will also
match lowercase letters.  Full Unicode matching (such as  matching
) also works unless the  flag is used to disable
non-ASCII matches.  The current locale does not change the effect of this
flag unless the  flag is also used.
Corresponds to the inline flag .
Note that when the Unicode patterns  or  are used in
combination with the  flag, they will match the 52 ASCII
letters and 4 additional non-ASCII letters: ‘İ’ (U+0130, Latin capital
letter I with dot above), ‘ı’ (U+0131, Latin small letter dotless i),
‘ſ’ (U+017F, Latin small letter long s) and ‘K’ (U+212A, Kelvin sign).
If the  flag is used, only letters ‘a’ to ‘z’
and ‘A’ to ‘Z’ are matched.



¶

¶
Make , , ,  and case-insensitive matching
dependent on the current locale.  This flag can be used only with bytes
patterns.  The use of this flag is discouraged as the locale mechanism
is very unreliable, it only handles one “culture” at a time, and it only
works with 8-bit locales.  Unicode matching is already enabled by default
in Python 3 for Unicode (str) patterns, and it is able to handle different
locales/languages.
Corresponds to the inline flag .

Changed in version 3.6:  can be used only with bytes patterns and is
not compatible with .


Changed in version 3.7: Compiled regular expression objects with the  flag no
longer depend on the locale at compile time.  Only the locale at
matching time affects the result of matching.




¶

¶
When specified, the pattern character  matches at the beginning of the
string and at the beginning of each line (immediately following each newline);
and the pattern character  matches at the end of the string and at the
end of each line (immediately preceding each newline).  By default, 
matches only at the beginning of the string, and  only at the end of the
string and immediately before the newline (if any) at the end of the string.
Corresponds to the inline flag .



¶

¶
Make the  special character match any character at all, including a
newline; without this flag,  will match anything except a newline.
Corresponds to the inline flag .



¶

¶
This flag allows you to write regular expressions that look nicer and are
more readable by allowing you to visually separate logical sections of the
pattern and add comments. Whitespace within the pattern is ignored, except
when in a character class, or when preceded by an unescaped backslash,
or within tokens like ,  or .
When a line contains a  that is not in a character class and is not
preceded by an unescaped backslash, all characters from the leftmost such
 through the end of the line are ignored.
This means that the two following regular expression objects that match a
decimal number are functionally equal:


Corresponds to the inline flag .



(pattern, string, flags=0)¶
Scan through string looking for the first location where the regular expression
pattern produces a match, and return a corresponding match object.  Return  if no position in the string matches the
pattern; note that this is different from finding a zero-length match at some
point in the string.



(pattern, string, flags=0)¶
If zero or more characters at the beginning of string match the regular
expression pattern, return a corresponding match object.  Return  if the string does not match the pattern;
note that this is different from a zero-length match.
Note that even in  mode,  will only match
at the beginning of the string and not at the beginning of each line.
If you want to locate a match anywhere in string, use 
instead (see also search() vs. match()).



(pattern, string, flags=0)¶
If the whole string matches the regular expression pattern, return a
corresponding match object.  Return  if the
string does not match the pattern; note that this is different from a
zero-length match.

New in version 3.4.




(pattern, string, maxsplit=0, flags=0)¶
Split string by the occurrences of pattern.  If capturing parentheses are
used in pattern, then the text of all groups in the pattern are also returned
as part of the resulting list. If maxsplit is nonzero, at most maxsplit
splits occur, and the remainder of the string is returned as the final element
of the list.


If there are capturing groups in the separator and it matches at the start of
the string, the result will start with an empty string.  The same holds for
the end of the string:


That way, separator components are always found at the same relative
indices within the result list.
Empty matches for the pattern split the string only when not adjacent
to a previous empty match.



Changed in version 3.1: Added the optional flags argument.


Changed in version 3.7: Added support of splitting on a pattern that could match an empty string.




(pattern, string, flags=0)¶
Return all non-overlapping matches of pattern in string, as a list of
strings.  The string is scanned left-to-right, and matches are returned in
the order found.  If one or more groups are present in the pattern, return a
list of groups; this will be a list of tuples if the pattern has more than
one group.  Empty matches are included in the result.

Changed in version 3.7: Non-empty matches can now start just after a previous empty match.




(pattern, string, flags=0)¶
Return an iterator yielding match objects over
all non-overlapping matches for the RE pattern in string.  The string
is scanned left-to-right, and matches are returned in the order found.  Empty
matches are included in the result.

Changed in version 3.7: Non-empty matches can now start just after a previous empty match.




(pattern, repl, string, count=0, flags=0)¶
Return the string obtained by replacing the leftmost non-overlapping occurrences
of pattern in string by the replacement repl.  If the pattern isn’t found,
string is returned unchanged.  repl can be a string or a function; if it is
a string, any backslash escapes in it are processed.  That is,  is
converted to a single newline character,  is converted to a carriage return, and
so forth.  Unknown escapes of ASCII letters are reserved for future use and
treated as errors.  Other unknown escapes such as  are left alone.
Backreferences, such
as , are replaced with the substring matched by group 6 in the pattern.
For example:


If repl is a function, it is called for every non-overlapping occurrence of
pattern.  The function takes a single match object
argument, and returns the replacement string.  For example:


The pattern may be a string or a pattern object.
The optional argument count is the maximum number of pattern occurrences to be
replaced; count must be a non-negative integer.  If omitted or zero, all
occurrences will be replaced. Empty matches for the pattern are replaced only
when not adjacent to a previous empty match, so  returns
.
In string-type repl arguments, in addition to the character escapes and
backreferences described above,
 will use the substring matched by the group named , as
defined by the  syntax.  uses the corresponding
group number;  is therefore equivalent to , but isn’t ambiguous
in a replacement such as .   would be interpreted as a
reference to group 20, not a reference to group 2 followed by the literal
character .  The backreference  substitutes in the entire
substring matched by the RE.

Changed in version 3.1: Added the optional flags argument.


Changed in version 3.5: Unmatched groups are replaced with an empty string.


Changed in version 3.6: Unknown escapes in pattern consisting of  and an ASCII letter
now are errors.


Changed in version 3.7: Unknown escapes in repl consisting of  and an ASCII letter
now are errors.


Changed in version 3.7: Empty matches for the pattern are replaced when adjacent to a previous
non-empty match.




(pattern, repl, string, count=0, flags=0)¶
Perform the same operation as , but return a tuple .

Changed in version 3.1: Added the optional flags argument.


Changed in version 3.5: Unmatched groups are replaced with an empty string.




(pattern)¶
Escape special characters in pattern.
This is useful if you want to match an arbitrary literal string that may
have regular expression metacharacters in it.  For example:


This functions must not be used for the replacement string in 
and , only backslashes should be escaped.  For example:



Changed in version 3.3: The  character is no longer escaped.


Changed in version 3.7: Only characters that can have special meaning in a regular expression
are escaped.




()¶
Clear the regular expression cache.



exception (msg, pattern=None, pos=None)¶
Exception raised when a string passed to one of the functions here is not a
valid regular expression (for example, it might contain unmatched parentheses)
or when some other error occurs during compilation or matching.  It is never an
error if a string contains no match for a pattern.  The error instance has
the following additional attributes:


¶
The unformatted error message.



¶
The regular expression pattern.



¶
The index in pattern where compilation failed (may be ).



¶
The line corresponding to pos (may be ).



¶
The column corresponding to pos (may be ).


Changed in version 3.5: Added additional attributes.




Regular Expression Objects¶
Compiled regular expression objects support the following methods and
attributes:


(string[, pos[, endpos]])¶
Scan through string looking for the first location where this regular
expression produces a match, and return a corresponding match object.  Return  if no position in the string matches the
pattern; note that this is different from finding a zero-length match at some
point in the string.
The optional second parameter pos gives an index in the string where the
search is to start; it defaults to .  This is not completely equivalent to
slicing the string; the  pattern character matches at the real beginning
of the string and at positions just after a newline, but not necessarily at the
index where the search is to start.
The optional parameter endpos limits how far the string will be searched; it
will be as if the string is endpos characters long, so only the characters
from pos to  will be searched for a match.  If endpos is less
than pos, no match will be found; otherwise, if rx is a compiled regular
expression object,  is equivalent to
.





(string[, pos[, endpos]])¶
If zero or more characters at the beginning of string match this regular
expression, return a corresponding match object.
Return  if the string does not match the pattern; note that this is
different from a zero-length match.
The optional pos and endpos parameters have the same meaning as for the
 method.


If you want to locate a match anywhere in string, use
 instead (see also search() vs. match()).



(string[, pos[, endpos]])¶
If the whole string matches this regular expression, return a corresponding
match object.  Return  if the string does not
match the pattern; note that this is different from a zero-length match.
The optional pos and endpos parameters have the same meaning as for the
 method.



New in version 3.4.




(string, maxsplit=0)¶
Identical to the  function, using the compiled pattern.



(string[, pos[, endpos]])¶
Similar to the  function, using the compiled pattern, but
also accepts optional pos and endpos parameters that limit the search
region like for .



(string[, pos[, endpos]])¶
Similar to the  function, using the compiled pattern, but
also accepts optional pos and endpos parameters that limit the search
region like for .



(repl, string, count=0)¶
Identical to the  function, using the compiled pattern.



(repl, string, count=0)¶
Identical to the  function, using the compiled pattern.



¶
The regex matching flags.  This is a combination of the flags given to
, any  inline flags in the pattern, and implicit
flags such as  if the pattern is a Unicode string.



¶
The number of capturing groups in the pattern.



¶
A dictionary mapping any symbolic group names defined by  to group
numbers.  The dictionary is empty if no symbolic groups were used in the
pattern.



¶
The pattern string from which the pattern object was compiled.


Changed in version 3.7: Added support of  and .  Compiled
regular expression objects are considered atomic.



Match Objects¶
Match objects always have a boolean value of .
Since  and  return 
when there is no match, you can test whether there was a match with a simple
 statement:


Match objects support the following methods and attributes:


(template)¶
Return the string obtained by doing backslash substitution on the template
string template, as done by the  method.
Escapes such as  are converted to the appropriate characters,
and numeric backreferences (, ) and named backreferences
(, ) are replaced by the contents of the
corresponding group.

Changed in version 3.5: Unmatched groups are replaced with an empty string.




([group1, ...])¶
Returns one or more subgroups of the match.  If there is a single argument, the
result is a single string; if there are multiple arguments, the result is a
tuple with one item per argument. Without arguments, group1 defaults to zero
(the whole match is returned). If a groupN argument is zero, the corresponding
return value is the entire matching string; if it is in the inclusive range
[1..99], it is the string matching the corresponding parenthesized group.  If a
group number is negative or larger than the number of groups defined in the
pattern, an  exception is raised. If a group is contained in a
part of the pattern that did not match, the corresponding result is .
If a group is contained in a part of the pattern that matched multiple times,
the last match is returned.


If the regular expression uses the  syntax, the groupN
arguments may also be strings identifying groups by their group name.  If a
string argument is not used as a group name in the pattern, an 
exception is raised.
A moderately complicated example:


Named groups can also be referred to by their index:


If a group matches multiple times, only the last match is accessible:





(g)¶
This is identical to .  This allows easier access to
an individual group from a match:



New in version 3.6.




(default=None)¶
Return a tuple containing all the subgroups of the match, from 1 up to however
many groups are in the pattern.  The default argument is used for groups that
did not participate in the match; it defaults to .
For example:


If we make the decimal place and everything after it optional, not all groups
might participate in the match.  These groups will default to  unless
the default argument is given:





(default=None)¶
Return a dictionary containing all the named subgroups of the match, keyed by
the subgroup name.  The default argument is used for groups that did not
participate in the match; it defaults to .  For example:





([group])¶

([group])¶
Return the indices of the start and end of the substring matched by group;
group defaults to zero (meaning the whole matched substring). Return  if
group exists but did not contribute to the match.  For a match object m, and
a group g that did contribute to the match, the substring matched by group g
(equivalent to ) is


Note that  will equal  if group matched a
null string.  For example, after ,
 is 1,  is 2,  and  are both
2, and  raises an  exception.
An example that will remove remove_this from email addresses:





([group])¶
For a match m, return the 2-tuple . Note
that if group did not contribute to the match, this is .
group defaults to zero, the entire match.



¶
The value of pos which was passed to the  or
 method of a regex object.  This is
the index into the string at which the RE engine started looking for a match.



¶
The value of endpos which was passed to the  or
 method of a regex object.  This is
the index into the string beyond which the RE engine will not go.



¶
The integer index of the last matched capturing group, or  if no group
was matched at all. For example, the expressions , , and
 will have  if applied to the string , while
the expression  will have , if applied to the same
string.



¶
The name of the last matched capturing group, or  if the group didn’t
have a name, or if no group was matched at all.



¶
The regular expression object whose  or
 method produced this match instance.



¶
The string passed to  or .


Changed in version 3.7: Added support of  and .  Match objects
are considered atomic.



Regular Expression Examples¶

Checking for a Pair¶
In this example, we’ll use the following helper function to display match
objects a little more gracefully:


Suppose you are writing a poker program where a player’s hand is represented as
a 5-character string with each character representing a card, “a” for ace, “k”
for king, “q” for queen, “j” for jack, “t” for 10, and “2” through “9”
representing the card with that value.
To see if a given string is a valid hand, one could do the following:


That last hand, , contained a pair, or two of the same valued cards.
To match this with a regular expression, one could use backreferences as such:


To find out what card the pair consists of, one could use the
 method of the match object in the following manner:




Simulating scanf()¶
Python does not currently have an equivalent to .  Regular
expressions are generally more powerful, though also more verbose, than
 format strings.  The table below offers some more-or-less
equivalent mappings between  format tokens and regular
expressions.






 Token
Regular Expression












, , , 














, 




To extract the filename and numbers from a string like


you would use a  format like


The equivalent regular expression would be




search() vs. match()¶
Python offers two different primitive operations based on regular expressions:
 checks for a match only at the beginning of the string, while
 checks for a match anywhere in the string (this is what Perl
does by default).
For example:


Regular expressions beginning with  can be used with  to
restrict the match at the beginning of the string:


Note however that in  mode  only matches at the
beginning of the string, whereas using  with a regular expression
beginning with  will match at the beginning of each line.




Making a Phonebook¶
 splits a string into a list delimited by the passed pattern.  The
method is invaluable for converting textual data into data structures that can be
easily read and modified by Python as demonstrated in the following example that
creates a phonebook.
First, here is the input.  Normally it may come from a file, here we are using
triple-quoted string syntax:


The entries are separated by one or more newlines. Now we convert the string
into a list with each nonempty line having its own entry:


Finally, split each entry into a list with first name, last name, telephone
number, and address.  We use the  parameter of 
because the address has spaces, our splitting pattern, in it:


The  pattern matches the colon after the last name, so that it does not
occur in the result list.  With a  of , we could separate the
house number from the street name:




Text Munging¶
 replaces every occurrence of a pattern with a string or the
result of a function.  This example demonstrates using  with
a function to “munge” text, or randomize the order of all the characters
in each word of a sentence except for the first and last characters:




Finding all Adverbs¶
 matches all occurrences of a pattern, not just the first
one as  does.  For example, if a writer wanted to
find all of the adverbs in some text, they might use  in
the following manner:




Finding all Adverbs and their Positions¶
If one wants more information about all matches of a pattern than the matched
text,  is useful as it provides match objects instead of strings.  Continuing with the previous example, if
a writer wanted to find all of the adverbs and their positions in
some text, they would use  in the following manner:




Raw String Notation¶
Raw string notation () keeps regular expressions sane.  Without it,
every backslash () in a regular expression would have to be prefixed with
another one to escape it.  For example, the two following lines of code are
functionally identical:


When one wants to match a literal backslash, it must be escaped in the regular
expression.  With raw string notation, this means .  Without raw string
notation, one must use , making the following lines of code
functionally identical:




Writing a Tokenizer¶
A tokenizer or scanner
analyzes a string to categorize groups of characters.  This is a useful first
step in writing a compiler or interpreter.
The text categories are specified with regular expressions.  The technique is
to combine those into a single master regular expression and to loop over
successive matches:


The tokenizer produces the following output:





[Frie09]Friedl, Jeffrey. Mastering Regular Expressions. 3rd ed., O’Reilly
Media, 2009. The third edition of the book no longer covers Python at all,
but the first edition covered writing good regular expression patterns in
great detail.




