link:
library/mmap.html

docs:


 — Memory-mapped file support¶

Memory-mapped file objects behave like both  and like
file objects.  You can use mmap objects in most places
where  are expected; for example, you can use the 
module to search through a memory-mapped file.  You can also change a single
byte by doing , or change a subsequence by assigning to a
slice: .  You can also read and write data starting at
the current file position, and  through the file to different positions.
A memory-mapped file is created by the  constructor, which is
different on Unix and on Windows.  In either case you must provide a file
descriptor for a file opened for update. If you wish to map an existing Python
file object, use its  method to obtain the correct value for the
fileno parameter.  Otherwise, you can open the file using the
 function, which returns a file descriptor directly (the file
still needs to be closed when done).

Note
If you want to create a memory-mapping for a writable, buffered file, you
should  the file first.  This is necessary to ensure
that local modifications to the buffers are actually available to the
mapping.

For both the Unix and Windows versions of the constructor, access may be
specified as an optional keyword parameter. access accepts one of four
values: , , or  to
specify read-only, write-through or copy-on-write memory respectively, or
 to defer to prot.  access can be used on both Unix
and Windows.  If access is not specified, Windows mmap returns a
write-through mapping.  The initial memory values for all three access types
are taken from the specified file.  Assignment to an 
memory map raises a  exception.  Assignment to an
 memory map affects both memory and the underlying file.
Assignment to an  memory map affects memory but does not
update the underlying file.

Changed in version 3.7: Added  constant.

To map anonymous memory, -1 should be passed as the fileno along with the length.


class (fileno, length, tagname=None, access=ACCESS_DEFAULT[, offset])¶
(Windows version) Maps length bytes from the file specified by the
file handle fileno, and creates a mmap object.  If length is larger
than the current size of the file, the file is extended to contain length
bytes.  If length is , the maximum length of the map is the current
size of the file, except that if the file is empty Windows raises an
exception (you cannot create an empty mapping on Windows).
tagname, if specified and not , is a string giving a tag name for
the mapping.  Windows allows you to have many different mappings against
the same file.  If you specify the name of an existing tag, that tag is
opened, otherwise a new tag of this name is created.  If this parameter is
omitted or , the mapping is created without a name.  Avoiding the
use of the tag parameter will assist in keeping your code portable between
Unix and Windows.
offset may be specified as a non-negative integer offset. mmap references
will be relative to the offset from the beginning of the file. offset
defaults to 0.  offset must be a multiple of the .



class (fileno, length, flags=MAP_SHARED, prot=PROT_WRITE|PROT_READ, access=ACCESS_DEFAULT[, offset])
(Unix version) Maps length bytes from the file specified by the file
descriptor fileno, and returns a mmap object.  If length is , the
maximum length of the map will be the current size of the file when
 is called.
flags specifies the nature of the mapping.  creates a
private copy-on-write mapping, so changes to the contents of the mmap
object will be private to this process, and  creates a
mapping that’s shared with all other processes mapping the same areas of
the file.  The default value is .
prot, if specified, gives the desired memory protection; the two most
useful values are  and , to specify
that the pages may be read or written.  prot defaults to
.
access may be specified in lieu of flags and prot as an optional
keyword parameter.  It is an error to specify both flags, prot and
access.  See the description of access above for information on how to
use this parameter.
offset may be specified as a non-negative integer offset. mmap references
will be relative to the offset from the beginning of the file. offset
defaults to 0. offset must be a multiple of 
which is equal to  on Unix systems.
To ensure validity of the created memory mapping the file specified
by the descriptor fileno is internally automatically synchronized
with physical backing store on Mac OS X and OpenVMS.
This example shows a simple way of using :


 can also be used as a context manager in a 
statement:



New in version 3.2: Context manager support.

The next example demonstrates how to create an anonymous map and exchange
data between the parent and child processes:


Memory-mapped file objects support the following methods:


()¶
Closes the mmap. Subsequent calls to other methods of the object will
result in a ValueError exception being raised. This will not close
the open file.



¶
 if the file is closed.

New in version 3.2.




(sub[, start[, end]])¶
Returns the lowest index in the object where the subsequence sub is
found, such that sub is contained in the range [start, end].
Optional arguments start and end are interpreted as in slice notation.
Returns  on failure.

Changed in version 3.5: Writable bytes-like object is now accepted.




([offset[, size]])¶
Flushes changes made to the in-memory copy of a file back to disk. Without
use of this call there is no guarantee that changes are written back before
the object is destroyed.  If offset and size are specified, only
changes to the given range of bytes will be flushed to disk; otherwise, the
whole extent of the mapping is flushed.  offset must be a multiple of the
 or .
(Windows version) A nonzero value returned indicates success; zero
indicates failure.
(Unix version) A zero value is returned to indicate success. An
exception is raised when the call failed.



(dest, src, count)¶
Copy the count bytes starting at offset src to the destination index
dest.  If the mmap was created with , then calls to
move will raise a  exception.



([n])¶
Return a  containing up to n bytes starting from the
current file position. If the argument is omitted,  or negative,
return all bytes from the current file position to the end of the
mapping. The file position is updated to point after the bytes that were
returned.

Changed in version 3.3: Argument can be omitted or .




()¶
Returns a byte at the current file position as an integer, and advances
the file position by 1.



()¶
Returns a single line, starting at the current file position and up to the
next newline.



(newsize)¶
Resizes the map and the underlying file, if any. If the mmap was created
with  or , resizing the map will
raise a  exception.



(sub[, start[, end]])¶
Returns the highest index in the object where the subsequence sub is
found, such that sub is contained in the range [start, end].
Optional arguments start and end are interpreted as in slice notation.
Returns  on failure.

Changed in version 3.5: Writable bytes-like object is now accepted.




(pos[, whence])¶
Set the file’s current position.  whence argument is optional and
defaults to  or  (absolute file positioning); other
values are  or  (seek relative to the current
position) and  or  (seek relative to the file’s end).



()¶
Return the length of the file, which can be larger than the size of the
memory-mapped area.



()¶
Returns the current position of the file pointer.



(bytes)¶
Write the bytes in bytes into memory at the current position of the
file pointer and return the number of bytes written (never less than
, since if the write fails, a  will be
raised).  The file position is updated to point after the bytes that
were written.  If the mmap was created with , then
writing to it will raise a  exception.

Changed in version 3.5: Writable bytes-like object is now accepted.


Changed in version 3.6: The number of bytes written is now returned.




(byte)¶
Write the integer byte into memory at the current
position of the file pointer; the file position is advanced by . If
the mmap was created with , then writing to it will
raise a  exception.



