link:
reference/lexical_analysis.html#string-and-bytes-literals

docs:

2.4.1. String and Bytes literals¶
String literals are described by the following lexical definitions:


One syntactic restriction not indicated by these productions is that whitespace
is not allowed between the  or  and the
rest of the literal. The source character set is defined by the encoding
declaration; it is UTF-8 if no encoding declaration is given in the source file;
see section Encoding declarations.
In plain English: Both types of literals can be enclosed in matching single quotes
() or double quotes ().  They can also be enclosed in matching groups
of three single or double quotes (these are generally referred to as
triple-quoted strings).  The backslash () character is used to escape
characters that otherwise have a special meaning, such as newline, backslash
itself, or the quote character.
Bytes literals are always prefixed with  or ; they produce an
instance of the  type instead of the  type.  They
may only contain ASCII characters; bytes with a numeric value of 128 or greater
must be expressed with escapes.
Both string and bytes literals may optionally be prefixed with a letter 
or ; such strings are called raw strings and treat backslashes as
literal characters.  As a result, in string literals,  and 
escapes in raw strings are not treated specially. Given that Python 2.x’s raw
unicode literals behave differently than Python 3.x’s the  syntax
is not supported.

New in version 3.3: The  prefix of raw bytes literals has been added as a synonym
of .


New in version 3.3: Support for the unicode legacy literal () was reintroduced
to simplify the maintenance of dual Python 2.x and 3.x codebases.
See PEP 414 for more information.

A string literal with  or  in its prefix is a
formatted string literal; see Formatted string literals.  The  may be
combined with , but not with  or , therefore raw
formatted strings are possible, but formatted bytes literals are not.
In triple-quoted literals, unescaped newlines and quotes are allowed (and are
retained), except that three unescaped quotes in a row terminate the literal.  (A
“quote” is the character used to open the literal, i.e. either  or .)
Unless an  or  prefix is present, escape sequences in string and
bytes literals are interpreted according to rules similar to those used by
Standard C.  The recognized escape sequences are:







Escape Sequence
Meaning
Notes




Backslash and newline ignored
 


Backslash ()
 


Single quote ()
 


Double quote ()
 


ASCII Bell (BEL)
 


ASCII Backspace (BS)
 


ASCII Formfeed (FF)
 


ASCII Linefeed (LF)
 


ASCII Carriage Return (CR)
 


ASCII Horizontal Tab (TAB)
 


ASCII Vertical Tab (VT)
 


Character with octal value
ooo
(1,3)


Character with hex value hh
(2,3)



Escape sequences only recognized in string literals are:







Escape Sequence
Meaning
Notes




Character named name in the
Unicode database
(4)


Character with 16-bit hex value
xxxx
(5)


Character with 32-bit hex value
xxxxxxxx
(6)



Notes:

As in Standard C, up to three octal digits are accepted.

Unlike in Standard C, exactly two hex digits are required.

In a bytes literal, hexadecimal and octal escapes denote the byte with the
given value. In a string literal, these escapes denote a Unicode character
with the given value.


Changed in version 3.3: Support for name aliases [1] has been added.


Exactly four hex digits are required.

Any Unicode character can be encoded this way.  Exactly eight hex digits
are required.


Unlike Standard C, all unrecognized escape sequences are left in the string
unchanged, i.e., the backslash is left in the result.  (This behavior is
useful when debugging: if an escape sequence is mistyped, the resulting output
is more easily recognized as broken.)  It is also important to note that the
escape sequences only recognized in string literals fall into the category of
unrecognized escapes for bytes literals.


Changed in version 3.6: Unrecognized escape sequences produce a DeprecationWarning.  In
some future version of Python they will be a SyntaxError.


Even in a raw literal, quotes can be escaped with a backslash, but the
backslash remains in the result; for example,  is a valid string
literal consisting of two characters: a backslash and a double quote; 
is not a valid string literal (even a raw string cannot end in an odd number of
backslashes).  Specifically, a raw literal cannot end in a single backslash
(since the backslash would escape the following quote character).  Note also
that a single backslash followed by a newline is interpreted as those two
characters as part of the literal, not as a line continuation.
