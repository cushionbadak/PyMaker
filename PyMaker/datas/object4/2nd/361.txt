link:
library/functions.html#__import__

docs:


(name, globals=None, locals=None, fromlist=(), level=0)Â¶

Note
This is an advanced function that is not needed in everyday Python
programming, unlike .

This function is invoked by the  statement.  It can be
replaced (by importing the  module and assigning to
) in order to change semantics of the
 statement, but doing so is strongly discouraged as it
is usually simpler to use import hooks (see PEP 302) to attain the same
goals and does not cause issues with code which assumes the default import
implementation is in use.  Direct use of  is also
discouraged in favor of .
The function imports the module name, potentially using the given globals
and locals to determine how to interpret the name in a package context.
The fromlist gives the names of objects or submodules that should be
imported from the module given by name.  The standard implementation does
not use its locals argument at all, and uses its globals only to
determine the package context of the  statement.
level specifies whether to use absolute or relative imports.  (the
default) means only perform absolute imports.  Positive values for
level indicate the number of parent directories to search relative to the
directory of the module calling  (see PEP 328 for the
details).
When the name variable is of the form , normally, the
top-level package (the name up till the first dot) is returned, not the
module named by name.  However, when a non-empty fromlist argument is
given, the module named by name is returned.
For example, the statement  results in bytecode resembling the
following code:


The statement  results in this call:


Note how  returns the toplevel module here because this is
the object that is bound to a name by the  statement.
On the other hand, the statement  results in


Here, the  module is returned from .  From this
object, the names to import are retrieved and assigned to their respective
names.
If you simply want to import a module (potentially within a package) by name,
use .

Changed in version 3.3: Negative values for level are no longer supported (which also changes
the default value to 0).

