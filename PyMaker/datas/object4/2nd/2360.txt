link:
library/dbm.html

docs:


 — Interfaces to Unix “databases”¶
Source code: Lib/dbm/__init__.py

 is a generic interface to variants of the DBM database —
 or .  If none of these modules is installed, the
slow-but-simple implementation in module  will be used.  There
is a third party interface to
the Oracle Berkeley DB.


exception ¶
A tuple containing the exceptions that can be raised by each of the supported
modules, with a unique exception also named  as the first
item — the latter is used when  is raised.



(filename)¶
This function attempts to guess which of the several simple database modules
available — ,  or  — should
be used to open a given file.
Returns one of the following values:  if the file can’t be opened
because it’s unreadable or doesn’t exist; the empty string () if the
file’s format can’t be guessed; or a string containing the required module
name, such as  or .



(file, flag='r', mode=0o666)¶
Open the database file file and return a corresponding object.
If the database file already exists, the  function is used to
determine its type and the appropriate module is used; if it does not exist,
the first module listed above that can be imported is used.
The optional flag argument can be:






Value
Meaning




Open existing database for reading only
(default)


Open existing database for reading and
writing


Open database for reading and writing,
creating it if it doesn’t exist


Always create a new, empty database, open
for reading and writing



The optional mode argument is the Unix mode of the file, used only when the
database has to be created.  It defaults to octal  (and will be
modified by the prevailing umask).

The object returned by  supports the same basic functionality as
dictionaries; keys and their corresponding values can be stored, retrieved, and
deleted, and the  operator and the  method are
available, as well as  and .

Changed in version 3.2:  and  are now available in all database modules.

Key and values are always stored as bytes. This means that when
strings are used they are implicitly converted to the default encoding before
being stored.
These objects also support being used in a  statement, which
will automatically close them when done.

Changed in version 3.4: Added native support for the context management protocol to the objects
returned by .

The following example records some hostnames and a corresponding title,  and
then prints out the contents of the database:



See also

Module 
Persistence module which stores non-string data.


The individual submodules are described in the following sections.

 — GNU’s reinterpretation of dbm¶
Source code: Lib/dbm/gnu.py

This module is quite similar to the  module, but uses the GNU library
 instead to provide some additional functionality.  Please note that the
file formats created by  and  are incompatible.
The  module provides an interface to the GNU DBM library.
 objects behave like mappings (dictionaries), except that keys and
values are always converted to bytes before storing.  Printing a 
object doesn’t print the
keys and values, and the  and  methods are not
supported.


exception ¶
Raised on -specific errors, such as I/O errors.  is
raised for general mapping errors like specifying an incorrect key.



(filename[, flag[, mode]])¶
Open a  database and return a  object.  The filename
argument is the name of the database file.
The optional flag argument can be:






Value
Meaning




Open existing database for reading only
(default)


Open existing database for reading and
writing


Open database for reading and writing,
creating it if it doesn’t exist


Always create a new, empty database, open
for reading and writing



The following additional characters may be appended to the flag to control
how the database is opened:






Value
Meaning




Open the database in fast mode.  Writes
to the database will not be synchronized.


Synchronized mode. This will cause changes
to the database to be immediately written
to the file.


Do not lock database.



Not all flags are valid for all versions of .  The module constant
 is a string of supported flag characters.  The exception
 is raised if an invalid flag is specified.
The optional mode argument is the Unix mode of the file, used only when the
database has to be created.  It defaults to octal .
In addition to the dictionary-like methods,  objects have the
following methods:


()¶
It’s possible to loop over every key in the database using this method  and the
 method.  The traversal is ordered by ’s internal
hash values, and won’t be sorted by the key values.  This method returns
the starting key.



(key)¶
Returns the key that follows key in the traversal.  The following code prints
every key in the database , without having to create a list in memory that
contains them all:





()¶
If you have carried out a lot of deletions and would like to shrink the space
used by the  file, this routine will reorganize the database.  
objects will not shorten the length of a database file except by using this
reorganization; otherwise, deleted file space will be kept and reused as new
(key, value) pairs are added.



()¶
When the database has been opened in fast mode, this method forces any
unwritten data to be written to the disk.



()¶
Close the  database.




 — Interface based on ndbm¶
Source code: Lib/dbm/ndbm.py

The  module provides an interface to the Unix “(n)dbm” library.
Dbm objects behave like mappings (dictionaries), except that keys and values are
always stored as bytes. Printing a  object doesn’t print the keys and
values, and the  and  methods are not supported.
This module can be used with the “classic” ndbm interface or the GNU GDBM
compatibility interface. On Unix, the configure script will attempt
to locate the appropriate header file to simplify building this module.


exception ¶
Raised on -specific errors, such as I/O errors.  is raised
for general mapping errors like specifying an incorrect key.



¶
Name of the  implementation library used.



(filename[, flag[, mode]])¶
Open a dbm database and return a  object.  The filename argument is the
name of the database file (without the  or  extensions).
The optional flag argument must be one of these values:






Value
Meaning




Open existing database for reading only
(default)


Open existing database for reading and
writing


Open database for reading and writing,
creating it if it doesn’t exist


Always create a new, empty database, open
for reading and writing



The optional mode argument is the Unix mode of the file, used only when the
database has to be created.  It defaults to octal  (and will be
modified by the prevailing umask).
In addition to the dictionary-like methods,  objects
provide the following method:


()¶
Close the  database.




 — Portable DBM implementation¶
Source code: Lib/dbm/dumb.py

Note
The  module is intended as a last resort fallback for the
 module when a more robust module is not available. The 
module is not written for speed and is not nearly as heavily used as the other
database modules.


The  module provides a persistent dictionary-like interface which
is written entirely in Python.  Unlike other modules such as  no
external library is required.  As with other persistent mappings, the keys and
values are always stored as bytes.
The module defines the following:


exception ¶
Raised on -specific errors, such as I/O errors.   is
raised for general mapping errors like specifying an incorrect key.



(filename[, flag[, mode]])¶
Open a  database and return a dumbdbm object.  The filename argument is
the basename of the database file (without any specific extensions).  When a
dumbdbm database is created, files with  and  extensions
are created.
The optional flag argument supports only the semantics of 
and  values.  Other values will default to database being always
opened for update, and will be created if it does not exist.
The optional mode argument is the Unix mode of the file, used only when the
database has to be created.  It defaults to octal  (and will be modified
by the prevailing umask).

Warning
It is possible to crash the Python interpreter when loading a database
with a sufficiently large/complex entry due to stack depth limitations in
Python’s AST compiler.


Changed in version 3.5:  always creates a new database when the flag has the value
.


Deprecated since version 3.6, will be removed in version 3.8: Creating database in  and  modes.  Modifying database in
 mode.

In addition to the methods provided by the
 class,  objects
provide the following methods:


()¶
Synchronize the on-disk directory and data files.  This method is called
by the  method.



()¶
Close the  database.




