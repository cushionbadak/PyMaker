link:
library/tarfile.html#tarfile-objects

docs:

TarFile Objects¶
The  object provides an interface to a tar archive. A tar
archive is a sequence of blocks. An archive member (a stored file) is made up of
a header block followed by data blocks. It is possible to store a file in a tar
archive several times. Each archive member is represented by a 
object, see TarInfo Objects for details.
A  object can be used as a context manager in a 
statement. It will automatically be closed when the block is completed. Please
note that in the event of an exception an archive opened for writing will not
be finalized; only the internally used file object will be closed. See the
Examples section for a use case.

New in version 3.2: Added support for the context management protocol.



class (name=None, mode='r', fileobj=None, format=DEFAULT_FORMAT, tarinfo=TarInfo, dereference=False, ignore_zeros=False, encoding=ENCODING, errors='surrogateescape', pax_headers=None, debug=0, errorlevel=0)
All following arguments are optional and can be accessed as instance attributes
as well.
name is the pathname of the archive. name may be a path-like object.
It can be omitted if fileobj is given.
In this case, the file object’s  attribute is used if it exists.
mode is either  to read from an existing archive,  to append
data to an existing file,  to create a new file overwriting an existing
one, or  to create a new file only if it does not already exist.
If fileobj is given, it is used for reading or writing data. If it can be
determined, mode is overridden by fileobj’s mode. fileobj will be used
from position 0.

Note
fileobj is not closed, when  is closed.

format controls the archive format. It must be one of the constants
,  or  that are
defined at module level.
The tarinfo argument can be used to replace the default  class
with a different one.
If dereference is , add symbolic and hard links to the archive. If it
is , add the content of the target files to the archive. This has no
effect on systems that do not support symbolic links.
If ignore_zeros is , treat an empty block as the end of the archive.
If it is , skip empty (and invalid) blocks and try to get as many members
as possible. This is only useful for reading concatenated or damaged archives.
debug can be set from  (no debug messages) up to  (all debug
messages). The messages are written to .
If errorlevel is , all errors are ignored when using .
Nevertheless, they appear as error messages in the debug output, when debugging
is enabled.  If , all fatal errors are raised as 
exceptions. If , all non-fatal errors are raised as 
exceptions as well.
The encoding and errors arguments define the character encoding to be
used for reading or writing the archive and how conversion errors are going
to be handled. The default settings will work for most users.
See section Unicode issues for in-depth information.
The pax_headers argument is an optional dictionary of strings which
will be added as a pax global header if format is .

Changed in version 3.2: Use  as the default for the errors argument.


Changed in version 3.5: The  (exclusive creation) mode was added.


Changed in version 3.6: The name parameter accepts a path-like object.




classmethod (...)¶
Alternative constructor. The  function is actually a
shortcut to this classmethod.



(name)¶
Return a  object for member name. If name can not be found
in the archive,  is raised.

Note
If a member occurs more than once in the archive, its last occurrence is assumed
to be the most up-to-date version.




()¶
Return the members of the archive as a list of  objects. The
list has the same order as the members in the archive.



()¶
Return the members as a list of their names. It has the same order as the list
returned by .



(verbose=True, *, members=None)¶
Print a table of contents to . If verbose is ,
only the names of the members are printed. If it is , output
similar to that of ls -l is produced. If optional members is
given, it must be a subset of the list returned by .

Changed in version 3.5: Added the members parameter.




()¶
Return the next member of the archive as a  object, when
 is opened for reading. Return  if there is no more
available.



(path=".", members=None, *, numeric_owner=False)¶
Extract all members from the archive to the current working directory or
directory path. If optional members is given, it must be a subset of the
list returned by . Directory information like owner,
modification time and permissions are set after all members have been extracted.
This is done to work around two problems: A directory’s modification time is
reset each time a file is created in it. And, if a directory’s permissions do
not allow writing, extracting files to it will fail.
If numeric_owner is , the uid and gid numbers from the tarfile
are used to set the owner/group for the extracted files. Otherwise, the named
values from the tarfile are used.

Warning
Never extract archives from untrusted sources without prior inspection.
It is possible that files are created outside of path, e.g. members
that have absolute filenames starting with  or filenames with two
dots .


Changed in version 3.5: Added the numeric_owner parameter.


Changed in version 3.6: The path parameter accepts a path-like object.




(member, path="", set_attrs=True, *, numeric_owner=False)¶
Extract a member from the archive to the current working directory, using its
full name. Its file information is extracted as accurately as possible. member
may be a filename or a  object. You can specify a different
directory using path. path may be a path-like object.
File attributes (owner, mtime, mode) are set unless set_attrs is false.
If numeric_owner is , the uid and gid numbers from the tarfile
are used to set the owner/group for the extracted files. Otherwise, the named
values from the tarfile are used.

Note
The  method does not take care of several extraction issues.
In most cases you should consider using the  method.


Warning
See the warning for .


Changed in version 3.2: Added the set_attrs parameter.


Changed in version 3.5: Added the numeric_owner parameter.


Changed in version 3.6: The path parameter accepts a path-like object.




(member)¶
Extract a member from the archive as a file object. member may be a filename
or a  object. If member is a regular file or a link, an
 object is returned. Otherwise,  is
returned.

Changed in version 3.3: Return an  object.




(name, arcname=None, recursive=True, *, filter=None)¶
Add the file name to the archive. name may be any type of file
(directory, fifo, symbolic link, etc.). If given, arcname specifies an
alternative name for the file in the archive. Directories are added
recursively by default. This can be avoided by setting recursive to
. Recursion adds entries in sorted order.
If filter is given, it
should be a function that takes a  object argument and
returns the changed  object. If it instead returns
 the  object will be excluded from the
archive. See Examples for an example.

Changed in version 3.2: Added the filter parameter.


Changed in version 3.7: Recursion adds entries in sorted order.




(tarinfo, fileobj=None)¶
Add the  object tarinfo to the archive. If fileobj is given,
it should be a binary file, and
 bytes are read from it and added to the archive.  You can
create  objects directly, or by using .



(name=None, arcname=None, fileobj=None)¶
Create a  object from the result of  or
equivalent on an existing file.  The file is either named by name, or
specified as a file object fileobj with a file descriptor.
name may be a path-like object.  If
given, arcname specifies an alternative name for the file in the
archive, otherwise, the name is taken from fileobj’s
 attribute, or the name argument.  The name
should be a text string.
You can modify
some of the ’s attributes before you add it using .
If the file object is not an ordinary file object positioned at the
beginning of the file, attributes such as  may need
modifying.  This is the case for objects such as .
The  may also be modified, in which case arcname
could be a dummy string.

Changed in version 3.6: The name parameter accepts a path-like object.




()¶
Close the . In write mode, two finishing zero blocks are
appended to the archive.



¶
A dictionary containing key-value pairs of pax global headers.

