link:
library/cgi.html#higher-level-interface

docs:

Higher Level Interface¶
The previous section explains how to read CGI form data using the
 class.  This section describes a higher level interface
which was added to this class to allow one to do it in a more readable and
intuitive way.  The interface doesn’t make the techniques described in previous
sections obsolete — they are still useful to process file uploads efficiently,
for example.
The interface consists of two simple methods. Using the methods you can process
form data in a generic way, without the need to worry whether only one or more
values were posted under one name.
In the previous section, you learned to write following code anytime you
expected a user to post more than one value under one name:


This situation is common for example when a form contains a group of multiple
checkboxes with the same name:


In most situations, however, there’s only one form control with a particular
name in a form and then you expect and need only one value associated with this
name.  So you write a script containing for example this code:


The problem with the code is that you should never expect that a client will
provide valid input to your scripts.  For example, if a curious user appends
another  pair to the query string, then the script would crash,
because in this situation the  method call returns a list
instead of a string.  Calling the  method on a list is not valid
(since lists do not have a method of this name) and results in an
 exception.
Therefore, the appropriate way to read form data values was to always use the
code which checks whether the obtained value is a single value or a list of
values.  That’s annoying and leads to less readable scripts.
A more convenient approach is to use the methods 
and  provided by this higher level interface.


(name, default=None)¶
This method always returns only one value associated with form field name.
The method returns only the first value in case that more values were posted
under such name.  Please note that the order in which the values are received
may vary from browser to browser and should not be counted on. [1]  If no such
form field or value exists then the method returns the value specified by the
optional parameter default.  This parameter defaults to  if not
specified.



(name)¶
This method always returns a list of values associated with form field name.
The method returns an empty list if no such form field or value exists for
name.  It returns a list consisting of one item if only one such value exists.

Using these methods you can write nice compact code:


