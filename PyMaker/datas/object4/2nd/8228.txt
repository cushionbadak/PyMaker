link:
library/idle.html#editing-and-navigation

docs:

Editing and navigation¶

Editor windows¶
IDLE may open editor windows when it starts, depending on settings
and how you start IDLE.  Thereafter, use the File menu.  There can be only
one open editor window for a given file.
The title bar contains the name of the file, the full path, and the version
of Python and IDLE running the window.  The status bar contains the line
number (‘Ln’) and column number (‘Col’).  Line numbers start with 1;
column numbers with 0.
IDLE assumes that files with a known .py* extension contain Python code
and that other files do not.  Run Python code with the Run menu.


Key bindings¶
In this section, ‘C’ refers to the Control key on Windows and Unix and
the Command key on macOS.

Backspace deletes to the left; Del deletes to the right

C-Backspace delete word left; C-Del delete word to the right

Arrow keys and Page Up/Page Down to move around

C-LeftArrow and C-RightArrow moves by words

Home/End go to begin/end of line

C-Home/C-End go to begin/end of file

Some useful Emacs bindings are inherited from Tcl/Tk:


C-a beginning of line
C-e end of line
C-k kill line (but doesn’t put it in clipboard)
C-l center window around the insertion point
C-b go backward one character without deleting (usually you can
also use the cursor key for this)
C-f go forward one character without deleting (usually you can
also use the cursor key for this)
C-p go up one line (usually you can also use the cursor key for
this)
C-d delete next character




Standard keybindings (like C-c to copy and C-v to paste)
may work.  Keybindings are selected in the Configure IDLE dialog.


Automatic indentation¶
After a block-opening statement, the next line is indented by 4 spaces (in the
Python Shell window by one tab).  After certain keywords (break, return etc.)
the next line is dedented.  In leading indentation, Backspace deletes up
to 4 spaces if they are there. Tab inserts spaces (in the Python
Shell window one tab), number depends on Indent width. Currently, tabs
are restricted to four spaces due to Tcl/Tk limitations.
See also the indent/dedent region commands on the
Format menu.


Completions¶
Completions are supplied for functions, classes, and attributes of classes,
both built-in and user-defined. Completions are also provided for
filenames.
The AutoCompleteWindow (ACW) will open after a predefined delay (default is
two seconds) after a ‘.’ or (in a string) an os.sep is typed. If after one
of those characters (plus zero or more other characters) a tab is typed
the ACW will open immediately if a possible continuation is found.
If there is only one possible completion for the characters entered, a
Tab will supply that completion without opening the ACW.
‘Show Completions’ will force open a completions window, by default the
C-space will open a completions window. In an empty
string, this will contain the files in the current directory. On a
blank line, it will contain the built-in and user-defined functions and
classes in the current namespaces, plus any modules imported. If some
characters have been entered, the ACW will attempt to be more specific.
If a string of characters is typed, the ACW selection will jump to the
entry most closely matching those characters.  Entering a tab will
cause the longest non-ambiguous match to be entered in the Editor window or
Shell.  Two tab in a row will supply the current ACW selection, as
will return or a double click.  Cursor keys, Page Up/Down, mouse selection,
and the scroll wheel all operate on the ACW.
“Hidden” attributes can be accessed by typing the beginning of hidden
name after a ‘.’, e.g. ‘_’. This allows access to modules with
 set, or to class-private attributes.
Completions and the ‘Expand Word’ facility can save a lot of typing!
Completions are currently limited to those in the namespaces. Names in
an Editor window which are not via  and  will
not be found.  Run the module once with your imports to correct this situation.
Note that IDLE itself places quite a few modules in sys.modules, so
much can be found by default, e.g. the re module.
If you don’t like the ACW popping up unbidden, simply make the delay
longer or disable the extension.


Calltips¶
A calltip is shown when one types ( after the name of an accessible
function.  A name expression may include dots and subscripts.  A calltip
remains until it is clicked, the cursor is moved out of the argument area,
or ) is typed.  When the cursor is in the argument part of a definition,
the menu or shortcut display a calltip.
A calltip consists of the function signature and the first line of the
docstring.  For builtins without an accessible signature, the calltip
consists of all lines up the fifth line or the first blank line.  These
details may change.
The set of accessible functions depends on what modules have been imported
into the user process, including those imported by Idle itself,
and what definitions have been run, all since the last restart.
For example, restart the Shell and enter .  A calltip
appears because Idle imports itertools into the user process for its own use.
(This could change.)  Enter  and nothing appears.  Idle does
not import turtle.  The menu or shortcut do nothing either.  Enter
 and then  will work.
In an editor, import statements have no effect until one runs the file.  One
might want to run a file after writing the import statements at the top,
or immediately run an existing file before editing.


Code Context¶
Within an editor window containing Python code, code context can be toggled
in order to show or hide a pane at the top of the window.  When shown, this
pane freezes the opening lines for block code, such as those beginning with
, , or  keywords, that would have otherwise scrolled
out of view.  The size of the pane will be expanded and contracted as needed
to show the all current levels of context, up to the maximum number of
lines defined in the Configure IDLE dialog (which defaults to 15).  If there
are no current context lines and the feature is toggled on, a single blank
line will display.  Clicking on a line in the context pane will move that
line to the top of the editor.
The text and background colors for the context pane can be configured under
the Highlights tab in the Configure IDLE dialog.


Python Shell window¶
With IDLE’s Shell, one enters, edits, and recalls complete statements.
Most consoles and terminals only work with a single physical line at a time.
When one pastes code into Shell, it is not compiled and possibly executed
until one hits Return.  One may edit pasted code first.
If one pastes more that one statement into Shell, the result will be a
 when multiple statements are compiled as if they were one.
The editing features described in previous subsections work when entering
code interactively.  IDLE’s Shell window also responds to the following keys.

C-c interrupts executing command

C-d sends end-of-file; closes window if typed at a  prompt

Alt-/ (Expand word) is also useful to reduce typing
Command history

Alt-p retrieves previous command matching what you have typed. On
macOS use C-p.
Alt-n retrieves next. On macOS use C-n.
Return while on any previous command retrieves that command





Text colors¶
Idle defaults to black on white text, but colors text with special meanings.
For the shell, these are shell output, shell error, user output, and
user error.  For Python code, at the shell prompt or in an editor, these are
keywords, builtin class and function names, names following  and
, strings, and comments. For any text window, these are the cursor (when
present), found text (when possible), and selected text.
Text coloring is done in the background, so uncolorized text is occasionally
visible.  To change the color scheme, use the Configure IDLE dialog
Highlighting tab.  The marking of debugger breakpoint lines in the editor and
text in popups and dialogs is not user-configurable.

