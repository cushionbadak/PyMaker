link:
library/unittest.mock-examples.html#more-complex-argument-matching

docs:

More complex argument matching¶
Using the same basic concept as  we can implement matchers to do more
complex assertions on objects used as arguments to mocks.
Suppose we expect some object to be passed to a mock that by default
compares equal based on object identity (which is the Python default for user
defined classes). To use  we would need to pass
in the exact same object. If we are only interested in some of the attributes
of this object then we can create a matcher that will check these attributes
for us.
You can see in this example how a ‘standard’ call to  isn’t
sufficient:


A comparison function for our  class might look something like this:


And a matcher object that can use comparison functions like this for its
equality operation would look something like this:


Putting all this together:


The  is instantiated with our compare function and the  object
we want to compare against. In  the  equality
method will be called, which compares the object the mock was called with
against the one we created our matcher with. If they match then
 passes, and if they don’t an  is raised:


With a bit of tweaking you could have the comparison function raise the
 directly and provide a more useful failure message.
As of version 1.5, the Python testing library PyHamcrest provides similar functionality,
that may be useful here, in the form of its equality matcher
(hamcrest.library.integration.match_equality).
