link:
library/unittest.mock-examples.html#mocking-imports-with-patch-dict

docs:

Mocking imports with patch.dict¶
One situation where mocking can be hard is where you have a local import inside
a function. These are harder to mock because they aren’t using an object from
the module namespace that we can patch out.
Generally local imports are to be avoided. They are sometimes done to prevent
circular dependencies, for which there is usually a much better way to solve
the problem (refactor the code) or to prevent “up front costs” by delaying the
import. This can also be solved in better ways than an unconditional local
import (store the module as a class or module attribute and only do the import
on first use).
That aside there is a way to use  to affect the results of an import.
Importing fetches an object from the  dictionary. Note that it
fetches an object, which need not be a module. Importing a module for the
first time results in a module object being put in sys.modules, so usually
when you import something you get a module back. This need not be the case
however.
This means you can use  to temporarily put a mock in place
in . Any imports whilst this patch is active will fetch the mock.
When the patch is complete (the decorated function exits, the with statement
body is complete or  is called) then whatever was there
previously will be restored safely.
Here’s an example that mocks out the ‘fooble’ module.


As you can see the  succeeds, but on exit there is no ‘fooble’
left in .
This also works for the  form:


With slightly more work you can also mock package imports:


