link:
library/concurrent.futures.html#module-concurrent.futures

docs:

 — Launching parallel tasks¶

New in version 3.2.

Source code: Lib/concurrent/futures/thread.py
and Lib/concurrent/futures/process.py

The  module provides a high-level interface for
asynchronously executing callables.
The asynchronous execution can be performed with threads, using
, or separate processes, using
.  Both implement the same interface, which is
defined by the abstract  class.

Executor Objects¶


class ¶
An abstract class that provides methods to execute calls asynchronously.  It
should not be used directly, but through its concrete subclasses.



(fn, *args, **kwargs)¶
Schedules the callable, fn, to be executed as 
and returns a  object representing the execution of the
callable.





(func, *iterables, timeout=None, chunksize=1)¶
Similar to  except:

the iterables are collected immediately rather than lazily;
func is executed asynchronously and several calls to
func may be made concurrently.

The returned iterator raises a 
if  is called and the result isn’t available
after timeout seconds from the original call to .
timeout can be an int or a float.  If timeout is not specified or
, there is no limit to the wait time.
If a func call raises an exception, then that exception will be
raised when its value is retrieved from the iterator.
When using , this method chops iterables
into a number of chunks which it submits to the pool as separate
tasks.  The (approximate) size of these chunks can be specified by
setting chunksize to a positive integer.  For very long iterables,
using a large value for chunksize can significantly improve
performance compared to the default size of 1.  With
, chunksize has no effect.

Changed in version 3.5: Added the chunksize argument.




(wait=True)¶
Signal the executor that it should free any resources that it is using
when the currently pending futures are done executing.  Calls to
 and  made after shutdown will
raise .
If wait is  then this method will not return until all the
pending futures are done executing and the resources associated with the
executor have been freed.  If wait is  then this method will
return immediately and the resources associated with the executor will be
freed when all pending futures are done executing.  Regardless of the
value of wait, the entire Python program will not exit until all
pending futures are done executing.
You can avoid having to call this method explicitly if you use the
 statement, which will shutdown the 
(waiting as if  were called with wait set to
):







ThreadPoolExecutor¶
 is an  subclass that uses a pool of
threads to execute calls asynchronously.
Deadlocks can occur when the callable associated with a  waits on
the results of another .  For example:


And:




class (max_workers=None, thread_name_prefix='', initializer=None, initargs=())¶
An  subclass that uses a pool of at most max_workers
threads to execute calls asynchronously.
initializer is an optional callable that is called at the start of
each worker thread; initargs is a tuple of arguments passed to the
initializer.  Should initializer raise an exception, all currently
pending jobs will raise a ,
as well as any attempt to submit more jobs to the pool.

Changed in version 3.5: If max_workers is  or
not given, it will default to the number of processors on the machine,
multiplied by , assuming that  is often
used to overlap I/O instead of CPU work and the number of workers
should be higher than the number of workers
for .


New in version 3.6: The thread_name_prefix argument was added to allow users to
control the  names for worker threads created by
the pool for easier debugging.


Changed in version 3.7: Added the initializer and initargs arguments.



ThreadPoolExecutor Example¶





ProcessPoolExecutor¶
The  class is an  subclass that
uses a pool of processes to execute calls asynchronously.
 uses the  module, which
allows it to side-step the Global Interpreter Lock but also means that
only picklable objects can be executed and returned.
The  module must be importable by worker subprocesses. This means
that  will not work in the interactive interpreter.
Calling  or  methods from a callable submitted
to a  will result in deadlock.


class (max_workers=None, mp_context=None, initializer=None, initargs=())¶
An  subclass that executes calls asynchronously using a pool
of at most max_workers processes.  If max_workers is  or not
given, it will default to the number of processors on the machine.
If max_workers is lower or equal to , then a 
will be raised.
mp_context can be a multiprocessing context or None. It will be used to
launch the workers. If mp_context is  or not given, the default
multiprocessing context is used.
initializer is an optional callable that is called at the start of
each worker process; initargs is a tuple of arguments passed to the
initializer.  Should initializer raise an exception, all currently
pending jobs will raise a ,
as well any attempt to submit more jobs to the pool.

Changed in version 3.3: When one of the worker processes terminates abruptly, a
 error is now raised.  Previously, behaviour
was undefined but operations on the executor or its futures would often
freeze or deadlock.


Changed in version 3.7: The mp_context argument was added to allow users to control the
start_method for worker processes created by the pool.
Added the initializer and initargs arguments.



ProcessPoolExecutor Example¶





Future Objects¶
The  class encapsulates the asynchronous execution of a callable.
 instances are created by .


class ¶
Encapsulates the asynchronous execution of a callable.  
instances are created by  and should not be created
directly except for testing.



()¶
Attempt to cancel the call.  If the call is currently being executed and
cannot be cancelled then the method will return , otherwise the
call will be cancelled and the method will return .



()¶
Return  if the call was successfully cancelled.



()¶
Return  if the call is currently being executed and cannot be
cancelled.



()¶
Return  if the call was successfully cancelled or finished
running.



(timeout=None)¶
Return the value returned by the call. If the call hasn’t yet completed
then this method will wait up to timeout seconds.  If the call hasn’t
completed in timeout seconds, then a
 will be raised. timeout can be
an int or float.  If timeout is not specified or , there is no
limit to the wait time.
If the future is cancelled before completing then 
will be raised.
If the call raised, this method will raise the same exception.



(timeout=None)¶
Return the exception raised by the call.  If the call hasn’t yet
completed then this method will wait up to timeout seconds.  If the
call hasn’t completed in timeout seconds, then a
 will be raised.  timeout can be
an int or float.  If timeout is not specified or , there is no
limit to the wait time.
If the future is cancelled before completing then 
will be raised.
If the call completed without raising,  is returned.



(fn)¶
Attaches the callable fn to the future.  fn will be called, with the
future as its only argument, when the future is cancelled or finishes
running.
Added callables are called in the order that they were added and are
always called in a thread belonging to the process that added them.  If
the callable raises an  subclass, it will be logged and
ignored.  If the callable raises a  subclass, the
behavior is undefined.
If the future has already completed or been cancelled, fn will be
called immediately.


The following  methods are meant for use in unit tests and
 implementations.



()¶
This method should only be called by  implementations
before executing the work associated with the  and by unit
tests.
If the method returns  then the  was cancelled,
i.e.  was called and returned True.  Any threads
waiting on the  completing (i.e. through
 or ) will be woken up.
If the method returns  then the  was not cancelled
and has been put in the running state, i.e. calls to
 will return True.
This method can only be called once and cannot be called after
 or  have been
called.



(result)¶
Sets the result of the work associated with the  to
result.
This method should only be used by  implementations and
unit tests.



(exception)¶
Sets the result of the work associated with the  to the
 exception.
This method should only be used by  implementations and
unit tests.





Module Functions¶


(fs, timeout=None, return_when=ALL_COMPLETED)¶
Wait for the  instances (possibly created by different
 instances) given by fs to complete.  Returns a named
2-tuple of sets.  The first set, named , contains the futures that
completed (finished or were cancelled) before the wait completed.  The second
set, named , contains uncompleted futures.
timeout can be used to control the maximum number of seconds to wait before
returning.  timeout can be an int or float.  If timeout is not specified
or , there is no limit to the wait time.
return_when indicates when this function should return.  It must be one of
the following constants:






Constant
Description




The function will return when any
future finishes or is cancelled.


The function will return when any
future finishes by raising an
exception.  If no future raises an
exception then it is equivalent to
.


The function will return when all
futures finish or are cancelled.






(fs, timeout=None)¶
Returns an iterator over the  instances (possibly created by
different  instances) given by fs that yields futures as
they complete (finished or were cancelled). Any futures given by fs that
are duplicated will be returned once. Any futures that completed before
 is called will be yielded first.  The returned iterator
raises a  if 
is called and the result isn’t available after timeout seconds from the
original call to .  timeout can be an int or float. If
timeout is not specified or , there is no limit to the wait time.


See also

PEP 3148 – futures - execute computations asynchronously
The proposal which described this feature for inclusion in the Python
standard library.




Exception classes¶


exception ¶
Raised when a future is cancelled.



exception ¶
Raised when a future operation exceeds the given timeout.



exception ¶
Derived from , this exception class is raised
when an executor is broken for some reason, and cannot be used
to submit or execute new tasks.

New in version 3.7.




exception ¶
Derived from , this exception
class is raised when one of the workers of a 
has failed initializing.

New in version 3.7.




exception ¶
Derived from  (formerly
), this exception class is raised when one of the
workers of a  has terminated in a non-clean
fashion (for example, if it was killed from the outside).

New in version 3.3.



