link:
library/ctypes.html#specifying-the-required-argument-types-function-prototypes

docs:

Specifying the required argument types (function prototypes)Â¶
It is possible to specify the required argument types of functions exported from
DLLs by setting the  attribute.
 must be a sequence of C data types (the  function is
probably not a good example here, because it takes a variable number and
different types of parameters depending on the format string, on the other hand
this is quite handy to experiment with this feature):


Specifying a format protects against incompatible argument types (just as a
prototype for a C function), and tries to convert the arguments to valid types:


If you have defined your own classes which you pass to function calls, you have
to implement a  class method for them to be able to use them
in the  sequence. The  class method receives
the Python object passed to the function call, it should do a typecheck or
whatever is needed to make sure this object is acceptable, and then return the
object itself, its  attribute, or whatever you want to
pass as the C function argument in this case. Again, the result should be an
integer, string, bytes, a  instance, or an object with an
 attribute.
