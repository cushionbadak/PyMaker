link:
library/operator.html

docs:


 — Standard operators as functions¶
Source code: Lib/operator.py

The  module exports a set of efficient functions corresponding to
the intrinsic operators of Python.  For example,  is
equivalent to the expression . Many function names are those used for
special methods, without the double underscores.  For backward compatibility,
many of these have a variant with the double underscores kept. The variants
without the double underscores are preferred for clarity.
The functions fall into categories that perform object comparisons, logical
operations, mathematical operations and sequence operations.
The object comparison functions are useful for all objects, and are named after
the rich comparison operators they support:


(a, b)¶

(a, b)¶

(a, b)¶

(a, b)¶

(a, b)¶

(a, b)¶

(a, b)¶

(a, b)¶

(a, b)¶

(a, b)¶

(a, b)¶

(a, b)¶
Perform “rich comparisons” between a and b. Specifically,  is
equivalent to ,  is equivalent to ,  is equivalent to ,  is equivalent to ,
 is equivalent to  and  is equivalent to .  Note that these functions can return any value, which may
or may not be interpretable as a Boolean value.  See
Comparisons for more information about rich comparisons.

The logical operations are also generally applicable to all objects, and support
truth tests, identity tests, and boolean operations:


(obj)¶

(obj)¶
Return the outcome of  obj.  (Note that there is no
 method for object instances; only the interpreter core defines
this operation.  The result is affected by the  and
 methods.)



(obj)¶
Return  if obj is true, and  otherwise.  This is
equivalent to using the  constructor.



(a, b)¶
Return .  Tests object identity.



(a, b)¶
Return .  Tests object identity.

The mathematical and bitwise operations are the most numerous:


(obj)¶

(obj)¶
Return the absolute value of obj.



(a, b)¶

(a, b)¶
Return , for a and b numbers.



(a, b)¶

(a, b)¶
Return the bitwise and of a and b.



(a, b)¶

(a, b)¶
Return .



(a)¶

(a)¶
Return a converted to an integer.  Equivalent to .



(obj)¶

(obj)¶

(obj)¶

(obj)¶
Return the bitwise inverse of the number obj.  This is equivalent to .



(a, b)¶

(a, b)¶
Return a shifted left by b.



(a, b)¶

(a, b)¶
Return .



(a, b)¶

(a, b)¶
Return , for a and b numbers.



(a, b)¶

(a, b)¶
Return .

New in version 3.5.




(obj)¶

(obj)¶
Return obj negated ().



(a, b)¶

(a, b)¶
Return the bitwise or of a and b.



(obj)¶

(obj)¶
Return obj positive ().



(a, b)¶

(a, b)¶
Return , for a and b numbers.



(a, b)¶

(a, b)¶
Return a shifted right by b.



(a, b)¶

(a, b)¶
Return .



(a, b)¶

(a, b)¶
Return  where 2/3 is .66 rather than 0.  This is also known as
“true” division.



(a, b)¶

(a, b)¶
Return the bitwise exclusive or of a and b.

Operations which work with sequences (some of them with mappings too) include:


(a, b)¶

(a, b)¶
Return  for a and b sequences.



(a, b)¶

(a, b)¶
Return the outcome of the test . Note the reversed operands.



(a, b)¶
Return the number of occurrences of b in a.



(a, b)¶

(a, b)¶
Remove the value of a at index b.



(a, b)¶

(a, b)¶
Return the value of a at index b.



(a, b)¶
Return the index of the first of occurrence of b in a.



(a, b, c)¶

(a, b, c)¶
Set the value of a at index b to c.



(obj, default=0)¶
Return an estimated length for the object o. First try to return its
actual length, then an estimate using , and
finally return the default value.

New in version 3.4.


The  module also defines tools for generalized attribute and item
lookups.  These are useful for making fast field extractors as arguments for
, , , or other functions that
expect a function argument.


(attr)¶

(*attrs)
Return a callable object that fetches attr from its operand.
If more than one attribute is requested, returns a tuple of attributes.
The attribute names can also contain dots. For example:

After , the call  returns .
After , the call  returns
.
After , the call 
returns .

Equivalent to:





(item)¶

(*items)
Return a callable object that fetches item from its operand using the
operand’s  method.  If multiple items are specified,
returns a tuple of lookup values.  For example:

After , the call  returns .
After , the call  returns
.

Equivalent to:


The items can be any type accepted by the operand’s 
method.  Dictionaries accept any hashable value.  Lists, tuples, and
strings accept an index or a slice:




Example of using  to retrieve specific fields from a
tuple record:





(name[, args...])¶
Return a callable object that calls the method name on its operand.  If
additional arguments and/or keyword arguments are given, they will be given
to the method as well.  For example:

After , the call  returns .
After , the call 
returns .

Equivalent to:




Mapping Operators to Functions¶
This table shows how abstract operations correspond to operator symbols in the
Python syntax and the functions in the  module.







Operation
Syntax
Function



Addition



Concatenation



Containment Test



Division



Division



Bitwise And



Bitwise Exclusive Or



Bitwise Inversion



Bitwise Or



Exponentiation



Identity



Identity



Indexed Assignment



Indexed Deletion



Indexing



Left Shift



Modulo



Multiplication



Matrix Multiplication



Negation (Arithmetic)



Negation (Logical)



Positive



Right Shift



Slice Assignment



Slice Deletion



Slicing



String Formatting



Subtraction



Truth Test



Ordering



Ordering



Equality



Difference



Ordering



Ordering







In-place Operators¶
Many operations have an “in-place” version.  Listed below are functions
providing a more primitive access to in-place operators than the usual syntax
does; for example, the statement  is equivalent to
.  Another way to put it is to say that
 is equivalent to the compound statement
.
In those examples, note that when an in-place method is called, the computation
and assignment are performed in two separate steps.  The in-place functions
listed below only do the first step, calling the in-place method.  The second
step, assignment, is not handled.
For immutable targets such as strings, numbers, and tuples, the updated
value is computed, but not assigned back to the input variable:


For mutable targets such as lists and dictionaries, the in-place method
will perform the update, so no subsequent assignment is necessary:




(a, b)¶

(a, b)¶
 is equivalent to .



(a, b)¶

(a, b)¶
 is equivalent to .



(a, b)¶

(a, b)¶
 is equivalent to  for a and b sequences.



(a, b)¶

(a, b)¶
 is equivalent to .



(a, b)¶

(a, b)¶
 is equivalent to .



(a, b)¶

(a, b)¶
 is equivalent to .



(a, b)¶

(a, b)¶
 is equivalent to .



(a, b)¶

(a, b)¶
 is equivalent to .

New in version 3.5.




(a, b)¶

(a, b)¶
 is equivalent to .



(a, b)¶

(a, b)¶
 is equivalent to .



(a, b)¶

(a, b)¶
 is equivalent to .



(a, b)¶

(a, b)¶
 is equivalent to .



(a, b)¶

(a, b)¶
 is equivalent to .



(a, b)¶

(a, b)¶
 is equivalent to .



