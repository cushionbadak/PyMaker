link:
faq/library.html#input-and-output

docs:

Input and Output¶

How do I delete a file? (And other file questions…)¶
Use  or ; for documentation, see
the  module.  The two functions are identical;  is simply
the name of the Unix system call for this function.
To remove a directory, use ; use  to create one.
 will create any intermediate directories in  that
don’t exist.  will remove intermediate directories as
long as they’re empty; if you want to delete an entire directory tree and its
contents, use .
To rename a file, use .
To truncate a file, open it using , and use
; offset defaults to the current seek position.  There’s
also  for files opened with , where
fd is the file descriptor (a small integer).
The  module also contains a number of functions to work on files
including , , and
.


How do I copy a file?¶
The  module contains a  function.  Note
that on MacOS 9 it doesn’t copy the resource fork and Finder info.


How do I read (or write) binary data?¶
To read or write complex binary data formats, it’s best to use the 
module.  It allows you to take a string containing binary data (usually numbers)
and convert it to Python objects; and vice versa.
For example, the following code reads two 2-byte integers and one 4-byte integer
in big-endian format from a file:


The ‘>’ in the format string forces big-endian data; the letter ‘h’ reads one
“short integer” (2 bytes), and ‘l’ reads one “long integer” (4 bytes) from the
string.
For data that is more regular (e.g. a homogeneous list of ints or floats),
you can also use the  module.

Note
To read and write binary data, it is mandatory to open the file in
binary mode (here, passing  to ).  If you use
 instead (the default), the file will be open in text mode
and  will return  objects rather than
 objects.



I can’t seem to use os.read() on a pipe created with os.popen(); why?¶
 is a low-level function which takes a file descriptor, a small
integer representing the opened file.   creates a high-level
file object, the same type returned by the built-in  function.
Thus, to read n bytes from a pipe p created with , you need to
use .


How do I access the serial (RS232) port?¶
For Win32, POSIX (Linux, BSD, etc.), Jython:

http://pyserial.sourceforge.net
For Unix, see a Usenet post by Mitch Chapman:

https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com


Why doesn’t closing sys.stdout (stdin, stderr) really close it?¶
Python file objects are a high-level layer of
abstraction on low-level C file descriptors.
For most file objects you create in Python via the built-in 
function,  marks the Python file object as being closed from
Python’s point of view, and also arranges to close the underlying C file
descriptor.  This also happens automatically in ’s destructor, when
 becomes garbage.
But stdin, stdout and stderr are treated specially by Python, because of the
special status also given to them by C.  Running  marks
the Python-level file object as being closed, but does not close the
associated C file descriptor.
To close the underlying C file descriptor for one of these three, you should
first be sure that’s what you really want to do (e.g., you may confuse
extension modules trying to do I/O).  If it is, use :


Or you can use the numeric constants 0, 1 and 2, respectively.

