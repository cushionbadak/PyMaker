link:
library/urllib.parse.html#url-quoting

docs:

URL Quoting¶
The URL quoting functions focus on taking program data and making it safe
for use as URL components by quoting special characters and appropriately
encoding non-ASCII text. They also support reversing these operations to
recreate the original data from the contents of a URL component if that
task isn’t already covered by the URL parsing functions above.


(string, safe='/', encoding=None, errors=None)¶
Replace special characters in string using the  escape. Letters,
digits, and the characters  are never quoted. By default, this
function is intended for quoting the path section of URL. The optional safe
parameter specifies additional ASCII characters that should not be quoted
— its default value is .
string may be either a  or a .

Changed in version 3.7: Moved from RFC 2396 to RFC 3986 for quoting URL strings. “~” is now
included in the set of reserved characters.

The optional encoding and errors parameters specify how to deal with
non-ASCII characters, as accepted by the  method.
encoding defaults to .
errors defaults to , meaning unsupported characters raise a
.
encoding and errors must not be supplied if string is a
, or a  is raised.
Note that  is equivalent to
.
Example:  yields .



(string, safe='', encoding=None, errors=None)¶
Like , but also replace spaces by plus signs, as required for
quoting HTML form values when building up a query string to go into a URL.
Plus signs in the original string are escaped unless they are included in
safe.  It also does not have safe default to .
Example:  yields .



(bytes, safe='/')¶
Like , but accepts a  object rather than a
, and does not perform string-to-bytes encoding.
Example:  yields
.



(string, encoding='utf-8', errors='replace')¶
Replace  escapes by their single-character equivalent.
The optional encoding and errors parameters specify how to decode
percent-encoded sequences into Unicode characters, as accepted by the
 method.
string must be a .
encoding defaults to .
errors defaults to , meaning invalid sequences are replaced
by a placeholder character.
Example:  yields .



(string, encoding='utf-8', errors='replace')¶
Like , but also replace plus signs by spaces, as required for
unquoting HTML form values.
string must be a .
Example:  yields .



(string)¶
Replace  escapes by their single-octet equivalent, and return a
 object.
string may be either a  or a .
If it is a , unescaped non-ASCII characters in string
are encoded into UTF-8 bytes.
Example:  yields .



(query, doseq=False, safe='', encoding=None, errors=None, quote_via=quote_plus)¶
Convert a mapping object or a sequence of two-element tuples, which may
contain  or  objects, to a percent-encoded ASCII
text string.  If the resultant string is to be used as a data for POST
operation with the  function, then
it should be encoded to bytes, otherwise it would result in a
.
The resulting string is a series of  pairs separated by 
characters, where both key and value are quoted using the quote_via
function.  By default,  is used to quote the values, which
means spaces are quoted as a  character and ‘/’ characters are
encoded as , which follows the standard for GET requests
().  An alternate function that can be
passed as quote_via is , which will encode spaces as 
and not encode ‘/’ characters.  For maximum control of what is quoted, use
 and specify a value for safe.
When a sequence of two-element tuples is used as the query
argument, the first element of each tuple is a key and the second is a
value. The value element in itself can be a sequence and in that case, if
the optional parameter doseq is evaluates to , individual
 pairs separated by  are generated for each element of
the value sequence for the key.  The order of parameters in the encoded
string will match the order of parameter tuples in the sequence.
The safe, encoding, and errors parameters are passed down to
quote_via (the encoding and errors parameters are only passed
when a query element is a ).
To reverse this encoding process,  and  are
provided in this module to parse query strings into Python data structures.
Refer to urllib examples to find out how urlencode
method can be used for generating query string for a URL or data for POST.

Changed in version 3.2: Query parameter supports bytes and string objects.


New in version 3.5: quote_via parameter.



See also

RFC 3986 - Uniform Resource Identifiers
This is the current standard (STD66). Any changes to urllib.parse module
should conform to this. Certain deviations could be observed, which are
mostly for backward compatibility purposes and for certain de-facto
parsing requirements as commonly observed in major browsers.
RFC 2732 - Format for Literal IPv6 Addresses in URL’s.
This specifies the parsing requirements of IPv6 URLs.
RFC 2396 - Uniform Resource Identifiers (URI): Generic Syntax
Document describing the generic syntactic requirements for both Uniform Resource
Names (URNs) and Uniform Resource Locators (URLs).
RFC 2368 - The mailto URL scheme.
Parsing requirements for mailto URL schemes.
RFC 1808 - Relative Uniform Resource Locators
This Request For Comments includes the rules for joining an absolute and a
relative URL, including a fair number of “Abnormal Examples” which govern the
treatment of border cases.
RFC 1738 - Uniform Resource Locators (URL)
This specifies the formal syntax and semantics of absolute URLs.


