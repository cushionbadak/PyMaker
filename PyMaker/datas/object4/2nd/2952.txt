link:
library/os.html#file-descriptor-operations

docs:

File Descriptor Operations¶
These functions operate on I/O streams referenced using file descriptors.
File descriptors are small integers corresponding to a file that has been opened
by the current process.  For example, standard input is usually file descriptor
0, standard output is 1, and standard error is 2.  Further files opened by a
process will then be assigned 3, 4, 5, and so forth.  The name “file descriptor”
is slightly deceptive; on Unix platforms, sockets and pipes are also referenced
by file descriptors.
The  method can be used to obtain the file descriptor
associated with a file object when required.  Note that using the file
descriptor directly will bypass the file object methods, ignoring aspects such
as internal buffering of data.


(fd)¶
Close file descriptor fd.

Note
This function is intended for low-level I/O and must be applied to a file
descriptor as returned by  or .  To close a “file
object” returned by the built-in function  or by  or
, use its  method.




(fd_low, fd_high)¶
Close all file descriptors from fd_low (inclusive) to fd_high (exclusive),
ignoring errors. Equivalent to (but much faster than):





(fd)¶
Return a string describing the encoding of the device associated with fd
if it is connected to a terminal; else return .



(fd)¶
Return a duplicate of file descriptor fd. The new file descriptor is
non-inheritable.
On Windows, when duplicating a standard stream (0: stdin, 1: stdout,
2: stderr), the new file descriptor is inheritable.

Changed in version 3.4: The new file descriptor is now non-inheritable.




(fd, fd2, inheritable=True)¶
Duplicate file descriptor fd to fd2, closing the latter first if
necessary. Return fd2. The new file descriptor is inheritable by default or non-inheritable if inheritable
is .

Changed in version 3.4: Add the optional inheritable parameter.


Changed in version 3.7: Return fd2 on success. Previously,  was always returned.




(fd, mode)¶
Change the mode of the file given by fd to the numeric mode.  See the
docs for  for possible values of mode.  As of Python 3.3, this
is equivalent to .
Availability: Unix.



(fd, uid, gid)¶
Change the owner and group id of the file given by fd to the numeric uid
and gid.  To leave one of the ids unchanged, set it to -1.  See
.  As of Python 3.3, this is equivalent to .
Availability: Unix.



(fd)¶
Force write of file with filedescriptor fd to disk. Does not force update of
metadata.
Availability: Unix.

Note
This function is not available on MacOS.




(fd, name)¶
Return system configuration information relevant to an open file. name
specifies the configuration value to retrieve; it may be a string which is the
name of a defined system value; these names are specified in a number of
standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define
additional names as well.  The names known to the host operating system are
given in the  dictionary.  For configuration variables not
included in that mapping, passing an integer for name is also accepted.
If name is a string and is not known,  is raised.  If a
specific value for name is not supported by the host system, even if it is
included in , an  is raised with
 for the error number.
As of Python 3.3, this is equivalent to .
Availability: Unix.



(fd)¶
Get the status of the file descriptor fd. Return a 
object.
As of Python 3.3, this is equivalent to .

See also
The  function.




(fd)¶
Return information about the filesystem containing the file associated with
file descriptor fd, like .  As of Python 3.3, this is
equivalent to .
Availability: Unix.



(fd)¶
Force write of file with filedescriptor fd to disk.  On Unix, this calls the
native  function; on Windows, the MS  function.
If you’re starting with a buffered Python file object f, first do
, and then do , to ensure that all internal
buffers associated with f are written to disk.
Availability: Unix, Windows.



(fd, length)¶
Truncate the file corresponding to file descriptor fd, so that it is at
most length bytes in size.  As of Python 3.3, this is equivalent to
.
Availability: Unix, Windows.

Changed in version 3.5: Added support for Windows




(fd)¶
Get the blocking mode of the file descriptor:  if the
 flag is set,  if the flag is cleared.
See also  and .
Availability: Unix.

New in version 3.5.




(fd)¶
Return  if the file descriptor fd is open and connected to a
tty(-like) device, else .



(fd, cmd, len)¶
Apply, test or remove a POSIX lock on an open file descriptor.
fd is an open file descriptor.
cmd specifies the command to use - one of , ,
 or .
len specifies the section of the file to lock.
Availability: Unix.

New in version 3.3.




¶

¶

¶

¶
Flags that specify what action  will take.
Availability: Unix.

New in version 3.3.




(fd, pos, how)¶
Set the current position of file descriptor fd to position pos, modified
by how:  or  to set the position relative to the
beginning of the file;  or  to set it relative to the
current position;  or  to set it relative to the end of
the file. Return the new cursor position in bytes, starting from the beginning.



¶

¶

¶
Parameters to the  function. Their values are 0, 1, and 2,
respectively.

New in version 3.3: Some operating systems could support additional values, like
 or .




(path, flags, mode=0o777, *, dir_fd=None)¶
Open the file path and set various flags according to flags and possibly
its mode according to mode.  When computing mode, the current umask value
is first masked out.  Return the file descriptor for the newly opened file.
The new file descriptor is non-inheritable.
For a description of the flag and mode values, see the C run-time documentation;
flag constants (like  and ) are defined in
the  module.  In particular, on Windows adding
 is needed to open files in binary mode.
This function can support paths relative to directory descriptors with the dir_fd parameter.

Changed in version 3.4: The new file descriptor is now non-inheritable.


Note
This function is intended for low-level I/O.  For normal usage, use the
built-in function , which returns a file object with
 and  methods (and many more).  To
wrap a file descriptor in a file object, use .


New in version 3.3: The dir_fd argument.


Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an
exception, the function now retries the system call instead of raising an
 exception (see PEP 475 for the rationale).


Changed in version 3.6: Accepts a path-like object.


The following constants are options for the flags parameter to the
 function.  They can be combined using the bitwise OR operator
.  Some of them are not available on all platforms.  For descriptions of
their availability and use, consult the open(2) manual page on Unix
or the MSDN on Windows.


¶

¶

¶

¶

¶

¶

¶
The above constants are available on Unix and Windows.



¶

¶

¶

¶

¶

¶

¶
The above constants are only available on Unix.

Changed in version 3.3: Add  constant.




¶

¶

¶

¶

¶

¶

¶
The above constants are only available on Windows.



¶

¶

¶

¶

¶

¶

¶

¶

¶
The above constants are extensions and not present if they are not defined by
the C library.

Changed in version 3.4: Add  on systems that support it.
Add , only available on Linux Kernel 3.11
  or newer.




()¶
Open a new pseudo-terminal pair. Return a pair of file descriptors
 for the pty and the tty, respectively. The new file
descriptors are non-inheritable. For a (slightly) more
portable approach, use the  module.
Availability: some flavors of Unix.

Changed in version 3.4: The new file descriptors are now non-inheritable.




()¶
Create a pipe.  Return a pair of file descriptors  usable for
reading and writing, respectively. The new file descriptor is
non-inheritable.
Availability: Unix, Windows.

Changed in version 3.4: The new file descriptors are now non-inheritable.




(flags)¶
Create a pipe with flags set atomically.
flags can be constructed by ORing together one or more of these values:
, .
Return a pair of file descriptors  usable for reading and writing,
respectively.
Availability: some flavors of Unix.

New in version 3.3.




(fd, offset, len)¶
Ensures that enough disk space is allocated for the file specified by fd
starting from offset and continuing for len bytes.
Availability: Unix.

New in version 3.3.




(fd, offset, len, advice)¶
Announces an intention to access data in a specific pattern thus allowing
the kernel to make optimizations.
The advice applies to the region of the file specified by fd starting at
offset and continuing for len bytes.
advice is one of , ,
, ,
 or .
Availability: Unix.

New in version 3.3.




¶

¶

¶

¶

¶

¶
Flags that can be used in advice in  that specify
the access pattern that is likely to be used.
Availability: Unix.

New in version 3.3.




(fd, n, offset)¶
Read at most n bytes from file descriptor fd at a position of offset,
leaving the file offset unchanged.
Return a bytestring containing the bytes read. If the end of the file
referred to by fd has been reached, an empty bytes object is returned.
Availability: Unix.

New in version 3.3.




(fd, buffers, offset, flags=0)¶
Read from a file descriptor fd at a position of offset into mutable
bytes-like objects buffers, leaving the file
offset unchanged.  Transfer data into each buffer until it is full and then
move on to the next buffer in the sequence to hold the rest of the data.
The flags argument contains a bitwise OR of zero or more of the following
flags:




Return the total number of bytes actually read which can be less than the
total capacity of all the objects.
The operating system may set a limit ( value
) on the number of buffers that can be used.
Combine the functionality of  and .
Availability: Linux 2.6.30 and newer, FreeBSD 6.0 and newer,
OpenBSD 2.7 and newer. Using flags requires Linux 4.6 or newer.

New in version 3.7.




¶
Do not wait for data which is not immediately available. If this flag is
specified, the system call will return instantly if it would have to read
data from the backing storage or wait for a lock.
If some data was successfully read, it will return the number of bytes read.
If no bytes were read, it will return  and set errno to
.
Availability: Linux 4.14 and newer.

New in version 3.7.




¶
High priority read/write. Allows block-based filesystems to use polling
of the device, which provides lower latency, but may use additional
resources.
Currently, on Linux, this feature is usable only on a file descriptor opened
using the  flag.
Availability: Linux 4.6 and newer.

New in version 3.7.




(fd, str, offset)¶
Write the bytestring in str to file descriptor fd at position of
offset, leaving the file offset unchanged.
Return the number of bytes actually written.
Availability: Unix.

New in version 3.3.




(fd, buffers, offset, flags=0)¶
Write the buffers contents to file descriptor fd at a offset offset,
leaving the file offset unchanged.  buffers must be a sequence of
bytes-like objects. Buffers are processed in
array order. Entire contents of the first buffer is written before
proceeding to the second, and so on.
The flags argument contains a bitwise OR of zero or more of the following
flags:




Return the total number of bytes actually written.
The operating system may set a limit ( value
) on the number of buffers that can be used.
Combine the functionality of  and .
Availability: Linux 2.6.30 and newer, FreeBSD 6.0 and newer,
OpenBSD 2.7 and newer. Using flags requires Linux 4.7 or newer.

New in version 3.7.




¶
Provide a per-write equivalent of the   flag. This
flag effect applies only to the data range written by the system call.
Availability: Linux 4.7 and newer.

New in version 3.7.




¶
Provide a per-write equivalent of the   flag. This
flag effect applies only to the data range written by the system call.
Availability: Linux 4.7 and newer.

New in version 3.7.




(fd, n)¶
Read at most n bytes from file descriptor fd.
Return a bytestring containing the bytes read. If the end of the file
referred to by fd has been reached, an empty bytes object is returned.

Note
This function is intended for low-level I/O and must be applied to a file
descriptor as returned by  or .  To read a
“file object” returned by the built-in function  or by
 or , or , use its
 or  methods.


Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an
exception, the function now retries the system call instead of raising an
 exception (see PEP 475 for the rationale).




(out, in, offset, count)¶

(out, in, offset, count, [headers, ][trailers, ]flags=0)
Copy count bytes from file descriptor in to file descriptor out
starting at offset.
Return the number of bytes sent. When EOF is reached return 0.
The first function notation is supported by all platforms that define
.
On Linux, if offset is given as , the bytes are read from the
current position of in and the position of in is updated.
The second case may be used on Mac OS X and FreeBSD where headers and
trailers are arbitrary sequences of buffers that are written before and
after the data from in is written. It returns the same as the first case.
On Mac OS X and FreeBSD, a value of 0 for count specifies to send until
the end of in is reached.
All platforms support sockets as out file descriptor, and some platforms
allow other types (e.g. regular file, pipe) as well.
Cross-platform applications should not use headers, trailers and flags
arguments.
Availability: Unix.

Note
For a higher-level wrapper of , see
.


New in version 3.3.




(fd, blocking)¶
Set the blocking mode of the specified file descriptor. Set the
 flag if blocking is , clear the flag otherwise.
See also  and .
Availability: Unix.

New in version 3.5.




¶

¶

¶
Parameters to the  function, if the implementation supports
them.
Availability: Unix.

New in version 3.3.




(fd, buffers)¶
Read from a file descriptor fd into a number of mutable bytes-like
objects buffers. Transfer data into each buffer until
it is full and then move on to the next buffer in the sequence to hold the
rest of the data.
Return the total number of bytes actually read which can be less than the
total capacity of all the objects.
The operating system may set a limit ( value
) on the number of buffers that can be used.
Availability: Unix.

New in version 3.3.




(fd)¶
Return the process group associated with the terminal given by fd (an open
file descriptor as returned by ).
Availability: Unix.



(fd, pg)¶
Set the process group associated with the terminal given by fd (an open file
descriptor as returned by ) to pg.
Availability: Unix.



(fd)¶
Return a string which specifies the terminal device associated with
file descriptor fd.  If fd is not associated with a terminal device, an
exception is raised.
Availability: Unix.



(fd, str)¶
Write the bytestring in str to file descriptor fd.
Return the number of bytes actually written.

Note
This function is intended for low-level I/O and must be applied to a file
descriptor as returned by  or .  To write a “file
object” returned by the built-in function  or by  or
, or  or , use its
 method.


Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an
exception, the function now retries the system call instead of raising an
 exception (see PEP 475 for the rationale).




(fd, buffers)¶
Write the contents of buffers to file descriptor fd. buffers must be
a sequence of bytes-like objects. Buffers are
processed in array order. Entire contents of the first buffer is written
before proceeding to the second, and so on.
Returns the total number of bytes actually written.
The operating system may set a limit ( value
) on the number of buffers that can be used.
Availability: Unix.

New in version 3.3.



Querying the size of a terminal¶

New in version 3.3.



(fd=STDOUT_FILENO)¶
Return the size of the terminal window as ,
tuple of type .
The optional argument  (default , or standard
output) specifies which file descriptor should be queried.
If the file descriptor is not connected to a terminal, an 
is raised.
 is the high-level function which
should normally be used,  is the low-level
implementation.
Availability: Unix, Windows.



class ¶
A subclass of tuple, holding  of the terminal window size.


¶
Width of the terminal window in characters.



¶
Height of the terminal window in characters.




Inheritance of File Descriptors¶

New in version 3.4.

A file descriptor has an “inheritable” flag which indicates if the file descriptor
can be inherited by child processes.  Since Python 3.4, file descriptors
created by Python are non-inheritable by default.
On UNIX, non-inheritable file descriptors are closed in child processes at the
execution of a new program, other file descriptors are inherited.
On Windows, non-inheritable handles and file descriptors are closed in child
processes, except for standard streams (file descriptors 0, 1 and 2: stdin, stdout
and stderr), which are always inherited.  Using  functions,
all inheritable handles and all inheritable file descriptors are inherited.
Using the  module, all file descriptors except standard
streams are closed, and inheritable handles are only inherited if the
close_fds parameter is .


(fd)¶
Get the “inheritable” flag of the specified file descriptor (a boolean).



(fd, inheritable)¶
Set the “inheritable” flag of the specified file descriptor.



(handle)¶
Get the “inheritable” flag of the specified handle (a boolean).
Availability: Windows.



(handle, inheritable)¶
Set the “inheritable” flag of the specified handle.
Availability: Windows.


