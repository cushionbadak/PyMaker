link:
library/getopt.html#module-getopt

docs:

 — C-style parser for command line options¶
Source code: Lib/getopt.py

Note
The  module is a parser for command line options whose API is
designed to be familiar to users of the C  function. Users who
are unfamiliar with the C  function or who would like to write
less code and get better help and error messages should consider using the
 module instead.


This module helps scripts to parse the command line arguments in .
It supports the same conventions as the Unix  function (including
the special meanings of arguments of the form ‘‘ and ‘‘).  Long
options similar to those supported by GNU software may be used as well via an
optional third argument.
This module provides two functions and an
exception:


(args, shortopts, longopts=[])¶
Parses command line options and parameter list.  args is the argument list to
be parsed, without the leading reference to the running program. Typically, this
means . shortopts is the string of option letters that the
script wants to recognize, with options that require an argument followed by a
colon (; i.e., the same format that Unix  uses).

Note
Unlike GNU , after a non-option argument, all further
arguments are considered also non-options. This is similar to the way
non-GNU Unix systems work.

longopts, if specified, must be a list of strings with the names of the
long options which should be supported.  The leading  characters
should not be included in the option name.  Long options which require an
argument should be followed by an equal sign ().  Optional arguments
are not supported.  To accept only long options, shortopts should be an
empty string.  Long options on the command line can be recognized so long as
they provide a prefix of the option name that matches exactly one of the
accepted options.  For example, if longopts is , the
option  will match as , but  will
not match uniquely, so  will be raised.
The return value consists of two elements: the first is a list of  pairs; the second is the list of program arguments left after the
option list was stripped (this is a trailing slice of args).  Each
option-and-value pair returned has the option as its first element, prefixed
with a hyphen for short options (e.g., ) or two hyphens for long
options (e.g., ), and the option argument as its
second element, or an empty string if the option has no argument.  The
options occur in the list in the same order in which they were found, thus
allowing multiple occurrences.  Long and short options may be mixed.



(args, shortopts, longopts=[])¶
This function works like , except that GNU style scanning mode is
used by default. This means that option and non-option arguments may be
intermixed. The  function stops processing options as soon as a
non-option argument is encountered.
If the first character of the option string is , or if the environment
variable  is set, then option processing stops as
soon as a non-option argument is encountered.



exception ¶
This is raised when an unrecognized option is found in the argument list or when
an option requiring an argument is given none. The argument to the exception is
a string indicating the cause of the error.  For long options, an argument given
to an option which does not require one will also cause this exception to be
raised.  The attributes  and  give the error message and
related option; if there is no specific option to which the exception relates,
 is an empty string.



exception ¶
Alias for ; for backward compatibility.

An example using only Unix style options:


Using long option names is equally easy:


In a script, typical usage is something like this:


Note that an equivalent command line interface could be produced with less code
and more informative help and error messages by using the  module:



See also

Module 
Alternative command line option and argument parsing library.


