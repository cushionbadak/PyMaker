link:
library/ctypes.html#ctypes-reference

docs:

ctypes reference¶

Finding shared libraries¶
When programming in a compiled language, shared libraries are accessed when
compiling/linking a program, and when the program is run.
The purpose of the  function is to locate a library in a way
similar to what the compiler or runtime loader does (on platforms with several
versions of a shared library the most recent should be loaded), while the ctypes
library loaders act like when a program is run, and call the runtime loader
directly.
The  module provides a function which can help to determine
the library to load.


(name)
Try to find a library and return a pathname.  name is the library name without
any prefix like lib, suffix like ,  or version number (this
is the form used for the posix linker option ).  If no library can
be found, returns .

The exact functionality is system dependent.
On Linux,  tries to run external programs
(, ,  and ) to find the library file.
It returns the filename of the library file.

Changed in version 3.6: On Linux, the value of the environment variable  is used
when searching for libraries, if a library cannot be found by any other means.

Here are some examples:


On OS X,  tries several predefined naming schemes and paths
to locate the library, and returns a full pathname if successful:


On Windows,  searches along the system search path, and
returns the full pathname, but since there is no predefined naming scheme a call
like  will fail and return .
If wrapping a shared library with , it may be better to determine
the shared library name at development time, and hardcode that into the wrapper
module instead of using  to locate the library at runtime.


Loading shared libraries¶
There are several ways to load shared libraries into the Python process.  One
way is to instantiate one of the following classes:


class (name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)¶
Instances of this class represent loaded shared libraries. Functions in these
libraries use the standard C calling convention, and are assumed to return
.



class (name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)¶
Windows only: Instances of this class represent loaded shared libraries,
functions in these libraries use the  calling convention, and are
assumed to return the windows specific  code.  
values contain information specifying whether the function call failed or
succeeded, together with additional error code.  If the return value signals a
failure, an  is automatically raised.

Changed in version 3.3:  used to be raised.




class (name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)¶
Windows only: Instances of this class represent loaded shared libraries,
functions in these libraries use the  calling convention, and are
assumed to return  by default.
On Windows CE only the standard calling convention is used, for convenience the
 and  use the standard calling convention on this
platform.

The Python global interpreter lock is released before calling any
function exported by these libraries, and reacquired afterwards.


class (name, mode=DEFAULT_MODE, handle=None)¶
Instances of this class behave like  instances, except that the
Python GIL is not released during the function call, and after the function
execution the Python error flag is checked. If the error flag is set, a Python
exception is raised.
Thus, this is only useful to call Python C api functions directly.

All these classes can be instantiated by calling them with at least one
argument, the pathname of the shared library.  If you have an existing handle to
an already loaded shared library, it can be passed as the  named
parameter, otherwise the underlying platforms  or 
function is used to load the library into the process, and to get a handle to
it.
The mode parameter can be used to specify how the library is loaded.  For
details, consult the dlopen(3) manpage.  On Windows, mode is
ignored.  On posix systems, RTLD_NOW is always added, and is not
configurable.
The use_errno parameter, when set to true, enables a ctypes mechanism that
allows accessing the system  error number in a safe way.
 maintains a thread-local copy of the systems 
variable; if you call foreign functions created with  then the
 value before the function call is swapped with the ctypes private
copy, the same happens immediately after the function call.
The function  returns the value of the ctypes private
copy, and the function  changes the ctypes private copy
to a new value and returns the former value.
The use_last_error parameter, when set to true, enables the same mechanism for
the Windows error code which is managed by the  and
 Windows API functions;  and
 are used to request and change the ctypes private
copy of the windows error code.



Flag to use as mode parameter.  On platforms where this flag is not available,
it is defined as the integer zero.




Flag to use as mode parameter.  On platforms where this is not available, it
is the same as RTLD_GLOBAL.




The default mode which is used to load shared libraries.  On OSX 10.3, this is
RTLD_GLOBAL, otherwise it is the same as RTLD_LOCAL.

Instances of these classes have no public methods.  Functions exported by the
shared library can be accessed as attributes or by index.  Please note that
accessing the function through an attribute caches the result and therefore
accessing it repeatedly returns the same object each time.  On the other hand,
accessing it through an index returns a new object each time:


The following public attributes are available, their name starts with an
underscore to not clash with exported function names:


¶
The system handle used to access the library.



¶
The name of the library passed in the constructor.

Shared libraries can also be loaded by using one of the prefabricated objects,
which are instances of the  class, either by calling the
 method, or by retrieving the library as attribute of the
loader instance.


class (dlltype)¶
Class which loads shared libraries.  dlltype should be one of the
, , , or  types.
 has special behavior: It allows loading a shared library by
accessing it as attribute of a library loader instance.  The result is cached,
so repeated attribute accesses return the same library each time.


(name)¶
Load a shared library into the process and return it.  This method always
returns a new instance of the library.


These prefabricated library loaders are available:



Creates  instances.




Windows only: Creates  instances.




Windows only: Creates  instances.




Creates  instances.

For accessing the C Python api directly, a ready-to-use Python shared library
object is available:



An instance of  that exposes Python C API functions as
attributes.  Note that all these functions are assumed to return C
, which is of course not always the truth, so you have to assign
the correct  attribute to use these functions.



Foreign functions¶
As explained in the previous section, foreign functions can be accessed as
attributes of loaded shared libraries.  The function objects created in this way
by default accept any number of arguments, accept any ctypes data instances as
arguments, and return the default result type specified by the library loader.
They are instances of a private class:


class ¶
Base class for C callable foreign functions.
Instances of foreign functions are also C compatible data types; they
represent C function pointers.
This behavior can be customized by assigning to special attributes of the
foreign function object.


¶
Assign a ctypes type to specify the result type of the foreign function.
Use  for , a function not returning anything.
It is possible to assign a callable Python object that is not a ctypes
type, in this case the function is assumed to return a C , and
the callable will be called with this integer, allowing further
processing or error checking.  Using this is deprecated, for more flexible
post processing or error checking use a ctypes data type as
 and assign a callable to the  attribute.



¶
Assign a tuple of ctypes types to specify the argument types that the
function accepts.  Functions using the  calling convention can
only be called with the same number of arguments as the length of this
tuple; functions using the C calling convention accept additional,
unspecified arguments as well.
When a foreign function is called, each actual argument is passed to the
 class method of the items in the 
tuple, this method allows adapting the actual argument to an object that
the foreign function accepts.  For example, a  item in
the  tuple will convert a string passed as argument into
a bytes object using ctypes conversion rules.
New: It is now possible to put items in argtypes which are not ctypes
types, but each item must have a  method which returns a
value usable as argument (integer, string, ctypes instance).  This allows
defining adapters that can adapt custom objects as function parameters.



¶
Assign a Python function or another callable to this attribute. The
callable will be called with three or more arguments:


(result, func, arguments)
result is what the foreign function returns, as specified by the
 attribute.
func is the foreign function object itself, this allows reusing the
same callable object to check or post process the results of several
functions.
arguments is a tuple containing the parameters originally passed to
the function call, this allows specializing the behavior on the
arguments used.

The object that this function returns will be returned from the
foreign function call, but it can also check the result value
and raise an exception if the foreign function call failed.




exception ¶
This exception is raised when a foreign function call cannot convert one of the
passed arguments.



Function prototypes¶
Foreign functions can also be created by instantiating function prototypes.
Function prototypes are similar to function prototypes in C; they describe a
function (return type, argument types, calling convention) without defining an
implementation.  The factory functions must be called with the desired result
type and the argument types of the function, and can be used as decorator
factories, and as such, be applied to functions through the  syntax.
See Callback functions for examples.


(restype, *argtypes, use_errno=False, use_last_error=False)¶
The returned function prototype creates functions that use the standard C
calling convention.  The function will release the GIL during the call.  If
use_errno is set to true, the ctypes private copy of the system
 variable is exchanged with the real  value before
and after the call; use_last_error does the same for the Windows error
code.



(restype, *argtypes, use_errno=False, use_last_error=False)¶
Windows only: The returned function prototype creates functions that use the
 calling convention, except on Windows CE where
 is the same as .  The function will
release the GIL during the call.  use_errno and use_last_error have the
same meaning as above.



(restype, *argtypes)¶
The returned function prototype creates functions that use the Python calling
convention.  The function will not release the GIL during the call.

Function prototypes created by these factory functions can be instantiated in
different ways, depending on the type and number of the parameters in the call:



(address)
Returns a foreign function at the specified address which must be an integer.



(callable)
Create a C callable function (a callback function) from a Python callable.



(func_spec[, paramflags])
Returns a foreign function exported by a shared library. func_spec must
be a 2-tuple . The first item is the name of
the exported function as string, or the ordinal of the exported function
as small integer.  The second item is the shared library instance.



(vtbl_index, name[, paramflags[, iid]])
Returns a foreign function that will call a COM method. vtbl_index is
the index into the virtual function table, a small non-negative
integer. name is name of the COM method. iid is an optional pointer to
the interface identifier which is used in extended error reporting.
COM methods use a special calling convention: They require a pointer to
the COM interface as first argument, in addition to those parameters that
are specified in the  tuple.

The optional paramflags parameter creates foreign function wrappers with much
more functionality than the features described above.
paramflags must be a tuple of the same length as .
Each item in this tuple contains further information about a parameter, it must
be a tuple containing one, two, or three items.
The first item is an integer containing a combination of direction
flags for the parameter:


1
Specifies an input parameter to the function.
2
Output parameter.  The foreign function fills in a value.
4
Input parameter which defaults to the integer zero.


The optional second item is the parameter name as string.  If this is specified,
the foreign function can be called with named parameters.
The optional third item is the default value for this parameter.

This example demonstrates how to wrap the Windows  function so
that it supports default parameters and named arguments. The C declaration from
the windows header file is this:


Here is the wrapping with :


The  foreign function can now be called in these ways:


A second example demonstrates output parameters.  The win32 
function retrieves the dimensions of a specified window by copying them into
 structure that the caller has to supply.  Here is the C declaration:


Here is the wrapping with :


Functions with output parameters will automatically return the output parameter
value if there is a single one, or a tuple containing the output parameter
values when there are more than one, so the GetWindowRect function now returns a
RECT instance, when called.
Output parameters can be combined with the  protocol to do
further output processing and error checking.  The win32  api
function returns a  to signal success or failure, so this function could
do the error checking, and raises an exception when the api call failed:


If the  function returns the argument tuple it receives
unchanged,  continues the normal processing it does on the output
parameters.  If you want to return a tuple of window coordinates instead of a
 instance, you can retrieve the fields in the function and return them
instead, the normal processing will no longer take place:




Utility functions¶


(obj)¶
Returns the address of the memory buffer as integer.  obj must be an
instance of a ctypes type.



(obj_or_type)¶
Returns the alignment requirements of a ctypes type. obj_or_type must be a
ctypes type or instance.



(obj[, offset])¶
Returns a light-weight pointer to obj, which must be an instance of a
ctypes type.  offset defaults to zero, and must be an integer that will be
added to the internal pointer value.
 corresponds to this C code:


The returned object can only be used as a foreign function call parameter.
It behaves similar to , but the construction is a lot faster.



(obj, type)¶
This function is similar to the cast operator in C. It returns a new instance
of type which points to the same memory block as obj.  type must be a
pointer type, and obj must be an object that can be interpreted as a
pointer.



(init_or_size, size=None)¶
This function creates a mutable character buffer. The returned object is a
ctypes array of .
init_or_size must be an integer which specifies the size of the array, or a
bytes object which will be used to initialize the array items.
If a bytes object is specified as first argument, the buffer is made one item
larger than its length so that the last element in the array is a NUL
termination character. An integer can be passed as second argument which allows
specifying the size of the array if the length of the bytes should not be used.



(init_or_size, size=None)¶
This function creates a mutable unicode character buffer. The returned object is
a ctypes array of .
init_or_size must be an integer which specifies the size of the array, or a
string which will be used to initialize the array items.
If a string is specified as first argument, the buffer is made one item
larger than the length of the string so that the last element in the array is a
NUL termination character. An integer can be passed as second argument which
allows specifying the size of the array if the length of the string should not
be used.



()¶
Windows only: This function is a hook which allows implementing in-process
COM servers with ctypes.  It is called from the DllCanUnloadNow function that
the _ctypes extension dll exports.



()¶
Windows only: This function is a hook which allows implementing in-process
COM servers with ctypes.  It is called from the DllGetClassObject function
that the  extension dll exports.



(name)¶
Try to find a library and return a pathname.  name is the library name
without any prefix like , suffix like ,  or version
number (this is the form used for the posix linker option ).  If
no library can be found, returns .
The exact functionality is system dependent.



()¶
Windows only: return the filename of the VC runtime library used by Python,
and by the extension modules.  If the name of the library cannot be
determined,  is returned.
If you need to free memory, for example, allocated by an extension module
with a call to the , it is important that you use the
function in the same library that allocated the memory.



([code])¶
Windows only: Returns a textual description of the error code code.  If no
error code is specified, the last error code is used by calling the Windows
api function GetLastError.



()¶
Windows only: Returns the last error code set by Windows in the calling thread.
This function calls the Windows GetLastError() function directly,
it does not return the ctypes-private copy of the error code.



()¶
Returns the current value of the ctypes-private copy of the system
 variable in the calling thread.



()¶
Windows only: returns the current value of the ctypes-private copy of the system
 variable in the calling thread.



(dst, src, count)¶
Same as the standard C memmove library function: copies count bytes from
src to dst. dst and src must be integers or ctypes instances that can
be converted to pointers.



(dst, c, count)¶
Same as the standard C memset library function: fills the memory block at
address dst with count bytes of value c. dst must be an integer
specifying an address, or a ctypes instance.



(type)¶
This factory function creates and returns a new ctypes pointer type. Pointer
types are cached and reused internally, so calling this function repeatedly is
cheap. type must be a ctypes type.



(obj)¶
This function creates a new pointer instance, pointing to obj. The returned
object is of the type .
Note: If you just want to pass a pointer to an object to a foreign function
call, you should use  which is much faster.



(obj, size)¶
This function resizes the internal memory buffer of obj, which must be an
instance of a ctypes type.  It is not possible to make the buffer smaller
than the native size of the objects type, as given by ,
but it is possible to enlarge the buffer.



(value)¶
Set the current value of the ctypes-private copy of the system 
variable in the calling thread to value and return the previous value.



(value)¶
Windows only: set the current value of the ctypes-private copy of the system
 variable in the calling thread to value and return the
previous value.



(obj_or_type)¶
Returns the size in bytes of a ctypes type or instance memory buffer.
Does the same as the C  operator.



(address, size=-1)¶
This function returns the C string starting at memory address address as a bytes
object. If size is specified, it is used as size, otherwise the string is assumed
to be zero-terminated.



(code=None, descr=None)¶
Windows only: this function is probably the worst-named thing in ctypes. It
creates an instance of OSError.  If code is not specified,
 is called to determine the error code. If descr is not
specified,  is called to get a textual description of the
error.

Changed in version 3.3: An instance of  used to be created.




(address, size=-1)¶
This function returns the wide character string starting at memory address
address as a string.  If size is specified, it is used as the number of
characters of the string, otherwise the string is assumed to be
zero-terminated.



Data types¶


class ¶
This non-public class is the common base class of all ctypes data types.
Among other things, all ctypes type instances contain a memory block that
hold C compatible data; the address of the memory block is returned by the
 helper function. Another instance variable is exposed as
; this contains other Python objects that need to be kept
alive in case the memory block contains pointers.
Common methods of ctypes data types, these are all class methods (to be
exact, they are methods of the metaclass):


(source[, offset])¶
This method returns a ctypes instance that shares the buffer of the
source object.  The source object must support the writeable buffer
interface.  The optional offset parameter specifies an offset into the
source buffer in bytes; the default is zero.  If the source buffer is not
large enough a  is raised.



(source[, offset])¶
This method creates a ctypes instance, copying the buffer from the
source object buffer which must be readable.  The optional offset
parameter specifies an offset into the source buffer in bytes; the default
is zero.  If the source buffer is not large enough a  is
raised.



(address)¶
This method returns a ctypes type instance using the memory specified by
address which must be an integer.



(obj)¶
This method adapts obj to a ctypes type.  It is called with the actual
object used in a foreign function call when the type is present in the
foreign function’s  tuple; it must return an object that
can be used as a function call parameter.
All ctypes data types have a default implementation of this classmethod
that normally returns obj if that is an instance of the type.  Some
types accept other objects as well.



(library, name)¶
This method returns a ctypes type instance exported by a shared
library. name is the name of the symbol that exports the data, library
is the loaded shared library.

Common instance variables of ctypes data types:


¶
Sometimes ctypes data instances do not own the memory block they contain,
instead they share part of the memory block of a base object.  The
 read-only member is the root ctypes object that owns the
memory block.



¶
This read-only variable is true when the ctypes data instance has
allocated the memory block itself, false otherwise.



¶
This member is either  or a dictionary containing Python objects
that need to be kept alive so that the memory block contents is kept
valid.  This object is only exposed for debugging; never modify the
contents of this dictionary.




Fundamental data types¶


class ¶
This non-public class is the base class of all fundamental ctypes data
types. It is mentioned here because it contains the common attributes of the
fundamental ctypes data types.   is a subclass of
, so it inherits their methods and attributes. ctypes data
types that are not and do not contain pointers can now be pickled.
Instances have a single attribute:


¶
This attribute contains the actual value of the instance. For integer and
pointer types, it is an integer, for character types, it is a single
character bytes object or string, for character pointer types it is a
Python bytes object or string.
When the  attribute is retrieved from a ctypes instance, usually
a new object is returned each time.   does not implement
original object return, always a new object is constructed.  The same is
true for all other ctypes object instances.


Fundamental data types, when returned as foreign function call results, or, for
example, by retrieving structure field members or array items, are transparently
converted to native Python types.  In other words, if a foreign function has a
 of , you will always receive a Python bytes
object, not a  instance.
Subclasses of fundamental data types do not inherit this behavior. So, if a
foreign functions  is a subclass of , you will
receive an instance of this subclass from the function call. Of course, you can
get the value of the pointer by accessing the  attribute.
These are the fundamental ctypes data types:


class ¶
Represents the C  datatype, and interprets the value as
small integer.  The constructor accepts an optional integer initializer; no
overflow checking is done.



class ¶
Represents the C  datatype, and interprets the value as a single
character.  The constructor accepts an optional string initializer, the
length of the string must be exactly one character.



class ¶
Represents the C  datatype when it points to a zero-terminated
string.  For a general character pointer that may also point to binary data,
 must be used.  The constructor accepts an integer
address, or a bytes object.



class ¶
Represents the C  datatype.  The constructor accepts an
optional float initializer.



class ¶
Represents the C  datatype.  The constructor accepts an
optional float initializer.  On platforms where  it is an alias to .



class ¶
Represents the C  datatype.  The constructor accepts an
optional float initializer.



class ¶
Represents the C  datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.  On platforms
where  it is an alias to .



class ¶
Represents the C 8-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 16-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 32-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 64-bit  datatype.  Usually an alias for
.



class ¶
Represents the C  datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.



class ¶
Represents the C  datatype.  The constructor accepts
an optional integer initializer; no overflow checking is done.



class ¶
Represents the C  datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.



class ¶
Represents the C  datatype.



class ¶
Represents the C  datatype.

New in version 3.2.




class ¶
Represents the C  datatype, it interprets the value as
small integer.  The constructor accepts an optional integer initializer; no
overflow checking is done.



class ¶
Represents the C  datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.  On platforms
where  it is an alias for .



class ¶
Represents the C 8-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 16-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 32-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 64-bit  datatype.  Usually an alias for
.



class ¶
Represents the C  datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.



class ¶
Represents the C  datatype.  The constructor
accepts an optional integer initializer; no overflow checking is done.



class ¶
Represents the C  datatype.  The constructor accepts
an optional integer initializer; no overflow checking is done.



class ¶
Represents the C  type.  The value is represented as integer.
The constructor accepts an optional integer initializer.



class ¶
Represents the C  datatype, and interprets the value as a
single character unicode string.  The constructor accepts an optional string
initializer, the length of the string must be exactly one character.



class ¶
Represents the C  datatype, which must be a pointer to a
zero-terminated wide character string.  The constructor accepts an integer
address, or a string.



class ¶
Represent the C  datatype (more accurately,  from
C99).  Its value can be  or , and the constructor accepts any object
that has a truth value.



class ¶
Windows only: Represents a  value, which contains success or
error information for a function or method call.



class ¶
Represents the C  datatype.  Calling this without an
argument creates a   pointer.

The  module provides quite some other Windows specific
data types, for example , , or .  Some
useful structures like  or  are also defined.


Structured data types¶


class (*args, **kw)¶
Abstract base class for unions in native byte order.



class (*args, **kw)¶
Abstract base class for structures in big endian byte order.



class (*args, **kw)¶
Abstract base class for structures in little endian byte order.

Structures with non-native byte order cannot contain pointer type fields, or any
other data types containing pointer type fields.


class (*args, **kw)¶
Abstract base class for structures in native byte order.
Concrete structure and union types must be created by subclassing one of these
types, and at least define a  class variable.  will
create descriptors which allow reading and writing the fields by direct
attribute accesses.  These are the


¶
A sequence defining the structure fields.  The items must be 2-tuples or
3-tuples.  The first item is the name of the field, the second item
specifies the type of the field; it can be any ctypes data type.
For integer type fields like , a third optional item can be
given.  It must be a small positive integer defining the bit width of the
field.
Field names must be unique within one structure or union.  This is not
checked, only one field can be accessed when names are repeated.
It is possible to define the  class variable after the
class statement that defines the Structure subclass, this allows creating
data types that directly or indirectly reference themselves:


The  class variable must, however, be defined before the
type is first used (an instance is created,  is called on it,
and so on).  Later assignments to the  class variable will
raise an AttributeError.
It is possible to define sub-subclasses of structure types, they inherit
the fields of the base class plus the  defined in the
sub-subclass, if any.



¶
An optional small integer that allows overriding the alignment of
structure fields in the instance.   must already be defined
when  is assigned, otherwise it will have no effect.



¶
An optional sequence that lists the names of unnamed (anonymous) fields.
 must be already defined when  is
assigned, otherwise it will have no effect.
The fields listed in this variable must be structure or union type fields.
 will create descriptors in the structure type that allows
accessing the nested fields directly, without the need to create the
structure or union field.
Here is an example type (Windows):


The  structure describes a COM data type, the  field
specifies which one of the union fields is valid.  Since the  field
is defined as anonymous field, it is now possible to access the members
directly off the TYPEDESC instance.  and 
are equivalent, but the former is faster since it does not need to create
a temporary union instance:



It is possible to define sub-subclasses of structures, they inherit the
fields of the base class.  If the subclass definition has a separate
 variable, the fields specified in this are appended to the
fields of the base class.
Structure and union constructors accept both positional and keyword
arguments.  Positional arguments are used to initialize member fields in the
same order as they are appear in .  Keyword arguments in the
constructor are interpreted as attribute assignments, so they will initialize
 with the same name, or create new attributes for names not
present in .



Arrays and pointers¶


class (*args)¶
Abstract base class for arrays.
The recommended way to create concrete array types is by multiplying any
 data type with a positive integer.  Alternatively, you can subclass
this type and define  and  class variables.
Array elements can be read and written using standard
subscript and slice accesses; for slice reads, the resulting object is
not itself an .


¶
A positive integer specifying the number of elements in the array.
Out-of-range subscripts result in an . Will be
returned by .



¶
Specifies the type of each element in the array.

Array subclass constructors accept positional arguments, used to
initialize the elements in order.



class ¶
Private, abstract base class for pointers.
Concrete pointer types are created by calling  with the
type that will be pointed to; this is done automatically by
.
If a pointer points to an array, its elements can be read and
written using standard subscript and slice accesses.  Pointer objects
have no size, so  will raise .  Negative
subscripts will read from the memory before the pointer (as in C), and
out-of-range subscripts will probably crash with an access violation (if
you’re lucky).


¶
Specifies the type pointed to.



¶
Returns the object to which to pointer points.  Assigning to this
attribute changes the pointer to point to the assigned object.



