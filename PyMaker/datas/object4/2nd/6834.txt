link:
library/ftplib.html#module-ftplib

docs:

 — FTP protocol client¶
Source code: Lib/ftplib.py

This module defines the class  and a few related items. The
 class implements the client side of the FTP protocol.  You can use
this to write Python programs that perform a variety of automated FTP jobs, such
as mirroring other FTP servers.  It is also used by the module
 to handle URLs that use FTP.  For more information on FTP
(File Transfer Protocol), see Internet RFC 959.
Here’s a sample session using the  module:


The module defines the following items:


class (host='', user='', passwd='', acct='', timeout=None, source_address=None)¶
Return a new instance of the  class.  When host is given, the
method call  is made.  When user is given, additionally
the method call  is made (where passwd and
acct default to the empty string when not given).  The optional timeout
parameter specifies a timeout in seconds for blocking operations like the
connection attempt (if is not specified, the global default timeout setting
will be used). source_address is a 2-tuple  for the socket
to bind to as its source address before connecting.
The  class supports the  statement, e.g.:



Changed in version 3.2: Support for the  statement was added.


Changed in version 3.3: source_address parameter was added.




class (host='', user='', passwd='', acct='', keyfile=None, certfile=None, context=None, timeout=None, source_address=None)¶
A  subclass which adds TLS support to FTP as described in
RFC 4217.
Connect as usual to port 21 implicitly securing the FTP control connection
before authenticating. Securing the data connection requires the user to
explicitly ask for it by calling the  method.  context
is a  object which allows bundling SSL configuration
options, certificates and private keys into a single (potentially
long-lived) structure.  Please read Security considerations for best practices.
keyfile and certfile are a legacy alternative to context – they
can point to PEM-formatted private key and certificate chain files
(respectively) for the SSL connection.

New in version 3.2.


Changed in version 3.3: source_address parameter was added.


Changed in version 3.4: The class now supports hostname check with
 and Server Name Indication (see
).


Deprecated since version 3.6: keyfile and certfile are deprecated in favor of context.
Please use  instead, or let
 select the system’s trusted CA
certificates for you.

Here’s a sample session using the  class:





exception ¶
Exception raised when an unexpected reply is received from the server.



exception ¶
Exception raised when an error code signifying a temporary error (response
codes in the range 400–499) is received.



exception ¶
Exception raised when an error code signifying a permanent error (response
codes in the range 500–599) is received.



exception ¶
Exception raised when a reply is received from the server that does not fit
the response specifications of the File Transfer Protocol, i.e. begin with a
digit in the range 1–5.



¶
The set of all exceptions (as a tuple) that methods of 
instances may raise as a result of problems with the FTP connection (as
opposed to programming errors made by the caller).  This set includes the
four exceptions listed above as well as .


See also

Module 
Parser for the  file format.  The file  is
typically used by FTP clients to load user authentication information
before prompting the user.



FTP Objects¶
Several methods are available in two flavors: one for handling text files and
another for binary files.  These are named for the command which is used
followed by  for the text version or  for the binary version.
 instances have the following methods:


(level)¶
Set the instance’s debugging level.  This controls the amount of debugging
output printed.  The default, , produces no debugging output.  A value of
 produces a moderate amount of debugging output, generally a single line
per request.  A value of  or higher produces the maximum amount of
debugging output, logging each line sent and received on the control connection.



(host='', port=0, timeout=None, source_address=None)¶
Connect to the given host and port.  The default port number is , as
specified by the FTP protocol specification.  It is rarely needed to specify a
different port number.  This function should be called only once for each
instance; it should not be called at all if a host was given when the instance
was created.  All other methods can only be used after a connection has been
made.
The optional timeout parameter specifies a timeout in seconds for the
connection attempt. If no timeout is passed, the global default timeout
setting will be used.
source_address is a 2-tuple  for the socket to bind to as
its source address before connecting.

Changed in version 3.3: source_address parameter was added.




()¶
Return the welcome message sent by the server in reply to the initial
connection.  (This message sometimes contains disclaimers or help information
that may be relevant to the user.)



(user='anonymous', passwd='', acct='')¶
Log in as the given user.  The passwd and acct parameters are optional and
default to the empty string.  If no user is specified, it defaults to
.  If user is , the default passwd is
.  This function should be called only once for each instance,
after a connection has been established; it should not be called at all if a
host and user were given when the instance was created.  Most FTP commands are
only allowed after the client has logged in.  The acct parameter supplies
“accounting information”; few systems implement this.



()¶
Abort a file transfer that is in progress.  Using this does not always work, but
it’s worth a try.



(cmd)¶
Send a simple command string to the server and return the response string.



(cmd)¶
Send a simple command string to the server and handle the response.  Return
nothing if a response code corresponding to success (codes in the range
200–299) is received.  Raise  otherwise.



(cmd, callback, blocksize=8192, rest=None)¶
Retrieve a file in binary transfer mode.  cmd should be an appropriate
 command: . The callback function is called for
each block of data received, with a single bytes argument giving the data
block. The optional blocksize argument specifies the maximum chunk size to
read on the low-level socket object created to do the actual transfer (which
will also be the largest size of the data blocks passed to callback).  A
reasonable default is chosen. rest means the same thing as in the
 method.



(cmd, callback=None)¶
Retrieve a file or directory listing in ASCII transfer mode.  cmd should be
an appropriate  command (see ) or a command such as
 or  (usually just the string ).
 retrieves a list of files and information about those files.
 retrieves a list of file names.
The callback function is called for each line with a string argument
containing the line with the trailing CRLF stripped.  The default callback
prints the line to .



(val)¶
Enable “passive” mode if val is true, otherwise disable passive mode.
Passive mode is on by default.



(cmd, fp, blocksize=8192, callback=None, rest=None)¶
Store a file in binary transfer mode.  cmd should be an appropriate
 command: . fp is a file object
(opened in binary mode) which is read until EOF using its 
method in blocks of size blocksize to provide the data to be stored.
The blocksize argument defaults to 8192.  callback is an optional single
parameter callable that is called on each block of data after it is sent.
rest means the same thing as in the  method.

Changed in version 3.2: rest parameter added.




(cmd, fp, callback=None)¶
Store a file in ASCII transfer mode.  cmd should be an appropriate
 command (see ).  Lines are read until EOF from the
file object fp (opened in binary mode) using its 
method to provide the data to be stored.  callback is an optional single
parameter callable that is called on each line after it is sent.



(cmd, rest=None)¶
Initiate a transfer over the data connection.  If the transfer is active, send an
 or   command and the transfer command specified by cmd, and
accept the connection.  If the server is passive, send an  or 
command, connect to it, and start the transfer command.  Either way, return the
socket for the connection.
If optional rest is given, a  command is sent to the server, passing
rest as an argument.  rest is usually a byte offset into the requested file,
telling the server to restart sending the file’s bytes at the requested offset,
skipping over the initial bytes.  Note however that RFC 959 requires only that
rest be a string containing characters in the printable range from ASCII code
33 to ASCII code 126.  The  method, therefore, converts
rest to a string, but no check is performed on the string’s contents.  If the
server does not recognize the  command, an  exception
will be raised.  If this happens, simply call  without a
rest argument.



(cmd, rest=None)¶
Like , but returns a tuple of the data connection and the
expected size of the data.  If the expected size could not be computed, 
will be returned as the expected size.  cmd and rest means the same thing as
in .



(path="", facts=[])¶
List a directory in a standardized format by using  command
(RFC 3659).  If path is omitted the current directory is assumed.
facts is a list of strings representing the type of information desired
(e.g. ).  Return a generator object yielding a
tuple of two elements for every file found in path.  First element is the
file name, the second one is a dictionary containing facts about the file
name.  Content of this dictionary might be limited by the facts argument
but server is not guaranteed to return all requested facts.

New in version 3.3.




(argument[, ...])¶
Return a list of file names as returned by the  command.  The
optional argument is a directory to list (default is the current server
directory).  Multiple arguments can be used to pass non-standard options to
the  command.

Note
If your server supports the command,  offers a better API.




(argument[, ...])¶
Produce a directory listing as returned by the  command, printing it to
standard output.  The optional argument is a directory to list (default is the
current server directory).  Multiple arguments can be used to pass non-standard
options to the  command.  If the last argument is a function, it is used
as a callback function as for ; the default prints to
.  This method returns .

Note
If your server supports the command,  offers a better API.




(fromname, toname)¶
Rename file fromname on the server to toname.



(filename)¶
Remove the file named filename from the server.  If successful, returns the
text of the response, otherwise raises  on permission errors or
 on other errors.



(pathname)¶
Set the current directory on the server.



(pathname)¶
Create a new directory on the server.



()¶
Return the pathname of the current directory on the server.



(dirname)¶
Remove the directory named dirname on the server.



(filename)¶
Request the size of the file named filename on the server.  On success, the
size of the file is returned as an integer, otherwise  is returned.
Note that the  command is not  standardized, but is supported by many
common server implementations.



()¶
Send a  command to the server and close the connection. This is the
“polite” way to close a connection, but it may raise an exception if the server
responds with an error to the  command.  This implies a call to the
 method which renders the  instance useless for
subsequent calls (see below).



()¶
Close the connection unilaterally.  This should not be applied to an already
closed connection such as after a successful call to .
After this call the  instance should not be used any more (after
a call to  or  you cannot reopen the
connection by issuing another  method).



FTP_TLS Objects¶
 class inherits from , defining these additional objects:


¶
The SSL version to use (defaults to ).



()¶
Set up a secure control connection by using TLS or SSL, depending on what
is specified in the  attribute.

Changed in version 3.4: The method now supports hostname check with
 and Server Name Indication (see
).




()¶
Revert control channel back to plaintext.  This can be useful to take
advantage of firewalls that know how to handle NAT with non-secure FTP
without opening fixed ports.

New in version 3.3.




()¶
Set up secure data connection.



()¶
Set up clear text data connection.


