link:
library/inspect.html#inspect.Signature

docs:


class (parameters=None, *, return_annotation=Signature.empty)¶
A Signature object represents the call signature of a function and its return
annotation.  For each parameter accepted by the function it stores a
 object in its  collection.
The optional parameters argument is a sequence of 
objects, which is validated to check that there are no parameters with
duplicate names, and that the parameters are in the right order, i.e.
positional-only first, then positional-or-keyword, and that parameters with
defaults follow parameters without defaults.
The optional return_annotation argument, can be an arbitrary Python object,
is the “return” annotation of the callable.
Signature objects are immutable.  Use  to make a
modified copy.

Changed in version 3.5: Signature objects are picklable and hashable.



¶
A special class-level marker to specify absence of a return annotation.



¶
An ordered mapping of parameters’ names to the corresponding
 objects.  Parameters appear in strict definition
order, including keyword-only parameters.

Changed in version 3.7: Python only explicitly guaranteed that it preserved the declaration
order of keyword-only parameters as of version 3.7, although in practice
this order had always been preserved in Python 3.




¶
The “return” annotation for the callable.  If the callable has no “return”
annotation, this attribute is set to .



(*args, **kwargs)¶
Create a mapping from positional and keyword arguments to parameters.
Returns  if  and  match the
signature, or raises a .



(*args, **kwargs)¶
Works the same way as , but allows the omission of
some required arguments (mimics  behavior.)
Returns , or raises a  if the
passed arguments do not match the signature.



(*[, parameters][, return_annotation])¶
Create a new Signature instance based on the instance replace was invoked
on.  It is possible to pass different  and/or
 to override the corresponding properties of the base
signature.  To remove return_annotation from the copied Signature, pass in
.





classmethod (obj, *, follow_wrapped=True)¶
Return a  (or its subclass) object for a given callable
.  Pass  to get a signature of 
without unwrapping its  chain.
This method simplifies subclassing of :



New in version 3.5.


