link:
library/dis.html#analysis-functions

docs:

Analysis functions¶
The  module also defines the following analysis functions that convert
the input directly to the desired output. They can be useful if only a single
operation is being performed, so the intermediate analysis object isn’t useful:


(x)¶
Return a formatted multi-line string with detailed code object information
for the supplied function, generator, asynchronous generator, coroutine,
method, source code string or code object.
Note that the exact contents of code info strings are highly implementation
dependent and they may change arbitrarily across Python VMs or Python
releases.

New in version 3.2.


Changed in version 3.7: This can now handle coroutine and asynchronous generator objects.




(x, *, file=None)¶
Print detailed code object information for the supplied function, method,
source code string or code object to file (or  if file
is not specified).
This is a convenient shorthand for ,
intended for interactive exploration at the interpreter prompt.

New in version 3.2.


Changed in version 3.4: Added file parameter.




(x=None, *, file=None, depth=None)¶
Disassemble the x object.  x can denote either a module, a class, a
method, a function, a generator, an asynchronous generator, a coroutine,
a code object, a string of source code or a byte sequence of raw bytecode.
For a module, it disassembles all functions. For a class, it disassembles
all methods (including class and static methods). For a code object or
sequence of raw bytecode, it prints one line per bytecode instruction.
It also recursively disassembles nested code objects (the code of
comprehensions, generator expressions and nested functions, and the code
used for building nested classes).
Strings are first compiled to code objects with the 
built-in function before being disassembled.  If no object is provided, this
function disassembles the last traceback.
The disassembly is written as text to the supplied file argument if
provided and to  otherwise.
The maximal depth of recursion is limited by depth unless it is .
 means no recursion.

Changed in version 3.4: Added file parameter.


Changed in version 3.7: Implemented recursive disassembling and added depth parameter.


Changed in version 3.7: This can now handle coroutine and asynchronous generator objects.




(tb=None, *, file=None)¶
Disassemble the top-of-stack function of a traceback, using the last
traceback if none was passed.  The instruction causing the exception is
indicated.
The disassembly is written as text to the supplied file argument if
provided and to  otherwise.

Changed in version 3.4: Added file parameter.




(code, lasti=-1, *, file=None)¶

(code, lasti=-1, *, file=None)¶
Disassemble a code object, indicating the last instruction if lasti was
provided.  The output is divided in the following columns:

the line number, for the first instruction of each line
the current instruction, indicated as ,
a labelled instruction, indicated with ,
the address of the instruction,
the operation code name,
operation parameters, and
interpretation of the parameters in parentheses.

The parameter interpretation recognizes local and global variable names,
constant values, branch targets, and compare operators.
The disassembly is written as text to the supplied file argument if
provided and to  otherwise.

Changed in version 3.4: Added file parameter.




(x, *, first_line=None)¶
Return an iterator over the instructions in the supplied function, method,
source code string or code object.
The iterator generates a series of  named tuples giving
the details of each operation in the supplied code.
If first_line is not , it indicates the line number that should be
reported for the first source line in the disassembled code.  Otherwise, the
source line information (if any) is taken directly from the disassembled code
object.

New in version 3.4.




(code)¶
This generator function uses the  and 
attributes of the code object code to find the offsets which are starts of
lines in the source code.  They are generated as  pairs.
See Objects/lnotab_notes.txt for the  format and
how to decode it.

Changed in version 3.6: Line numbers can be decreasing. Before, they were always increasing.




(code)¶
Detect all offsets in the code object code which are jump targets, and
return a list of these offsets.



(opcode[, oparg])¶
Compute the stack effect of opcode with argument oparg.

New in version 3.4.


