link:
library/timeit.html#python-interface

docs:

Python Interface¶
The module defines three convenience functions and a public class:


(stmt='pass', setup='pass', timer=<default timer>, number=1000000, globals=None)¶
Create a  instance with the given statement, setup code and
timer function and run its  method with number executions.
The optional globals argument specifies a namespace in which to execute the
code.

Changed in version 3.5: The optional globals parameter was added.




(stmt='pass', setup='pass', timer=<default timer>, repeat=5, number=1000000, globals=None)¶
Create a  instance with the given statement, setup code and
timer function and run its  method with the given repeat
count and number executions.  The optional globals argument specifies a
namespace in which to execute the code.

Changed in version 3.5: The optional globals parameter was added.


Changed in version 3.7: Default value of repeat changed from 3 to 5.




()¶
The default timer, which is always .

Changed in version 3.3:  is now the default timer.




class (stmt='pass', setup='pass', timer=<timer function>, globals=None)¶
Class for timing execution speed of small code snippets.
The constructor takes a statement to be timed, an additional statement used
for setup, and a timer function.  Both statements default to ;
the timer function is platform-dependent (see the module doc string).
stmt and setup may also contain multiple statements separated by 
or newlines, as long as they don’t contain multi-line string literals.  The
statement will by default be executed within timeit’s namespace; this behavior
can be controlled by passing a namespace to globals.
To measure the execution time of the first statement, use the 
method.  The  and  methods are convenience
methods to call  multiple times.
The execution time of setup is excluded from the overall timed execution run.
The stmt and setup parameters can also take objects that are callable
without arguments.  This will embed calls to them in a timer function that
will then be executed by .  Note that the timing overhead is a
little larger in this case because of the extra function calls.

Changed in version 3.5: The optional globals parameter was added.



(number=1000000)¶
Time number executions of the main statement.  This executes the setup
statement once, and then returns the time it takes to execute the main
statement a number of times, measured in seconds as a float.
The argument is the number of times through the loop, defaulting to one
million.  The main statement, the setup statement and the timer function
to be used are passed to the constructor.

Note
By default,  temporarily turns off garbage
collection during the timing.  The advantage of this approach is that
it makes independent timings more comparable.  The disadvantage is
that GC may be an important component of the performance of the
function being measured.  If so, GC can be re-enabled as the first
statement in the setup string.  For example:






(callback=None)¶
Automatically determine how many times to call .
This is a convenience function that calls  repeatedly
so that the total time >= 0.2 second, returning the eventual
(number of loops, time taken for that number of loops). It calls
 with increasing numbers from the sequence 1, 2, 5,
10, 20, 50, … until the time taken is at least 0.2 second.
If callback is given and is not , it will be called after
each trial with two arguments: .

New in version 3.6.




(repeat=5, number=1000000)¶
Call  a few times.
This is a convenience function that calls the  repeatedly,
returning a list of results.  The first argument specifies how many times
to call .  The second argument specifies the number
argument for .

Note
It’s tempting to calculate mean and standard deviation from the result
vector and report these.  However, this is not very useful.
In a typical case, the lowest value gives a lower bound for how fast
your machine can run the given code snippet; higher values in the
result vector are typically not caused by variability in Python’s
speed, but by other processes interfering with your timing accuracy.
So the  of the result is probably the only number you
should be interested in.  After that, you should look at the entire
vector and apply common sense rather than statistics.


Changed in version 3.7: Default value of repeat changed from 3 to 5.




(file=None)¶
Helper to print a traceback from the timed code.
Typical use:


The advantage over the standard traceback is that source lines in the
compiled template will be displayed.  The optional file argument directs
where the traceback is sent; it defaults to .


