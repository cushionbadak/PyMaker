link:
reference/import.html#the-path-based-finder

docs:

5.5. The Path Based Finder¶
As mentioned previously, Python comes with several default meta path finders.
One of these, called the path based finder
(), searches an import path,
which contains a list of path entries.  Each path
entry names a location to search for modules.
The path based finder itself doesn’t know how to import anything. Instead, it
traverses the individual path entries, associating each of them with a
path entry finder that knows how to handle that particular kind of path.
The default set of path entry finders implement all the semantics for finding
modules on the file system, handling special file types such as Python source
code ( files), Python byte code ( files) and
shared libraries (e.g.  files). When supported by the 
module in the standard library, the default path entry finders also handle
loading all of these file types (other than shared libraries) from zipfiles.
Path entries need not be limited to file system locations.  They can refer to
URLs, database queries, or any other location that can be specified as a
string.
The path based finder provides additional hooks and protocols so that you
can extend and customize the types of searchable path entries.  For example,
if you wanted to support path entries as network URLs, you could write a hook
that implements HTTP semantics to find modules on the web.  This hook (a
callable) would return a path entry finder supporting the protocol
described below, which was then used to get a loader for the module from the
web.
A word of warning: this section and the previous both use the term finder,
distinguishing between them by using the terms meta path finder and
path entry finder.  These two types of finders are very similar,
support similar protocols, and function in similar ways during the import
process, but it’s important to keep in mind that they are subtly different.
In particular, meta path finders operate at the beginning of the import
process, as keyed off the  traversal.
By contrast, path entry finders are in a sense an implementation detail
of the path based finder, and in fact, if the path based finder were to be
removed from , none of the path entry finder semantics
would be invoked.

5.5.1. Path entry finders¶
The path based finder is responsible for finding and loading
Python modules and packages whose location is specified with a string
path entry.  Most path entries name locations in the file system,
but they need not be limited to this.
As a meta path finder, the path based finder implements the
 protocol previously
described, however it exposes additional hooks that can be used to
customize how modules are found and loaded from the import path.
Three variables are used by the path based finder, ,
 and .  The 
attributes on package objects are also used.  These provide additional ways
that the import machinery can be customized.
 contains a list of strings providing search locations for
modules and packages.  It is initialized from the 
environment variable and various other installation- and
implementation-specific defaults.  Entries in  can name
directories on the file system, zip files, and potentially other “locations”
(see the  module) that should be searched for modules, such as
URLs, or database queries.  Only strings and bytes should be present on
; all other data types are ignored.  The encoding of bytes
entries is determined by the individual path entry finders.
The path based finder is a meta path finder, so the import
machinery begins the import path search by calling the path
based finder’s  method as
described previously.  When the  argument to
 is given, it will be a
list of string paths to traverse - typically a package’s 
attribute for an import within that package.  If the  argument is
, this indicates a top level import and  is used.
The path based finder iterates over every entry in the search path, and
for each of these, looks for an appropriate path entry finder
() for the
path entry.  Because this can be an expensive operation (e.g. there may be
stat() call overheads for this search), the path based finder maintains
a cache mapping path entries to path entry finders.  This cache is maintained
in  (despite the name, this cache actually
stores finder objects rather than being limited to importer objects).
In this way, the expensive search for a particular path entry
location’s path entry finder need only be done once.  User code is
free to remove cache entries from  forcing
the path based finder to perform the path entry search again [3].
If the path entry is not present in the cache, the path based finder iterates
over every callable in .  Each of the path entry
hooks in this list is called with a single argument, the
path entry to be searched.  This callable may either return a path
entry finder that can handle the path entry, or it may raise
.  An  is used by the path based finder to
signal that the hook cannot find a path entry finder
for that path entry.  The
exception is ignored and import path iteration continues.  The hook
should expect either a string or bytes object; the encoding of bytes objects
is up to the hook (e.g. it may be a file system encoding, UTF-8, or something
else), and if the hook cannot decode the argument, it should raise
.
If  iteration ends with no path entry finder
being returned, then the path based finder’s
 method will store 
in  (to indicate that there is no finder for
this path entry) and return , indicating that this
meta path finder could not find the module.
If a path entry finder is returned by one of the path entry
hook callables on , then the following protocol is used
to ask the finder for a module spec, which is then used when loading the
module.
The current working directory – denoted by an empty string – is handled
slightly differently from other entries on . First, if the
current working directory is found to not exist, no value is stored in
. Second, the value for the current working
directory is looked up fresh for each module lookup. Third, the path used for
 and returned by
 will be the actual current
working directory and not the empty string.


5.5.2. Path entry finder protocol¶
In order to support imports of modules and initialized packages and also to
contribute portions to namespace packages, path entry finders must implement
the  method.
 takes two argument, the
fully qualified name of the module being imported, and the (optional) target
module.   returns a fully populated spec for the module.
This spec will always have “loader” set (with one exception).
To indicate to the import machinery that the spec represents a namespace
portion. the path entry finder sets “loader” on the spec to
 and “submodule_search_locations” to a list containing the
portion.

Changed in version 3.4:  replaced
 and
, both of which
are now deprecated, but will be used if  is not defined.
Older path entry finders may implement one of these two deprecated methods
instead of .  The methods are still respected for the
sake of backward compatibility.  However, if  is
implemented on the path entry finder, the legacy methods are ignored.
 takes one argument, the
fully qualified name of the module being imported.  
returns a 2-tuple where the first item is the loader and the second item
is a namespace portion.  When the first item (i.e. the loader) is
, this means that while the path entry finder does not have a
loader for the named module, it knows that the path entry contributes to
a namespace portion for the named module.  This will almost always be the
case where Python is asked to import a namespace package that has no
physical presence on the file system.  When a path entry finder returns
 for the loader, the second item of the 2-tuple return value must
be a sequence, although it can be empty.
If  returns a non- loader value, the portion is
ignored and the loader is returned from the path based finder, terminating
the search through the path entries.
For backwards compatibility with other implementations of the import
protocol, many path entry finders also support the same,
traditional  method that meta path finders support.
However path entry finder  methods are never called
with a  argument (they are expected to record the appropriate
path information from the initial call to the path hook).
The  method on path entry finders is deprecated,
as it does not allow the path entry finder to contribute portions to
namespace packages.  If both  and 
exist on a path entry finder, the import system will always call
 in preference to .


