link:
library/__future__.html

docs:


 — Future statement definitions¶
Source code: Lib/__future__.py

 is a real module, and serves three purposes:

To avoid confusing existing tools that analyze import statements and expect to
find the modules they’re importing.
To ensure that future statements run under releases prior to
2.1 at least yield runtime exceptions (the import of  will
fail, because there was no module of that name prior to 2.1).
To document when incompatible changes were introduced, and when they will be
— or were — made mandatory.  This is a form of executable documentation, and
can be inspected programmatically via importing  and examining
its contents.

Each statement in  is of the form:


where, normally, OptionalRelease is less than MandatoryRelease, and both are
5-tuples of the same form as :


OptionalRelease records the first release in which the feature was accepted.
In the case of a MandatoryRelease that has not yet occurred,
MandatoryRelease predicts the release in which the feature will become part of
the language.
Else MandatoryRelease records when the feature became part of the language; in
releases at or after that, modules no longer need a future statement to use the
feature in question, but may continue to use such imports.
MandatoryRelease may also be , meaning that a planned feature got
dropped.
Instances of class  have two corresponding methods,
 and .
CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the built-in function  to enable the feature in
dynamically compiled code.  This flag is stored in the 
attribute on  instances.
No feature description will ever be deleted from . Since its
introduction in Python 2.1 the following features have found their way into the
language using this mechanism:








feature
optional in
mandatory in
effect



nested_scopes
2.1.0b1
2.2
PEP 227:
Statically Nested Scopes

generators
2.2.0a1
2.3
PEP 255:
Simple Generators

division
2.2.0a2
3.0
PEP 238:
Changing the Division Operator

absolute_import
2.5.0a1
3.0
PEP 328:
Imports: Multi-Line and Absolute/Relative

with_statement
2.5.0a1
2.6
PEP 343:
The “with” Statement

print_function
2.6.0a2
3.0
PEP 3105:
Make print a function

unicode_literals
2.6.0a2
3.0
PEP 3112:
Bytes literals in Python 3000

generator_stop
3.5.0b1
3.7
PEP 479:
StopIteration handling inside generators

annotations
3.7.0b1
4.0
PEP 563:
Postponed evaluation of annotations




See also

Future statements
How the compiler treats future imports.



