link:
library/pdb.html

docs:


 — The Python Debugger¶
Source code: Lib/pdb.py

The module  defines an interactive source code debugger for Python
programs.  It supports setting (conditional) breakpoints and single stepping at
the source line level, inspection of stack frames, source code listing, and
evaluation of arbitrary Python code in the context of any stack frame.  It also
supports post-mortem debugging and can be called under program control.
The debugger is extensible – it is actually defined as the class .
This is currently undocumented but easily understood by reading the source.  The
extension interface uses the modules  and .
The debugger’s prompt is . Typical usage to run a program under control
of the debugger is:



Changed in version 3.3: Tab-completion via the  module is available for commands and
command arguments, e.g. the current global and local names are offered as
arguments of the  command.

 can also be invoked as a script to debug other scripts.  For
example:


When invoked as a script, pdb will automatically enter post-mortem debugging if
the program being debugged exits abnormally.  After post-mortem debugging (or
after normal exit of the program), pdb will restart the program.  Automatic
restarting preserves pdb’s state (such as breakpoints) and in most cases is more
useful than quitting the debugger upon program’s exit.

New in version 3.2:  now accepts a  option that executes commands as if given
in a  file, see Debugger Commands.


New in version 3.7:  now accepts a  option that execute modules similar to the way
 does. As with a script, the debugger will pause execution just
before the first line of the module.

The typical usage to break into the debugger from a running program is to
insert


at the location you want to break into the debugger.  You can then step through
the code following this statement, and continue running without the debugger
using the  command.

New in version 3.7: The built-in , when called with defaults, can be used
instead of .

The typical usage to inspect a crashed program is:


The module defines the following functions; each enters the debugger in a
slightly different way:


(statement, globals=None, locals=None)¶
Execute the statement (given as a string or a code object) under debugger
control.  The debugger prompt appears before any code is executed; you can
set breakpoints and type , or you can step through the
statement using  or  (all these commands are
explained below).  The optional globals and locals arguments specify the
environment in which the code is executed; by default the dictionary of the
module  is used.  (See the explanation of the built-in
 or  functions.)



(expression, globals=None, locals=None)¶
Evaluate the expression (given as a string or a code object) under debugger
control.  When  returns, it returns the value of the
expression.  Otherwise this function is similar to .



(function, *args, **kwds)¶
Call the function (a function or method object, not a string) with the
given arguments.  When  returns, it returns whatever the
function call returned.  The debugger prompt appears as soon as the function
is entered.



(*, header=None)¶
Enter the debugger at the calling stack frame.  This is useful to hard-code
a breakpoint at a given point in a program, even if the code is not
otherwise being debugged (e.g. when an assertion fails).  If given,
header is printed to the console just before debugging begins.

Changed in version 3.7: The keyword-only argument header.




(traceback=None)¶
Enter post-mortem debugging of the given traceback object.  If no
traceback is given, it uses the one of the exception that is currently
being handled (an exception must be being handled if the default is to be
used).



()¶
Enter post-mortem debugging of the traceback found in
.

The  functions and  are aliases for instantiating the
 class and calling the method of the same name.  If you want to
access further features, you have to do this yourself:


class (completekey='tab', stdin=None, stdout=None, skip=None, nosigint=False, readrc=True)¶
 is the debugger class.
The completekey, stdin and stdout arguments are passed to the
underlying  class; see the description there.
The skip argument, if given, must be an iterable of glob-style module name
patterns.  The debugger will not step into frames that originate in a module
that matches one of these patterns. [1]
By default, Pdb sets a handler for the SIGINT signal (which is sent when the
user presses Ctrl-C on the console) when you give a  command.
This allows you to break into the debugger again by pressing Ctrl-C.  If you
want Pdb not to touch the SIGINT handler, set nosigint to true.
The readrc argument defaults to true and controls whether Pdb will load
.pdbrc files from the filesystem.
Example call to enable tracing with skip:



New in version 3.1: The skip argument.


New in version 3.2: The nosigint argument.  Previously, a SIGINT handler was never set by
Pdb.


Changed in version 3.6: The readrc argument.



(statement, globals=None, locals=None)¶

(expression, globals=None, locals=None)¶

(function, *args, **kwds)¶

()¶
See the documentation for the functions explained above.



Debugger Commands¶
The commands recognized by the debugger are listed below.  Most commands can be
abbreviated to one or two letters as indicated; e.g.  means that
either  or  can be used to enter the help command (but not 
or , nor  or  or ).  Arguments to commands must be
separated by whitespace (spaces or tabs).  Optional arguments are enclosed in
square brackets () in the command syntax; the square brackets must not be
typed.  Alternatives in the command syntax are separated by a vertical bar
().
Entering a blank line repeats the last command entered.  Exception: if the last
command was a  command, the next 11 lines are listed.
Commands that the debugger doesn’t recognize are assumed to be Python statements
and are executed in the context of the program being debugged.  Python
statements can also be prefixed with an exclamation point ().  This is a
powerful way to inspect the program being debugged; it is even possible to
change a variable or call a function.  When an exception occurs in such a
statement, the exception name is printed but the debugger’s state is not
changed.
The debugger supports aliases.  Aliases can have
parameters which allows one a certain level of adaptability to the context under
examination.
Multiple commands may be entered on a single line, separated by .  (A
single  is not used as it is the separator for multiple commands in a line
that is passed to the Python parser.)  No intelligence is applied to separating
the commands; the input is split at the first  pair, even if it is in the
middle of a quoted string.
If a file  exists in the user’s home directory or in the current
directory, it is read in and executed as if it had been typed at the debugger
prompt.  This is particularly useful for aliases.  If both files exist, the one
in the home directory is read first and aliases defined there can be overridden
by the local file.

Changed in version 3.2:  can now contain commands that continue debugging, such as
 or .  Previously, these commands had no
effect.



¶
Without argument, print the list of available commands.  With a command as
argument, print help about that command.   displays the full
documentation (the docstring of the  module).  Since the command
argument must be an identifier,  must be entered to get help on
the  command.



¶
Print a stack trace, with the most recent frame at the bottom.  An arrow
indicates the current frame, which determines the context of most commands.



¶
Move the current frame count (default one) levels down in the stack trace
(to a newer frame).



¶
Move the current frame count (default one) levels up in the stack trace (to
an older frame).



¶
With a lineno argument, set a break there in the current file.  With a
function argument, set a break at the first executable statement within
that function.  The line number may be prefixed with a filename and a colon,
to specify a breakpoint in another file (probably one that hasn’t been loaded
yet).  The file is searched on .  Note that each breakpoint
is assigned a number to which all the other breakpoint commands refer.
If a second argument is present, it is an expression which must evaluate to
true before the breakpoint is honored.
Without argument, list all breaks, including for each breakpoint, the number
of times that breakpoint has been hit, the current ignore count, and the
associated condition if any.



¶
Temporary breakpoint, which is removed automatically when it is first hit.
The arguments are the same as for .



¶
With a filename:lineno argument, clear all the breakpoints at this line.
With a space separated list of breakpoint numbers, clear those breakpoints.
Without argument, clear all breaks (but first ask confirmation).



¶
Disable the breakpoints given as a space separated list of breakpoint
numbers.  Disabling a breakpoint means it cannot cause the program to stop
execution, but unlike clearing a breakpoint, it remains in the list of
breakpoints and can be (re-)enabled.



¶
Enable the breakpoints specified.



¶
Set the ignore count for the given breakpoint number.  If count is omitted,
the ignore count is set to 0.  A breakpoint becomes active when the ignore
count is zero.  When non-zero, the count is decremented each time the
breakpoint is reached and the breakpoint is not disabled and any associated
condition evaluates to true.



¶
Set a new condition for the breakpoint, an expression which must evaluate
to true before the breakpoint is honored.  If condition is absent, any
existing condition is removed; i.e., the breakpoint is made unconditional.



¶
Specify a list of commands for breakpoint number bpnumber.  The commands
themselves appear on the following lines.  Type a line containing just
 to terminate the commands. An example:


To remove all commands from a breakpoint, type  and follow it
immediately with ; that is, give no commands.
With no bpnumber argument,  refers to the last breakpoint set.
You can use breakpoint commands to start your program up again.  Simply use
the  command, or ,
or any other command that resumes execution.
Specifying any command resuming execution
(currently , , ,
, ,  and their abbreviations)
terminates the command list (as if
that command was immediately followed by end). This is because any time you
resume execution (even with a simple next or step), you may encounter another
breakpoint—which could have its own command list, leading to ambiguities about
which list to execute.
If you use the ‘silent’ command in the command list, the usual message about
stopping at a breakpoint is not printed.  This may be desirable for breakpoints
that are to print a specific message and then continue.  If none of the other
commands print anything, you see no sign that the breakpoint was reached.



¶
Execute the current line, stop at the first possible occasion (either in a
function that is called or on the next line in the current function).



¶
Continue execution until the next line in the current function is reached or
it returns.  (The difference between  and  is
that  stops inside a called function, while 
executes called functions at (nearly) full speed, only stopping at the next
line in the current function.)



¶
Without argument, continue execution until the line with a number greater
than the current one is reached.
With a line number, continue execution until a line with a number greater or
equal to that is reached.  In both cases, also stop when the current frame
returns.

Changed in version 3.2: Allow giving an explicit line number.




¶
Continue execution until the current function returns.



¶
Continue execution, only stop when a breakpoint is encountered.



¶
Set the next line that will be executed.  Only available in the bottom-most
frame.  This lets you jump back and execute code again, or jump forward to
skip code that you don’t want to run.
It should be noted that not all jumps are allowed – for instance it is not
possible to jump into the middle of a  loop or out of a
 clause.



¶
List source code for the current file.  Without arguments, list 11 lines
around the current line or continue the previous listing.  With  as
argument, list 11 lines around the current line.  With one argument,
list 11 lines around at that line.  With two arguments, list the given range;
if the second argument is less than the first, it is interpreted as a count.
The current line in the current frame is indicated by .  If an
exception is being debugged, the line where the exception was originally
raised or propagated is indicated by , if it differs from the current
line.

New in version 3.2: The  marker.




¶
List all source code for the current function or frame.  Interesting lines
are marked as for .

New in version 3.2.




¶
Print the argument list of the current function.



¶
Evaluate the expression in the current context and print its value.

Note
 can also be used, but is not a debugger command — this executes the
Python  function.




¶
Like the  command, except the value of the expression is
pretty-printed using the  module.



¶
Print the type of the expression.



¶
Try to get source code for the given object and display it.

New in version 3.2.




¶
Display the value of the expression if it changed, each time execution stops
in the current frame.
Without expression, list all display expressions for the current frame.

New in version 3.2.




¶
Do not display the expression any more in the current frame.  Without
expression, clear all display expressions for the current frame.

New in version 3.2.




¶
Start an interactive interpreter (using the  module) whose global
namespace contains all the (global and local) names found in the current
scope.

New in version 3.2.




¶
Create an alias called name that executes command.  The command must
not be enclosed in quotes.  Replaceable parameters can be indicated by
, , and so on, while  is replaced by all the parameters.
If no command is given, the current alias for name is shown. If no
arguments are given, all aliases are listed.
Aliases may be nested and can contain anything that can be legally typed at
the pdb prompt.  Note that internal pdb commands can be overridden by
aliases.  Such a command is then hidden until the alias is removed.  Aliasing
is recursively applied to the first word of the command line; all other words
in the line are left alone.
As an example, here are two useful aliases (especially when placed in the
 file):





¶
Delete the specified alias.



¶
Execute the (one-line) statement in the context of the current stack frame.
The exclamation point can be omitted unless the first word of the statement
resembles a debugger command.  To set a global variable, you can prefix the
assignment command with a  statement on the same line,
e.g.:





¶

¶
Restart the debugged Python program.  If an argument is supplied, it is split
with  and the result is used as the new .
History, breakpoints, actions and debugger options are preserved.
 is an alias for .



¶
Quit from the debugger.  The program being executed is aborted.

Footnotes



[1]Whether a frame is considered to originate in a certain module
is determined by the  in the frame globals.




