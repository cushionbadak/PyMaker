link:
library/imp.html#imp.find_module

docs:


(name[, path])Â¶
Try to find the module name.  If path is omitted or , the list of
directory names given by  is searched, but first a few special
places are searched: the function tries to find a built-in module with the
given name (), then a frozen module (),
and on some systems some other places are looked in as well (on Windows, it
looks in the registry which may point to a specific file).
Otherwise, path must be a list of directory names; each directory is
searched for files with any of the suffixes returned by 
above.  Invalid names in the list are silently ignored (but all list items
must be strings).
If search is successful, the return value is a 3-element tuple :
file is an open file object positioned at the beginning, pathname
is the pathname of the file found, and description is a 3-element tuple as
contained in the list returned by  describing the kind of
module found.
If the module does not live in a file, the returned file is ,
pathname is the empty string, and the description tuple contains empty
strings for its suffix and mode; the module type is indicated as given in
parentheses above.  If the search is unsuccessful,  is
raised.  Other exceptions indicate problems with the arguments or
environment.
If the module is a package, file is , pathname is the package
path and the last item in the description tuple is .
This function does not handle hierarchical module names (names containing
dots).  In order to find P.M, that is, submodule M of package P, use
 and  to find and load package P, and
then use  with the path argument set to .
When P itself has a dotted name, apply this recipe recursively.

Deprecated since version 3.3: Use  instead unless Python 3.3
compatibility is required, in which case use
. For example usage of the former case,
see the Examples section of the 
documentation.

