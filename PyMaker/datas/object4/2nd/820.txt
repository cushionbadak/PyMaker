link:
library/difflib.html

docs:


 — Helpers for computing deltas¶
Source code: Lib/difflib.py

This module provides classes and functions for comparing sequences. It
can be used for example, for comparing files, and can produce difference
information in various formats, including HTML and context and unified
diffs. For comparing directories and files, see also, the  module.


class ¶
This is a flexible class for comparing pairs of sequences of any type, so long
as the sequence elements are hashable.  The basic algorithm predates, and is a
little fancier than, an algorithm published in the late 1980’s by Ratcliff and
Obershelp under the hyperbolic name “gestalt pattern matching.”  The idea is to
find the longest contiguous matching subsequence that contains no “junk”
elements; these “junk” elements are ones that are uninteresting in some
sense, such as blank lines or whitespace.  (Handling junk is an
extension to the Ratcliff and Obershelp algorithm.) The same
idea is then applied recursively to the pieces of the sequences to the left and
to the right of the matching subsequence.  This does not yield minimal edit
sequences, but does tend to yield matches that “look right” to people.
Timing: The basic Ratcliff-Obershelp algorithm is cubic time in the worst
case and quadratic time in the expected case.  is
quadratic time for the worst case and has expected-case behavior dependent in a
complicated way on how many elements the sequences have in common; best case
time is linear.
Automatic junk heuristic:  supports a heuristic that
automatically treats certain sequence items as junk. The heuristic counts how many
times each individual item appears in the sequence. If an item’s duplicates (after
the first one) account for more than 1% of the sequence and the sequence is at least
200 items long, this item is marked as “popular” and is treated as junk for
the purpose of sequence matching. This heuristic can be turned off by setting
the  argument to  when creating the .

New in version 3.2: The autojunk parameter.




class ¶
This is a class for comparing sequences of lines of text, and producing
human-readable differences or deltas.  Differ uses 
both to compare sequences of lines, and to compare sequences of characters
within similar (near-matching) lines.
Each line of a  delta begins with a two-letter code:






Code
Meaning




line unique to sequence 1


line unique to sequence 2


line common to both sequences


line not present in either input sequence



Lines beginning with ‘’ attempt to guide the eye to intraline differences,
and were not present in either input sequence. These lines can be confusing if
the sequences contain tab characters.



class ¶
This class can be used to create an HTML table (or a complete HTML file
containing the table) showing a side by side, line by line comparison of text
with inter-line and intra-line change highlights.  The table can be generated in
either full or contextual difference mode.
The constructor for this class is:


(tabsize=8, wrapcolumn=None, linejunk=None, charjunk=IS_CHARACTER_JUNK)¶
Initializes instance of .
tabsize is an optional keyword argument to specify tab stop spacing and
defaults to .
wrapcolumn is an optional keyword to specify column number where lines are
broken and wrapped, defaults to  where lines are not wrapped.
linejunk and charjunk are optional keyword arguments passed into 
(used by  to generate the side by side HTML differences).  See
 documentation for argument default values and descriptions.

The following methods are public:


(fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5, *, charset='utf-8')¶
Compares fromlines and tolines (lists of strings) and returns a string which
is a complete HTML file containing a table showing line by line differences with
inter-line and intra-line changes highlighted.
fromdesc and todesc are optional keyword arguments to specify from/to file
column header strings (both default to an empty string).
context and numlines are both optional keyword arguments. Set context to
 when contextual differences are to be shown, else the default is
 to show the full files. numlines defaults to .  When context
is  numlines controls the number of context lines which surround the
difference highlights.  When context is  numlines controls the
number of lines which are shown before a difference highlight when using the
“next” hyperlinks (setting to zero would cause the “next” hyperlinks to place
the next difference highlight at the top of the browser without any leading
context).

Changed in version 3.5: charset keyword-only argument was added.  The default charset of
HTML document changed from  to .




(fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5)¶
Compares fromlines and tolines (lists of strings) and returns a string which
is a complete HTML table showing line by line differences with inter-line and
intra-line changes highlighted.
The arguments for this method are the same as those for the 
method.

 is a command-line front-end to this class and
contains a good example of its use.



(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n')¶
Compare a and b (lists of strings); return a delta (a generator
generating the delta lines) in context diff format.
Context diffs are a compact way of showing just the lines that have changed plus
a few lines of context.  The changes are shown in a before/after style.  The
number of context lines is set by n which defaults to three.
By default, the diff control lines (those with  or ) are created
with a trailing newline.  This is helpful so that inputs created from
 result in diffs that are suitable for use with
 since both the inputs and outputs have trailing
newlines.
For inputs that do not have trailing newlines, set the lineterm argument to
 so that the output will be uniformly newline free.
The context diff format normally has a header for filenames and modification
times.  Any or all of these may be specified using strings for fromfile,
tofile, fromfiledate, and tofiledate.  The modification times are normally
expressed in the ISO 8601 format. If not specified, the
strings default to blanks.


See A command-line interface to difflib for a more detailed example.



(word, possibilities, n=3, cutoff=0.6)¶
Return a list of the best “good enough” matches.  word is a sequence for which
close matches are desired (typically a string), and possibilities is a list of
sequences against which to match word (typically a list of strings).
Optional argument n (default ) is the maximum number of close matches to
return; n must be greater than .
Optional argument cutoff (default ) is a float in the range [0, 1].
Possibilities that don’t score at least that similar to word are ignored.
The best (no more than n) matches among the possibilities are returned in a
list, sorted by similarity score, most similar first.





(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)¶
Compare a and b (lists of strings); return a -style
delta (a generator generating the delta lines).
Optional keyword parameters linejunk and charjunk are filtering functions
(or ):
linejunk: A function that accepts a single string argument, and returns
true if the string is junk, or false if not. The default is . There
is also a module-level function , which filters out lines
without visible characters, except for at most one pound character ()
– however the underlying  class does a dynamic
analysis of which lines are so frequent as to constitute noise, and this
usually works better than using this function.
charjunk: A function that accepts a character (a string of length 1), and
returns if the character is junk, or false if not. The default is module-level
function , which filters out whitespace characters (a
blank or tab; it’s a bad idea to include newline in this!).
 is a command-line front-end to this function.





(sequence, which)¶
Return one of the two sequences that generated a delta.
Given a sequence produced by  or , extract
lines originating from file 1 or 2 (parameter which), stripping off line
prefixes.
Example:





(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n')¶
Compare a and b (lists of strings); return a delta (a generator
generating the delta lines) in unified diff format.
Unified diffs are a compact way of showing just the lines that have changed plus
a few lines of context.  The changes are shown in an inline style (instead of
separate before/after blocks).  The number of context lines is set by n which
defaults to three.
By default, the diff control lines (those with , , or ) are
created with a trailing newline.  This is helpful so that inputs created from
 result in diffs that are suitable for use with
 since both the inputs and outputs have trailing
newlines.
For inputs that do not have trailing newlines, set the lineterm argument to
 so that the output will be uniformly newline free.
The context diff format normally has a header for filenames and modification
times.  Any or all of these may be specified using strings for fromfile,
tofile, fromfiledate, and tofiledate.  The modification times are normally
expressed in the ISO 8601 format. If not specified, the
strings default to blanks.


See A command-line interface to difflib for a more detailed example.



(dfunc, a, b, fromfile=b'', tofile=b'', fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\n')¶
Compare a and b (lists of bytes objects) using dfunc; yield a
sequence of delta lines (also bytes) in the format returned by dfunc.
dfunc must be a callable, typically either  or
.
Allows you to compare data with unknown or inconsistent encoding. All
inputs except n must be bytes objects, not str. Works by losslessly
converting all inputs (except n) to str, and calling . The output of
dfunc is then converted back to bytes, so the delta lines that you
receive have the same unknown/inconsistent encodings as a and b.

New in version 3.5.




(line)¶
Return true for ignorable lines.  The line line is ignorable if line is
blank or contains a single , otherwise it is not ignorable.  Used as a
default for parameter linejunk in  in older versions.



(ch)¶
Return true for ignorable characters.  The character ch is ignorable if ch
is a space or tab, otherwise it is not ignorable.  Used as a default for
parameter charjunk in .


See also

Pattern Matching: The Gestalt Approach
Discussion of a similar algorithm by John W. Ratcliff and D. E. Metzener. This
was published in Dr. Dobb’s Journal in July, 1988.



SequenceMatcher Objects¶
The  class has this constructor:


class (isjunk=None, a='', b='', autojunk=True)
Optional argument isjunk must be  (the default) or a one-argument
function that takes a sequence element and returns true if and only if the
element is “junk” and should be ignored. Passing  for isjunk is
equivalent to passing ; in other words, no elements are ignored.
For example, pass:


if you’re comparing lines as sequences of characters, and don’t want to synch up
on blanks or hard tabs.
The optional arguments a and b are sequences to be compared; both default to
empty strings.  The elements of both sequences must be hashable.
The optional argument autojunk can be used to disable the automatic junk
heuristic.

New in version 3.2: The autojunk parameter.

SequenceMatcher objects get three data attributes: bjunk is the
set of elements of b for which isjunk is ; bpopular is the set of
non-junk elements considered popular by the heuristic (if it is not
disabled); b2j is a dict mapping the remaining elements of b to a list
of positions where they occur. All three are reset whenever b is reset
with  or .

New in version 3.2: The bjunk and bpopular attributes.

 objects have the following methods:


(a, b)¶
Set the two sequences to be compared.

 computes and caches detailed information about the
second sequence, so if you want to compare one sequence against many
sequences, use  to set the commonly used sequence once and
call  repeatedly, once for each of the other sequences.


(a)¶
Set the first sequence to be compared.  The second sequence to be compared
is not changed.



(b)¶
Set the second sequence to be compared.  The first sequence to be compared
is not changed.



(alo, ahi, blo, bhi)¶
Find longest matching block in  and .
If isjunk was omitted or ,  returns
 such that  is equal to , where  and . For all  meeting those conditions, the additional conditions , , and if ,  are also met. In other words, of
all maximal matching blocks, return one that starts earliest in a, and
of all those maximal matching blocks that start earliest in a, return
the one that starts earliest in b.


If isjunk was provided, first the longest matching block is determined
as above, but with the additional restriction that no junk element appears
in the block.  Then that block is extended as far as possible by matching
(only) junk elements on both sides. So the resulting block never matches
on junk except as identical junk happens to be adjacent to an interesting
match.
Here’s the same example as before, but considering blanks to be junk. That
prevents  from matching the  at the tail end of the
second sequence directly.  Instead only the  can match, and
matches the leftmost  in the second sequence:


If no blocks match, this returns .
This method returns a named tuple .



()¶
Return list of triples describing non-overlapping matching subsequences.
Each triple is of the form ,
and means that .  The
triples are monotonically increasing in i and j.
The last triple is a dummy, and has the value .  It
is the only triple with .  If  and 
are adjacent triples in the list, and the second is not the last triple in
the list, then  or ; in other words, adjacent
triples always describe non-adjacent equal blocks.





()¶
Return list of 5-tuples describing how to turn a into b. Each tuple is
of the form .  The first tuple has , and remaining tuples have i1 equal to the i2 from the preceding
tuple, and, likewise, j1 equal to the previous j2.
The tag values are strings, with these meanings:






Value
Meaning




 should be replaced by
.


 should be deleted.  Note that
 in this case.


 should be inserted at
. Note that  in
this case.


 (the sub-sequences
are equal).



For example:





(n=3)¶
Return a generator of groups with up to n lines of context.
Starting with the groups returned by , this method
splits out smaller change clusters and eliminates intervening ranges which
have no changes.
The groups are returned in the same format as .



()¶
Return a measure of the sequences’ similarity as a float in the range [0,
1].
Where T is the total number of elements in both sequences, and M is the
number of matches, this is 2.0*M / T. Note that this is  if the
sequences are identical, and  if they have nothing in common.
This is expensive to compute if  or
 hasn’t already been called, in which case you may want
to try  or  first to get an
upper bound.



()¶
Return an upper bound on  relatively quickly.



()¶
Return an upper bound on  very quickly.


The three methods that return the ratio of matching to total characters can give
different results due to differing levels of approximation, although
 and  are always at least as large as
:




SequenceMatcher Examples¶
This example compares two strings, considering blanks to be “junk”:


 returns a float in [0, 1], measuring the similarity of the
sequences.  As a rule of thumb, a  value over 0.6 means the
sequences are close matches:


If you’re only interested in where the sequences match,
 is handy:


Note that the last tuple returned by  is always a
dummy, , and this is the only case in which the last
tuple element (number of elements matched) is .
If you want to know how to change the first sequence into the second, use
:



See also

The  function in this module which shows how
simple code building on  can be used to do useful
work.
Simple version control recipe for a small application
built with .




Differ Objects¶
Note that -generated deltas make no claim to be minimal
diffs. To the contrary, minimal diffs are often counter-intuitive, because they
synch up anywhere possible, sometimes accidental matches 100 pages apart.
Restricting synch points to contiguous matches preserves some notion of
locality, at the occasional cost of producing a longer diff.
The  class has this constructor:


class (linejunk=None, charjunk=None)
Optional keyword parameters linejunk and charjunk are for filter functions
(or ):
linejunk: A function that accepts a single string argument, and returns true
if the string is junk.  The default is , meaning that no line is
considered junk.
charjunk: A function that accepts a single character argument (a string of
length 1), and returns true if the character is junk. The default is ,
meaning that no character is considered junk.
These junk-filtering functions speed up matching to find
differences and do not cause any differing lines or characters to
be ignored.  Read the description of the
 method’s isjunk
parameter for an explanation.
 objects are used (deltas generated) via a single method:


(a, b)¶
Compare two sequences of lines, and generate the delta (a sequence of lines).
Each sequence must contain individual single-line strings ending with
newlines.  Such sequences can be obtained from the
 method of file-like objects.  The delta
generated also consists of newline-terminated strings, ready to be
printed as-is via the  method of a
file-like object.




Differ Example¶
This example compares two texts. First we set up the texts, sequences of
individual single-line strings ending with newlines (such sequences can also be
obtained from the  method of file-like objects):


Next we instantiate a Differ object:


Note that when instantiating a  object we may pass functions to
filter out line and character “junk.”  See the  constructor for
details.
Finally, we compare the two:


 is a list of strings, so let’s pretty-print it:


As a single multi-line string it looks like this:




A command-line interface to difflib¶
This example shows how to use difflib to create a -like utility.
It is also contained in the Python source distribution, as
.




