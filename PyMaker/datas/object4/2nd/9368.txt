link:
library/abc.html#abc.abstractmethod

docs:


¶
A decorator indicating abstract methods.
Using this decorator requires that the class’s metaclass is 
or is derived from it.  A class that has a metaclass derived from
 cannot be instantiated unless all of its abstract methods
and properties are overridden.  The abstract methods can be called using any
of the normal ‘super’ call mechanisms.   may be used
to declare abstract methods for properties and descriptors.
Dynamically adding abstract methods to a class, or attempting to modify the
abstraction status of a method or class once it is created, are not
supported.  The  only affects subclasses derived using
regular inheritance; “virtual subclasses” registered with the ABC’s
 method are not affected.
When  is applied in combination with other method
descriptors, it should be applied as the innermost decorator, as shown in
the following usage examples:


In order to correctly interoperate with the abstract base class machinery,
the descriptor must identify itself as abstract using
. In general, this attribute should be 
if any of the methods used to compose the descriptor are abstract. For
example, Python’s built-in  does the equivalent of:



Note
Unlike Java abstract methods, these abstract
methods may have an implementation. This implementation can be
called via the  mechanism from the class that
overrides it.  This could be useful as an end-point for a
super-call in a framework that uses cooperative
multiple-inheritance.

