link:
library/cmd.html

docs:


 — Support for line-oriented command interpreters¶
Source code: Lib/cmd.py

The  class provides a simple framework for writing line-oriented
command interpreters.  These are often useful for test harnesses, administrative
tools, and prototypes that will later be wrapped in a more sophisticated
interface.


class (completekey='tab', stdin=None, stdout=None)¶
A  instance or subclass instance is a line-oriented interpreter
framework.  There is no good reason to instantiate  itself; rather,
it’s useful as a superclass of an interpreter class you define yourself in order
to inherit ’s methods and encapsulate action methods.
The optional argument completekey is the  name of a completion
key; it defaults to Tab. If completekey is not  and
 is available, command completion is done automatically.
The optional arguments stdin and stdout specify the  input and output file
objects that the Cmd instance or subclass  instance will use for input and
output. If not specified, they will default to  and
.
If you want a given stdin to be used, make sure to set the instance’s
 attribute to , otherwise stdin will be
ignored.


Cmd Objects¶
A  instance has the following methods:


(intro=None)¶
Repeatedly issue a prompt, accept input, parse an initial prefix off the
received input, and dispatch to action methods, passing them the remainder of
the line as argument.
The optional argument is a banner or intro string to be issued before the first
prompt (this overrides the  class attribute).
If the  module is loaded, input will automatically inherit
bash-like history-list editing (e.g. Control-P scrolls back
to the last command, Control-N forward to the next one, Control-F
moves the cursor to the right non-destructively, Control-B moves the
cursor to the left non-destructively, etc.).
An end-of-file on input is passed back as the string .
An interpreter instance will recognize a command name  if and only if it
has a method .  As a special case, a line beginning with the
character  is dispatched to the method .  As another
special case, a line beginning with the character  is dispatched to the
method  (if such a method is defined).
This method will return when the  method returns a true value.
The stop argument to  is the return value from the command’s
corresponding  method.
If completion is enabled, completing commands will be done automatically, and
completing of commands args is done by calling  with
arguments text, line, begidx, and endidx.  text is the string prefix
we are attempting to match: all returned matches must begin with it. line is
the current input line with leading whitespace removed, begidx and endidx
are the beginning and ending indexes of the prefix text, which could be used to
provide different completion depending upon which position the argument is in.
All subclasses of  inherit a predefined .  This
method, called with an argument , invokes the corresponding method
, and if that is not present, prints the docstring of
, if available.  With no argument,  lists all
available help topics (that is, all commands with corresponding
 methods or commands that have docstrings), and also lists any
undocumented commands.



(str)¶
Interpret the argument as though it had been typed in response to the prompt.
This may be overridden, but should not normally need to be; see the
 and  methods for useful execution hooks.  The
return value is a flag indicating whether interpretation of commands by the
interpreter should stop.  If there is a  method for the command
str, the return value of that method is returned, otherwise the return value
from the  method is returned.



()¶
Method called when an empty line is entered in response to the prompt. If this
method is not overridden, it repeats the last nonempty command entered.



(line)¶
Method called on an input line when the command prefix is not recognized. If
this method is not overridden, it prints an error message and returns.



(text, line, begidx, endidx)¶
Method called to complete an input line when no command-specific
 method is available.  By default, it returns an empty list.



(line)¶
Hook method executed just before the command line line is interpreted, but
after the input prompt is generated and issued.  This method is a stub in
; it exists to be overridden by subclasses.  The return value is
used as the command which will be executed by the  method; the
 implementation may re-write the command or simply return line
unchanged.



(stop, line)¶
Hook method executed just after a command dispatch is finished.  This method is
a stub in ; it exists to be overridden by subclasses.  line is the
command line which was executed, and stop is a flag which indicates whether
execution will be terminated after the call to ; this will be the
return value of the  method.  The return value of this method will
be used as the new value for the internal flag which corresponds to stop;
returning false will cause interpretation to continue.



()¶
Hook method executed once when  is called.  This method is a stub
in ; it exists to be overridden by subclasses.



()¶
Hook method executed once when  is about to return. This method
is a stub in ; it exists to be overridden by subclasses.

Instances of  subclasses have some public instance variables:


¶
The prompt issued to solicit input.



¶
The string of characters accepted for the command prefix.



¶
The last nonempty command prefix seen.



¶
A list of queued input lines.  The cmdqueue list is checked in
 when new input is needed; if it is nonempty, its elements
will be processed in order, as if entered at the prompt.



¶
A string to issue as an intro or banner.  May be overridden by giving the
 method an argument.



¶
The header to issue if the help output has a section for documented commands.



¶
The header to issue if the help output has a section for miscellaneous  help
topics (that is, there are  methods without corresponding
 methods).



¶
The header to issue if the help output has a section for undocumented  commands
(that is, there are  methods without corresponding 
methods).



¶
The character used to draw separator lines under the help-message headers.  If
empty, no ruler line is drawn.  It defaults to .



¶
A flag, defaulting to true.  If true,  uses  to
display a prompt and read the next command; if false, 
and  are used. (This means that by importing
, on systems that support it, the interpreter will automatically
support Emacs-like line editing  and command-history keystrokes.)



Cmd Example¶
The  module is mainly useful for building custom shells that let a
user work with a program interactively.
This section presents a simple example of how to build a shell around a few of
the commands in the  module.
Basic turtle commands such as  are added to a
 subclass with method named .  The argument is
converted to a number and dispatched to the turtle module.  The docstring is
used in the help utility provided by the shell.
The example also includes a basic record and playback facility implemented with
the  method which is responsible for converting the input to
lowercase and writing the commands to a file.  The  method
reads the file and adds the recorded commands to the  for
immediate playback:


Here is a sample session with the turtle shell showing the help functions, using
blank lines to repeat commands, and the simple record and playback facility:




