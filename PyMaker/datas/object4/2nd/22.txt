link:
reference/lexical_analysis.html#literals

docs:

2.4. Literals¶
Literals are notations for constant values of some built-in types.

2.4.1. String and Bytes literals¶
String literals are described by the following lexical definitions:


One syntactic restriction not indicated by these productions is that whitespace
is not allowed between the  or  and the
rest of the literal. The source character set is defined by the encoding
declaration; it is UTF-8 if no encoding declaration is given in the source file;
see section Encoding declarations.
In plain English: Both types of literals can be enclosed in matching single quotes
() or double quotes ().  They can also be enclosed in matching groups
of three single or double quotes (these are generally referred to as
triple-quoted strings).  The backslash () character is used to escape
characters that otherwise have a special meaning, such as newline, backslash
itself, or the quote character.
Bytes literals are always prefixed with  or ; they produce an
instance of the  type instead of the  type.  They
may only contain ASCII characters; bytes with a numeric value of 128 or greater
must be expressed with escapes.
Both string and bytes literals may optionally be prefixed with a letter 
or ; such strings are called raw strings and treat backslashes as
literal characters.  As a result, in string literals,  and 
escapes in raw strings are not treated specially. Given that Python 2.x’s raw
unicode literals behave differently than Python 3.x’s the  syntax
is not supported.

New in version 3.3: The  prefix of raw bytes literals has been added as a synonym
of .


New in version 3.3: Support for the unicode legacy literal () was reintroduced
to simplify the maintenance of dual Python 2.x and 3.x codebases.
See PEP 414 for more information.

A string literal with  or  in its prefix is a
formatted string literal; see Formatted string literals.  The  may be
combined with , but not with  or , therefore raw
formatted strings are possible, but formatted bytes literals are not.
In triple-quoted literals, unescaped newlines and quotes are allowed (and are
retained), except that three unescaped quotes in a row terminate the literal.  (A
“quote” is the character used to open the literal, i.e. either  or .)
Unless an  or  prefix is present, escape sequences in string and
bytes literals are interpreted according to rules similar to those used by
Standard C.  The recognized escape sequences are:







Escape Sequence
Meaning
Notes




Backslash and newline ignored
 


Backslash ()
 


Single quote ()
 


Double quote ()
 


ASCII Bell (BEL)
 


ASCII Backspace (BS)
 


ASCII Formfeed (FF)
 


ASCII Linefeed (LF)
 


ASCII Carriage Return (CR)
 


ASCII Horizontal Tab (TAB)
 


ASCII Vertical Tab (VT)
 


Character with octal value
ooo
(1,3)


Character with hex value hh
(2,3)



Escape sequences only recognized in string literals are:







Escape Sequence
Meaning
Notes




Character named name in the
Unicode database
(4)


Character with 16-bit hex value
xxxx
(5)


Character with 32-bit hex value
xxxxxxxx
(6)



Notes:

As in Standard C, up to three octal digits are accepted.

Unlike in Standard C, exactly two hex digits are required.

In a bytes literal, hexadecimal and octal escapes denote the byte with the
given value. In a string literal, these escapes denote a Unicode character
with the given value.


Changed in version 3.3: Support for name aliases [1] has been added.


Exactly four hex digits are required.

Any Unicode character can be encoded this way.  Exactly eight hex digits
are required.


Unlike Standard C, all unrecognized escape sequences are left in the string
unchanged, i.e., the backslash is left in the result.  (This behavior is
useful when debugging: if an escape sequence is mistyped, the resulting output
is more easily recognized as broken.)  It is also important to note that the
escape sequences only recognized in string literals fall into the category of
unrecognized escapes for bytes literals.


Changed in version 3.6: Unrecognized escape sequences produce a DeprecationWarning.  In
some future version of Python they will be a SyntaxError.


Even in a raw literal, quotes can be escaped with a backslash, but the
backslash remains in the result; for example,  is a valid string
literal consisting of two characters: a backslash and a double quote; 
is not a valid string literal (even a raw string cannot end in an odd number of
backslashes).  Specifically, a raw literal cannot end in a single backslash
(since the backslash would escape the following quote character).  Note also
that a single backslash followed by a newline is interpreted as those two
characters as part of the literal, not as a line continuation.


2.4.2. String literal concatenation¶
Multiple adjacent string or bytes literals (delimited by whitespace), possibly
using different quoting conventions, are allowed, and their meaning is the same
as their concatenation.  Thus,  is equivalent to
.  This feature can be used to reduce the number of backslashes
needed, to split long strings conveniently across long lines, or even to add
comments to parts of strings, for example:


Note that this feature is defined at the syntactical level, but implemented at
compile time.  The ‘+’ operator must be used to concatenate string expressions
at run time.  Also note that literal concatenation can use different quoting
styles for each component (even mixing raw strings and triple quoted strings),
and formatted string literals may be concatenated with plain string literals.


2.4.3. Formatted string literals¶

New in version 3.6.

A formatted string literal or f-string is a string literal
that is prefixed with  or .  These strings may contain
replacement fields, which are expressions delimited by curly braces .
While other string literals always have a constant value, formatted strings
are really expressions evaluated at run time.
Escape sequences are decoded like in ordinary string literals (except when
a literal is also marked as a raw string).  After decoding, the grammar
for the contents of the string is:

The parts of the string outside curly braces are treated literally,
except that any doubled curly braces  or  are replaced
with the corresponding single curly brace.  A single opening curly
bracket  marks a replacement field, which starts with a
Python expression.  After the expression, there may be a conversion field,
introduced by an exclamation point .  A format specifier may also
be appended, introduced by a colon .  A replacement field ends
with a closing curly bracket .
Expressions in formatted string literals are treated like regular
Python expressions surrounded by parentheses, with a few exceptions.
An empty expression is not allowed, and a  expression
must be surrounded by explicit parentheses.  Replacement expressions
can contain line breaks (e.g. in triple-quoted strings), but they
cannot contain comments.  Each expression is evaluated in the context
where the formatted string literal appears, in order from left to right.
If a conversion is specified, the result of evaluating the expression
is converted before formatting.  Conversion  calls  on
the result,  calls , and  calls .
The result is then formatted using the  protocol.  The
format specifier is passed to the  method of the
expression or conversion result.  An empty string is passed when the
format specifier is omitted.  The formatted result is then included in
the final value of the whole string.
Top-level format specifiers may include nested replacement fields. These nested
fields may include their own conversion fields and format specifiers, but may not include more deeply-nested replacement fields. The
format specifier mini-language is the same as that used by
the string .format() method.
Formatted string literals may be concatenated, but replacement fields
cannot be split across literals.
Some examples of formatted string literals:


A consequence of sharing the same syntax as regular string literals is
that characters in the replacement fields must not conflict with the
quoting used in the outer formatted string literal:


Backslashes are not allowed in format expressions and will raise
an error:


To include a value in which a backslash escape is required, create
a temporary variable.


Formatted string literals cannot be used as docstrings, even if they do not
include expressions.


See also PEP 498 for the proposal that added formatted string literals,
and , which uses a related format string mechanism.


2.4.4. Numeric literals¶
There are three types of numeric literals: integers, floating point numbers, and
imaginary numbers.  There are no complex literals (complex numbers can be formed
by adding a real number and an imaginary number).
Note that numeric literals do not include a sign; a phrase like  is
actually an expression composed of the unary operator ‘‘ and the literal
.


2.4.5. Integer literals¶
Integer literals are described by the following lexical definitions:

There is no limit for the length of integer literals apart from what can be
stored in available memory.
Underscores are ignored for determining the numeric value of the literal.  They
can be used to group digits for enhanced readability.  One underscore can occur
between digits, and after base specifiers like .
Note that leading zeros in a non-zero decimal number are not allowed. This is
for disambiguation with C-style octal literals, which Python used before version
3.0.
Some examples of integer literals:



Changed in version 3.6: Underscores are now allowed for grouping purposes in literals.



2.4.6. Floating point literals¶
Floating point literals are described by the following lexical definitions:

Note that the integer and exponent parts are always interpreted using radix 10.
For example,  is legal, and denotes the same number as . The
allowed range of floating point literals is implementation-dependent.  As in
integer literals, underscores are supported for digit grouping.
Some examples of floating point literals:



Changed in version 3.6: Underscores are now allowed for grouping purposes in literals.



2.4.7. Imaginary literals¶
Imaginary literals are described by the following lexical definitions:

An imaginary literal yields a complex number with a real part of 0.0.  Complex
numbers are represented as a pair of floating point numbers and have the same
restrictions on their range.  To create a complex number with a nonzero real
part, add a floating point number to it, e.g., .  Some examples of
imaginary literals:



