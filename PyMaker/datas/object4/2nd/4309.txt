link:
library/multiprocessing.html#synchronization-primitives

docs:

Synchronization primitives¶
Generally synchronization primitives are not as necessary in a multiprocess
program as they are in a multithreaded program.  See the documentation for
 module.
Note that one can also create synchronization primitives by using a manager
object – see Managers.


class (parties[, action[, timeout]])¶
A barrier object: a clone of .

New in version 3.3.




class ([value])¶
A bounded semaphore object: a close analog of
.
A solitary difference from its close analog exists: its  method’s
first argument is named block, as is consistent with .

Note
On Mac OS X, this is indistinguishable from  because
 is not implemented on that platform.




class ([lock])¶
A condition variable: an alias for .
If lock is specified then it should be a  or 
object from .

Changed in version 3.3: The  method was added.




class ¶
A clone of .



class ¶
A non-recursive lock object: a close analog of .
Once a process or thread has acquired a lock, subsequent attempts to
acquire it from any process or thread will block until it is released;
any process or thread may release it.  The concepts and behaviors of
 as it applies to threads are replicated here in
 as it applies to either processes or threads,
except as noted.
Note that  is actually a factory function which returns an
instance of  initialized with a
default context.
 supports the context manager protocol and thus may be
used in  statements.


(block=True, timeout=None)¶
Acquire a lock, blocking or non-blocking.
With the block argument set to  (the default), the method call
will block until the lock is in an unlocked state, then set it to locked
and return .  Note that the name of this first argument differs
from that in .
With the block argument set to , the method call does not
block.  If the lock is currently in a locked state, return ;
otherwise set the lock to a locked state and return .
When invoked with a positive, floating-point value for timeout, block
for at most the number of seconds specified by timeout as long as
the lock can not be acquired.  Invocations with a negative value for
timeout are equivalent to a timeout of zero.  Invocations with a
timeout value of  (the default) set the timeout period to
infinite.  Note that the treatment of negative or  values for
timeout differs from the implemented behavior in
.  The timeout argument has no practical
implications if the block argument is set to  and is thus
ignored.  Returns  if the lock has been acquired or  if
the timeout period has elapsed.



()¶
Release a lock.  This can be called from any process or thread, not only
the process or thread which originally acquired the lock.
Behavior is the same as in  except that
when invoked on an unlocked lock, a  is raised.




class ¶
A recursive lock object: a close analog of .  A
recursive lock must be released by the process or thread that acquired it.
Once a process or thread has acquired a recursive lock, the same process
or thread may acquire it again without blocking; that process or thread
must release it once for each time it has been acquired.
Note that  is actually a factory function which returns an
instance of  initialized with a
default context.
 supports the context manager protocol and thus may be
used in  statements.


(block=True, timeout=None)¶
Acquire a lock, blocking or non-blocking.
When invoked with the block argument set to , block until the
lock is in an unlocked state (not owned by any process or thread) unless
the lock is already owned by the current process or thread.  The current
process or thread then takes ownership of the lock (if it does not
already have ownership) and the recursion level inside the lock increments
by one, resulting in a return value of .  Note that there are
several differences in this first argument’s behavior compared to the
implementation of , starting with the name
of the argument itself.
When invoked with the block argument set to , do not block.
If the lock has already been acquired (and thus is owned) by another
process or thread, the current process or thread does not take ownership
and the recursion level within the lock is not changed, resulting in
a return value of .  If the lock is in an unlocked state, the
current process or thread takes ownership and the recursion level is
incremented, resulting in a return value of .
Use and behaviors of the timeout argument are the same as in
.  Note that some of these behaviors of timeout
differ from the implemented behaviors in .



()¶
Release a lock, decrementing the recursion level.  If after the
decrement the recursion level is zero, reset the lock to unlocked (not
owned by any process or thread) and if any other processes or threads
are blocked waiting for the lock to become unlocked, allow exactly one
of them to proceed.  If after the decrement the recursion level is still
nonzero, the lock remains locked and owned by the calling process or
thread.
Only call this method when the calling process or thread owns the lock.
An  is raised if this method is called by a process
or thread other than the owner or if the lock is in an unlocked (unowned)
state.  Note that the type of exception raised in this situation
differs from the implemented behavior in .




class ([value])¶
A semaphore object: a close analog of .
A solitary difference from its close analog exists: its  method’s
first argument is named block, as is consistent with .


Note
On Mac OS X,  is unsupported, so calling  with
a timeout will emulate that function’s behavior using a sleeping loop.


Note
If the SIGINT signal generated by Ctrl-C arrives while the main thread is
blocked by a call to , ,
, , 
or  then the call will be immediately interrupted and
 will be raised.
This differs from the behaviour of  where SIGINT will be
ignored while the equivalent blocking calls are in progress.


Note
Some of this package’s functionality requires a functioning shared semaphore
implementation on the host operating system. Without one, the
 module will be disabled, and attempts to
import it will result in an . See
bpo-3770 for additional information.

