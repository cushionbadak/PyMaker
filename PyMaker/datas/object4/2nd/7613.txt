link:
library/wave.html#module-wave

docs:

 — Read and write WAV files¶
Source code: Lib/wave.py

The  module provides a convenient interface to the WAV sound format.
It does not support compression/decompression, but it does support mono/stereo.
The  module defines the following function and exception:


(file, mode=None)¶
If file is a string, open the file by that name, otherwise treat it as a
file-like object.  mode can be:


Read only mode.

Write only mode.

Note that it does not allow read/write WAV files.
A mode of  returns a  object, while a mode of
 returns a  object.  If mode is omitted and a
file-like object is passed as file,  is used as the default
value for mode.
If you pass in a file-like object, the wave object will not close it when its
 method is called; it is the caller’s responsibility to close
the file object.
The  function may be used in a  statement.  When
the  block completes, the  or  method is called.

Changed in version 3.4: Added support for unseekable files.




(file, mode)¶
A synonym for , maintained for backwards compatibility.

Deprecated since version 3.7, will be removed in version 3.9.




exception ¶
An error raised when something is impossible because it violates the WAV
specification or hits an implementation deficiency.


Wave_read Objects¶
Wave_read objects, as returned by , have the following methods:


()¶
Close the stream if it was opened by , and make the instance
unusable.  This is called automatically on object collection.



()¶
Returns number of audio channels ( for mono,  for stereo).



()¶
Returns sample width in bytes.



()¶
Returns sampling frequency.



()¶
Returns number of audio frames.



()¶
Returns compression type ( is the only supported type).



()¶
Human-readable version of . Usually 
parallels .



()¶
Returns a  , equivalent to output of the
 methods.



(n)¶
Reads and returns at most n frames of audio, as a  object.



()¶
Rewind the file pointer to the beginning of the audio stream.

The following two methods are defined for compatibility with the 
module, and don’t do anything interesting.


()¶
Returns .



(id)¶
Raise an error.

The following two methods define a term “position” which is compatible between
them, and is otherwise implementation dependent.


(pos)¶
Set the file pointer to the specified position.



()¶
Return current file pointer position.



Wave_write Objects¶
For seekable output streams, the  header will automatically be updated
to reflect the number of frames actually written.  For unseekable streams, the
nframes value must be accurate when the first frame data is written.  An
accurate nframes value can be achieved either by calling
 or  with the number
of frames that will be written before  is called and
then using  to write the frame data, or by
calling  with all of the frame data to be
written.  In the latter case  will calculate
the number of frames in the data and set nframes accordingly before writing
the frame data.
Wave_write objects, as returned by , have the following methods:

Changed in version 3.4: Added support for unseekable files.



()¶
Make sure nframes is correct, and close the file if it was opened by
.  This method is called upon object collection.  It will raise
an exception if the output stream is not seekable and nframes does not
match the number of frames actually written.



(n)¶
Set the number of channels.



(n)¶
Set the sample width to n bytes.



(n)¶
Set the frame rate to n.

Changed in version 3.2: A non-integral input to this method is rounded to the nearest
integer.




(n)¶
Set the number of frames to n.  This will be changed later if the number
of frames actually written is different (this update attempt will
raise an error if the output stream is not seekable).



(type, name)¶
Set the compression type and description. At the moment, only compression type
 is supported, meaning no compression.



(tuple)¶
The tuple should be , with values valid for the  methods.  Sets all
parameters.



()¶
Return current position in the file, with the same disclaimer for the
 and  methods.



(data)¶
Write audio frames, without correcting nframes.

Changed in version 3.4: Any bytes-like object is now accepted.




(data)¶
Write audio frames and make sure nframes is correct.  It will raise an
error if the output stream is not seekable and the total number of frames
that have been written after data has been written does not match the
previously set value for nframes.

Changed in version 3.4: Any bytes-like object is now accepted.


Note that it is invalid to set any parameters after calling 
or , and any attempt to do so will raise
.

