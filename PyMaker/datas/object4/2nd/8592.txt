link:
library/unittest.mock.html#the-patchers

docs:

The patchers¶
The patch decorators are used for patching objects only within the scope of
the function they decorate. They automatically handle the unpatching for you,
even if exceptions are raised. All of these functions can also be used in with
statements or as class decorators.

patch¶

Note
 is straightforward to use. The key is to do the patching in the
right namespace. See the section where to patch.



(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)¶
 acts as a function decorator, class decorator or a context
manager. Inside the body of the function or with statement, the target
is patched with a new object. When the function/with statement exits
the patch is undone.
If new is omitted, then the target is replaced with a
. If  is used as a decorator and new is
omitted, the created mock is passed in as an extra argument to the
decorated function. If  is used as a context manager the created
mock is returned by the context manager.
target should be a string in the form . The
target is imported and the specified object replaced with the new
object, so the target must be importable from the environment you are
calling  from. The target is imported when the decorated function
is executed, not at decoration time.
The spec and spec_set keyword arguments are passed to the 
if patch is creating one for you.
In addition you can pass  or , which causes
patch to pass in the object being mocked as the spec/spec_set object.
new_callable allows you to specify a different class, or callable object,
that will be called to create the new object. By default  is
used.
A more powerful form of spec is autospec. If you set 
then the mock will be created with a spec from the object being replaced.
All attributes of the mock will also have the spec of the corresponding
attribute of the object being replaced. Methods and functions being mocked
will have their arguments checked and will raise a  if they are
called with the wrong signature. For mocks
replacing a class, their return value (the ‘instance’) will have the same
spec as the class. See the  function and
Autospeccing.
Instead of  you can pass  to use an
arbitrary object as the spec instead of the one being replaced.
By default  will fail to replace attributes that don’t exist.
If you pass in , and the attribute doesn’t exist, patch will
create the attribute for you when the patched function is called, and delete
it again after the patched function has exited. This is useful for writing
tests against attributes that your production code creates at runtime. It is
off by default because it can be dangerous. With it switched on you can
write passing tests against APIs that don’t actually exist!

Note

Changed in version 3.5: If you are patching builtins in a module then you don’t
need to pass , it will be added by default.


Patch can be used as a  class decorator. It works by
decorating each test method in the class. This reduces the boilerplate
code when your test methods share a common patchings set.  finds
tests by looking for method names that start with .
By default this is , which matches the way  finds tests.
You can specify an alternative prefix by setting .
Patch can be used as a context manager, with the with statement. Here the
patching applies to the indented block after the with statement. If you
use “as” then the patched object will be bound to the name after the
“as”; very useful if  is creating a mock object for you.
 takes arbitrary keyword arguments. These will be passed to
the  (or new_callable) on construction.
,  and  are
available for alternate use-cases.

 as function decorator, creating the mock for you and passing it into
the decorated function:


Patching a class replaces the class with a  instance. If the
class is instantiated in the code under test then it will be the
 of the mock that will be used.
If the class is instantiated multiple times you could use
 to return a new mock each time. Alternatively you
can set the return_value to be anything you want.
To configure return values on methods of instances on the patched class
you must do this on the . For example:


If you use spec or spec_set and  is replacing a class, then the
return value of the created mock will have the same spec.


The new_callable argument is useful where you want to use an alternative
class to the default  for the created mock. For example, if
you wanted a  to be used:


Another use case might be to replace an object with an  instance:


When  is creating a mock for you, it is common that the first thing
you need to do is to configure the mock. Some of that configuration can be done
in the call to patch. Any arbitrary keywords you pass into the call will be
used to set attributes on the created mock:


As well as attributes on the created mock attributes, like the
 and , of child mocks can
also be configured. These aren’t syntactically valid to pass in directly as
keyword arguments, but a dictionary with these as keys can still be expanded
into a  call using :


By default, attempting to patch a function in a module (or a method or an
attribute in a class) that does not exist will fail with :


but adding  in the call to  will make the previous example
work as expected:




patch.object¶


(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)¶
patch the named member (attribute) on an object (target) with a mock
object.
 can be used as a decorator, class decorator or a context
manager. Arguments new, spec, create, spec_set, autospec and
new_callable have the same meaning as for . Like ,
 takes arbitrary keyword arguments for configuring the mock
object it creates.
When used as a class decorator  honours 
for choosing which methods to wrap.

You can either call  with three arguments or two arguments. The
three argument form takes the object to be patched, the attribute name and the
object to replace the attribute with.
When calling with the two argument form you omit the replacement object, and a
mock is created for you and passed in as an extra argument to the decorated
function:


spec, create and the other arguments to  have the same
meaning as they do for .


patch.dict¶


(in_dict, values=(), clear=False, **kwargs)¶
Patch a dictionary, or dictionary like object, and restore the dictionary
to its original state after the test.
in_dict can be a dictionary or a mapping like container. If it is a
mapping then it must at least support getting, setting and deleting items
plus iterating over keys.
in_dict can also be a string specifying the name of the dictionary, which
will then be fetched by importing it.
values can be a dictionary of values to set in the dictionary. values
can also be an iterable of  pairs.
If clear is true then the dictionary will be cleared before the new
values are set.
 can also be called with arbitrary keyword arguments to set
values in the dictionary.
 can be used as a context manager, decorator or class
decorator. When used as a class decorator  honours
 for choosing which methods to wrap.

 can be used to add members to a dictionary, or simply let a test
change a dictionary, and ensure the dictionary is restored when the test
ends.




Keywords can be used in the  call to set values in the dictionary:


 can be used with dictionary like objects that aren’t actually
dictionaries. At the very minimum they must support item getting, setting,
deleting and either iteration or membership test. This corresponds to the
magic methods , ,  and either
 or .




patch.multiple¶


(target, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)¶
Perform multiple patches in a single call. It takes the object to be
patched (either as an object or a string to fetch the object by importing)
and keyword arguments for the patches:


Use  as the value if you want  to create
mocks for you. In this case the created mocks are passed into a decorated
function by keyword, and a dictionary is returned when  is
used as a context manager.
 can be used as a decorator, class decorator or a context
manager. The arguments spec, spec_set, create, autospec and
new_callable have the same meaning as for . These arguments will
be applied to all patches done by .
When used as a class decorator  honours 
for choosing which methods to wrap.

If you want  to create mocks for you, then you can use
 as the value. If you use  as a decorator
then the created mocks are passed into the decorated function by keyword.




 can be nested with other  decorators, but put arguments
passed by keyword after any of the standard arguments created by :


If  is used as a context manager, the value returned by the
context manager is a dictionary where created mocks are keyed by name:




patch methods: start and stop¶
All the patchers have  and  methods. These make it simpler to do
patching in  methods or where you want to do multiple patches without
nesting decorators or with statements.
To use them call ,  or  as
normal and keep a reference to the returned  object. You can then
call  to put the patch in place and  to undo it.
If you are using  to create a mock for you then it will be returned by
the call to .


A typical use case for this might be for doing multiple patches in the 
method of a :



Caution
If you use this technique you must ensure that the patching is “undone” by
calling . This can be fiddlier than you might think, because if an
exception is raised in the  then  is not called.
 makes this easier:


As an added bonus you no longer need to keep a reference to the 
object.

It is also possible to stop all patches which have been started by using
.


()¶
Stop all active patches. Only stops patches started with .



patch builtins¶
You can patch any builtins within a module. The following example patches
builtin :




TEST_PREFIX¶
All of the patchers can be used as class decorators. When used in this way
they wrap every test method on the class. The patchers recognise methods that
start with  as being test methods. This is the same way that the
 finds test methods by default.
It is possible that you want to use a different prefix for your tests. You can
inform the patchers of the different prefix by setting :




Nesting Patch Decorators¶
If you want to perform multiple patches then you can simply stack up the
decorators.
You can stack up multiple patch decorators using this pattern:


Note that the decorators are applied from the bottom upwards. This is the
standard way that Python applies decorators. The order of the created mocks
passed into your test function matches this order.


Where to patch¶
 works by (temporarily) changing the object that a name points to with
another one. There can be many names pointing to any individual object, so
for patching to work you must ensure that you patch the name used by the system
under test.
The basic principle is that you patch where an object is looked up, which
is not necessarily the same place as where it is defined. A couple of
examples will help to clarify this.
Imagine we have a project that we want to test with the following structure:


Now we want to test  but we want to mock out  using
. The problem is that when we import module b, which we will have to
do then it imports  from module a. If we use  to mock out
 then it will have no effect on our test; module b already has a
reference to the real  and it looks like our patching had no
effect.
The key is to patch out  where it is used (or where it is looked up).
In this case  will actually look up  in module b,
where we have imported it. The patching should look like:


However, consider the alternative scenario where instead of  module b does  and  uses . Both
of these import forms are common. In this case the class we want to patch is
being looked up in the module and so we have to patch  instead:




Patching Descriptors and Proxy Objects¶
Both patch and patch.object correctly patch and restore descriptors: class
methods, static methods and properties. You should patch these on the class
rather than an instance. They also work with some objects
that proxy attribute access, like the django settings object.

