link:
library/ssl.html#examples

docs:

Examples¶

Testing for SSL support¶
To test for the presence of SSL support in a Python installation, user code
should use the following idiom:




Client-side operation¶
This example creates a SSL context with the recommended security settings
for client sockets, including automatic certificate verification:


If you prefer to tune security settings yourself, you might create
a context from scratch (but beware that you might not get the settings
right):


(this snippet assumes your operating system places a bundle of all CA
certificates in ; if not, you’ll get an
error and have to adjust the location)
When you use the context to connect to a server, 
validates the server certificate: it ensures that the server certificate
was signed with one of the CA certificates, and checks the signature for
correctness:


You may then fetch the certificate:


Visual inspection shows that the certificate does identify the desired service
(that is, the HTTPS host ):


Now the SSL channel is established and the certificate verified, you can
proceed to talk with the server:


See the discussion of Security considerations below.


Server-side operation¶
For server operation, typically you’ll need to have a server certificate, and
private key, each in a file.  You’ll first create a context holding the key
and the certificate, so that clients can check your authenticity.  Then
you’ll open a socket, bind it to a port, call  on it, and start
waiting for clients to connect:


When a client connects, you’ll call  on the socket to get the
new socket from the other end, and use the context’s 
method to create a server-side SSL socket for the connection:


Then you’ll read data from the  and do something with it till you
are finished with the client (or the client is finished with you):


And go back to listening for new client connections (of course, a real server
would probably handle each client connection in a separate thread, or put
the sockets in non-blocking mode and use an event loop).

