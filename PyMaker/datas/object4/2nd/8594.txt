link:
library/unittest.mock.html#unittest.mock.patch

docs:


(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)¶
 acts as a function decorator, class decorator or a context
manager. Inside the body of the function or with statement, the target
is patched with a new object. When the function/with statement exits
the patch is undone.
If new is omitted, then the target is replaced with a
. If  is used as a decorator and new is
omitted, the created mock is passed in as an extra argument to the
decorated function. If  is used as a context manager the created
mock is returned by the context manager.
target should be a string in the form . The
target is imported and the specified object replaced with the new
object, so the target must be importable from the environment you are
calling  from. The target is imported when the decorated function
is executed, not at decoration time.
The spec and spec_set keyword arguments are passed to the 
if patch is creating one for you.
In addition you can pass  or , which causes
patch to pass in the object being mocked as the spec/spec_set object.
new_callable allows you to specify a different class, or callable object,
that will be called to create the new object. By default  is
used.
A more powerful form of spec is autospec. If you set 
then the mock will be created with a spec from the object being replaced.
All attributes of the mock will also have the spec of the corresponding
attribute of the object being replaced. Methods and functions being mocked
will have their arguments checked and will raise a  if they are
called with the wrong signature. For mocks
replacing a class, their return value (the ‘instance’) will have the same
spec as the class. See the  function and
Autospeccing.
Instead of  you can pass  to use an
arbitrary object as the spec instead of the one being replaced.
By default  will fail to replace attributes that don’t exist.
If you pass in , and the attribute doesn’t exist, patch will
create the attribute for you when the patched function is called, and delete
it again after the patched function has exited. This is useful for writing
tests against attributes that your production code creates at runtime. It is
off by default because it can be dangerous. With it switched on you can
write passing tests against APIs that don’t actually exist!

Note

Changed in version 3.5: If you are patching builtins in a module then you don’t
need to pass , it will be added by default.


Patch can be used as a  class decorator. It works by
decorating each test method in the class. This reduces the boilerplate
code when your test methods share a common patchings set.  finds
tests by looking for method names that start with .
By default this is , which matches the way  finds tests.
You can specify an alternative prefix by setting .
Patch can be used as a context manager, with the with statement. Here the
patching applies to the indented block after the with statement. If you
use “as” then the patched object will be bound to the name after the
“as”; very useful if  is creating a mock object for you.
 takes arbitrary keyword arguments. These will be passed to
the  (or new_callable) on construction.
,  and  are
available for alternate use-cases.
