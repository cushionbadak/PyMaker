link:
library/bz2.html#module-bz2

docs:

 — Support for bzip2 compression¶
Source code: Lib/bz2.py

This module provides a comprehensive interface for compressing and
decompressing data using the bzip2 compression algorithm.
The  module contains:

The  function and  class for reading and
writing compressed files.
The  and  classes for
incremental (de)compression.
The  and  functions for one-shot
(de)compression.

All of the classes in this module may safely be accessed from multiple threads.

(De)compression of files¶


(filename, mode='r', compresslevel=9, encoding=None, errors=None, newline=None)¶
Open a bzip2-compressed file in binary or text mode, returning a file
object.
As with the constructor for , the filename argument can be
an actual filename (a  or  object), or an existing
file object to read from or write to.
The mode argument can be any of , , , ,
, ,  or  for binary mode, or ,
, , or  for text mode. The default is .
The compresslevel argument is an integer from 1 to 9, as for the
 constructor.
For binary mode, this function is equivalent to the 
constructor: . In
this case, the encoding, errors and newline arguments must not be
provided.
For text mode, a  object is created, and wrapped in an
 instance with the specified encoding, error
handling behavior, and line ending(s).

New in version 3.3.


Changed in version 3.4: The  (exclusive creation) mode was added.


Changed in version 3.6: Accepts a path-like object.




class (filename, mode='r', buffering=None, compresslevel=9)¶
Open a bzip2-compressed file in binary mode.
If filename is a  or  object, open the named file
directly. Otherwise, filename should be a file object, which will
be used to read or write the compressed data.
The mode argument can be either  for reading (default),  for
overwriting,  for exclusive creation, or  for appending. These
can equivalently be given as , ,  and 
respectively.
If filename is a file object (rather than an actual file name), a mode of
 does not truncate the file, and is instead equivalent to .
The buffering argument is ignored. Its use is deprecated.
If mode is  or , compresslevel can be an integer between
 and  specifying the level of compression:  produces the
least compression, and  (default) produces the most compression.
If mode is , the input file may be the concatenation of multiple
compressed streams.
 provides all of the members specified by the
, except for  and .
Iteration and the  statement are supported.
 also provides the following method:


([n])¶
Return buffered data without advancing the file position. At least one
byte of data will be returned (unless at EOF). The exact number of bytes
returned is unspecified.

Note
While calling  does not change the file position of
the , it may change the position of the underlying file
object (e.g. if the  was constructed by passing a file
object for filename).


New in version 3.3.



Changed in version 3.1: Support for the  statement was added.


Changed in version 3.3: The , , , ,
 and  methods were added.


Changed in version 3.3: Support was added for filename being a file object instead of an
actual filename.


Changed in version 3.3: The  (append) mode was added, along with support for reading
multi-stream files.


Changed in version 3.4: The  (exclusive creation) mode was added.


Changed in version 3.5: The  method now accepts an argument of
.


Changed in version 3.6: Accepts a path-like object.




Incremental (de)compression¶


class (compresslevel=9)¶
Create a new compressor object. This object may be used to compress data
incrementally. For one-shot compression, use the  function
instead.
compresslevel, if given, must be an integer between  and . The
default is .


(data)¶
Provide data to the compressor object. Returns a chunk of compressed data
if possible, or an empty byte string otherwise.
When you have finished providing data to the compressor, call the
 method to finish the compression process.



()¶
Finish the compression process. Returns the compressed data left in
internal buffers.
The compressor object may not be used after this method has been called.




class ¶
Create a new decompressor object. This object may be used to decompress data
incrementally. For one-shot compression, use the  function
instead.

Note
This class does not transparently handle inputs containing multiple
compressed streams, unlike  and . If
you need to decompress a multi-stream input with ,
you must use a new decompressor for each stream.



(data, max_length=-1)¶
Decompress data (a bytes-like object), returning
uncompressed data as bytes. Some of data may be buffered
internally, for use in later calls to . The
returned data should be concatenated with the output of any
previous calls to .
If max_length is nonnegative, returns at most max_length
bytes of decompressed data. If this limit is reached and further
output can be produced, the  attribute will
be set to . In this case, the next call to
 may provide data as  to obtain
more of the output.
If all of the input data was decompressed and returned (either
because this was less than max_length bytes, or because
max_length was negative), the  attribute
will be set to .
Attempting to decompress data after the end of stream is reached
raises an EOFError.  Any data found after the end of the
stream is ignored and saved in the  attribute.

Changed in version 3.5: Added the max_length parameter.




¶
 if the end-of-stream marker has been reached.

New in version 3.3.




¶
Data found after the end of the compressed stream.
If this attribute is accessed before the end of the stream has been
reached, its value will be .



¶
 if the  method can provide more
decompressed data before requiring new uncompressed input.

New in version 3.5.





One-shot (de)compression¶


(data, compresslevel=9)¶
Compress data, a bytes-like object.
compresslevel, if given, must be an integer between  and . The
default is .
For incremental compression, use a  instead.



(data)¶
Decompress data, a bytes-like object.
If data is the concatenation of multiple compressed streams, decompress
all of the streams.
For incremental decompression, use a  instead.

Changed in version 3.3: Support for multi-stream inputs was added.




Examples of usage¶
Below are some examples of typical usage of the  module.
Using  and  to demonstrate round-trip compression:








Using  for incremental compression:




The example above uses a very “nonrandom” stream of data
(a stream of b”z” chunks).  Random data tends to compress poorly,
while ordered, repetitive data usually yields a high compression ratio.
Writing and reading a bzip2-compressed file in binary mode:











