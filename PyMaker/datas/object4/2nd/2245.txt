link:
library/glob.html

docs:


 — Unix style pathname pattern expansion¶
Source code: Lib/glob.py

The  module finds all the pathnames matching a specified pattern
according to the rules used by the Unix shell, although results are returned in
arbitrary order.  No tilde expansion is done, but , , and character
ranges expressed with  will be correctly matched.  This is done by using
the  and  functions in concert, and
not by actually invoking a subshell.  Note that unlike ,
 treats filenames beginning with a dot () as special cases.
(For tilde and shell variable expansion, use  and
.)
For a literal match, wrap the meta-characters in brackets.
For example,  matches the character .

See also
The  module offers high-level path objects.



(pathname, *, recursive=False)¶
Return a possibly-empty list of path names that match pathname, which must be
a string containing a path specification. pathname can be either absolute
(like ) or relative (like
), and can contain shell-style wildcards. Broken
symlinks are included in the results (as in the shell).
If recursive is true, the pattern “” will match any files and zero or
more directories and subdirectories.  If the pattern is followed by an
, only directories and subdirectories match.

Note
Using the “” pattern in large directory trees may consume
an inordinate amount of time.


Changed in version 3.5: Support for recursive globs using “”.




(pathname, *, recursive=False)¶
Return an iterator which yields the same values as 
without actually storing them all simultaneously.



(pathname)¶
Escape all special characters (,  and ).
This is useful if you want to match an arbitrary literal string that may
have special characters in it.  Special characters in drive/UNC
sharepoints are not escaped, e.g. on Windows
 returns .

New in version 3.4.


For example, consider a directory containing the following files:
, ,  and a subdirectory 
which contains only the file .   will produce
the following results.  Notice how any leading components of the path are
preserved.


If the directory contains files starting with  they won’t be matched by
default. For example, consider a directory containing  and
:



See also

Module 
Shell-style filename (not path) expansion



