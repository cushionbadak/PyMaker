link:
library/binascii.html#module-binascii

docs:

 — Convert between binary and ASCII¶

The  module contains a number of methods to convert between
binary and various ASCII-encoded binary representations. Normally, you will not
use these functions directly but use wrapper modules like ,
, or  instead. The  module contains
low-level functions written in C for greater speed that are used by the
higher-level modules.

Note
 functions accept Unicode strings containing only ASCII characters.
Other functions only accept bytes-like objects (such as
,  and other objects that support the buffer
protocol).

Changed in version 3.3: ASCII-only unicode strings are now accepted by the  functions.


The  module defines the following functions:


(string)¶
Convert a single line of uuencoded data back to binary and return the binary
data. Lines normally contain 45 (binary) bytes, except for the last line. Line
data may be followed by whitespace.



(data, *, backtick=False)¶
Convert binary data to a line of ASCII characters, the return value is the
converted line, including a newline char. The length of data should be at most
45. If backtick is true, zeros are represented by  instead of spaces.

Changed in version 3.7: Added the backtick parameter.




(string)¶
Convert a block of base64 data back to binary and return the binary data. More
than one line may be passed at a time.



(data, *, newline=True)¶
Convert binary data to a line of ASCII characters in base64 coding. The return
value is the converted line, including a newline char if newline is
true.  The output of this function conforms to RFC 3548.

Changed in version 3.6: Added the newline parameter.




(data, header=False)¶
Convert a block of quoted-printable data back to binary and return the binary
data. More than one line may be passed at a time. If the optional argument
header is present and true, underscores will be decoded as spaces.



(data, quotetabs=False, istext=True, header=False)¶
Convert binary data to a line(s) of ASCII characters in quoted-printable
encoding.  The return value is the converted line(s). If the optional argument
quotetabs is present and true, all tabs and spaces will be encoded.   If the
optional argument istext is present and true, newlines are not encoded but
trailing whitespace will be encoded. If the optional argument header is
present and true, spaces will be encoded as underscores per RFC 1522. If the
optional argument header is present and false, newline characters will be
encoded as well; otherwise linefeed conversion might corrupt the binary data
stream.



(string)¶
Convert binhex4 formatted ASCII data to binary, without doing RLE-decompression.
The string should contain a complete number of binary bytes, or (in case of the
last portion of the binhex4 data) have the remaining bits zero.



(data)¶
Perform RLE-decompression on the data, as per the binhex4 standard. The
algorithm uses  after a byte as a repeat indicator, followed by a count.
A count of  specifies a byte value of . The routine returns the
decompressed data, unless data input data ends in an orphaned repeat indicator,
in which case the  exception is raised.

Changed in version 3.2: Accept only bytestring or bytearray objects as input.




(data)¶
Perform binhex4 style RLE-compression on data and return the result.



(data)¶
Perform hexbin4 binary-to-ASCII translation and return the resulting string. The
argument should already be RLE-coded, and have a length divisible by 3 (except
possibly the last fragment).



(data, value)¶
Compute a 16-bit CRC value of data, starting with value as the
initial CRC, and return the result.  This uses the CRC-CCITT polynomial
x16 + x12 + x5 + 1, often represented as
0x1021.  This CRC is used in the binhex4 format.



(data[, value])¶
Compute CRC-32, the 32-bit checksum of data, starting with an
initial CRC of value.  The default initial CRC is zero.  The algorithm
is consistent with the ZIP file checksum.  Since the algorithm is designed for
use as a checksum algorithm, it is not suitable for use as a general hash
algorithm.  Use as follows:



Changed in version 3.0: The result is always unsigned.
To generate the same numeric value across all Python versions and
platforms, use .




(data)¶

(data)¶
Return the hexadecimal representation of the binary data.  Every byte of
data is converted into the corresponding 2-digit hex representation.  The
returned bytes object is therefore twice as long as the length of data.
Similar functionality (but returning a text string) is also conveniently
accessible using the  method.



(hexstr)¶

(hexstr)¶
Return the binary data represented by the hexadecimal string hexstr.  This
function is the inverse of . hexstr must contain an even number
of hexadecimal digits (which can be upper or lower case), otherwise an
 exception is raised.
Similar functionality (accepting only text string arguments, but more
liberal towards whitespace) is also accessible using the
 class method.



exception ¶
Exception raised on errors. These are usually programming errors.



exception ¶
Exception raised on incomplete data. These are usually not programming errors,
but may be handled by reading a little more data and trying again.


See also

Module 
Support for RFC compliant base64-style encoding in base 16, 32, 64,
and 85.
Module 
Support for the binhex format used on the Macintosh.
Module 
Support for UU encoding used on Unix.
Module 
Support for quoted-printable encoding used in MIME email messages.


