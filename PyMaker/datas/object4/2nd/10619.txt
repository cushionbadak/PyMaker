link:
faq/library.html#library-and-extension-faq

docs:

Library and Extension FAQ¶

Contents

Library and Extension FAQ
General Library Questions
How do I find a module or application to perform task X?
Where is the math.py (socket.py, regex.py, etc.) source file?
How do I make a Python script executable on Unix?
Is there a curses/termcap package for Python?
Is there an equivalent to C’s onexit() in Python?
Why don’t my signal handlers work?


Common tasks
How do I test a Python program or component?
How do I create documentation from doc strings?
How do I get a single keypress at a time?


Threads
How do I program using threads?
None of my threads seem to run: why?
How do I parcel out work among a bunch of worker threads?
What kinds of global value mutation are thread-safe?
Can’t we get rid of the Global Interpreter Lock?


Input and Output
How do I delete a file? (And other file questions…)
How do I copy a file?
How do I read (or write) binary data?
I can’t seem to use os.read() on a pipe created with os.popen(); why?
How do I access the serial (RS232) port?
Why doesn’t closing sys.stdout (stdin, stderr) really close it?


Network/Internet Programming
What WWW tools are there for Python?
How can I mimic CGI form submission (METHOD=POST)?
What module should I use to help with generating HTML?
How do I send mail from a Python script?
How do I avoid blocking in the connect() method of a socket?


Databases
Are there any interfaces to database packages in Python?
How do you implement persistent objects in Python?


Mathematics and Numerics
How do I generate random numbers in Python?







General Library Questions¶

How do I find a module or application to perform task X?¶
Check the Library Reference to see if there’s a relevant
standard library module.  (Eventually you’ll learn what’s in the standard
library and will be able to skip this step.)
For third-party packages, search the Python Package Index or try Google or
another Web search engine.  Searching for “Python” plus a keyword or two for
your topic of interest will usually find something helpful.


Where is the math.py (socket.py, regex.py, etc.) source file?¶
If you can’t find a source file for a module it may be a built-in or
dynamically loaded module implemented in C, C++ or other compiled language.
In this case you may not have the source file or it may be something like
, somewhere in a C source directory (not on the Python Path).
There are (at least) three kinds of modules in Python:

modules written in Python (.py);

modules written in C and dynamically loaded (.dll, .pyd, .so, .sl, etc);

modules written in C and linked with the interpreter; to get a list of these,
type:






How do I make a Python script executable on Unix?¶
You need to do two things: the script file’s mode must be executable and the
first line must begin with  followed by the path of the Python
interpreter.
The first is done by executing  or perhaps .
The second can be done in a number of ways.  The most straightforward way is to
write


as the very first line of your file, using the pathname for where the Python
interpreter is installed on your platform.
If you would like the script to be independent of where the Python interpreter
lives, you can use the env program.  Almost all Unix variants support
the following, assuming the Python interpreter is in a directory on the user’s
:


Don’t do this for CGI scripts.  The  variable for CGI scripts is
often very minimal, so you need to use the actual absolute pathname of the
interpreter.
Occasionally, a user’s environment is so full that the /usr/bin/env
program fails; or there’s no env program at all.  In that case, you can try the
following hack (due to Alex Rezinsky):


The minor disadvantage is that this defines the script’s __doc__ string.
However, you can fix that by adding




Is there a curses/termcap package for Python?¶
For Unix variants: The standard Python source distribution comes with a curses
module in the Modules subdirectory, though it’s not compiled by default.
(Note that this is not available in the Windows distribution – there is no
curses module for Windows.)
The  module supports basic curses features as well as many additional
functions from ncurses and SYSV curses such as colour, alternative character set
support, pads, and mouse support. This means the module isn’t compatible with
operating systems that only have BSD curses, but there don’t seem to be any
currently maintained OSes that fall into this category.
For Windows: use the consolelib module.


Is there an equivalent to C’s onexit() in Python?¶
The  module provides a register function that is similar to C’s
.


Why don’t my signal handlers work?¶
The most common problem is that the signal handler is declared with the wrong
argument list.  It is called as


so it should be declared with two arguments:





Common tasks¶

How do I test a Python program or component?¶
Python comes with two testing frameworks.  The  module finds
examples in the docstrings for a module and runs them, comparing the output with
the expected output given in the docstring.
The  module is a fancier testing framework modelled on Java and
Smalltalk testing frameworks.
To make testing easier, you should use good modular design in your program.
Your program should have almost all functionality
encapsulated in either functions or class methods – and this sometimes has the
surprising and delightful effect of making the program run faster (because local
variable accesses are faster than global accesses).  Furthermore the program
should avoid depending on mutating global variables, since this makes testing
much more difficult to do.
The “global main logic” of your program may be as simple as


at the bottom of the main module of your program.
Once your program is organized as a tractable collection of functions and class
behaviours you should write test functions that exercise the behaviours.  A test
suite that automates a sequence of tests can be associated with each module.
This sounds like a lot of work, but since Python is so terse and flexible it’s
surprisingly easy.  You can make coding much more pleasant and fun by writing
your test functions in parallel with the “production code”, since this makes it
easy to find bugs and even design flaws earlier.
“Support modules” that are not intended to be the main module of a program may
include a self-test of the module.


Even programs that interact with complex external interfaces may be tested when
the external interfaces are unavailable by using “fake” interfaces implemented
in Python.


How do I create documentation from doc strings?¶
The  module can create HTML from the doc strings in your Python
source code.  An alternative for creating API documentation purely from
docstrings is epydoc.  Sphinx can also include docstring content.


How do I get a single keypress at a time?¶
For Unix variants there are several solutions.  It’s straightforward to do this
using curses, but curses is a fairly large module to learn.



Threads¶

How do I program using threads?¶
Be sure to use the  module and not the  module.
The  module builds convenient abstractions on top of the
low-level primitives provided by the  module.
Aahz has a set of slides from his threading tutorial that are helpful; see
http://www.pythoncraft.com/OSCON2001/.


None of my threads seem to run: why?¶
As soon as the main thread exits, all threads are killed.  Your main thread is
running too quickly, giving the threads no time to do any work.
A simple fix is to add a sleep to the end of the program that’s long enough for
all the threads to finish:


But now (on many platforms) the threads don’t run in parallel, but appear to run
sequentially, one at a time!  The reason is that the OS thread scheduler doesn’t
start a new thread until the previous thread is blocked.
A simple fix is to add a tiny sleep to the start of the run function:


Instead of trying to guess a good delay value for ,
it’s better to use some kind of semaphore mechanism.  One idea is to use the
 module to create a queue object, let each thread append a token to
the queue when it finishes, and let the main thread read as many tokens from the
queue as there are threads.


How do I parcel out work among a bunch of worker threads?¶
The easiest way is to use the new  module,
especially the  class.
Or, if you want fine control over the dispatching algorithm, you can write
your own logic manually.  Use the  module to create a queue
containing a list of jobs.  The  class maintains a
list of objects and has a  method that adds items to the queue and
a  method to return them.  The class will take care of the locking
necessary to ensure that each job is handed out exactly once.
Here’s a trivial example:


When run, this will produce the following output:


Consult the module’s documentation for more details; the 
class provides a featureful interface.


What kinds of global value mutation are thread-safe?¶
A global interpreter lock (GIL) is used internally to ensure that only one
thread runs in the Python VM at a time.  In general, Python offers to switch
among threads only between bytecode instructions; how frequently it switches can
be set via .  Each bytecode instruction and
therefore all the C implementation code reached from each instruction is
therefore atomic from the point of view of a Python program.
In theory, this means an exact accounting requires an exact understanding of the
PVM bytecode implementation.  In practice, it means that operations on shared
variables of built-in data types (ints, lists, dicts, etc) that “look atomic”
really are.
For example, the following operations are all atomic (L, L1, L2 are lists, D,
D1, D2 are dicts, x, y are objects, i, j are ints):


These aren’t:


Operations that replace other objects may invoke those other objects’
 method when their reference count reaches zero, and that can
affect things.  This is especially true for the mass updates to dictionaries and
lists.  When in doubt, use a mutex!


Can’t we get rid of the Global Interpreter Lock?¶
The global interpreter lock (GIL) is often seen as a hindrance to Python’s
deployment on high-end multiprocessor server machines, because a multi-threaded
Python program effectively only uses one CPU, due to the insistence that
(almost) all Python code can only run while the GIL is held.
Back in the days of Python 1.5, Greg Stein actually implemented a comprehensive
patch set (the “free threading” patches) that removed the GIL and replaced it
with fine-grained locking.  Adam Olsen recently did a similar experiment
in his python-safethread
project.  Unfortunately, both experiments exhibited a sharp drop in single-thread
performance (at least 30% slower), due to the amount of fine-grained locking
necessary to compensate for the removal of the GIL.
This doesn’t mean that you can’t make good use of Python on multi-CPU machines!
You just have to be creative with dividing the work up between multiple
processes rather than multiple threads.  The
 class in the new
 module provides an easy way of doing so; the
 module provides a lower-level API in case you want
more control over dispatching of tasks.
Judicious use of C extensions will also help; if you use a C extension to
perform a time-consuming task, the extension can release the GIL while the
thread of execution is in the C code and allow other threads to get some work
done.  Some standard library modules such as  and 
already do this.
It has been suggested that the GIL should be a per-interpreter-state lock rather
than truly global; interpreters then wouldn’t be able to share objects.
Unfortunately, this isn’t likely to happen either.  It would be a tremendous
amount of work, because many object implementations currently have global state.
For example, small integers and short strings are cached; these caches would
have to be moved to the interpreter state.  Other object types have their own
free list; these free lists would have to be moved to the interpreter state.
And so on.
And I doubt that it can even be done in finite time, because the same problem
exists for 3rd party extensions.  It is likely that 3rd party extensions are
being written at a faster rate than you can convert them to store all their
global state in the interpreter state.
And finally, once you have multiple interpreters not sharing any state, what
have you gained over running each interpreter in a separate process?



Input and Output¶

How do I delete a file? (And other file questions…)¶
Use  or ; for documentation, see
the  module.  The two functions are identical;  is simply
the name of the Unix system call for this function.
To remove a directory, use ; use  to create one.
 will create any intermediate directories in  that
don’t exist.  will remove intermediate directories as
long as they’re empty; if you want to delete an entire directory tree and its
contents, use .
To rename a file, use .
To truncate a file, open it using , and use
; offset defaults to the current seek position.  There’s
also  for files opened with , where
fd is the file descriptor (a small integer).
The  module also contains a number of functions to work on files
including , , and
.


How do I copy a file?¶
The  module contains a  function.  Note
that on MacOS 9 it doesn’t copy the resource fork and Finder info.


How do I read (or write) binary data?¶
To read or write complex binary data formats, it’s best to use the 
module.  It allows you to take a string containing binary data (usually numbers)
and convert it to Python objects; and vice versa.
For example, the following code reads two 2-byte integers and one 4-byte integer
in big-endian format from a file:


The ‘>’ in the format string forces big-endian data; the letter ‘h’ reads one
“short integer” (2 bytes), and ‘l’ reads one “long integer” (4 bytes) from the
string.
For data that is more regular (e.g. a homogeneous list of ints or floats),
you can also use the  module.

Note
To read and write binary data, it is mandatory to open the file in
binary mode (here, passing  to ).  If you use
 instead (the default), the file will be open in text mode
and  will return  objects rather than
 objects.



I can’t seem to use os.read() on a pipe created with os.popen(); why?¶
 is a low-level function which takes a file descriptor, a small
integer representing the opened file.   creates a high-level
file object, the same type returned by the built-in  function.
Thus, to read n bytes from a pipe p created with , you need to
use .


How do I access the serial (RS232) port?¶
For Win32, POSIX (Linux, BSD, etc.), Jython:

http://pyserial.sourceforge.net
For Unix, see a Usenet post by Mitch Chapman:

https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com


Why doesn’t closing sys.stdout (stdin, stderr) really close it?¶
Python file objects are a high-level layer of
abstraction on low-level C file descriptors.
For most file objects you create in Python via the built-in 
function,  marks the Python file object as being closed from
Python’s point of view, and also arranges to close the underlying C file
descriptor.  This also happens automatically in ’s destructor, when
 becomes garbage.
But stdin, stdout and stderr are treated specially by Python, because of the
special status also given to them by C.  Running  marks
the Python-level file object as being closed, but does not close the
associated C file descriptor.
To close the underlying C file descriptor for one of these three, you should
first be sure that’s what you really want to do (e.g., you may confuse
extension modules trying to do I/O).  If it is, use :


Or you can use the numeric constants 0, 1 and 2, respectively.



Network/Internet Programming¶

What WWW tools are there for Python?¶
See the chapters titled Internet Protocols and Support and Internet Data Handling in the Library
Reference Manual.  Python has many modules that will help you build server-side
and client-side web systems.
A summary of available frameworks is maintained by Paul Boddie at
https://wiki.python.org/moin/WebProgramming.
Cameron Laird maintains a useful set of pages about Python web technologies at
http://phaseit.net/claird/comp.lang.python/web_python.


How can I mimic CGI form submission (METHOD=POST)?¶
I would like to retrieve web pages that are the result of POSTing a form. Is
there existing code that would let me do this easily?
Yes. Here’s a simple example that uses urllib.request:


Note that in general for percent-encoded POST operations, query strings must be
quoted using .  For example, to send
:



See also
HOWTO Fetch Internet Resources Using The urllib Package for extensive examples.



What module should I use to help with generating HTML?¶
You can find a collection of useful links on the Web Programming wiki page.


How do I send mail from a Python script?¶
Use the standard library module .
Here’s a very simple interactive mail sender that uses it.  This method will
work on any host that supports an SMTP listener.


A Unix-only alternative uses sendmail.  The location of the sendmail program
varies between systems; sometimes it is , sometimes
.  The sendmail manual page will help you out.  Here’s
some sample code:




How do I avoid blocking in the connect() method of a socket?¶
The  module is commonly used to help with asynchronous I/O on
sockets.
To prevent the TCP connect from blocking, you can set the socket to non-blocking
mode.  Then when you do the , you will either connect immediately
(unlikely) or get an exception that contains the error number as .
 indicates that the connection is in progress, but hasn’t
finished yet.  Different OSes will return different values, so you’re going to
have to check what’s returned on your system.
You can use the  method to avoid creating an exception.  It will
just return the errno value.  To poll, you can call  again later
–  or  indicate that you’re connected – or you can pass this
socket to select to check if it’s writable.

Note
The  module presents a framework-like approach to the problem
of writing non-blocking networking code.
The third-party Twisted library is
a popular and feature-rich alternative.




Databases¶

Are there any interfaces to database packages in Python?¶
Yes.
Interfaces to disk-based hashes such as  and  are also included with standard Python.  There is also the
 module, which provides a lightweight disk-based relational
database.
Support for most relational databases is available.  See the
DatabaseProgramming wiki page for details.


How do you implement persistent objects in Python?¶
The  library module solves this in a very general way (though you
still can’t store things like open files, sockets or windows), and the
 library module uses pickle and (g)dbm to create persistent
mappings containing arbitrary Python objects.



Mathematics and Numerics¶

How do I generate random numbers in Python?¶
The standard module  implements a random number generator.  Usage
is simple:


This returns a random floating point number in the range [0, 1).
There are also many other specialized generators in this module, such as:

 chooses an integer in the range [a, b).
 chooses a floating point number in the range [a, b).
 samples the normal (Gaussian) distribution.

Some higher-level functions operate on sequences directly, such as:

 chooses random element from a given sequence
 shuffles a list in-place, i.e. permutes it randomly

There’s also a  class you can instantiate to create independent
multiple random number generators.


