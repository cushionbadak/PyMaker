link:
library/logging.config.html

docs:


 — Logging configuration¶
Source code: Lib/logging/config.py

Important
This page contains only reference information. For tutorials,
please see

Basic Tutorial
Advanced Tutorial
Logging Cookbook



This section describes the API for configuring the logging module.

Configuration functions¶
The following functions configure the logging module. They are located in the
 module.  Their use is optional — you can configure the
logging module using these functions or by making calls to the main API (defined
in  itself) and defining handlers which are declared either in
 or .


(config)¶

Takes the logging configuration from a dictionary.  The contents of
this dictionary are described in Configuration dictionary schema
below.
If an error is encountered during configuration, this function will
raise a , , 
or  with a suitably descriptive message.  The
following is a (possibly incomplete) list of conditions which will
raise an error:

A  which is not a string or which is a string not
corresponding to an actual logging level.
A  value which is not a boolean.
An id which does not have a corresponding destination.
A non-existent handler id found during an incremental call.
An invalid logger name.
Inability to resolve to an internal or external object.

Parsing is performed by the  class, whose
constructor is passed the dictionary used for configuration, and
has a  method.  The  module
has a callable attribute 
which is initially set to .
You can replace the value of  with a
suitable implementation of your own.
 calls  passing
the specified dictionary, and then calls the  method on
the returned object to put the configuration into effect:


For example, a subclass of  could call
 in its own , then
set up custom prefixes which would be usable in the subsequent
 call.  would be bound to
this new subclass, and then  could be called exactly as
in the default, uncustomized state.


New in version 3.2.




(fname, defaults=None, disable_existing_loggers=True)¶
Reads the logging configuration from a -format file. The
format of the file should be as described in
Configuration file format.
This function can be called several times from an application, allowing an
end user to select from various pre-canned configurations (if the developer
provides a mechanism to present the choices and load the chosen
configuration).




Parameters:
fname – A filename, or a file-like object, or an instance derived
from . If a
-derived instance is passed, it is used as
is. Otherwise, a  is
instantiated, and the configuration read by it from the
object passed in . If that has a 
method, it is assumed to be a file-like object and read using
; otherwise,
it is assumed to be a filename and passed to
.
defaults – Defaults to be passed to the ConfigParser can be specified
in this argument.
disable_existing_loggers – If specified as , loggers which
exist when this call is made are left
enabled. The default is  because this
enables old behaviour in a
backward-compatible way. This behaviour is to
disable any existing non-root loggers unless
they or their ancestors are explicitly named
in the logging configuration.






Changed in version 3.4: An instance of a subclass of  is
now accepted as a value for . This facilitates:

Use of a configuration file where logging configuration is just part
of the overall application configuration.
Use of a configuration read from a file, and then modified by the using
application (e.g. based on command-line parameters or other aspects
of the runtime environment) before being passed to .





(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)¶
Starts up a socket server on the specified port, and listens for new
configurations. If no port is specified, the module’s default
 is used. Logging configurations will be
sent as a file suitable for processing by  or
. Returns a  instance on which
you can call  to start the server, and which
you can  when appropriate. To stop the server,
call .
The  argument, if specified, should be a callable which should
verify whether bytes received across the socket are valid and should be
processed. This could be done by encrypting and/or signing what is sent
across the socket, such that the  callable can perform
signature verification and/or decryption. The  callable is called
with a single argument - the bytes received across the socket - and should
return the bytes to be processed, or  to indicate that the bytes should
be discarded. The returned bytes could be the same as the passed in bytes
(e.g. when only verification is done), or they could be completely different
(perhaps if decryption were performed).
To send a configuration to the socket, read in the configuration file and
send it to the socket as a sequence of bytes preceded by a four-byte length
string packed in binary using .

Note
Because portions of the configuration are passed through
, use of this function may open its users to a security risk.
While the function only binds to a socket on , and so does
not accept connections from remote machines, there are scenarios where
untrusted code could be run under the account of the process which calls
. Specifically, if the process calling  runs
on a multi-user machine where users cannot trust each other, then a
malicious user could arrange to run essentially arbitrary code in a
victim user’s process, simply by connecting to the victim’s
 socket and sending a configuration which runs whatever
code the attacker wants to have executed in the victim’s process. This is
especially easy to do if the default port is used, but not hard even if a
different port is used). To avoid the risk of this happening, use the
 argument to  to prevent unrecognised
configurations from being applied.


Changed in version 3.4: The  argument was added.


Note
If you want to send configurations to the listener which don’t
disable existing loggers, you will need to use a JSON format for
the configuration, which will use  for configuration.
This method allows you to specify  as
 in the configuration you send.




()¶
Stops the listening server which was created with a call to .
This is typically called before calling  on the return value from
.



Configuration dictionary schema¶
Describing a logging configuration requires listing the various
objects to create and the connections between them; for example, you
may create a handler named ‘console’ and then say that the logger
named ‘startup’ will send its messages to the ‘console’ handler.
These objects aren’t limited to those provided by the 
module because you might write your own formatter or handler class.
The parameters to these classes may also need to include external
objects such as .  The syntax for describing these
objects and connections is defined in Object connections
below.

Dictionary Schema Details¶
The dictionary passed to  must contain the following
keys:

version - to be set to an integer value representing the schema
version.  The only valid value at present is 1, but having this key
allows the schema to evolve while still preserving backwards
compatibility.

All other keys are optional, but if present they will be interpreted
as described below.  In all cases below where a ‘configuring dict’ is
mentioned, it will be checked for the special  key to see if a
custom instantiation is required.  If so, the mechanism described in
User-defined objects below is used to create an instance;
otherwise, the context is used to determine what to instantiate.

formatters - the corresponding value will be a dict in which each
key is a formatter id and each value is a dict describing how to
configure the corresponding  instance.
The configuring dict is searched for keys  and 
(with defaults of ) and these are used to construct a
 instance.

filters - the corresponding value will be a dict in which each key
is a filter id and each value is a dict describing how to configure
the corresponding Filter instance.
The configuring dict is searched for the key  (defaulting to the
empty string) and this is used to construct a 
instance.

handlers - the corresponding value will be a dict in which each
key is a handler id and each value is a dict describing how to
configure the corresponding Handler instance.
The configuring dict is searched for the following keys:

 (mandatory).  This is the fully qualified name of the
handler class.
 (optional).  The level of the handler.
 (optional).  The id of the formatter for this
handler.
 (optional).  A list of ids of the filters for this
handler.

All other keys are passed through as keyword arguments to the
handler’s constructor.  For example, given the snippet:


the handler with id  is instantiated as a
, using  as the underlying
stream.  The handler with id  is instantiated as a
 with the keyword arguments
.

loggers - the corresponding value will be a dict in which each key
is a logger name and each value is a dict describing how to
configure the corresponding Logger instance.
The configuring dict is searched for the following keys:

 (optional).  The level of the logger.
 (optional).  The propagation setting of the logger.
 (optional).  A list of ids of the filters for this
logger.
 (optional).  A list of ids of the handlers for this
logger.

The specified loggers will be configured according to the level,
propagation, filters and handlers specified.

root - this will be the configuration for the root logger.
Processing of the configuration will be as for any logger, except
that the  setting will not be applicable.

incremental - whether the configuration is to be interpreted as
incremental to the existing configuration.  This value defaults to
, which means that the specified configuration replaces the
existing configuration with the same semantics as used by the
existing  API.
If the specified value is , the configuration is processed
as described in the section on Incremental Configuration.

disable_existing_loggers - whether any existing non-root loggers are
to be disabled. This setting mirrors the parameter of the same name in
. If absent, this parameter defaults to .
This value is ignored if incremental is .




Incremental Configuration¶
It is difficult to provide complete flexibility for incremental
configuration.  For example, because objects such as filters
and formatters are anonymous, once a configuration is set up, it is
not possible to refer to such anonymous objects when augmenting a
configuration.
Furthermore, there is not a compelling case for arbitrarily altering
the object graph of loggers, handlers, filters, formatters at
run-time, once a configuration is set up; the verbosity of loggers and
handlers can be controlled just by setting levels (and, in the case of
loggers, propagation flags).  Changing the object graph arbitrarily in
a safe way is problematic in a multi-threaded environment; while not
impossible, the benefits are not worth the complexity it adds to the
implementation.
Thus, when the  key of a configuration dict is present
and is , the system will completely ignore any  and
 entries, and process only the 
settings in the  entries, and the  and
 settings in the  and  entries.
Using a value in the configuration dict lets configurations to be sent
over the wire as pickled dicts to a socket listener. Thus, the logging
verbosity of a long-running application can be altered over time with
no need to stop and restart the application.


Object connections¶
The schema describes a set of logging objects - loggers,
handlers, formatters, filters - which are connected to each other in
an object graph.  Thus, the schema needs to represent connections
between the objects.  For example, say that, once configured, a
particular logger has attached to it a particular handler.  For the
purposes of this discussion, we can say that the logger represents the
source, and the handler the destination, of a connection between the
two.  Of course in the configured objects this is represented by the
logger holding a reference to the handler.  In the configuration dict,
this is done by giving each destination object an id which identifies
it unambiguously, and then using the id in the source object’s
configuration to indicate that a connection exists between the source
and the destination object with that id.
So, for example, consider the following YAML snippet:


(Note: YAML used here because it’s a little more readable than the
equivalent Python source form for the dictionary.)
The ids for loggers are the logger names which would be used
programmatically to obtain a reference to those loggers, e.g.
.  The ids for Formatters and Filters can be any string
value (such as ,  above) and they are transient,
in that they are only meaningful for processing the configuration
dictionary and used to determine connections between objects, and are
not persisted anywhere when the configuration call is complete.
The above snippet indicates that logger named  should
have two handlers attached to it, which are described by the handler
ids  and . The formatter for  is that described by id
, and the formatter for  is that described by id
.


User-defined objects¶
The schema supports user-defined objects for handlers, filters and
formatters.  (Loggers do not need to have different types for
different instances, so there is no support in this configuration
schema for user-defined logger classes.)
Objects to be configured are described by dictionaries
which detail their configuration.  In some places, the logging system
will be able to infer from the context how an object is to be
instantiated, but when a user-defined object is to be instantiated,
the system will not know how to do this.  In order to provide complete
flexibility for user-defined object instantiation, the user needs
to provide a ‘factory’ - a callable which is called with a
configuration dictionary and which returns the instantiated object.
This is signalled by an absolute import path to the factory being
made available under the special key .  Here’s a concrete
example:


The above YAML snippet defines three formatters.  The first, with id
, is a standard  instance with the
specified format string.  The second, with id , has a
longer format and also defines the time format explicitly, and will
result in a  initialized with those two format
strings.  Shown in Python source form, the  and 
formatters have configuration sub-dictionaries:


and:


respectively, and as these dictionaries do not contain the special key
, the instantiation is inferred from the context: as a result,
standard  instances are created.  The
configuration sub-dictionary for the third formatter, with id
, is:


and this contains the special key , which means that
user-defined instantiation is wanted.  In this case, the specified
factory callable will be used. If it is an actual callable it will be
used directly - otherwise, if you specify a string (as in the example)
the actual callable will be located using normal import mechanisms.
The callable will be called with the remaining items in the
configuration sub-dictionary as keyword arguments.  In the above
example, the formatter with id  will be assumed to be
returned by the call:


The key  has been used as the special key because it is not a
valid keyword parameter name, and so will not clash with the names of
the keyword arguments used in the call.  The  also serves as a
mnemonic that the corresponding value is a callable.


Access to external objects¶
There are times where a configuration needs to refer to objects
external to the configuration, for example .  If the
configuration dict is constructed using Python code, this is
straightforward, but a problem arises when the configuration is
provided via a text file (e.g. JSON, YAML).  In a text file, there is
no standard way to distinguish  from the literal string
.  To facilitate this distinction, the configuration
system looks for certain special prefixes in string values and
treat them specially.  For example, if the literal string
 is provided as a value in the configuration,
then the  will be stripped off and the remainder of the
value processed using normal import mechanisms.
The handling of such prefixes is done in a way analogous to protocol
handling: there is a generic mechanism to look for prefixes which
match the regular expression 
whereby, if the  is recognised, the  is processed
in a prefix-dependent manner and the result of the processing replaces
the string value.  If the prefix is not recognised, then the string
value will be left as-is.


Access to internal objects¶
As well as external objects, there is sometimes also a need to refer
to objects in the configuration.  This will be done implicitly by the
configuration system for things that it knows about.  For example, the
string value  for a  in a logger or handler will
automatically be converted to the value , and the
,  and  entries will take an
object id and resolve to the appropriate destination object.
However, a more generic mechanism is needed for user-defined
objects which are not known to the  module.  For
example, consider , which takes
a  argument which is another handler to delegate to. Since
the system already knows about this class, then in the configuration,
the given  just needs to be the object id of the relevant
target handler, and the system will resolve to the handler from the
id.  If, however, a user defines a  which has
an  handler, the configuration system would not know that
the  referred to a handler.  To cater for this, a generic
resolution system allows the user to specify:


The literal string  will be resolved in an
analogous way to strings with the  prefix, but looking
in the configuration itself rather than the import namespace.  The
mechanism allows access by dot or by index, in a similar way to
that provided by .  Thus, given the following snippet:


in the configuration, the string  would resolve to
the dict with key , the string 
would resolve to the dict with key  in the  dict,
and so on.  The string  would
resolve to  and the string
 would resolve to the value
. The  value could be accessed
using either  or, equivalently,
.  The latter form only needs to be
used if the key contains spaces or non-alphanumeric characters.  If an
index value consists only of decimal digits, access will be attempted
using the corresponding integer value, falling back to the string
value if needed.
Given a string , this will
resolve to .
If the string is specified as ,
the system will attempt to retrieve the value from
, and fall back
to  if that
fails.


Import resolution and custom importers¶
Import resolution, by default, uses the builtin  function
to do its importing. You may want to replace this with your own importing
mechanism: if so, you can replace the  attribute of the
 or its superclass, the
 class. However, you need to be
careful because of the way functions are accessed from classes via
descriptors. If you are using a Python callable to do your imports, and you
want to define it at class level rather than instance level, you need to wrap
it with . For example:


You don’t need to wrap with  if you’re setting the import
callable on a configurator instance.



Configuration file format¶
The configuration file format understood by  is based on
 functionality. The file must contain sections called
,  and  which identify by name the
entities of each type which are defined in the file. For each such entity, there
is a separate section which identifies how that entity is configured.  Thus, for
a logger named  in the  section, the relevant
configuration details are held in a section . Similarly, a
handler called  in the  section will have its
configuration held in a section called , while a formatter
called  in the  section will have its configuration
specified in a section called . The root logger
configuration must be specified in a section called .

Note
The  API is older than the  API and does
not provide functionality to cover certain aspects of logging. For example,
you cannot configure  objects, which provide for
filtering of messages beyond simple integer levels, using .
If you need to have instances of  in your logging
configuration, you will need to use . Note that future
enhancements to configuration functionality will be added to
, so it’s worth considering transitioning to this newer
API when it’s convenient to do so.

Examples of these sections in the file are given below.


The root logger must specify a level and a list of handlers. An example of a
root logger section is given below.


The  entry can be one of  or
. For the root logger only,  means that all messages will be
logged. Level values are uated in the context of the 
package’s namespace.
The  entry is a comma-separated list of handler names, which must
appear in the  section. These names must appear in the
 section and have corresponding sections in the configuration
file.
For loggers other than the root logger, some additional information is required.
This is illustrated by the following example.


The  and  entries are interpreted as for the root logger,
except that if a non-root logger’s level is specified as , the system
consults loggers higher up the hierarchy to determine the effective level of the
logger. The  entry is set to 1 to indicate that messages must
propagate to handlers higher up the logger hierarchy from this logger, or 0 to
indicate that messages are not propagated to handlers up the hierarchy. The
 entry is the hierarchical channel name of the logger, that is to
say the name used by the application to get the logger.
Sections which specify handler configuration are exemplified by the following.


The  entry indicates the handler’s class (as determined by 
in the  package’s namespace). The  is interpreted as for
loggers, and  is taken to mean ‘log everything’.
The  entry indicates the key name of the formatter for this
handler. If blank, a default formatter () is used.
If a name is specified, it must appear in the  section and have
a corresponding section in the configuration file.
The  entry, when uated in the context of the 
package’s namespace, is the list of arguments to the constructor for the handler
class. Refer to the constructors for the relevant handlers, or to the examples
below, to see how typical entries are constructed. If not provided, it defaults
to .
The optional  entry, when uated in the context of the
 package’s namespace, is the keyword argument dict to the constructor
for the handler class. If not provided, it defaults to .


Sections which specify formatter configuration are typified by the following.


The  entry is the overall format string, and the  entry is
the -compatible date/time format string.  If empty, the
package substitutes something which is almost equivalent to specifying the date
format string .  This format also specifies milliseconds,
which are appended to the result of using the above format string, with a comma
separator.  An example time in this format is .
The  entry is optional.  It indicates the name of the formatter’s class
(as a dotted module and class name.)  This option is useful for instantiating a
 subclass.  Subclasses of
 can present exception tracebacks in an expanded or
condensed format.

Note
Due to the use of  as described above, there are
potential security risks which result from using the  to send
and receive configurations via sockets. The risks are limited to where
multiple users with no mutual trust run code on the same machine; see the
 documentation for more information.


See also

Module 
API reference for the logging module.
Module 
Useful handlers included with the logging module.




