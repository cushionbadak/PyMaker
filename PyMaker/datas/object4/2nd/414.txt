link:
library/stdtypes.html#string-methods

docs:

String Methods¶
Strings implement all of the common sequence
operations, along with the additional methods described below.
Strings also support two styles of string formatting, one providing a large
degree of flexibility and customization (see ,
Format String Syntax and Custom String Formatting) and the other based on C
 style formatting that handles a narrower range of types and is
slightly harder to use correctly, but is often faster for the cases it can
handle (printf-style String Formatting).
The Text Processing Services section of the standard library covers a number of
other modules that provide various text related utilities (including regular
expression support in the  module).


()¶
Return a copy of the string with its first character capitalized and the
rest lowercased.



()¶
Return a casefolded copy of the string. Casefolded strings may be used for
caseless matching.
Casefolding is similar to lowercasing but more aggressive because it is
intended to remove all case distinctions in a string. For example, the German
lowercase letter  is equivalent to . Since it is already
lowercase,  would do nothing to ; 
converts it to .
The casefolding algorithm is described in section 3.13 of the Unicode
Standard.

New in version 3.3.




(width[, fillchar])¶
Return centered in a string of length width. Padding is done using the
specified fillchar (default is an ASCII space). The original string is
returned if width is less than or equal to .



(sub[, start[, end]])¶
Return the number of non-overlapping occurrences of substring sub in the
range [start, end].  Optional arguments start and end are
interpreted as in slice notation.



(encoding="utf-8", errors="strict")¶
Return an encoded version of the string as a bytes object. Default encoding
is . errors may be given to set a different error handling scheme.
The default for errors is , meaning that encoding errors raise
a . Other possible
values are , , ,
 and any other name registered via
, see section Error Handlers. For a
list of possible encodings, see section Standard Encodings.

Changed in version 3.1: Support for keyword arguments added.




(suffix[, start[, end]])¶
Return  if the string ends with the specified suffix, otherwise return
.  suffix can also be a tuple of suffixes to look for.  With optional
start, test beginning at that position.  With optional end, stop comparing
at that position.



(tabsize=8)¶
Return a copy of the string where all tab characters are replaced by one or
more spaces, depending on the current column and the given tab size.  Tab
positions occur every tabsize characters (default is 8, giving tab
positions at columns 0, 8, 16 and so on).  To expand the string, the current
column is set to zero and the string is examined character by character.  If
the character is a tab (), one or more space characters are inserted
in the result until the current column is equal to the next tab position.
(The tab character itself is not copied.)  If the character is a newline
() or return (), it is copied and the current column is reset to
zero.  Any other character is copied unchanged and the current column is
incremented by one regardless of how the character is represented when
printed.





(sub[, start[, end]])¶
Return the lowest index in the string where substring sub is found within
the slice .  Optional arguments start and end are
interpreted as in slice notation.  Return  if sub is not found.

Note
The  method should be used only if you need to know the
position of sub.  To check if sub is a substring or not, use the
 operator:






(*args, **kwargs)¶
Perform a string formatting operation.  The string on which this method is
called can contain literal text or replacement fields delimited by braces
.  Each replacement field contains either the numeric index of a
positional argument, or the name of a keyword argument.  Returns a copy of
the string where each replacement field is replaced with the string value of
the corresponding argument.


See Format String Syntax for a description of the various formatting options
that can be specified in format strings.

Note
When formatting a number (, , ,
 and subclasses) with the  type
(ex: ), the function temporarily sets the
 locale to the  locale to decode
 and  fields of  if
they are non-ASCII or longer than 1 byte, and the  locale is
different than the  locale.  This temporary change affects
other threads.


Changed in version 3.7: When formatting a number with the  type, the function sets
temporarily the  locale to the  locale in some
cases.




(mapping)¶
Similar to , except that  is
used directly and not copied to a .  This is useful
if for example  is a dict subclass:



New in version 3.2.




(sub[, start[, end]])¶
Like , but raise  when the substring is
not found.



()¶
Return true if all characters in the string are alphanumeric and there is at
least one character, false otherwise.  A character  is alphanumeric if one
of the following returns : , ,
, or .



()¶
Return true if all characters in the string are alphabetic and there is at least
one character, false otherwise.  Alphabetic characters are those characters defined
in the Unicode character database as “Letter”, i.e., those with general category
property being one of “Lm”, “Lt”, “Lu”, “Ll”, or “Lo”.  Note that this is different
from the “Alphabetic” property defined in the Unicode Standard.



()¶
Return true if the string is empty or all characters in the string are ASCII,
false otherwise.
ASCII characters have code points in the range U+0000-U+007F.

New in version 3.7.




()¶
Return true if all characters in the string are decimal
characters and there is at least one character, false
otherwise. Decimal characters are those that can be used to form
numbers in base 10, e.g. U+0660, ARABIC-INDIC DIGIT
ZERO.  Formally a decimal character is a character in the Unicode
General Category “Nd”.



()¶
Return true if all characters in the string are digits and there is at least one
character, false otherwise.  Digits include decimal characters and digits that need
special handling, such as the compatibility superscript digits.
This covers digits which cannot be used to form numbers in base 10,
like the Kharosthi numbers.  Formally, a digit is a character that has the
property value Numeric_Type=Digit or Numeric_Type=Decimal.



()¶
Return true if the string is a valid identifier according to the language
definition, section Identifiers and keywords.
Use  to test for reserved identifiers such as
 and .



()¶
Return true if all cased characters [4] in the string are lowercase and
there is at least one cased character, false otherwise.



()¶
Return true if all characters in the string are numeric
characters, and there is at least one character, false
otherwise. Numeric characters include digit characters, and all characters
that have the Unicode numeric value property, e.g. U+2155,
VULGAR FRACTION ONE FIFTH.  Formally, numeric characters are those with the property
value Numeric_Type=Digit, Numeric_Type=Decimal or Numeric_Type=Numeric.



()¶
Return true if all characters in the string are printable or the string is
empty, false otherwise.  Nonprintable characters are those characters defined
in the Unicode character database as “Other” or “Separator”, excepting the
ASCII space (0x20) which is considered printable.  (Note that printable
characters in this context are those which should not be escaped when
 is invoked on a string.  It has no bearing on the handling of
strings written to  or .)



()¶
Return true if there are only whitespace characters in the string and there is
at least one character, false otherwise.  Whitespace characters  are those
characters defined in the Unicode character database as “Other” or “Separator”
and those with bidirectional property being one of “WS”, “B”, or “S”.



()¶
Return true if the string is a titlecased string and there is at least one
character, for example uppercase characters may only follow uncased characters
and lowercase characters only cased ones.  Return false otherwise.



()¶
Return true if all cased characters [4] in the string are uppercase and
there is at least one cased character, false otherwise.



(iterable)¶
Return a string which is the concatenation of the strings in iterable.
A  will be raised if there are any non-string values in
iterable, including  objects.  The separator between
elements is the string providing this method.



(width[, fillchar])¶
Return the string left justified in a string of length width. Padding is
done using the specified fillchar (default is an ASCII space). The
original string is returned if width is less than or equal to .



()¶
Return a copy of the string with all the cased characters [4] converted to
lowercase.
The lowercasing algorithm used is described in section 3.13 of the Unicode
Standard.



([chars])¶
Return a copy of the string with leading characters removed.  The chars
argument is a string specifying the set of characters to be removed.  If omitted
or , the chars argument defaults to removing whitespace.  The chars
argument is not a prefix; rather, all combinations of its values are stripped:





static (x[, y[, z]])¶
This static method returns a translation table usable for .
If there is only one argument, it must be a dictionary mapping Unicode
ordinals (integers) or characters (strings of length 1) to Unicode ordinals,
strings (of arbitrary lengths) or .  Character keys will then be
converted to ordinals.
If there are two arguments, they must be strings of equal length, and in the
resulting dictionary, each character in x will be mapped to the character at
the same position in y.  If there is a third argument, it must be a string,
whose characters will be mapped to  in the result.



(sep)¶
Split the string at the first occurrence of sep, and return a 3-tuple
containing the part before the separator, the separator itself, and the part
after the separator.  If the separator is not found, return a 3-tuple containing
the string itself, followed by two empty strings.



(old, new[, count])¶
Return a copy of the string with all occurrences of substring old replaced by
new.  If the optional argument count is given, only the first count
occurrences are replaced.



(sub[, start[, end]])¶
Return the highest index in the string where substring sub is found, such
that sub is contained within .  Optional arguments start
and end are interpreted as in slice notation.  Return  on failure.



(sub[, start[, end]])¶
Like  but raises  when the substring sub is not
found.



(width[, fillchar])¶
Return the string right justified in a string of length width. Padding is
done using the specified fillchar (default is an ASCII space). The
original string is returned if width is less than or equal to .



(sep)¶
Split the string at the last occurrence of sep, and return a 3-tuple
containing the part before the separator, the separator itself, and the part
after the separator.  If the separator is not found, return a 3-tuple containing
two empty strings, followed by the string itself.



(sep=None, maxsplit=-1)¶
Return a list of the words in the string, using sep as the delimiter string.
If maxsplit is given, at most maxsplit splits are done, the rightmost
ones.  If sep is not specified or , any whitespace string is a
separator.  Except for splitting from the right,  behaves like
 which is described in detail below.



([chars])¶
Return a copy of the string with trailing characters removed.  The chars
argument is a string specifying the set of characters to be removed.  If omitted
or , the chars argument defaults to removing whitespace.  The chars
argument is not a suffix; rather, all combinations of its values are stripped:





(sep=None, maxsplit=-1)¶
Return a list of the words in the string, using sep as the delimiter
string.  If maxsplit is given, at most maxsplit splits are done (thus,
the list will have at most  elements).  If maxsplit is not
specified or , then there is no limit on the number of splits
(all possible splits are made).
If sep is given, consecutive delimiters are not grouped together and are
deemed to delimit empty strings (for example,  returns
).  The sep argument may consist of multiple characters
(for example,  returns ).
Splitting an empty string with a specified separator returns .
For example:


If sep is not specified or is , a different splitting algorithm is
applied: runs of consecutive whitespace are regarded as a single separator,
and the result will contain no empty strings at the start or end if the
string has leading or trailing whitespace.  Consequently, splitting an empty
string or a string consisting of just whitespace with a  separator
returns .
For example:





([keepends])¶
Return a list of the lines in the string, breaking at line boundaries.  Line
breaks are not included in the resulting list unless keepends is given and
true.
This method splits on the following line boundaries.  In particular, the
boundaries are a superset of universal newlines.






Representation
Description




Line Feed


Carriage Return


Carriage Return + Line Feed

 or 
Line Tabulation

 or 
Form Feed


File Separator


Group Separator


Record Separator


Next Line (C1 Control Code)


Line Separator


Paragraph Separator




Changed in version 3.2:  and  added to list of line boundaries.

For example:


Unlike  when a delimiter string sep is given, this
method returns an empty list for the empty string, and a terminal line
break does not result in an extra line:


For comparison,  gives:





(prefix[, start[, end]])¶
Return  if string starts with the prefix, otherwise return .
prefix can also be a tuple of prefixes to look for.  With optional start,
test string beginning at that position.  With optional end, stop comparing
string at that position.



([chars])¶
Return a copy of the string with the leading and trailing characters removed.
The chars argument is a string specifying the set of characters to be removed.
If omitted or , the chars argument defaults to removing whitespace.
The chars argument is not a prefix or suffix; rather, all combinations of its
values are stripped:


The outermost leading and trailing chars argument values are stripped
from the string. Characters are removed from the leading end until
reaching a string character that is not contained in the set of
characters in chars. A similar action takes place on the trailing end.
For example:





()¶
Return a copy of the string with uppercase characters converted to lowercase and
vice versa. Note that it is not necessarily true that
.



()¶
Return a titlecased version of the string where words start with an uppercase
character and the remaining characters are lowercase.
For example:


The algorithm uses a simple language-independent definition of a word as
groups of consecutive letters.  The definition works in many contexts but
it means that apostrophes in contractions and possessives form word
boundaries, which may not be the desired result:


A workaround for apostrophes can be constructed using regular expressions:





(table)¶
Return a copy of the string in which each character has been mapped through
the given translation table.  The table must be an object that implements
indexing via , typically a mapping or
sequence.  When indexed by a Unicode ordinal (an integer), the
table object can do any of the following: return a Unicode ordinal or a
string, to map the character to one or more other characters; return
, to delete the character from the return string; or raise a
 exception, to map the character to itself.
You can use  to create a translation map from
character-to-character mappings in different formats.
See also the  module for a more flexible approach to custom
character mappings.



()¶
Return a copy of the string with all the cased characters [4] converted to
uppercase.  Note that  might be  if 
contains uncased characters or if the Unicode category of the resulting
character(s) is not “Lu” (Letter, uppercase), but e.g. “Lt” (Letter,
titlecase).
The uppercasing algorithm used is described in section 3.13 of the Unicode
Standard.



(width)¶
Return a copy of the string left filled with ASCII  digits to
make a string of length width. A leading sign prefix (/)
is handled by inserting the padding after the sign character rather
than before. The original string is returned if width is less than
or equal to .
For example:



