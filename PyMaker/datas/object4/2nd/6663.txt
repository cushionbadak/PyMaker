link:
library/urllib.request.html#openerdirector-objects

docs:

OpenerDirector Objects¶
 instances have the following methods:


(handler)¶
handler should be an instance of .  The following methods
are searched, and added to the possible chains (note that HTTP errors are a
special case).  Note that, in the following, protocol should be replaced
with the actual protocol to handle, for example  would
be the HTTP protocol response handler.  Also type should be replaced with
the actual HTTP code, for example  would handle HTTP
404 errors.

 — signal that the handler knows how to open protocol
URLs.
See  for more information.

 — signal that the handler knows how to handle HTTP
errors with HTTP error code type.
See  for more information.

 — signal that the handler knows how to handle errors
from (non-) protocol.

 — signal that the handler knows how to pre-process
protocol requests.
See  for more information.

 — signal that the handler knows how to
post-process protocol responses.
See  for more information.





(url, data=None[, timeout])¶
Open the given url (which can be a request object or a string), optionally
passing the given data. Arguments, return values and exceptions raised are
the same as those of  (which simply calls the 
method on the currently installed global ).  The
optional timeout parameter specifies a timeout in seconds for blocking
operations like the connection attempt (if not specified, the global default
timeout setting will be used). The timeout feature actually works only for
HTTP, HTTPS and FTP connections).



(proto, *args)¶
Handle an error of the given protocol.  This will call the registered error
handlers for the given protocol with the given arguments (which are protocol
specific).  The HTTP protocol is a special case which uses the HTTP response
code to determine the specific error handler; refer to the 
methods of the handler classes.
Return values and exceptions raised are the same as those of .

OpenerDirector objects open URLs in three stages:
The order in which these methods are called within each stage is determined by
sorting the handler instances.

Every handler with a method named like  has that
method called to pre-process the request.

Handlers with a method named like  are called to handle
the request. This stage ends when a handler either returns a non-
value (ie. a response), or raises an exception (usually
).  Exceptions are allowed to propagate.
In fact, the above algorithm is first tried for methods named
.  If all such methods return , the algorithm
is repeated for methods named like .  If all such methods
return , the algorithm is repeated for methods named
.
Note that the implementation of these methods may involve calls of the parent
 instance’s  and
 methods.

Every handler with a method named like  has that
method called to post-process the response.


