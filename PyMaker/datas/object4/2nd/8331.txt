link:
library/doctest.html

docs:


 — Test interactive Python examples¶
Source code: Lib/doctest.py

The  module searches for pieces of text that look like interactive
Python sessions, and then executes those sessions to verify that they work
exactly as shown.  There are several common ways to use doctest:

To check that a module’s docstrings are up-to-date by verifying that all
interactive examples still work as documented.
To perform regression testing by verifying that interactive examples from a
test file or a test object work as expected.
To write tutorial documentation for a package, liberally illustrated with
input-output examples.  Depending on whether the examples or the expository text
are emphasized, this has the flavor of “literate testing” or “executable
documentation”.

Here’s a complete but small example module:


If you run  directly from the command line, 
works its magic:


There’s no output!  That’s normal, and it means all the examples worked.  Pass
 to the script, and  prints a detailed log of what
it’s trying, and prints a summary at the end:


And so on, eventually ending with:


That’s all you need to know to start making productive use of !
Jump in.  The following sections provide full details.  Note that there are many
examples of doctests in the standard Python test suite and libraries.
Especially useful examples can be found in the standard test file
.

Simple Usage: Checking Examples in Docstrings¶
The simplest way to start using doctest (but not necessarily the way you’ll
continue to do it) is to end each module  with:


 then examines docstrings in module .
Running the module as a script causes the examples in the docstrings to get
executed and verified:


This won’t display anything unless an example fails, in which case the failing
example(s) and the cause(s) of the failure(s) are printed to stdout, and the
final line of output is , where N is the
number of examples that failed.
Run it with the  switch instead:


and a detailed report of all examples tried is printed to standard output, along
with assorted summaries at the end.
You can force verbose mode by passing  to , or
prohibit it by passing .  In either of those cases,
 is not examined by  (so passing  or not
has no effect).
There is also a command line shortcut for running .  You can
instruct the Python interpreter to run the doctest module directly from the
standard library and pass the module name(s) on the command line:


This will import  as a standalone module and run
 on it.  Note that this may not work correctly if the file is
part of a package and imports other submodules from that package.
For more information on , see section Basic API.


Simple Usage: Checking Examples in a Text File¶
Another simple application of doctest is testing interactive examples in a text
file.  This can be done with the  function:


That short script executes and verifies any interactive Python examples
contained in the file .  The file content is treated as if it
were a single giant docstring; the file doesn’t need to contain a Python
program!   For example, perhaps  contains this:


Running  then finds the error in this
documentation:


As with ,  won’t display anything unless an
example fails.  If an example does fail, then the failing example(s) and the
cause(s) of the failure(s) are printed to stdout, using the same format as
.
By default,  looks for files in the calling module’s directory.
See section Basic API for a description of the optional arguments
that can be used to tell it to look for files in other locations.
Like , ’s verbosity can be set with the
 command-line switch or with the optional keyword argument
verbose.
There is also a command line shortcut for running .  You can
instruct the Python interpreter to run the doctest module directly from the
standard library and pass the file name(s) on the command line:


Because the file name does not end with ,  infers that
it must be run with , not .
For more information on , see section Basic API.


How It Works¶
This section examines in detail how doctest works: which docstrings it looks at,
how it finds interactive examples, what execution context it uses, how it
handles exceptions, and how option flags can be used to control its behavior.
This is the information that you need to know to write doctest examples; for
information about actually running doctest on these examples, see the following
sections.

Which Docstrings Are Examined?¶
The module docstring, and all function, class and method docstrings are
searched.  Objects imported into the module are not searched.
In addition, if  exists and “is true”, it must be a dict, and each
entry maps a (string) name to a function object, class object, or string.
Function and class object docstrings found from  are searched, and
strings are treated as if they were docstrings.  In output, a key  in
 appears with name


Any classes found are recursively searched similarly, to test docstrings in
their contained methods and nested classes.

CPython implementation detail: Prior to version 3.4, extension modules written in C were not fully
searched by doctest.



How are Docstring Examples Recognized?¶
In most cases a copy-and-paste of an interactive console session works fine,
but doctest isn’t trying to do an exact emulation of any specific Python shell.


Any expected output must immediately follow the final  or 
line containing the code, and the expected output (if any) extends to the next
 or all-whitespace line.
The fine print:

Expected output cannot contain an all-whitespace line, since such a line is
taken to signal the end of expected output.  If expected output does contain a
blank line, put  in your doctest example each place a blank line
is expected.

All hard tab characters are expanded to spaces, using 8-column tab stops.
Tabs in output generated by the tested code are not modified.  Because any
hard tabs in the sample output are expanded, this means that if the code
output includes hard tabs, the only way the doctest can pass is if the
 option or directive
is in effect.
Alternatively, the test can be rewritten to capture the output and compare it
to an expected value as part of the test.  This handling of tabs in the
source was arrived at through trial and error, and has proven to be the least
error prone way of handling them.  It is possible to use a different
algorithm for handling tabs by writing a custom  class.

Output to stdout is captured, but not output to stderr (exception tracebacks
are captured via a different means).

If you continue a line via backslashing in an interactive session, or for any
other reason use a backslash, you should use a raw docstring, which will
preserve your backslashes exactly as you type them:


Otherwise, the backslash will be interpreted as part of the string. For example,
the  above would be interpreted as a newline character.  Alternatively, you
can double each backslash in the doctest version (and not use a raw string):



The starting column doesn’t matter:


and as many leading whitespace characters are stripped from the expected output
as appeared in the initial  line that started the example.




What’s the Execution Context?¶
By default, each time  finds a docstring to test, it uses a
shallow copy of ’s globals, so that running tests doesn’t change the
module’s real globals, and so that one test in  can’t leave behind
crumbs that accidentally allow another test to work.  This means examples can
freely use any names defined at top-level in , and names defined earlier
in the docstring being run. Examples cannot see names defined in other
docstrings.
You can force use of your own dict as the execution context by passing
 to  or  instead.


What About Exceptions?¶
No problem, provided that the traceback is the only output produced by the
example:  just paste in the traceback. [1] Since tracebacks contain details
that are likely to change rapidly (for example, exact file paths and line
numbers), this is one case where doctest works hard to be flexible in what it
accepts.
Simple example:


That doctest succeeds if  is raised, with the  detail as shown.
The expected output for an exception must start with a traceback header, which
may be either of the following two lines, indented the same as the first line of
the example:


The traceback header is followed by an optional traceback stack, whose contents
are ignored by doctest.  The traceback stack is typically omitted, or copied
verbatim from an interactive session.
The traceback stack is followed by the most interesting part: the line(s)
containing the exception type and detail.  This is usually the last line of a
traceback, but can extend across multiple lines if the exception has a
multi-line detail:


The last three lines (starting with ) are compared against the
exception’s type and detail, and the rest are ignored.
Best practice is to omit the traceback stack, unless it adds significant
documentation value to the example.  So the last example is probably better as:


Note that tracebacks are treated very specially.  In particular, in the
rewritten example, the use of  is independent of doctest’s
 option.  The ellipsis in that example could be left out, or
could just as well be three (or three hundred) commas or digits, or an indented
transcript of a Monty Python skit.
Some details you should read once, but won’t need to remember:

Doctest can’t guess whether your expected output came from an exception
traceback or from ordinary printing.  So, e.g., an example that expects
 will pass whether  is actually
raised or if the example merely prints that traceback text.  In practice,
ordinary output rarely begins with a traceback header line, so this doesn’t
create real problems.
Each line of the traceback stack (if present) must be indented further than
the first line of the example, or start with a non-alphanumeric character.
The first line following the traceback header indented the same and starting
with an alphanumeric is taken to be the start of the exception detail.  Of
course this does the right thing for genuine tracebacks.
When the  doctest option is specified,
everything following the leftmost colon and any module information in the
exception name is ignored.
The interactive shell omits the traceback header line for some
s.  But doctest uses the traceback header line to
distinguish exceptions from non-exceptions.  So in the rare case where you need
to test a  that omits the traceback header, you will need to
manually add the traceback header line to your test example.


For some s, Python displays the character position of the
syntax error, using a  marker:


Since the lines showing the position of the error come before the exception type
and detail, they are not checked by doctest.  For example, the following test
would pass, even though it puts the  marker in the wrong location:






Option Flags¶
A number of option flags control various aspects of doctest’s behavior.
Symbolic names for the flags are supplied as module constants, which can be
bitwise ORed together and passed to various functions.
The names can also be used in doctest directives,
and may be passed to the doctest command line interface via the  option.

New in version 3.4: The  command line option.

The first group of options define test semantics, controlling aspects of how
doctest decides whether actual output matches an example’s expected output:


¶
By default, if an expected output block contains just , an actual output
block containing just  or just  is considered to be a match, and
similarly for  versus .  When  is
specified, neither substitution is allowed.  The default behavior caters to that
Python changed the return type of many functions from integer to boolean;
doctests expecting “little integer” output still work in these cases.  This
option will probably go away, but not for several years.



¶
By default, if an expected output block contains a line containing only the
string , then that line will match a blank line in the actual
output.  Because a genuinely blank line delimits the expected output, this is
the only way to communicate that a blank line is expected.  When
 is specified, this substitution is not allowed.



¶
When specified, all sequences of whitespace (blanks and newlines) are treated as
equal.  Any sequence of whitespace within the expected output will match any
sequence of whitespace within the actual output. By default, whitespace must
match exactly.  is especially useful when a line of
expected output is very long, and you want to wrap it across multiple lines in
your source.



¶
When specified, an ellipsis marker () in the expected output can match
any substring in the actual output.  This includes substrings that span line
boundaries, and empty substrings, so it’s best to keep usage of this simple.
Complicated uses can lead to the same kinds of “oops, it matched too much!”
surprises that  is prone to in regular expressions.



¶
When specified, an example that expects an exception passes if an exception of
the expected type is raised, even if the exception detail does not match.  For
example, an example expecting  will pass if the actual
exception raised is , but will fail, e.g., if
 is raised.
It will also ignore the module name used in Python 3 doctest reports. Hence
both of these variations will work with the flag specified, regardless of
whether the test is run under Python 2.7 or Python 3.2 (or later versions):


Note that  can also be used to ignore the
details of the exception message, but such a test may still fail based
on whether or not the module details are printed as part of the
exception name. Using  and the details
from Python 2.3 is also the only clear way to write a doctest that doesn’t
care about the exception detail yet continues to pass under Python 2.3 or
earlier (those releases do not support doctest directives and ignore them as irrelevant comments). For example:


passes under Python 2.3 and later Python versions with the flag specified,
even though the detail
changed in Python 2.4 to say “does not” instead of “doesn’t”.

Changed in version 3.2:  now also ignores any information relating
to the module containing the exception under test.




¶
When specified, do not run the example at all.  This can be useful in contexts
where doctest examples serve as both documentation and test cases, and an
example should be included for documentation purposes, but should not be
checked.  E.g., the example’s output might be random; or the example might
depend on resources which would be unavailable to the test driver.
The SKIP flag can also be used for temporarily “commenting out” examples.



¶
A bitmask or’ing together all the comparison flags above.

The second group of options controls how test failures are reported:


¶
When specified, failures that involve multi-line expected and actual outputs are
displayed using a unified diff.



¶
When specified, failures that involve multi-line expected and actual outputs
will be displayed using a context diff.



¶
When specified, differences are computed by , using the same
algorithm as the popular  utility. This is the only method that
marks differences within lines as well as across lines.  For example, if a line
of expected output contains digit  where actual output contains letter
, a line is inserted with a caret marking the mismatching column positions.



¶
When specified, display the first failing example in each doctest, but suppress
output for all remaining examples.  This will prevent doctest from reporting
correct examples that break because of earlier failures; but it might also hide
incorrect examples that fail independently of the first failure.  When
 is specified, the remaining examples are
still run, and still count towards the total number of failures reported; only
the output is suppressed.



¶
When specified, exit after the first failing example and don’t attempt to run
the remaining examples. Thus, the number of failures reported will be at most
1.  This flag may be useful during debugging, since examples after the first
failure won’t even produce debugging output.
The doctest command line accepts the option  as a shorthand for .

New in version 3.4.




¶
A bitmask or’ing together all the reporting flags above.

There is also a way to register new option flag names, though this isn’t
useful unless you intend to extend  internals via subclassing:


(name)¶
Create a new option flag with a given name, and return the new flag’s integer
value.   can be used when subclassing
 or  to create new options that are
supported by your subclasses.   should always be
called using the following idiom:





Directives¶
Doctest directives may be used to modify the option flags for an individual example.  Doctest directives are
special Python comments following an example’s source code:

Whitespace is not allowed between the  or  and the directive option
name.  The directive option name can be any of the option flag names explained
above.
An example’s doctest directives modify doctest’s behavior for that single
example.  Use  to enable the named behavior, or  to disable it.
For example, this test passes:


Without the directive it would fail, both because the actual output doesn’t have
two blanks before the single-digit list elements, and because the actual output
is on a single line.  This test also passes, and also requires a directive to do
so:


Multiple directives can be used on a single physical line, separated by
commas:


If multiple directive comments are used for a single example, then they are
combined:


As the previous example shows, you can add  lines to your example
containing only directives.  This can be useful when an example is too long for
a directive to comfortably fit on the same line:


Note that since all options are disabled by default, and directives apply only
to the example they appear in, enabling options (via  in a directive) is
usually the only meaningful choice.  However, option flags can also be passed to
functions that run doctests, establishing different defaults.  In such cases,
disabling an option via  in a directive can be useful.


Warnings¶
 is serious about requiring exact matches in expected output.  If
even a single character doesn’t match, the test fails.  This will probably
surprise you a few times, as you learn exactly what Python does and doesn’t
guarantee about output.  For example, when printing a set, Python doesn’t
guarantee that the element is printed in any particular order, so a test like


is vulnerable!  One workaround is to do


instead.  Another is to do



Note
Before Python 3.6, when printing a dict, Python did not guarantee that
the key-value pairs was printed in any particular order.

There are others, but you get the idea.
Another bad idea is to print things that embed an object address, like


The  directive gives a nice approach for the last example:


Floating-point numbers are also subject to small output variations across
platforms, because Python defers to the platform C library for float formatting,
and C libraries vary widely in quality here.


Numbers of the form  are safe across all platforms, and I often
contrive doctest examples to produce numbers of that form:


Simple fractions are also easier for people to understand, and that makes for
better documentation.



Basic API¶
The functions  and  provide a simple interface to
doctest that should be sufficient for most basic uses.  For a less formal
introduction to these two functions, see sections Simple Usage: Checking Examples in Docstrings
and Simple Usage: Checking Examples in a Text File.


(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None)¶
All arguments except filename are optional, and should be specified in keyword
form.
Test examples in the file named filename.  Return .
Optional argument module_relative specifies how the filename should be
interpreted:

If module_relative is  (the default), then filename specifies an
OS-independent module-relative path.  By default, this path is relative to the
calling module’s directory; but if the package argument is specified, then it
is relative to that package.  To ensure OS-independence, filename should use
 characters to separate path segments, and may not be an absolute path
(i.e., it may not begin with ).
If module_relative is , then filename specifies an OS-specific
path.  The path may be absolute or relative; relative paths are resolved with
respect to the current working directory.

Optional argument name gives the name of the test; by default, or if ,
 is used.
Optional argument package is a Python package or the name of a Python package
whose directory should be used as the base directory for a module-relative
filename.  If no package is specified, then the calling module’s directory is
used as the base directory for module-relative filenames.  It is an error to
specify package if module_relative is .
Optional argument globs gives a dict to be used as the globals when executing
examples.  A new shallow copy of this dict is created for the doctest, so its
examples start with a clean slate. By default, or if , a new empty dict
is used.
Optional argument extraglobs gives a dict merged into the globals used to
execute examples.  This works like :  if globs and
extraglobs have a common key, the associated value in extraglobs appears in
the combined dict.  By default, or if , no extra globals are used.  This
is an advanced feature that allows parameterization of doctests.  For example, a
doctest can be written for a base class, using a generic name for the class,
then reused to test any number of subclasses by passing an extraglobs dict
mapping the generic name to the subclass to be tested.
Optional argument verbose prints lots of stuff if true, and prints only
failures if false; by default, or if , it’s true if and only if 
is in .
Optional argument report prints a summary at the end when true, else prints
nothing at the end.  In verbose mode, the summary is detailed, else the summary
is very brief (in fact, empty if all tests passed).
Optional argument optionflags (default value 0) takes the
bitwise OR of option flags.
See section Option Flags.
Optional argument raise_on_error defaults to false.  If true, an exception is
raised upon the first failure or unexpected exception in an example.  This
allows failures to be post-mortem debugged. Default behavior is to continue
running examples.
Optional argument parser specifies a  (or subclass) that
should be used to extract tests from the files.  It defaults to a normal parser
(i.e., ).
Optional argument encoding specifies an encoding that should be used to
convert the file to unicode.



(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False)¶
All arguments are optional, and all except for m should be specified in
keyword form.
Test examples in docstrings in functions and classes reachable from module m
(or module  if m is not supplied or is ), starting with
.
Also test examples reachable from dict , if it exists and is not
.   maps names (strings) to functions, classes and
strings; function and class docstrings are searched for examples; strings are
searched directly, as if they were docstrings.
Only docstrings attached to objects belonging to module m are searched.
Return .
Optional argument name gives the name of the module; by default, or if
,  is used.
Optional argument exclude_empty defaults to false.  If true, objects for which
no doctests are found are excluded from consideration. The default is a backward
compatibility hack, so that code still using  in
conjunction with  continues to get output for objects with no
tests. The exclude_empty argument to the newer 
constructor defaults to true.
Optional arguments extraglobs, verbose, report, optionflags,
raise_on_error, and globs are the same as for function 
above, except that globs defaults to .



(f, globs, verbose=False, name="NoName", compileflags=None, optionflags=0)¶
Test examples associated with object f; for example, f may be a string,
a module, a function, or a class object.
A shallow copy of dictionary argument globs is used for the execution context.
Optional argument name is used in failure messages, and defaults to
.
If optional argument verbose is true, output is generated even if there are no
failures.  By default, output is generated only in case of an example failure.
Optional argument compileflags gives the set of flags that should be used by
the Python compiler when running the examples.  By default, or if ,
flags are deduced corresponding to the set of future features found in globs.
Optional argument optionflags works as for function  above.



Unittest API¶
As your collection of doctest’ed modules grows, you’ll want a way to run all
their doctests systematically.   provides two functions that can
be used to create  test suites from modules and text files
containing doctests.  To integrate with  test discovery, include
a  function in your test module:


There are two main functions for creating  instances
from text files and modules with doctests:


(*paths, module_relative=True, package=None, setUp=None, tearDown=None, globs=None, optionflags=0, parser=DocTestParser(), encoding=None)¶
Convert doctest tests from one or more text files to a
.
The returned  is to be run by the unittest framework
and runs the interactive examples in each file.  If an example in any file
fails, then the synthesized unit test fails, and a 
exception is raised showing the name of the file containing the test and a
(sometimes approximate) line number.
Pass one or more paths (as strings) to text files to be examined.
Options may be provided as keyword arguments:
Optional argument module_relative specifies how the filenames in paths
should be interpreted:

If module_relative is  (the default), then each filename in
paths specifies an OS-independent module-relative path.  By default, this
path is relative to the calling module’s directory; but if the package
argument is specified, then it is relative to that package.  To ensure
OS-independence, each filename should use  characters to separate path
segments, and may not be an absolute path (i.e., it may not begin with
).
If module_relative is , then each filename in paths specifies
an OS-specific path.  The path may be absolute or relative; relative paths
are resolved with respect to the current working directory.

Optional argument package is a Python package or the name of a Python
package whose directory should be used as the base directory for
module-relative filenames in paths.  If no package is specified, then the
calling module’s directory is used as the base directory for module-relative
filenames.  It is an error to specify package if module_relative is
.
Optional argument setUp specifies a set-up function for the test suite.
This is called before running the tests in each file.  The setUp function
will be passed a  object.  The setUp function can access the
test globals as the globs attribute of the test passed.
Optional argument tearDown specifies a tear-down function for the test
suite.  This is called after running the tests in each file.  The tearDown
function will be passed a  object.  The setUp function can
access the test globals as the globs attribute of the test passed.
Optional argument globs is a dictionary containing the initial global
variables for the tests.  A new copy of this dictionary is created for each
test.  By default, globs is a new empty dictionary.
Optional argument optionflags specifies the default doctest options for the
tests, created by or-ing together individual option flags.  See section
Option Flags. See function  below
for a better way to set reporting options.
Optional argument parser specifies a  (or subclass)
that should be used to extract tests from the files.  It defaults to a normal
parser (i.e., ).
Optional argument encoding specifies an encoding that should be used to
convert the file to unicode.
The global  is added to the globals provided to doctests loaded
from a text file using .



(module=None, globs=None, extraglobs=None, test_finder=None, setUp=None, tearDown=None, checker=None)¶
Convert doctest tests for a module to a .
The returned  is to be run by the unittest framework
and runs each doctest in the module.  If any of the doctests fail, then the
synthesized unit test fails, and a  exception is raised
showing the name of the file containing the test and a (sometimes approximate)
line number.
Optional argument module provides the module to be tested.  It can be a module
object or a (possibly dotted) module name.  If not specified, the module calling
this function is used.
Optional argument globs is a dictionary containing the initial global
variables for the tests.  A new copy of this dictionary is created for each
test.  By default, globs is a new empty dictionary.
Optional argument extraglobs specifies an extra set of global variables, which
is merged into globs.  By default, no extra globals are used.
Optional argument test_finder is the  object (or a
drop-in replacement) that is used to extract doctests from the module.
Optional arguments setUp, tearDown, and optionflags are the same as for
function  above.
This function uses the same search technique as .

Changed in version 3.5:  returns an empty  if module
contains no docstrings instead of raising .


Under the covers,  creates a  out
of  instances, and  is a
subclass of .  isn’t documented
here (it’s an internal detail), but studying its code can answer questions about
the exact details of  integration.
Similarly,  creates a  out of
 instances, and  is a subclass
of .
So both ways of creating a  run instances of
.  This is important for a subtle reason: when you run
 functions yourself, you can control the  options in
use directly, by passing option flags to  functions.  However, if
you’re writing a  framework,  ultimately controls
when and how tests get run.  The framework author typically wants to control
 reporting options (perhaps, e.g., specified by command line
options), but there’s no way to pass options through  to
 test runners.
For this reason,  also supports a notion of 
reporting flags specific to  support, via this function:


(flags)¶
Set the  reporting flags to use.
Argument flags takes the bitwise OR of option flags.  See
section Option Flags.  Only “reporting flags” can be used.
This is a module-global setting, and affects all future doctests run by module
:  the  method of  looks at
the option flags specified for the test case when the 
instance was constructed.  If no reporting flags were specified (which is the
typical and expected case), ’s  reporting flags are
bitwise ORed into the option flags, and the option flags
so augmented are passed to the  instance created to
run the doctest.  If any reporting flags were specified when the
 instance was constructed, ’s
 reporting flags are ignored.
The value of the  reporting flags in effect before the function
was called is returned by the function.



Advanced API¶
The basic API is a simple wrapper that’s intended to make doctest easy to use.
It is fairly flexible, and should meet most users’ needs; however, if you
require more fine-grained control over testing, or wish to extend doctest’s
capabilities, then you should use the advanced API.
The advanced API revolves around two container classes, which are used to store
the interactive examples extracted from doctest cases:

: A single Python statement, paired with its expected
output.
: A collection of s, typically extracted
from a single docstring or text file.

Additional processing classes are defined to find, parse, and run, and check
doctest examples:

: Finds all docstrings in a given module, and uses a
 to create a  from every docstring that
contains interactive examples.
: Creates a  object from a string (such
as an object’s docstring).
: Executes the examples in a , and uses
an  to verify their output.
: Compares the actual output from a doctest example with
the expected output, and decides whether they match.

The relationships among these processing classes are summarized in the following
diagram:



DocTest Objects¶


class (examples, globs, name, filename, lineno, docstring)¶
A collection of doctest examples that should be run in a single namespace.  The
constructor arguments are used to initialize the attributes of the same names.
 defines the following attributes.  They are initialized by
the constructor, and should not be modified directly.


¶
A list of  objects encoding the individual interactive Python
examples that should be run by this test.



¶
The namespace (aka globals) that the examples should be run in. This is a
dictionary mapping names to values.  Any changes to the namespace made by the
examples (such as binding new variables) will be reflected in 
after the test is run.



¶
A string name identifying the .  Typically, this is the name
of the object or file that the test was extracted from.



¶
The name of the file that this  was extracted from; or
 if the filename is unknown, or if the  was not
extracted from a file.



¶
The line number within  where this  begins, or
 if the line number is unavailable.  This line number is zero-based
with respect to the beginning of the file.



¶
The string that the test was extracted from, or  if the string is
unavailable, or if the test was not extracted from a string.




Example Objects¶


class (source, want, exc_msg=None, lineno=0, indent=0, options=None)¶
A single interactive example, consisting of a Python statement and its expected
output.  The constructor arguments are used to initialize the attributes of
the same names.
 defines the following attributes.  They are initialized by
the constructor, and should not be modified directly.


¶
A string containing the example’s source code.  This source code consists of a
single Python statement, and always ends with a newline; the constructor adds
a newline when necessary.



¶
The expected output from running the example’s source code (either from
stdout, or a traceback in case of exception).   ends with a
newline unless no output is expected, in which case it’s an empty string.  The
constructor adds a newline when necessary.



¶
The exception message generated by the example, if the example is expected to
generate an exception; or  if it is not expected to generate an
exception.  This exception message is compared against the return value of
.   ends with a newline
unless it’s .  The constructor adds a newline if needed.



¶
The line number within the string containing this example where the example
begins.  This line number is zero-based with respect to the beginning of the
containing string.



¶
The example’s indentation in the containing string, i.e., the number of space
characters that precede the example’s first prompt.



¶
A dictionary mapping from option flags to  or , which is used
to override default options for this example.  Any option flags not contained
in this dictionary are left at their default value (as specified by the
’s ). By default, no options are set.




DocTestFinder objects¶


class (verbose=False, parser=DocTestParser(), recurse=True, exclude_empty=True)¶
A processing class used to extract the s that are relevant to
a given object, from its docstring and the docstrings of its contained objects.
s can be extracted from modules, classes, functions,
methods, staticmethods, classmethods, and properties.
The optional argument verbose can be used to display the objects searched by
the finder.  It defaults to  (no output).
The optional argument parser specifies the  object (or a
drop-in replacement) that is used to extract doctests from docstrings.
If the optional argument recurse is false, then 
will only examine the given object, and not any contained objects.
If the optional argument exclude_empty is false, then
 will include tests for objects with empty docstrings.
 defines the following method:


(obj[, name][, module][, globs][, extraglobs])¶
Return a list of the s that are defined by obj’s
docstring, or by any of its contained objects’ docstrings.
The optional argument name specifies the object’s name; this name will be
used to construct names for the returned s.  If name is
not specified, then  is used.
The optional parameter module is the module that contains the given object.
If the module is not specified or is , then the test finder will attempt
to automatically determine the correct module.  The object’s module is used:

As a default namespace, if globs is not specified.
To prevent the DocTestFinder from extracting DocTests from objects that are
imported from other modules.  (Contained objects with modules other than
module are ignored.)
To find the name of the file containing the object.
To help find the line number of the object within its file.

If module is , no attempt to find the module will be made.  This is
obscure, of use mostly in testing doctest itself: if module is , or
is  but cannot be found automatically, then all objects are considered
to belong to the (non-existent) module, so all contained objects will
(recursively) be searched for doctests.
The globals for each  is formed by combining globs and
extraglobs (bindings in extraglobs override bindings in globs).  A new
shallow copy of the globals dictionary is created for each .
If globs is not specified, then it defaults to the module’s __dict__, if
specified, or  otherwise.  If extraglobs is not specified, then it
defaults to .




DocTestParser objects¶


class ¶
A processing class used to extract interactive examples from a string, and use
them to create a  object.
 defines the following methods:


(string, globs, name, filename, lineno)¶
Extract all doctest examples from the given string, and collect them into a
 object.
globs, name, filename, and lineno are attributes for the new
 object.  See the documentation for  for more
information.



(string, name='<string>')¶
Extract all doctest examples from the given string, and return them as a list
of  objects.  Line numbers are 0-based.  The optional argument
name is a name identifying this string, and is only used for error messages.



(string, name='<string>')¶
Divide the given string into examples and intervening text, and return them as
a list of alternating s and strings. Line numbers for the
s are 0-based.  The optional argument name is a name
identifying this string, and is only used for error messages.




DocTestRunner objects¶


class (checker=None, verbose=None, optionflags=0)¶
A processing class used to execute and verify the interactive examples in a
.
The comparison between expected outputs and actual outputs is done by an
.  This comparison may be customized with a number of
option flags; see section Option Flags for more information.  If the
option flags are insufficient, then the comparison may also be customized by
passing a subclass of  to the constructor.
The test runner’s display output can be controlled in two ways. First, an output
function can be passed to ; this function will be called
with strings that should be displayed.  It defaults to .  If
capturing the output is not sufficient, then the display output can be also
customized by subclassing DocTestRunner, and overriding the methods
, ,
, and .
The optional keyword argument checker specifies the 
object (or drop-in replacement) that should be used to compare the expected
outputs to the actual outputs of doctest examples.
The optional keyword argument verbose controls the ’s
verbosity.  If verbose is , then information is printed about each
example, as it is run.  If verbose is , then only failures are
printed.  If verbose is unspecified, or , then verbose output is used
iff the command-line switch  is used.
The optional keyword argument optionflags can be used to control how the test
runner compares expected output to actual output, and how it displays failures.
For more information, see section Option Flags.
 defines the following methods:


(out, test, example)¶
Report that the test runner is about to process the given example. This method
is provided to allow subclasses of  to customize their
output; it should not be called directly.
example is the example about to be processed.  test is the test
containing example.  out is the output function that was passed to
.



(out, test, example, got)¶
Report that the given example ran successfully.  This method is provided to
allow subclasses of  to customize their output; it
should not be called directly.
example is the example about to be processed.  got is the actual output
from the example.  test is the test containing example.  out is the
output function that was passed to .



(out, test, example, got)¶
Report that the given example failed.  This method is provided to allow
subclasses of  to customize their output; it should not
be called directly.
example is the example about to be processed.  got is the actual output
from the example.  test is the test containing example.  out is the
output function that was passed to .



(out, test, example, exc_info)¶
Report that the given example raised an unexpected exception. This method is
provided to allow subclasses of  to customize their
output; it should not be called directly.
example is the example about to be processed. exc_info is a tuple
containing information about the unexpected exception (as returned by
). test is the test containing example.  out is the
output function that was passed to .



(test, compileflags=None, out=None, clear_globs=True)¶
Run the examples in test (a  object), and display the
results using the writer function out.
The examples are run in the namespace .  If clear_globs is
true (the default), then this namespace will be cleared after the test runs,
to help with garbage collection. If you would like to examine the namespace
after the test completes, then use clear_globs=False.
compileflags gives the set of flags that should be used by the Python
compiler when running the examples.  If not specified, then it will default to
the set of future-import flags that apply to globs.
The output of each example is checked using the ’s
output checker, and the results are formatted by the
 methods.



(verbose=None)¶
Print a summary of all the test cases that have been run by this DocTestRunner,
and return a named tuple .
The optional verbose argument controls how detailed the summary is.  If the
verbosity is not specified, then the ’s verbosity is
used.




OutputChecker objects¶


class ¶
A class used to check the whether the actual output from a doctest example
matches the expected output.   defines two methods:
, which compares a given pair of outputs, and returns true
if they match; and , which returns a string describing
the differences between two outputs.
 defines the following methods:


(want, got, optionflags)¶
Return  iff the actual output from an example (got) matches the
expected output (want).  These strings are always considered to match if
they are identical; but depending on what option flags the test runner is
using, several non-exact match types are also possible.  See section
Option Flags for more information about option flags.



(example, got, optionflags)¶
Return a string describing the differences between the expected output for a
given example (example) and the actual output (got).  optionflags is the
set of option flags used to compare want and got.





Debugging¶
Doctest provides several mechanisms for debugging doctest examples:

Several functions convert doctests to executable Python programs, which can be
run under the Python debugger, .

The  class is a subclass of  that
raises an exception for the first failing example, containing information about
that example. This information can be used to perform post-mortem debugging on
the example.

The  cases generated by  support the
 method defined by .

You can add a call to  in a doctest example, and you’ll
drop into the Python debugger when that line is executed.  Then you can inspect
current values of variables, and so on.  For example, suppose 
contains just this module docstring:


Then an interactive Python session may look like this:




Functions that convert doctests to Python code, and possibly run the synthesized
code under the debugger:


(s)¶
Convert text with examples to a script.
Argument s is a string containing doctest examples.  The string is converted
to a Python script, where doctest examples in s are converted to regular code,
and everything else is converted to Python comments.  The generated script is
returned as a string. For example,


displays:


This function is used internally by other functions (see below), but can also be
useful when you want to transform an interactive Python session into a Python
script.



(module, name)¶
Convert the doctest for an object to a script.
Argument module is a module object, or dotted name of a module, containing the
object whose doctests are of interest.  Argument name is the name (within the
module) of the object with the doctests of interest.  The result is a string,
containing the object’s docstring converted to a Python script, as described for
 above.  For example, if module 
contains a top-level function , then


prints a script version of function ’s docstring, with doctests
converted to code, and the rest placed in comments.



(module, name, pm=False)¶
Debug the doctests for an object.
The module and name arguments are the same as for function
 above.  The synthesized Python script for the named object’s
docstring is written to a temporary file, and then that file is run under the
control of the Python debugger, .
A shallow copy of  is used for both local and global
execution context.
Optional argument pm controls whether post-mortem debugging is used.  If pm
has a true value, the script file is run directly, and the debugger gets
involved only if the script terminates via raising an unhandled exception.  If
it does, then post-mortem debugging is invoked, via ,
passing the traceback object from the unhandled exception.  If pm is not
specified, or is false, the script is run under the debugger from the start, via
passing an appropriate  call to .



(src, pm=False, globs=None)¶
Debug the doctests in a string.
This is like function  above, except that a string containing
doctest examples is specified directly, via the src argument.
Optional argument pm has the same meaning as in function  above.
Optional argument globs gives a dictionary to use as both local and global
execution context.  If not specified, or , an empty dictionary is used.
If specified, a shallow copy of the dictionary is used.

The  class, and the special exceptions it may raise, are of
most interest to testing framework authors, and will only be sketched here.  See
the source code, and especially ’s docstring (which is a
doctest!) for more details:


class (checker=None, verbose=None, optionflags=0)¶
A subclass of  that raises an exception as soon as a
failure is encountered.  If an unexpected exception occurs, an
 exception is raised, containing the test, the
example, and the original exception.  If the output doesn’t match, then a
 exception is raised, containing the test, the example, and
the actual output.
For information about the constructor parameters and methods, see the
documentation for  in section Advanced API.

There are two exceptions that may be raised by  instances:


exception (test, example, got)¶
An exception raised by  to signal that a doctest example’s
actual output did not match its expected output. The constructor arguments are
used to initialize the attributes of the same names.

 defines the following attributes:


¶
The  object that was being run when the example failed.



¶
The  that failed.



¶
The example’s actual output.



exception (test, example, exc_info)¶
An exception raised by  to signal that a doctest
example raised an unexpected exception.  The constructor arguments are used
to initialize the attributes of the same names.

 defines the following attributes:


¶
The  object that was being run when the example failed.



¶
The  that failed.



¶
A tuple containing information about the unexpected exception, as returned by
.



Soapbox¶
As mentioned in the introduction,  has grown to have three primary
uses:

Checking examples in docstrings.
Regression testing.
Executable documentation / literate testing.

These uses have different requirements, and it is important to distinguish them.
In particular, filling your docstrings with obscure test cases makes for bad
documentation.
When writing a docstring, choose docstring examples with care. There’s an art to
this that needs to be learned—it may not be natural at first.  Examples should
add genuine value to the documentation.  A good example can often be worth many
words. If done with care, the examples will be invaluable for your users, and
will pay back the time it takes to collect them many times over as the years go
by and things change.  I’m still amazed at how often one of my 
examples stops working after a “harmless” change.
Doctest also makes an excellent tool for regression testing, especially if you
don’t skimp on explanatory text.  By interleaving prose and examples, it becomes
much easier to keep track of what’s actually being tested, and why.  When a test
fails, good prose can make it much easier to figure out what the problem is, and
how it should be fixed.  It’s true that you could write extensive comments in
code-based testing, but few programmers do. Many have found that using doctest
approaches instead leads to much clearer tests.  Perhaps this is simply because
doctest makes writing prose a little easier than writing code, while writing
comments in code is a little harder.  I think it goes deeper than just that:
the natural attitude when writing a doctest-based test is that you want to
explain the fine points of your software, and illustrate them with examples.
This in turn naturally leads to test files that start with the simplest
features, and logically progress to complications and edge cases.  A coherent
narrative is the result, instead of a collection of isolated functions that test
isolated bits of functionality seemingly at random.  It’s a different attitude,
and produces different results, blurring the distinction between testing and
explaining.
Regression testing is best confined to dedicated objects or files.  There are
several options for organizing tests:

Write text files containing test cases as interactive examples, and test the
files using  or .  This is recommended,
although is easiest to do for new projects, designed from the start to use
doctest.
Define functions named  that consist of single docstrings,
containing test cases for the named topics.  These functions can be included in
the same file as the module, or separated out into a separate test file.
Define a  dictionary mapping from regression test topics to
docstrings containing test cases.

When you have placed your tests in a module, the module can itself be the test
runner.  When a test fails, you can arrange for your test runner to re-run only
the failing doctest while you debug the problem.  Here is a minimal example of
such a test runner:


Footnotes



[1]Examples containing both expected output and an exception are not supported.
Trying to guess where one ends and the other begins is too error-prone, and that
also makes for a confusing test.




