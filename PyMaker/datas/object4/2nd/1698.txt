link:
library/decimal.html#decimal.Context

docs:


class (prec=None, rounding=None, Emin=None, Emax=None, capitals=None, clamp=None, flags=None, traps=None)¶
Creates a new context.  If a field is not specified or is , the
default values are copied from the .  If the flags
field is not specified or is , all flags are cleared.
prec is an integer in the range [, ] that sets
the precision for arithmetic operations in the context.
The rounding option is one of the constants listed in the section
Rounding Modes.
The traps and flags fields list any signals to be set. Generally, new
contexts should only set traps and leave the flags clear.
The Emin and Emax fields are integers specifying the outer limits allowable
for exponents. Emin must be in the range [, ],
Emax in the range [, ].
The capitals field is either  or  (the default). If set to
, exponents are printed with a capital ; otherwise, a
lowercase  is used: .
The clamp field is either  (the default) or .
If set to , the exponent  of a 
instance representable in this context is strictly limited to the
range .  If clamp is
 then a weaker condition holds: the adjusted exponent of
the  instance is at most .  When clamp is
, a large normal number will, where possible, have its
exponent reduced and a corresponding number of zeros added to its
coefficient, in order to fit the exponent constraints; this
preserves the value of the number but loses information about
significant trailing zeros.  For example:


A clamp value of  allows compatibility with the
fixed-width decimal interchange formats specified in IEEE 754.
The  class defines several general purpose methods as well as
a large number of methods for doing arithmetic directly in a given context.
In addition, for each of the  methods described above (with
the exception of the  and  methods) there is
a corresponding  method.  For example, for a 
instance  and  instance ,  is
equivalent to .  Each  method accepts a
Python integer (an instance of ) anywhere that a
Decimal instance is accepted.


()¶
Resets all of the flags to .



()¶
Resets all of the traps to .

New in version 3.3.




()¶
Return a duplicate of the context.



(num)¶
Return a copy of the Decimal instance num.



(num)¶
Creates a new Decimal instance from num but using self as
context. Unlike the  constructor, the context precision,
rounding method, flags, and traps are applied to the conversion.
This is useful because constants are often given to a greater precision
than is needed by the application.  Another benefit is that rounding
immediately eliminates unintended effects from digits beyond the current
precision. In the following example, using unrounded inputs means that
adding zero to a sum can change the result:


This method implements the to-number operation of the IBM specification.
If the argument is a string, no leading or trailing whitespace or
underscores are permitted.



(f)¶
Creates a new Decimal instance from a float f but rounding using self
as the context.  Unlike the  class method,
the context precision, rounding method, flags, and traps are applied to
the conversion.



New in version 3.1.




()¶
Returns a value equal to  which is the minimum exponent
value for subnormal results.  When underflow occurs, the exponent is set
to .



()¶
Returns a value equal to .

The usual approach to working with decimals is to create 
instances and then apply arithmetic operations which take place within the
current context for the active thread.  An alternative approach is to use
context methods for calculating within a specific context.  The methods are
similar to those for the  class and are only briefly
recounted here.


(x)¶
Returns the absolute value of x.



(x, y)¶
Return the sum of x and y.



(x)¶
Returns the same Decimal object x.



(x, y)¶
Compares x and y numerically.



(x, y)¶
Compares the values of the two operands numerically.



(x, y)¶
Compares two operands using their abstract representation.



(x, y)¶
Compares two operands using their abstract representation, ignoring sign.



(x)¶
Returns a copy of x with the sign set to 0.



(x)¶
Returns a copy of x with the sign inverted.



(x, y)¶
Copies the sign from y to x.



(x, y)¶
Return x divided by y.



(x, y)¶
Return x divided by y, truncated to an integer.



(x, y)¶
Divides two numbers and returns the integer part of the result.



(x)¶
Returns e ** x.



(x, y, z)¶
Returns x multiplied by y, plus z.



(x)¶
Returns  if x is canonical; otherwise returns .



(x)¶
Returns  if x is finite; otherwise returns .



(x)¶
Returns  if x is infinite; otherwise returns .



(x)¶
Returns  if x is a qNaN or sNaN; otherwise returns .



(x)¶
Returns  if x is a normal number; otherwise returns .



(x)¶
Returns  if x is a quiet NaN; otherwise returns .



(x)¶
Returns  if x is negative; otherwise returns .



(x)¶
Returns  if x is a signaling NaN; otherwise returns .



(x)¶
Returns  if x is subnormal; otherwise returns .



(x)¶
Returns  if x is a zero; otherwise returns .



(x)¶
Returns the natural (base e) logarithm of x.



(x)¶
Returns the base 10 logarithm of x.



(x)¶
Returns the exponent of the magnitude of the operand’s MSD.



(x, y)¶
Applies the logical operation and between each operand’s digits.



(x)¶
Invert all the digits in x.



(x, y)¶
Applies the logical operation or between each operand’s digits.



(x, y)¶
Applies the logical operation xor between each operand’s digits.



(x, y)¶
Compares two values numerically and returns the maximum.



(x, y)¶
Compares the values numerically with their sign ignored.



(x, y)¶
Compares two values numerically and returns the minimum.



(x, y)¶
Compares the values numerically with their sign ignored.



(x)¶
Minus corresponds to the unary prefix minus operator in Python.



(x, y)¶
Return the product of x and y.



(x)¶
Returns the largest representable number smaller than x.



(x)¶
Returns the smallest representable number larger than x.



(x, y)¶
Returns the number closest to x, in direction towards y.



(x)¶
Reduces x to its simplest form.



(x)¶
Returns an indication of the class of x.



(x)¶
Plus corresponds to the unary prefix plus operator in Python.  This
operation applies the context precision and rounding, so it is not an
identity operation.



(x, y, modulo=None)¶
Return  to the power of , reduced modulo  if given.
With two arguments, compute .  If  is negative then 
must be integral.  The result will be inexact unless  is integral and
the result is finite and can be expressed exactly in ‘precision’ digits.
The rounding mode of the context is used. Results are always correctly-rounded
in the Python version.

Changed in version 3.3: The C module computes  in terms of the correctly-rounded
 and  functions. The result is well-defined but
only “almost always correctly-rounded”.

With three arguments, compute .  For the three argument
form, the following restrictions on the arguments hold:


all three arguments must be integral
 must be nonnegative
at least one of  or  must be nonzero
 must be nonzero and have at most ‘precision’ digits


The value resulting from  is
equal to the value that would be obtained by computing  with unbounded precision, but is computed more
efficiently.  The exponent of the result is zero, regardless of
the exponents of ,  and .  The result is
always exact.



(x, y)¶
Returns a value equal to x (rounded), having the exponent of y.



()¶
Just returns 10, as this is Decimal, :)



(x, y)¶
Returns the remainder from integer division.
The sign of the result, if non-zero, is the same as that of the original
dividend.



(x, y)¶
Returns , where n is the integer nearest the exact value
of  (if the result is 0 then its sign will be the sign of x).



(x, y)¶
Returns a rotated copy of x, y times.



(x, y)¶
Returns  if the two operands have the same exponent.



(x, y)¶
Returns the first operand after adding the second value its exp.



(x, y)¶
Returns a shifted copy of x, y times.



(x)¶
Square root of a non-negative number to context precision.



(x, y)¶
Return the difference between x and y.



(x)¶
Convert to a string, using engineering notation if an exponent is needed.
Engineering notation has an exponent which is a multiple of 3.  This
can leave up to 3 digits to the left of the decimal place and may
require the addition of either one or two trailing zeros.



(x)¶
Rounds to an integer.



(x)¶
Converts a number to a string using scientific notation.

