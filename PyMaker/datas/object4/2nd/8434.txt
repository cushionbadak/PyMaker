link:
library/unittest.html#skipping-tests-and-expected-failures

docs:

Skipping tests and expected failures¶

New in version 3.1.

Unittest supports skipping individual test methods and even whole classes of
tests.  In addition, it supports marking a test as an “expected failure,” a test
that is broken and will fail, but shouldn’t be counted as a failure on a
.
Skipping a test is simply a matter of using the  decorator
or one of its conditional variants.
Basic skipping looks like this:


This is the output of running the example above in verbose mode:


Classes can be skipped just like methods:


 can also skip the test.  This is useful when a resource
that needs to be set up is not available.
Expected failures use the  decorator.


It’s easy to roll your own skipping decorators by making a decorator that calls
 on the test when it wants it to be skipped.  This decorator skips
the test unless the passed object has a certain attribute:


The following decorators implement test skipping and expected failures:


(reason)¶
Unconditionally skip the decorated test.  reason should describe why the
test is being skipped.



(condition, reason)¶
Skip the decorated test if condition is true.



(condition, reason)¶
Skip the decorated test unless condition is true.



¶
Mark the test as an expected failure.  If the test fails it will be
considered a success.  If the test passes, it will be considered a failure.



exception (reason)¶
This exception is raised to skip a test.
Usually you can use  or one of the skipping
decorators instead of raising this directly.

Skipped tests will not have  or  run around them.
Skipped classes will not have  or  run.
Skipped modules will not have  or  run.
