link:
library/optparse.html#conflicts-between-options

docs:

Conflicts between options¶
If you’re not careful, it’s easy to define options with conflicting option
strings:


(This is particularly true if you’ve defined your own OptionParser subclass with
some standard options.)
Every time you add an option,  checks for conflicts with existing
options.  If it finds any, it invokes the current conflict-handling mechanism.
You can set the conflict-handling mechanism either in the constructor:


or with a separate call:


The available conflict handlers are:


 (default)
assume option conflicts are a programming error and raise


resolve option conflicts intelligently (see below)


As an example, let’s define an  that resolves conflicts
intelligently and add conflicting options to it:


At this point,  detects that a previously-added option is already
using the  option string.  Since  is ,
it resolves the situation by removing  from the earlier option’s list of
option strings.  Now  is the only way for the user to activate
that option.  If the user asks for help, the help message will reflect that:


It’s possible to whittle away the option strings for a previously-added option
until there are none left, and the user has no way of invoking that option from
the command-line.  In that case,  removes that option completely,
so it doesn’t show up in help text or anywhere else. Carrying on with our
existing OptionParser:


At this point, the original / option is no longer
accessible, so  removes it, leaving this help text:


