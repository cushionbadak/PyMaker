link:
library/shlex.html#shlex-objects

docs:

shlex Objects¶
A  instance has the following methods:


()¶
Return a token.  If tokens have been stacked using , pop a
token off the stack.  Otherwise, read one from the input stream.  If reading
encounters an immediate end-of-file,  is returned (the empty
string () in non-POSIX mode, and  in POSIX mode).



(str)¶
Push the argument onto the token stack.



()¶
Read a raw token.  Ignore the pushback stack, and do not interpret source
requests.  (This is not ordinarily a useful entry point, and is documented here
only for the sake of completeness.)



(filename)¶
When  detects a source request (see 
below) this method is given the following token as argument, and expected
to return a tuple consisting of a filename and an open file-like object.
Normally, this method first strips any quotes off the argument.  If the result
is an absolute pathname, or there was no previous source request in effect, or
the previous source was a stream (such as ), the result is left
alone.  Otherwise, if the result is a relative pathname, the directory part of
the name of the file immediately before it on the source inclusion stack is
prepended (this behavior is like the way the C preprocessor handles ).
The result of the manipulations is treated as a filename, and returned as the
first component of the tuple, with  called on it to yield the second
component. (Note: this is the reverse of the order of arguments in instance
initialization!)
This hook is exposed so that you can use it to implement directory search paths,
addition of file extensions, and other namespace hacks. There is no
corresponding ‘close’ hook, but a shlex instance will call the
 method of the sourced input stream when it returns
EOF.
For more explicit control of source stacking, use the  and
 methods.



(newstream, newfile=None)¶
Push an input source stream onto the input stack.  If the filename argument is
specified it will later be available for use in error messages.  This is the
same method used internally by the  method.



()¶
Pop the last-pushed input source from the input stack. This is the same method
used internally when the lexer reaches EOF on a stacked input stream.



(infile=None, lineno=None)¶
This method generates an error message leader in the format of a Unix C compiler
error label; the format is , where the  is replaced
with the name of the current source file and the  with the current input
line number (the optional arguments can be used to override these).
This convenience is provided to encourage  users to generate error
messages in the standard, parseable format understood by Emacs and other Unix
tools.

Instances of  subclasses have some public instance
variables which either control lexical analysis or can be used for debugging:


¶
The string of characters that are recognized as comment beginners. All
characters from the comment beginner to end of line are ignored. Includes just
 by default.



¶
The string of characters that will accumulate into multi-character tokens.  By
default, includes all ASCII alphanumerics and underscore.  In POSIX mode, the
accented characters in the Latin-1 set are also included.  If
 is not empty, the characters , which can
appear in filename specifications and command line parameters, will also be
included in this attribute, and any characters which appear in
 will be removed from  if they are present
there.



¶
Characters that will be considered whitespace and skipped.  Whitespace bounds
tokens.  By default, includes space, tab, linefeed and carriage-return.



¶
Characters that will be considered as escape. This will be only used in POSIX
mode, and includes just  by default.



¶
Characters that will be considered string quotes.  The token accumulates until
the same quote is encountered again (thus, different quote types protect each
other as in the shell.)  By default, includes ASCII single and double quotes.



¶
Characters in  that will interpret escape characters defined in
.  This is only used in POSIX mode, and includes just  by
default.



¶
If , tokens will only be split in whitespaces.  This is useful, for
example, for parsing command lines with , getting
tokens in a similar way to shell arguments.  If this attribute is ,
 will have no effect, and splitting will happen
only on whitespaces.  When using , which is
intended to provide parsing closer to that implemented by shells, it is
advisable to leave  as  (the default value).



¶
The name of the current input file, as initially set at class instantiation time
or stacked by later source requests.  It may be useful to examine this when
constructing error messages.



¶
The input stream from which this  instance is reading
characters.



¶
This attribute is  by default.  If you assign a string to it, that
string will be recognized as a lexical-level inclusion request similar to the
 keyword in various shells.  That is, the immediately following token
will be opened as a filename and input will be taken from that stream until
EOF, at which point the  method of that stream will be
called and the input source will again become the original input stream.  Source
requests may be stacked any number of levels deep.



¶
If this attribute is numeric and  or more, a 
instance will print verbose progress output on its behavior.  If you need
to use this, you can read the module source code to learn the details.



¶
Source line number (count of newlines seen so far plus one).



¶
The token buffer.  It may be useful to examine this when catching exceptions.



¶
Token used to determine end of file. This will be set to the empty string
(), in non-POSIX mode, and to  in POSIX mode.



¶
Characters that will be considered punctuation. Runs of punctuation
characters will be returned as a single token. However, note that no
semantic validity checking will be performed: for example, ‘>>>’ could be
returned as a token, even though it may not be recognised as such by shells.

New in version 3.6.


