link:
library/inspect.html#inspect.Parameter

docs:


class (name, kind, *, default=Parameter.empty, annotation=Parameter.empty)¶
Parameter objects are immutable.  Instead of modifying a Parameter object,
you can use  to create a modified copy.

Changed in version 3.5: Parameter objects are picklable and hashable.



¶
A special class-level marker to specify absence of default values and
annotations.



¶
The name of the parameter as a string.  The name must be a valid
Python identifier.

CPython implementation detail: CPython generates implicit parameter names of the form  on the
code objects used to implement comprehensions and generator
expressions.

Changed in version 3.6: These parameter names are exposed by this module as names like
.





¶
The default value for the parameter.  If the parameter has no default
value, this attribute is set to .



¶
The annotation for the parameter.  If the parameter has no annotation,
this attribute is set to .



¶
Describes how argument values are bound to the parameter.  Possible values
(accessible via , like ):






Name
Meaning



POSITIONAL_ONLY
Value must be supplied as a positional
argument.
Python has no explicit syntax for defining
positional-only parameters, but many built-in
and extension module functions (especially
those that accept only one or two parameters)
accept them.


POSITIONAL_OR_KEYWORD
Value may be supplied as either a keyword or
positional argument (this is the standard
binding behaviour for functions implemented
in Python.)

VAR_POSITIONAL
A tuple of positional arguments that aren’t
bound to any other parameter. This
corresponds to a  parameter in a
Python function definition.

KEYWORD_ONLY
Value must be supplied as a keyword argument.
Keyword only parameters are those which
appear after a  or  entry in a
Python function definition.

VAR_KEYWORD
A dict of keyword arguments that aren’t bound
to any other parameter. This corresponds to a
 parameter in a Python function
definition.



Example: print all keyword-only arguments without default values:





(*[, name][, kind][, default][, annotation])¶

Create a new Parameter instance based on the instance replaced was invoked
on.  To override a  attribute, pass the corresponding
argument.  To remove a default value or/and an annotation from a
Parameter, pass .




Changed in version 3.4: In Python 3.3 Parameter objects were allowed to have  set
to  if their  was set to .
This is no longer permitted.


