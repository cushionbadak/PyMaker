link:
library/ctypes.html#ctypes-fundamental-data-types-2

docs:

Fundamental data types¶


class ¶
This non-public class is the base class of all fundamental ctypes data
types. It is mentioned here because it contains the common attributes of the
fundamental ctypes data types.   is a subclass of
, so it inherits their methods and attributes. ctypes data
types that are not and do not contain pointers can now be pickled.
Instances have a single attribute:


¶
This attribute contains the actual value of the instance. For integer and
pointer types, it is an integer, for character types, it is a single
character bytes object or string, for character pointer types it is a
Python bytes object or string.
When the  attribute is retrieved from a ctypes instance, usually
a new object is returned each time.   does not implement
original object return, always a new object is constructed.  The same is
true for all other ctypes object instances.


Fundamental data types, when returned as foreign function call results, or, for
example, by retrieving structure field members or array items, are transparently
converted to native Python types.  In other words, if a foreign function has a
 of , you will always receive a Python bytes
object, not a  instance.
Subclasses of fundamental data types do not inherit this behavior. So, if a
foreign functions  is a subclass of , you will
receive an instance of this subclass from the function call. Of course, you can
get the value of the pointer by accessing the  attribute.
These are the fundamental ctypes data types:


class ¶
Represents the C  datatype, and interprets the value as
small integer.  The constructor accepts an optional integer initializer; no
overflow checking is done.



class ¶
Represents the C  datatype, and interprets the value as a single
character.  The constructor accepts an optional string initializer, the
length of the string must be exactly one character.



class ¶
Represents the C  datatype when it points to a zero-terminated
string.  For a general character pointer that may also point to binary data,
 must be used.  The constructor accepts an integer
address, or a bytes object.



class ¶
Represents the C  datatype.  The constructor accepts an
optional float initializer.



class ¶
Represents the C  datatype.  The constructor accepts an
optional float initializer.  On platforms where  it is an alias to .



class ¶
Represents the C  datatype.  The constructor accepts an
optional float initializer.



class ¶
Represents the C  datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.  On platforms
where  it is an alias to .



class ¶
Represents the C 8-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 16-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 32-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 64-bit  datatype.  Usually an alias for
.



class ¶
Represents the C  datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.



class ¶
Represents the C  datatype.  The constructor accepts
an optional integer initializer; no overflow checking is done.



class ¶
Represents the C  datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.



class ¶
Represents the C  datatype.



class ¶
Represents the C  datatype.

New in version 3.2.




class ¶
Represents the C  datatype, it interprets the value as
small integer.  The constructor accepts an optional integer initializer; no
overflow checking is done.



class ¶
Represents the C  datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.  On platforms
where  it is an alias for .



class ¶
Represents the C 8-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 16-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 32-bit  datatype.  Usually an alias for
.



class ¶
Represents the C 64-bit  datatype.  Usually an alias for
.



class ¶
Represents the C  datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.



class ¶
Represents the C  datatype.  The constructor
accepts an optional integer initializer; no overflow checking is done.



class ¶
Represents the C  datatype.  The constructor accepts
an optional integer initializer; no overflow checking is done.



class ¶
Represents the C  type.  The value is represented as integer.
The constructor accepts an optional integer initializer.



class ¶
Represents the C  datatype, and interprets the value as a
single character unicode string.  The constructor accepts an optional string
initializer, the length of the string must be exactly one character.



class ¶
Represents the C  datatype, which must be a pointer to a
zero-terminated wide character string.  The constructor accepts an integer
address, or a string.



class ¶
Represent the C  datatype (more accurately,  from
C99).  Its value can be  or , and the constructor accepts any object
that has a truth value.



class ¶
Windows only: Represents a  value, which contains success or
error information for a function or method call.



class ¶
Represents the C  datatype.  Calling this without an
argument creates a   pointer.

The  module provides quite some other Windows specific
data types, for example , , or .  Some
useful structures like  or  are also defined.
