link:
library/time.html

docs:


 — Time access and conversions¶

This module provides various time-related functions. For related
functionality, see also the  and  modules.
Although this module is always available,
not all functions are available on all platforms.  Most of the functions
defined in this module call platform C library functions with the same name.  It
may sometimes be helpful to consult the platform documentation, because the
semantics of these functions varies among platforms.
An explanation of some terminology and conventions is in order.

The epoch is the point where the time starts, and is platform
dependent.  For Unix, the epoch is January 1, 1970, 00:00:00 (UTC).
To find out what the epoch is on a given platform, look at
.


The term seconds since the epoch refers to the total number
of elapsed seconds since the epoch, typically excluding
leap seconds.  Leap seconds are excluded from this total on all
POSIX-compliant platforms.


The functions in this module may not handle dates and times before the epoch or
far in the future.  The cut-off point in the future is determined by the C
library; for 32-bit systems, it is typically in 2038.


Year 2000 (Y2K) issues: Python depends on the platform’s C library, which
generally doesn’t have year 2000 issues, since all dates and times are
represented internally as seconds since the epoch.  Function 
can parse 2-digit years when given  format code.  When 2-digit years are
parsed, they are converted according to the POSIX and ISO C standards: values
69–99 are mapped to 1969–1999, and values 0–68 are mapped to 2000–2068.


UTC is Coordinated Universal Time (formerly known as Greenwich Mean Time, or
GMT).  The acronym UTC is not a mistake but a compromise between English and
French.


DST is Daylight Saving Time, an adjustment of the timezone by (usually) one
hour during part of the year.  DST rules are magic (determined by local law) and
can change from year to year.  The C library has a table containing the local
rules (often it is read from a system file for flexibility) and is the only
source of True Wisdom in this respect.

The precision of the various real-time functions may be less than suggested by
the units in which their value or argument is expressed. E.g. on most Unix
systems, the clock “ticks” only 50 or 100 times a second.

On the other hand, the precision of  and  is better
than their Unix equivalents: times are expressed as floating point numbers,
 returns the most accurate time available (using Unix
 where available), and  will accept a time
with a nonzero fraction (Unix  is used to implement this, where
available).

The time value as returned by , , and
, and accepted by ,  and
, is a sequence of 9 integers.  The return values of
, , and  also offer attribute
names for individual fields.
See  for a description of these objects.

Changed in version 3.3: The  type was extended to provide the 
and  attributes when platform supports corresponding
 members.


Changed in version 3.6: The  attributes  and 
are now available on all platforms.


Use the following functions to convert between time representations:







From
To
Use



seconds since the epoch
 in
UTC


seconds since the epoch
 in
local time


 in
UTC
seconds since the epoch


 in
local time
seconds since the epoch







Functions¶


([t])¶
Convert a tuple or  representing a time as returned by
 or  to a string of the following
form: .  If t is not provided, the current time
as returned by  is used. Locale information is not used by
.

Note
Unlike the C function of the same name,  does not add a
trailing newline.




()¶
On Unix, return the current processor time as a floating point number expressed
in seconds.  The precision, and in fact the very definition of the meaning of
“processor time”, depends on that of the C function of the same name.
On Windows, this function returns wall-clock seconds elapsed since the first
call to this function, as a floating point number, based on the Win32 function
. The resolution is typically better than one
microsecond.

Deprecated since version 3.3, will be removed in version 3.8: The behaviour of this function depends on the platform: use
 or  instead, depending on your
requirements, to have a well defined behaviour.




(thread_id)¶
Return the clk_id of the thread-specific CPU-time clock for the specified thread_id.
Use  or the 
attribute of  objects to get a suitable value
for thread_id.

Warning
Passing an invalid or expired thread_id may result in
undefined behavior, such as segmentation fault.

Availability: Unix (see the man page for pthread_getcpuclockid(3) for
further information).

New in version 3.7.




(clk_id)¶
Return the resolution (precision) of the specified clock clk_id.  Refer to
Clock ID Constants for a list of accepted values for clk_id.
Availability: Unix.

New in version 3.3.




(clk_id) → float¶
Return the time of the specified clock clk_id.  Refer to
Clock ID Constants for a list of accepted values for clk_id.
Availability: Unix.

New in version 3.3.




(clk_id) → int¶
Similar to  but return time as nanoseconds.
Availability: Unix.

New in version 3.7.




(clk_id, time: float)¶
Set the time of the specified clock clk_id.  Currently,
 is the only accepted value for clk_id.
Availability: Unix.

New in version 3.3.




(clk_id, time: int)¶
Similar to  but set time with nanoseconds.
Availability: Unix.

New in version 3.7.




([secs])¶
Convert a time expressed in seconds since the epoch to a string representing
local time. If secs is not provided or , the current time as
returned by  is used.   is equivalent to
. Locale information is not used by .



(name)¶
Get information on the specified clock as a namespace object.
Supported clock names and the corresponding functions to read their value
are:

: 
: 
: 
: 
: 
: 

The result has the following attributes:

adjustable:  if the clock can be changed automatically (e.g. by
a NTP daemon) or manually by the system administrator,  otherwise
implementation: The name of the underlying C function used to get
the clock value.  Refer to Clock ID Constants for possible values.
monotonic:  if the clock cannot go backward,
 otherwise
resolution: The resolution of the clock in seconds ()


New in version 3.3.




([secs])¶
Convert a time expressed in seconds since the epoch to a  in
UTC in which the dst flag is always zero.  If secs is not provided or
, the current time as returned by  is used.  Fractions
of a second are ignored.  See above for a description of the
 object. See  for the inverse of this
function.



([secs])¶
Like  but converts to local time.  If secs is not provided or
, the current time as returned by  is used.  The dst
flag is set to  when DST applies to the given time.



(t)¶
This is the inverse function of .  Its argument is the
 or full 9-tuple (since the dst flag is needed; use 
as the dst flag if it is unknown) which expresses the time in local time, not
UTC.  It returns a floating point number, for compatibility with .
If the input value cannot be represented as a valid time, either
 or  will be raised (which depends on
whether the invalid value is caught by Python or the underlying C libraries).
The earliest date for which it can generate a time is platform-dependent.



() → float¶
Return the value (in fractional seconds) of a monotonic clock, i.e. a clock
that cannot go backwards.  The clock is not affected by system clock updates.
The reference point of the returned value is undefined, so that only the
difference between the results of consecutive calls is valid.

New in version 3.3.


Changed in version 3.5: The function is now always available and always system-wide.




() → int¶
Similar to , but return time as nanoseconds.

New in version 3.7.




() → float¶
Return the value (in fractional seconds) of a performance counter, i.e. a
clock with the highest available resolution to measure a short duration.  It
does include time elapsed during sleep and is system-wide.  The reference
point of the returned value is undefined, so that only the difference between
the results of consecutive calls is valid.

New in version 3.3.




() → int¶
Similar to , but return time as nanoseconds.

New in version 3.7.




() → float¶
Return the value (in fractional seconds) of the sum of the system and user
CPU time of the current process.  It does not include time elapsed during
sleep.  It is process-wide by definition.  The reference point of the
returned value is undefined, so that only the difference between the results
of consecutive calls is valid.

New in version 3.3.




() → int¶
Similar to  but return time as nanoseconds.

New in version 3.7.




(secs)¶
Suspend execution of the calling thread for the given number of seconds.
The argument may be a floating point number to indicate a more precise sleep
time. The actual suspension time may be less than that requested because any
caught signal will terminate the  following execution of that
signal’s catching routine.  Also, the suspension time may be longer than
requested by an arbitrary amount because of the scheduling of other activity
in the system.

Changed in version 3.5: The function now sleeps at least secs even if the sleep is interrupted
by a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale).




(format[, t])¶
Convert a tuple or  representing a time as returned by
 or  to a string as specified by the format
argument.  If t is not provided, the current time as returned by
 is used.  format must be a string.   is
raised if any field in t is outside of the allowed range.
0 is a legal argument for any position in the time tuple; if it is normally
illegal the value is forced to a correct one.
The following directives can be embedded in the format string. They are shown
without the optional field width and precision specification, and are replaced
by the indicated characters in the  result:







Directive
Meaning
Notes




Locale’s abbreviated weekday name.
 


Locale’s full weekday name.
 


Locale’s abbreviated month name.
 


Locale’s full month name.
 


Locale’s appropriate date and time
representation.
 


Day of the month as a decimal number [01,31].
 


Hour (24-hour clock) as a decimal number
[00,23].
 


Hour (12-hour clock) as a decimal number
[01,12].
 


Day of the year as a decimal number [001,366].
 


Month as a decimal number [01,12].
 


Minute as a decimal number [00,59].
 


Locale’s equivalent of either AM or PM.
(1)


Second as a decimal number [00,61].
(2)


Week number of the year (Sunday as the first
day of the week) as a decimal number [00,53].
All days in a new year preceding the first
Sunday are considered to be in week 0.
(3)


Weekday as a decimal number [0(Sunday),6].
 


Week number of the year (Monday as the first
day of the week) as a decimal number [00,53].
All days in a new year preceding the first
Monday are considered to be in week 0.
(3)


Locale’s appropriate date representation.
 


Locale’s appropriate time representation.
 


Year without century as a decimal number
[00,99].
 


Year with century as a decimal number.
 


Time zone offset indicating a positive or
negative time difference from UTC/GMT of the
form +HHMM or -HHMM, where H represents decimal
hour digits and M represents decimal minute
digits [-23:59, +23:59].
 


Time zone name (no characters if no time zone
exists).
 


A literal  character.
 



Notes:

When used with the  function, the  directive only affects
the output hour field if the  directive is used to parse the hour.
The range really is  to ; value  is valid in
timestamps representing leap seconds and value  is supported
for historical reasons.
When used with the  function,  and  are only used in
calculations when the day of the week and the year are specified.

Here is an example, a format for dates compatible with that specified  in the
RFC 2822 Internet email standard.  [1]


Additional directives may be supported on certain platforms, but only the
ones listed here have a meaning standardized by ANSI C.  To see the full set
of format codes supported on your platform, consult the strftime(3)
documentation.
On some platforms, an optional field width and precision specification can
immediately follow the initial  of a directive in the following order;
this is also not portable. The field width is normally 2 except for  where
it is 3.



(string[, format])¶
Parse a string representing a time according to a format.  The return value
is a  as returned by  or
.
The format parameter uses the same directives as those used by
; it defaults to  which matches the
formatting returned by . If string cannot be parsed according
to format, or if it has excess data after parsing,  is
raised. The default values used to fill in any missing data when more
accurate values cannot be inferred are .
Both string and format must be strings.
For example:


Support for the  directive is based on the values contained in 
and whether  is true.  Because of this, it is platform-specific
except for recognizing UTC and GMT which are always known (and are considered to
be non-daylight savings timezones).
Only the directives specified in the documentation are supported.  Because
 is implemented per platform it can sometimes offer more
directives than those listed.  But  is independent of any platform
and thus does not necessarily support all directives available that are not
documented as supported.



class ¶
The type of the time value sequence returned by ,
, and .  It is an object with a named
tuple interface: values can be accessed by index and by attribute name.  The
following values are present:







Index
Attribute
Values



0

(for example, 1993)

1

range [1, 12]

2

range [1, 31]

3

range [0, 23]

4

range [0, 59]

5

range [0, 61]; see (2) in
 description

6

range [0, 6], Monday is 0

7

range [1, 366]

8

0, 1 or -1; see below

N/A

abbreviation of timezone name

N/A

offset east of UTC in seconds



Note that unlike the C structure, the month value is a range of [1, 12], not
[0, 11].
In calls to ,  may be set to 1 when daylight
savings time is in effect, and 0 when it is not.  A value of -1 indicates that
this is not known, and will usually result in the correct state being filled in.
When a tuple with an incorrect length is passed to a function expecting a
, or having elements of the wrong type, a
 is raised.



() → float¶
Return the time in seconds since the epoch as a floating point
number. The specific date of the epoch and the handling of
leap seconds is platform dependent.
On Windows and most Unix systems, the epoch is January 1, 1970,
00:00:00 (UTC) and leap seconds are not counted towards the time
in seconds since the epoch. This is commonly referred to as
Unix time.
To find out what the epoch is on a given platform, look at
.
Note that even though the time is always returned as a floating point
number, not all systems provide time with a better precision than 1 second.
While this function normally returns non-decreasing values, it can return a
lower value than a previous call if the system clock has been set back
between the two calls.
The number returned by  may be converted into a more common
time format (i.e. year, month, day, hour, etc…) in UTC by passing it to
 function or in local time by passing it to the
 function. In both cases a
 object is returned, from which the components
of the calendar date may be accessed as attributes.



() → float¶
Return the value (in fractional seconds) of the sum of the system and user
CPU time of the current thread.  It does not include time elapsed during
sleep.  It is thread-specific by definition.  The reference point of the
returned value is undefined, so that only the difference between the results
of consecutive calls in the same thread is valid.
Availability: Windows, Linux, Unix systems supporting
.

New in version 3.7.




() → int¶
Similar to  but return time as nanoseconds.

New in version 3.7.




() → int¶
Similar to  but returns time as an integer number of nanoseconds
since the epoch.

New in version 3.7.




()¶
Reset the time conversion rules used by the library routines. The environment
variable  specifies how this is done. It will also set the variables
 (from the  environment variable),  (non-DST
seconds West of UTC),  (DST seconds west of UTC) and 
(to 0 if this timezone does not have any daylight saving time rules, or to
nonzero if there is a time, past, present or future when daylight saving time
applies).
Availability: Unix.

Note
Although in many cases, changing the  environment variable may
affect the output of functions like  without calling
, this behavior should not be relied on.
The  environment variable should contain no whitespace.

The standard format of the  environment variable is (whitespace
added for clarity):


Where the components are:

 and 
Three or more alphanumerics giving the timezone abbreviations. These will be
propagated into time.tzname

The offset has the form: . This indicates the value
added the local time to arrive at UTC.  If preceded by a ‘-‘, the timezone
is east of the Prime Meridian; otherwise, it is west. If no offset follows
dst, summer time is assumed to be one hour ahead of standard time.

Indicates when to change to and back from DST. The format of the
start and end dates are one of the following:


The Julian day n (1 <= n <= 365). Leap days are not counted, so in
all years February 28 is day 59 and March 1 is day 60.

The zero-based Julian day (0 <= n <= 365). Leap days are counted, and
it is possible to refer to February 29.

The d’th day (0 <= d <= 6) of week n of month m of the year (1
<= n <= 5, 1 <= m <= 12, where week 5 means “the last d day in
month m” which may occur in either the fourth or the fifth
week). Week 1 is the first week in which the d’th day occurs. Day
zero is a Sunday.

 has the same format as  except that no leading sign
(‘-‘ or ‘+’) is allowed. The default, if time is not given, is 02:00:00.




On many Unix systems (including *BSD, Linux, Solaris, and Darwin), it is more
convenient to use the system’s zoneinfo (tzfile(5))  database to
specify the timezone rules. To do this, set the   environment
variable to the path of the required timezone  datafile, relative to the root of
the systems ‘zoneinfo’ timezone database, usually located at
. For example,  ,
,  or  .





Clock ID Constants¶
These constants are used as parameters for  and
.


¶
Identical to , except it also includes any time that
the system is suspended.
This allows applications to get a suspend-aware monotonic  clock  without
having to deal with the complications of , which may
have  discontinuities if the time is changed using  or
similar.
Availability: Linux 2.6.39 or later.

New in version 3.7.




¶
The Solaris OS has a  timer that attempts to use an optimal
hardware source, and may give close to nanosecond resolution.
 is the nonadjustable, high-resolution clock.
Availability: Solaris.

New in version 3.3.




¶
Clock that cannot be set and represents monotonic time since some unspecified
starting point.
Availability: Unix.

New in version 3.3.




¶
Similar to , but provides access to a raw
hardware-based time that is not subject to NTP adjustments.
Availability: Linux 2.6.28 and newer, macOS 10.12 and newer.

New in version 3.3.




¶
High-resolution per-process timer from the CPU.
Availability: Unix.

New in version 3.3.




¶
High-resolution per-process timer from the CPU.
Availability: FreeBSD, NetBSD 7 or later, OpenBSD.

New in version 3.7.




¶
Thread-specific CPU-time clock.
Availability: Unix.

New in version 3.3.




¶
Time whose absolute value is the time the system has been running and not
suspended, providing accurate uptime measurement, both absolute and
interval.
Availability: FreeBSD, OpenBSD 5.5 or later.

New in version 3.7.


The following constant is the only parameter that can be sent to
.


¶
System-wide real-time clock.  Setting this clock requires appropriate
privileges.
Availability: Unix.

New in version 3.3.




Timezone Constants¶


¶
The offset of the local DST timezone, in seconds west of UTC, if one is defined.
This is negative if the local DST timezone is east of UTC (as in Western Europe,
including the UK).  Only use this if  is nonzero.  See note below.



¶
Nonzero if a DST timezone is defined.  See note below.



¶
The offset of the local (non-DST) timezone, in seconds west of UTC (negative in
most of Western Europe, positive in the US, zero in the UK).  See note below.



¶
A tuple of two strings: the first is the name of the local non-DST timezone, the
second is the name of the local DST timezone.  If no DST timezone is defined,
the second string should not be used.  See note below.


Note
For the above Timezone constants (, , ,
and ), the value is determined by the timezone rules in effect
at module load time or the last time  is called and may be incorrect
for times in the past.  It is recommended to use the  and
 results from  to obtain timezone information.


See also

Module 
More object-oriented interface to dates and times.
Module 
Internationalization services.  The locale setting affects the interpretation
of many format specifiers in  and .
Module 
General calendar-related functions.    is the
inverse of  from this module.


Footnotes



[1]The use of  is now deprecated, but the  escape that expands to the
preferred  hour/minute offset is not supported by all ANSI C libraries. Also, a
strict reading of the original 1982 RFC 822 standard calls for a two-digit
year (%y rather than %Y), but practice moved to 4-digit years long before the
year 2000.  After that, RFC 822 became obsolete and the 4-digit year has
been first recommended by RFC 1123 and then mandated by RFC 2822.




