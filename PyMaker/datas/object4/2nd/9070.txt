link:
library/tracemalloc.html#examples

docs:

Examples¶

Display the top 10¶
Display the 10 files allocating the most memory:


Example of output of the Python test suite:


We can see that Python loaded  data (bytecode and constants) from
modules and that the  module allocated  to build
 types.
See  for more options.


Compute differences¶
Take two snapshots and display the differences:


Example of output before/after running some tests of the Python test suite:


We can see that Python has loaded  of module data (bytecode and
constants), and that this is  more than had been loaded before the
tests, when the previous snapshot was taken. Similarly, the 
module has cached  of Python source code to format tracebacks, all
of it since the previous snapshot.
If the system has little free memory, snapshots can be written on disk using
the  method to analyze the snapshot offline. Then use the
 method reload the snapshot.


Get the traceback of a memory block¶
Code to display the traceback of the biggest memory block:


Example of output of the Python test suite (traceback limited to 25 frames):


We can see that the most memory was allocated in the  module to
load data (bytecode and constants) from modules: . The traceback is
where the  loaded data most recently: on the 
line of the  module. The traceback may change if a new module is
loaded.


Pretty top¶
Code to display the 10 lines allocating the most memory with a pretty output,
ignoring  and  files:


Example of output of the Python test suite:


See  for more options.

