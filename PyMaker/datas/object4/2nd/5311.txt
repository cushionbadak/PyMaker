link:
library/select.html

docs:


 — Waiting for I/O completion¶

This module provides access to the  and  functions
available in most operating systems,  available on
Solaris and derivatives,  available on Linux 2.5+ and
 available on most BSD.
Note that on Windows, it only works for sockets; on other operating systems,
it also works for other file types (in particular, on Unix, it works on pipes).
It cannot be used on regular files to determine whether a file has grown since
it was last read.

Note
The  module allows high-level and efficient I/O
multiplexing, built upon the  module primitives. Users are
encouraged to use the  module instead, unless they want
precise control over the OS-level primitives used.

The module defines the following:


exception ¶
A deprecated alias of .

Changed in version 3.3: Following PEP 3151, this class was made an alias of .




()¶
(Only supported on Solaris and derivatives.)  Returns a 
polling object; see section /dev/poll Polling Objects below for the
methods supported by devpoll objects.
 objects are linked to the number of file
descriptors allowed at the time of instantiation. If your program
reduces this value,  will fail. If your program
increases this value,  may return an
incomplete list of active file descriptors.
The new file descriptor is non-inheritable.

New in version 3.3.


Changed in version 3.4: The new file descriptor is now non-inheritable.




(sizehint=-1, flags=0)¶
(Only supported on Linux 2.5.44 and newer.) Return an edge polling object,
which can be used as Edge or Level Triggered interface for I/O
events.
sizehint informs epoll about the expected number of events to be
registered.  It must be positive, or -1 to use the default. It is only
used on older systems where  is not available;
otherwise it has no effect (though its value is still checked).
flags is deprecated and completely ignored.  However, when supplied, its
value must be  or , otherwise  is
raised.
See the Edge and Level Trigger Polling (epoll) Objects section below for the methods supported by
epolling objects.
 objects support the context management protocol: when used in a
 statement, the new file descriptor is automatically closed
at the end of the block.
The new file descriptor is non-inheritable.

Changed in version 3.3: Added the flags parameter.


Changed in version 3.4: Support for the  statement was added.
The new file descriptor is now non-inheritable.


Deprecated since version 3.4: The flags parameter.   is used by default now.
Use  to make the file descriptor inheritable.




()¶
(Not supported by all operating systems.)  Returns a polling object, which
supports registering and unregistering file descriptors, and then polling them
for I/O events; see section Polling Objects below for the methods supported
by polling objects.



()¶
(Only supported on BSD.)  Returns a kernel queue object; see section
Kqueue Objects below for the methods supported by kqueue objects.
The new file descriptor is non-inheritable.

Changed in version 3.4: The new file descriptor is now non-inheritable.




(ident, filter=KQ_FILTER_READ, flags=KQ_EV_ADD, fflags=0, data=0, udata=0)¶
(Only supported on BSD.)  Returns a kernel event object; see section
Kevent Objects below for the methods supported by kevent objects.



(rlist, wlist, xlist[, timeout])¶
This is a straightforward interface to the Unix  system call.
The first three arguments are sequences of ‘waitable objects’: either
integers representing file descriptors or objects with a parameterless method
named  returning such an integer:

rlist: wait until ready for reading
wlist: wait until ready for writing
xlist: wait for an “exceptional condition” (see the manual page for what
your system considers such a condition)

Empty sequences are allowed, but acceptance of three empty sequences is
platform-dependent. (It is known to work on Unix but not on Windows.)  The
optional timeout argument specifies a time-out as a floating point number
in seconds.  When the timeout argument is omitted the function blocks until
at least one file descriptor is ready.  A time-out value of zero specifies a
poll and never blocks.
The return value is a triple of lists of objects that are ready: subsets of the
first three arguments.  When the time-out is reached without a file descriptor
becoming ready, three empty lists are returned.
Among the acceptable object types in the sequences are Python file
objects (e.g. , or objects returned by
 or ), socket objects returned by
.  You may also define a wrapper class yourself,
as long as it has an appropriate  method (that
really returns a file descriptor, not just a random integer).

Note
File objects on Windows are not acceptable, but sockets are.  On Windows,
the underlying  function is provided by the WinSock
library, and does not handle file descriptors that don’t originate from
WinSock.


Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by
a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale), instead of raising
.




¶
The minimum number of bytes which can be written without blocking to a pipe
when the pipe has been reported as ready for writing by ,
 or another interface in this module.  This doesn’t apply
to other kind of file-like objects such as sockets.
This value is guaranteed by POSIX to be at least 512.
Availability: Unix

New in version 3.2.



 Polling Objects¶
Solaris and derivatives have . While  is
O(highest file descriptor) and  is O(number of file
descriptors),  is O(active file descriptors).
 behaviour is very close to the standard 
object.


()¶
Close the file descriptor of the polling object.

New in version 3.4.




¶
 if the polling object is closed.

New in version 3.4.




()¶
Return the file descriptor number of the polling object.

New in version 3.4.




(fd[, eventmask])¶
Register a file descriptor with the polling object.  Future calls to the
 method will then check whether the file descriptor has any
pending I/O events.  fd can be either an integer, or an object with a
 method that returns an integer.  File objects
implement , so they can also be used as the argument.
eventmask is an optional bitmask describing the type of events you want to
check for. The constants are the same that with 
object. The default value is a combination of the constants ,
, and .

Warning
Registering a file descriptor that’s already registered is not an
error, but the result is undefined. The appropriate action is to
unregister or modify it first. This is an important difference
compared with .




(fd[, eventmask])¶
This method does an  followed by a
. It is (a bit) more efficient that doing the same
explicitly.



(fd)¶
Remove a file descriptor being tracked by a polling object.  Just like the
 method, fd can be an integer or an object with a
 method that returns an integer.
Attempting to remove a file descriptor that was never registered is
safely ignored.



([timeout])¶
Polls the set of registered file descriptors, and returns a possibly-empty list
containing  2-tuples for the descriptors that have events or
errors to report. fd is the file descriptor, and event is a bitmask with
bits set for the reported events for that descriptor —  for
waiting input,  to indicate that the descriptor can be written
to, and so forth. An empty list indicates that the call timed out and no file
descriptors had any events to report. If timeout is given, it specifies the
length of time in milliseconds which the system will wait for events before
returning. If timeout is omitted, -1, or , the call will
block until there is an event for this poll object.

Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by
a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale), instead of raising
.




Edge and Level Trigger Polling (epoll) Objects¶

https://linux.die.net/man/4/epoll
eventmask






Constant
Meaning




Available for read


Available for write


Urgent data for read


Error condition happened on the assoc. fd


Hang up happened on the assoc. fd


Set Edge Trigger behavior, the default is
Level Trigger behavior


Set one-shot behavior. After one event is
pulled out, the fd is internally disabled


Wake only one epoll object when the
associated fd has an event. The default (if
this flag is not set) is to wake all epoll
objects polling on a fd.


Stream socket peer closed connection or shut
down writing half of connection.


Equivalent to 


Priority data band can be read.


Equivalent to 


Priority data may be written.


Ignored.




New in version 3.6:  was added.  It’s only supported by Linux Kernel 4.5
or later.




()¶
Close the control file descriptor of the epoll object.



¶
 if the epoll object is closed.



()¶
Return the file descriptor number of the control fd.



(fd)¶
Create an epoll object from a given file descriptor.



(fd[, eventmask])¶
Register a fd descriptor with the epoll object.



(fd, eventmask)¶
Modify a registered file descriptor.



(fd)¶
Remove a registered file descriptor from the epoll object.



(timeout=-1, maxevents=-1)¶
Wait for events. timeout in seconds (float)

Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by
a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale), instead of raising
.




Polling Objects¶
The  system call, supported on most Unix systems, provides better
scalability for network servers that service many, many clients at the same
time.  scales better because the system call only requires listing
the file descriptors of interest, while  builds a bitmap, turns
on bits for the fds of interest, and then afterward the whole bitmap has to be
linearly scanned again.  is O(highest file descriptor), while
 is O(number of file descriptors).


(fd[, eventmask])¶
Register a file descriptor with the polling object.  Future calls to the
 method will then check whether the file descriptor has any
pending I/O events.  fd can be either an integer, or an object with a
 method that returns an integer.  File objects
implement , so they can also be used as the argument.
eventmask is an optional bitmask describing the type of events you want to
check for, and can be a combination of the constants ,
, and , described in the table below.  If not
specified, the default value used will check for all 3 types of events.






Constant
Meaning




There is data to read


There is urgent data to read


Ready for output: writing will not block


Error condition of some sort


Hung up


Stream socket peer closed connection, or
shut down writing half of connection


Invalid request: descriptor not open



Registering a file descriptor that’s already registered is not an error, and has
the same effect as registering the descriptor exactly once.



(fd, eventmask)¶
Modifies an already registered fd. This has the same effect as
.  Attempting to modify a file descriptor
that was never registered causes an  exception with errno
 to be raised.



(fd)¶
Remove a file descriptor being tracked by a polling object.  Just like the
 method, fd can be an integer or an object with a
 method that returns an integer.
Attempting to remove a file descriptor that was never registered causes a
 exception to be raised.



([timeout])¶
Polls the set of registered file descriptors, and returns a possibly-empty list
containing  2-tuples for the descriptors that have events or
errors to report. fd is the file descriptor, and event is a bitmask with
bits set for the reported events for that descriptor —  for
waiting input,  to indicate that the descriptor can be written
to, and so forth. An empty list indicates that the call timed out and no file
descriptors had any events to report. If timeout is given, it specifies the
length of time in milliseconds which the system will wait for events before
returning. If timeout is omitted, negative, or , the call will
block until there is an event for this poll object.

Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by
a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale), instead of raising
.




Kqueue Objects¶


()¶
Close the control file descriptor of the kqueue object.



¶
 if the kqueue object is closed.



()¶
Return the file descriptor number of the control fd.



(fd)¶
Create a kqueue object from a given file descriptor.



(changelist, max_events[, timeout=None]) → eventlist¶
Low level interface to kevent

changelist must be an iterable of kevent object or 
max_events must be 0 or a positive integer
timeout in seconds (floats possible)


Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by
a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale), instead of raising
.




Kevent Objects¶
https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2


¶
Value used to identify the event. The interpretation depends on the filter
but it’s usually the file descriptor. In the constructor ident can either
be an int or an object with a  method. kevent
stores the integer internally.



¶
Name of the kernel filter.






Constant
Meaning




Takes a descriptor and returns whenever
there is data available to read


Takes a descriptor and returns whenever
there is data available to write


AIO requests


Returns when one or more of the requested
events watched in fflag occurs


Watch for events on a process id


Watch for events on a network device
[not available on Mac OS X]


Returns whenever the watched signal is
delivered to the process


Establishes an arbitrary timer






¶
Filter action.






Constant
Meaning




Adds or modifies an event


Removes an event from the queue


Permitscontrol() to returns the event


Disablesevent


Removes event after first occurrence


Reset the state after an event is retrieved


internal event


internal event


Filter specific EOF condition


See return values






¶
Filter specific flags.
 and   filter flags:






Constant
Meaning




low water mark of a socket buffer



 filter flags:






Constant
Meaning




unlink() was called


a write occurred


the file was extended


an attribute was changed


the link count has changed


the file was renamed


access to the file was revoked



 filter flags:






Constant
Meaning




the process has exited


the process has called fork()


the process has executed a new process


internal filter flag


internal filter flag


follow a process across fork()


returned on the child process for
NOTE_TRACK


unable to attach to a child



 filter flags (not available on Mac OS X):






Constant
Meaning




link is up


link is down


link state is invalid






¶
Filter specific data.



¶
User defined value.



