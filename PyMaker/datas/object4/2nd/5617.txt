link:
library/email.headerregistry.html#email.headerregistry.BaseHeader

docs:


class (name, value)¶
name and value are passed to  from the
 call.  The string value of
any header object is the value fully decoded to unicode.
This base class defines the following read-only properties:


¶
The name of the header (the portion of the field before the ‘:’).  This
is exactly the value passed in the
 call for name; that
is, case is preserved.



¶
A tuple of  instances reporting any
RFC compliance problems found during parsing.  The email package tries to
be complete about detecting compliance issues.  See the 
module for a discussion of the types of defects that may be reported.



¶
The maximum number of headers of this type that can have the same
.  A value of  means unlimited.  The  value
for this attribute is ; it is expected that specialized header
classes will override this value as needed.

 also provides the following method, which is called by the
email library code and should not in general be called by application
programs:


(*, policy)¶
Return a string containing 
characters as required to correctly fold the header according to
policy.  A  of  will be
treated as if it were , since headers may not contain arbitrary
binary data.  If  is ,
non-ASCII data will be RFC 2047 encoded.

 by itself cannot be used to create a header object.  It
defines a protocol that each specialized header cooperates with in order to
produce the header object.  Specifically,  requires that
the specialized class provide a  named .  This
method is called as follows:


 is a dictionary containing one pre-initialized key, .
 is an empty list.  The parse method should append any detected
defects to this list.  On return, the  dictionary must contain
values for at least the keys  and .  
should be the string value for the header (that is, the header value fully
decoded to unicode).  The parse method should assume that string may
contain content-transfer-encoded parts, but should correctly handle all valid
unicode characters as well so that it can parse un-encoded header values.
’s  then creates the header instance, and calls its
 method.  The specialized class only needs to provide an 
method if it wishes to set additional attributes beyond those provided by
 itself.  Such an  method should look like this:


That is, anything extra that the specialized class puts in to the 
dictionary should be removed and handled, and the remaining contents of
 (and ) passed to the   method.
