link:
library/stdtypes.html#memory-views

docs:

Memory Views¶
 objects allow Python code to access the internal data
of an object that supports the buffer protocol without
copying.


class (obj)¶
Create a  that references obj.  obj must support the
buffer protocol.  Built-in objects that support the buffer protocol include
 and .
A  has the notion of an element, which is the
atomic memory unit handled by the originating object obj.  For many
simple types such as  and , an element
is a single byte, but other types such as  may have
bigger elements.
 is equal to the length of .
If , the length is 1. If , the length
is equal to the number of elements in the view. For higher dimensions,
the length is equal to the length of the nested list representation of
the view. The  attribute will give you the
number of bytes in a single element.
A  supports slicing and indexing to expose its data.
One-dimensional slicing will result in a subview:


If  is one of the native format specifiers
from the  module, indexing with an integer or a tuple of
integers is also supported and returns a single element with
the correct type.  One-dimensional memoryviews can be indexed
with an integer or a one-integer tuple.  Multi-dimensional memoryviews
can be indexed with tuples of exactly ndim integers where ndim is
the number of dimensions.  Zero-dimensional memoryviews can be indexed
with the empty tuple.
Here is an example with a non-byte format:


If the underlying object is writable, the memoryview supports
one-dimensional slice assignment. Resizing is not allowed:


One-dimensional memoryviews of hashable (read-only) types with formats
‘B’, ‘b’ or ‘c’ are also hashable. The hash is defined as
:



Changed in version 3.3: One-dimensional memoryviews can now be sliced.
One-dimensional memoryviews with formats ‘B’, ‘b’ or ‘c’ are now hashable.


Changed in version 3.4: memoryview is now registered automatically with



Changed in version 3.5: memoryviews can now be indexed with tuple of integers.

 has several methods:


(exporter)¶
A memoryview and a PEP 3118 exporter are equal if their shapes are
equivalent and if all corresponding values are equal when the operands’
respective format codes are interpreted using  syntax.
For the subset of  format strings currently supported by
,  and  are equal if :


If either format string is not supported by the  module,
then the objects will always compare as unequal (even if the format
strings and buffer contents are identical):


Note that, as with floating point numbers,  does not imply
 for memoryview objects.

Changed in version 3.3: Previous versions compared the raw memory disregarding the item format
and the logical array structure.




()¶
Return the data in the buffer as a bytestring.  This is equivalent to
calling the  constructor on the memoryview.


For non-contiguous arrays the result is equal to the flattened list
representation with all elements converted to bytes. 
supports all format strings, including those that are not in
 module syntax.



()¶
Return a string object containing two hexadecimal digits for each
byte in the buffer.



New in version 3.5.




()¶
Return the data in the buffer as a list of elements.



Changed in version 3.3:  now supports all single character native formats in
 module syntax as well as multi-dimensional
representations.




()¶
Release the underlying buffer exposed by the memoryview object.  Many
objects take special actions when a view is held on them (for example,
a  would temporarily forbid resizing); therefore,
calling release() is handy to remove these restrictions (and free any
dangling resources) as soon as possible.
After this method has been called, any further operation on the view
raises a  (except  itself which can
be called multiple times):


The context management protocol can be used for a similar effect,
using the  statement:



New in version 3.2.




(format[, shape])¶
Cast a memoryview to a new format or shape. shape defaults to
, which means that the result view
will be one-dimensional. The return value is a new memoryview, but
the buffer itself is not copied. Supported casts are 1D -> C-contiguous
and C-contiguous -> 1D.
The destination format is restricted to a single element native format in
 syntax. One of the formats must be a byte format
(‘B’, ‘b’ or ‘c’). The byte length of the result must be the same
as the original length.
Cast 1D/long to 1D/unsigned bytes:


Cast 1D/unsigned bytes to 1D/char:


Cast 1D/bytes to 3D/ints to 1D/signed char:


Cast 1D/unsigned char to 2D/unsigned long:



New in version 3.3.


Changed in version 3.5: The source format is no longer restricted when casting to a byte view.


There are also several readonly attributes available:


¶
The underlying object of the memoryview:



New in version 3.3.




¶
. This is
the amount of space in bytes that the array would use in a contiguous
representation. It is not necessarily equal to :


Multi-dimensional arrays:



New in version 3.3.




¶
A bool indicating whether the memory is read only.



¶
A string containing the format (in  module style) for each
element in the view. A memoryview can be created from exporters with
arbitrary format strings, but some methods (e.g. ) are
restricted to native single element formats.

Changed in version 3.3: format  is now handled according to the struct module syntax.
This means that .




¶
The size in bytes of each element of the memoryview:





¶
An integer indicating how many dimensions of a multi-dimensional array the
memory represents.



¶
A tuple of integers the length of  giving the shape of the
memory as an N-dimensional array.

Changed in version 3.3: An empty tuple instead of  when ndim = 0.




¶
A tuple of integers the length of  giving the size in bytes to
access each element for each dimension of the array.

Changed in version 3.3: An empty tuple instead of  when ndim = 0.




¶
Used internally for PIL-style arrays. The value is informational only.



¶
A bool indicating whether the memory is C-contiguous.

New in version 3.3.




¶
A bool indicating whether the memory is Fortran contiguous.

New in version 3.3.




¶
A bool indicating whether the memory is contiguous.

New in version 3.3.



