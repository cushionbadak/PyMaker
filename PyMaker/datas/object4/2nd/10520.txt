link:
library/optparse.html#terminology

docs:

Terminology¶

argument
a string entered on the command-line, and passed by the shell to 
or .  In Python, arguments are elements of 
( is the name of the program being executed).  Unix shells
also use the term “word”.
It is occasionally desirable to substitute an argument list other than
, so you should read “argument” as “an element of
, or of some other list provided as a substitute for
”.

option
an argument used to supply extra information to guide or customize the
execution of a program.  There are many different syntaxes for options; the
traditional Unix syntax is a hyphen (“-“) followed by a single letter,
e.g.  or .  Also, traditional Unix syntax allows multiple
options to be merged into a single argument, e.g.  is equivalent
to .  The GNU project introduced  followed by a series of
hyphen-separated words, e.g.  or .  These are the
only two option syntaxes provided by .
Some other option syntaxes that the world has seen include:

a hyphen followed by a few letters, e.g.  (this is not the same
as multiple options merged into a single argument)
a hyphen followed by a whole word, e.g.  (this is technically
equivalent to the previous syntax, but they aren’t usually seen in the same
program)
a plus sign followed by a single letter, or a few letters, or a word, e.g.
, 
a slash followed by a letter, or a few letters, or a word, e.g. ,


These option syntaxes are not supported by , and they never
will be.  This is deliberate: the first three are non-standard on any
environment, and the last only makes sense if you’re exclusively targeting
VMS, MS-DOS, and/or Windows.

option argument
an argument that follows an option, is closely associated with that option,
and is consumed from the argument list when that option is. With
, option arguments may either be in a separate argument from
their option:


or included in the same argument:


Typically, a given option either takes an argument or it doesn’t. Lots of
people want an “optional option arguments” feature, meaning that some options
will take an argument if they see it, and won’t if they don’t.  This is
somewhat controversial, because it makes parsing ambiguous: if  takes
an optional argument and  is another option entirely, how do we
interpret ?  Because of this ambiguity,  does not
support this feature.

positional argument
something leftover in the argument list after options have been parsed, i.e.
after options and their arguments have been parsed and removed from the
argument list.
required option
an option that must be supplied on the command-line; note that the phrase
“required option” is self-contradictory in English.   doesn’t
prevent you from implementing required options, but doesn’t give you much
help at it either.

For example, consider this hypothetical command-line:


 and  are both options.  Assuming that 
takes one argument,  is an option argument.   and
 are positional arguments.
