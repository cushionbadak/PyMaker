link:
library/os.html#files-and-directories

docs:

Files and Directories¶
On some Unix platforms, many of these functions support one or more of these
features:

specifying a file descriptor:
For some functions, the path argument can be not only a string giving a path
name, but also a file descriptor.  The function will then operate on the file
referred to by the descriptor.  (For POSIX systems, Python will call the
 version of the function.)
You can check whether or not path can be specified as a file descriptor on
your platform using .  If it is unavailable, using it
will raise a .
If the function also supports dir_fd or follow_symlinks arguments, it is
an error to specify one of those when supplying path as a file descriptor.



paths relative to directory descriptors: If dir_fd is not , it
should be a file descriptor referring to a directory, and the path to operate
on should be relative; path will then be relative to that directory.  If the
path is absolute, dir_fd is ignored.  (For POSIX systems, Python will call
the  or  version of the function.)
You can check whether or not dir_fd is supported on your platform using
.  If it is unavailable, using it will raise a
.



not following symlinks: If follow_symlinks is
, and the last element of the path to operate on is a symbolic link,
the function will operate on the symbolic link itself instead of the file the
link points to.  (For POSIX systems, Python will call the  version of
the function.)
You can check whether or not follow_symlinks is supported on your platform
using .  If it is unavailable, using it
will raise a .




(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)¶
Use the real uid/gid to test for access to path.  Note that most operations
will use the effective uid/gid, therefore this routine can be used in a
suid/sgid environment to test if the invoking user has the specified access to
path.  mode should be  to test the existence of path, or it
can be the inclusive OR of one or more of , , and
 to test permissions.  Return  if access is allowed,
 if not. See the Unix man page access(2) for more
information.
This function can support specifying paths relative to directory
descriptors and not following symlinks.
If effective_ids is ,  will perform its access
checks using the effective uid/gid instead of the real uid/gid.
effective_ids may not be supported on your platform; you can check whether
or not it is available using .  If it is
unavailable, using it will raise a .

Note
Using  to check if a user is authorized to e.g. open a file
before actually doing so using  creates a security hole,
because the user might exploit the short time interval between checking
and opening the file to manipulate it. It’s preferable to use EAFP
techniques. For example:


is better written as:




Note
I/O operations may fail even when  indicates that they would
succeed, particularly for operations on network filesystems which may have
permissions semantics beyond the usual POSIX permission-bit model.


Changed in version 3.3: Added the dir_fd, effective_ids, and follow_symlinks parameters.


Changed in version 3.6: Accepts a path-like object.




¶

¶

¶

¶
Values to pass as the mode parameter of  to test the
existence, readability, writability and executability of path,
respectively.



(path)¶
Change the current working directory to path.
This function can support specifying a file descriptor.  The
descriptor must refer to an opened directory, not an open file.

New in version 3.3: Added support for specifying path as a file descriptor
on some platforms.


Changed in version 3.6: Accepts a path-like object.




(path, flags, *, follow_symlinks=True)¶
Set the flags of path to the numeric flags. flags may take a combination
(bitwise OR) of the following values (as defined in the  module):














This function can support not following symlinks.
Availability: Unix.

New in version 3.3: The follow_symlinks argument.


Changed in version 3.6: Accepts a path-like object.




(path, mode, *, dir_fd=None, follow_symlinks=True)¶
Change the mode of path to the numeric mode. mode may take one of the
following values (as defined in the  module) or bitwise ORed
combinations of them:





















This function can support specifying a file descriptor,
paths relative to directory descriptors and not
following symlinks.

Note
Although Windows supports , you can only set the file’s
read-only flag with it (via the  and 
constants or a corresponding integer value).  All other bits are ignored.


New in version 3.3: Added support for specifying path as an open file descriptor,
and the dir_fd and follow_symlinks arguments.


Changed in version 3.6: Accepts a path-like object.




(path, uid, gid, *, dir_fd=None, follow_symlinks=True)¶
Change the owner and group id of path to the numeric uid and gid.  To
leave one of the ids unchanged, set it to -1.
This function can support specifying a file descriptor,
paths relative to directory descriptors and not
following symlinks.
See  for a higher-level function that accepts names in
addition to numeric ids.
Availability: Unix.

New in version 3.3: Added support for specifying an open file descriptor for path,
and the dir_fd and follow_symlinks arguments.


Changed in version 3.6: Supports a path-like object.




(path)¶
Change the root directory of the current process to path.
Availability: Unix.

Changed in version 3.6: Accepts a path-like object.




(fd)¶
Change the current working directory to the directory represented by the file
descriptor fd.  The descriptor must refer to an opened directory, not an
open file.  As of Python 3.3, this is equivalent to .
Availability: Unix.



()¶
Return a string representing the current working directory.



()¶
Return a bytestring representing the current working directory.



(path, flags)¶
Set the flags of path to the numeric flags, like , but do
not follow symbolic links.  As of Python 3.3, this is equivalent to
.
Availability: Unix.

Changed in version 3.6: Accepts a path-like object.




(path, mode)¶
Change the mode of path to the numeric mode. If path is a symlink, this
affects the symlink rather than the target.  See the docs for 
for possible values of mode.  As of Python 3.3, this is equivalent to
.
Availability: Unix.

Changed in version 3.6: Accepts a path-like object.




(path, uid, gid)¶
Change the owner and group id of path to the numeric uid and gid.  This
function will not follow symbolic links.  As of Python 3.3, this is equivalent
to .
Availability: Unix.

Changed in version 3.6: Accepts a path-like object.




(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)¶
Create a hard link pointing to src named dst.
This function can support specifying src_dir_fd and/or dst_dir_fd to
supply paths relative to directory descriptors, and not
following symlinks.
Availability: Unix, Windows.

Changed in version 3.2: Added Windows support.


New in version 3.3: Added the src_dir_fd, dst_dir_fd, and follow_symlinks arguments.


Changed in version 3.6: Accepts a path-like object for src and dst.




(path='.')¶
Return a list containing the names of the entries in the directory given by
path.  The list is in arbitrary order, and does not include the special
entries  and  even if they are present in the directory.
path may be a path-like object.  If path is of type 
(directly or indirectly through the  interface),
the filenames returned will also be of type ;
in all other circumstances, they will be of type .
This function can also support specifying a file descriptor; the file descriptor must refer to a directory.

Note
To encode  filenames to , use .


See also
The  function returns directory entries along with
file attribute information, giving better performance for many
common use cases.


Changed in version 3.2: The path parameter became optional.


New in version 3.3: Added support for specifying an open file descriptor for path.


Changed in version 3.6: Accepts a path-like object.




(path, *, dir_fd=None)¶
Perform the equivalent of an  system call on the given path.
Similar to , but does not follow symbolic links. Return a
 object.
On platforms that do not support symbolic links, this is an alias for
.
As of Python 3.3, this is equivalent to .
This function can also support paths relative to directory descriptors.

See also
The  function.


Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.


Changed in version 3.3: Added the dir_fd parameter.


Changed in version 3.6: Accepts a path-like object for src and dst.




(path, mode=0o777, *, dir_fd=None)¶
Create a directory named path with numeric mode mode.
If the directory already exists,  is raised.
On some systems, mode is ignored.  Where it is used, the current umask
value is first masked out.  If bits other than the last 9 (i.e. the last 3
digits of the octal representation of the mode) are set, their meaning is
platform-dependent.  On some platforms, they are ignored and you should call
 explicitly to set them.
This function can also support paths relative to directory descriptors.
It is also possible to create temporary directories; see the
 module’s  function.

New in version 3.3: The dir_fd argument.


Changed in version 3.6: Accepts a path-like object.




(name, mode=0o777, exist_ok=False)¶
Recursive directory creation function.  Like , but makes all
intermediate-level directories needed to contain the leaf directory.
The mode parameter is passed to  for creating the leaf
directory; see the mkdir() description for how it
is interpreted.  To set the file permission bits of any newly-created parent
directories you can set the umask before invoking .  The
file permission bits of existing parent directories are not changed.
If exist_ok is  (the default), an  is raised if the
target directory already exists.

Note
 will become confused if the path elements to create
include  (eg. “..” on UNIX systems).

This function handles UNC paths correctly.

New in version 3.2: The exist_ok parameter.


Changed in version 3.4.1: Before Python 3.4.1, if exist_ok was  and the directory existed,
 would still raise an error if mode did not match the
mode of the existing directory. Since this behavior was impossible to
implement safely, it was removed in Python 3.4.1. See bpo-21082.


Changed in version 3.6: Accepts a path-like object.


Changed in version 3.7: The mode argument no longer affects the file permission bits of
newly-created intermediate-level directories.




(path, mode=0o666, *, dir_fd=None)¶
Create a FIFO (a named pipe) named path with numeric mode mode.
The current umask value is first masked out from the mode.
This function can also support paths relative to directory descriptors.
FIFOs are pipes that can be accessed like regular files.  FIFOs exist until they
are deleted (for example with ). Generally, FIFOs are used as
rendezvous between “client” and “server” type processes: the server opens the
FIFO for reading, and the client opens it for writing.  Note that 
doesn’t open the FIFO — it just creates the rendezvous point.
Availability: Unix.

New in version 3.3: The dir_fd argument.


Changed in version 3.6: Accepts a path-like object.




(path, mode=0o600, device=0, *, dir_fd=None)¶
Create a filesystem node (file, device special file or named pipe) named
path. mode specifies both the permissions to use and the type of node
to be created, being combined (bitwise OR) with one of ,
, , and  (those constants are
available in ).  For  and ,
device defines the newly created device special file (probably using
), otherwise it is ignored.
This function can also support paths relative to directory descriptors.
Availability: Unix.

New in version 3.3: The dir_fd argument.


Changed in version 3.6: Accepts a path-like object.




(device)¶
Extract the device major number from a raw device number (usually the
 or  field from ).



(device)¶
Extract the device minor number from a raw device number (usually the
 or  field from ).



(major, minor)¶
Compose a raw device number from the major and minor device numbers.



(path, name)¶
Return system configuration information relevant to a named file. name
specifies the configuration value to retrieve; it may be a string which is the
name of a defined system value; these names are specified in a number of
standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define
additional names as well.  The names known to the host operating system are
given in the  dictionary.  For configuration variables not
included in that mapping, passing an integer for name is also accepted.
If name is a string and is not known,  is raised.  If a
specific value for name is not supported by the host system, even if it is
included in , an  is raised with
 for the error number.
This function can support specifying a file descriptor.
Availability: Unix.

Changed in version 3.6: Accepts a path-like object.




¶
Dictionary mapping names accepted by  and  to
the integer values defined for those names by the host operating system.  This
can be used to determine the set of names known to the system.
Availability: Unix.



(path, *, dir_fd=None)¶
Return a string representing the path to which the symbolic link points.  The
result may be either an absolute or relative pathname; if it is relative, it
may be converted to an absolute pathname using
.
If the path is a string object (directly or indirectly through a
 interface), the result will also be a string object,
and the call may raise a UnicodeDecodeError. If the path is a bytes
object (direct or indirectly), the result will be a bytes object.
This function can also support paths relative to directory descriptors.
Availability: Unix, Windows.

Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.


New in version 3.3: The dir_fd argument.


Changed in version 3.6: Accepts a path-like object.




(path, *, dir_fd=None)¶
Remove (delete) the file path.  If path is a directory,  is
raised.  Use  to remove directories.
This function can support paths relative to directory descriptors.
On Windows, attempting to remove a file that is in use causes an exception to
be raised; on Unix, the directory entry is removed but the storage allocated
to the file is not made available until the original file is no longer in use.
This function is semantically identical to .

New in version 3.3: The dir_fd argument.


Changed in version 3.6: Accepts a path-like object.




(name)¶
Remove directories recursively.  Works like  except that, if the
leaf directory is successfully removed,   tries to
successively remove every parent directory mentioned in  path until an error
is raised (which is ignored, because it generally means that a parent directory
is not empty). For example,  will first remove
the directory , and then remove  and  if
they are empty. Raises  if the leaf directory could not be
successfully removed.

Changed in version 3.6: Accepts a path-like object.




(src, dst, *, src_dir_fd=None, dst_dir_fd=None)¶
Rename the file or directory src to dst.  If dst is a directory,
 will be raised.  On Unix, if dst exists and is a file, it will
be replaced silently if the user has permission.  The operation may fail on some
Unix flavors if src and dst are on different filesystems.  If successful,
the renaming will be an atomic operation (this is a POSIX requirement).  On
Windows, if dst already exists,  will be raised even if it is a
file.
This function can support specifying src_dir_fd and/or dst_dir_fd to
supply paths relative to directory descriptors.
If you want cross-platform overwriting of the destination, use .

New in version 3.3: The src_dir_fd and dst_dir_fd arguments.


Changed in version 3.6: Accepts a path-like object for src and dst.




(old, new)¶
Recursive directory or file renaming function. Works like , except
creation of any intermediate directories needed to make the new pathname good is
attempted first. After the rename, directories corresponding to rightmost path
segments of the old name will be pruned away using .

Note
This function can fail with the new directory structure made if you lack
permissions needed to remove the leaf directory or file.


Changed in version 3.6: Accepts a path-like object for old and new.




(src, dst, *, src_dir_fd=None, dst_dir_fd=None)¶
Rename the file or directory src to dst.  If dst is a directory,
 will be raised.  If dst exists and is a file, it will
be replaced silently if the user has permission.  The operation may fail
if src and dst are on different filesystems.  If successful,
the renaming will be an atomic operation (this is a POSIX requirement).
This function can support specifying src_dir_fd and/or dst_dir_fd to
supply paths relative to directory descriptors.

New in version 3.3.


Changed in version 3.6: Accepts a path-like object for src and dst.




(path, *, dir_fd=None)¶
Remove (delete) the directory path.  Only works when the directory is
empty, otherwise,  is raised.  In order to remove whole
directory trees,  can be used.
This function can support paths relative to directory descriptors.

New in version 3.3: The dir_fd parameter.


Changed in version 3.6: Accepts a path-like object.




(path='.')¶
Return an iterator of  objects corresponding to the
entries in the directory given by path. The entries are yielded in
arbitrary order, and the special entries  and  are not
included.
Using  instead of  can significantly
increase the performance of code that also needs file type or file
attribute information, because  objects expose this
information if the operating system provides it when scanning a directory.
All  methods may perform a system call, but
 and  usually only
require a system call for symbolic links; 
always requires a system call on Unix but only requires one for
symbolic links on Windows.
path may be a path-like object.  If path is of type 
(directly or indirectly through the  interface),
the type of the  and 
attributes of each  will be ; in all other
circumstances, they will be of type .
This function can also support specifying a file descriptor; the file descriptor must refer to a directory.
The  iterator supports the context manager protocol
and has the following method:


()¶
Close the iterator and free acquired resources.
This is called automatically when the iterator is exhausted or garbage
collected, or when an error happens during iterating.  However it
is advisable to call it explicitly or use the 
statement.

New in version 3.6.


The following example shows a simple use of  to display all
the files (excluding directories) in the given path that don’t start with
. The  call will generally not make an additional
system call:



Note
On Unix-based systems,  uses the system’s
opendir()
and
readdir()
functions. On Windows, it uses the Win32
FindFirstFileW
and
FindNextFileW
functions.


New in version 3.5.


New in version 3.6: Added support for the context manager protocol and the
 method.  If a  iterator is neither
exhausted nor explicitly closed a  will be emitted
in its destructor.
The function accepts a path-like object.


Changed in version 3.7: Added support for file descriptors on Unix.




class ¶
Object yielded by  to expose the file path and other file
attributes of a directory entry.
 will provide as much of this information as possible without
making additional system calls. When a  or  system call
is made, the  object will cache the result.
 instances are not intended to be stored in long-lived data
structures; if you know the file metadata has changed or if a long time has
elapsed since calling , call  to fetch
up-to-date information.
Because the  methods can make operating system calls, they may
also raise . If you need very fine-grained
control over errors, you can catch  when calling one of the
 methods and handle as appropriate.
To be directly usable as a path-like object, 
implements the  interface.
Attributes and methods on a  instance are as follows:


¶
The entry’s base filename, relative to the  path
argument.
The  attribute will be  if the 
path argument is of type  and  otherwise.  Use
 to decode byte filenames.



¶
The entry’s full path name: equivalent to  where scandir_path is the  path
argument.  The path is only absolute if the  path
argument was absolute.  If the  path
argument was a file descriptor, the 
attribute is the same as the  attribute.
The  attribute will be  if the 
path argument is of type  and  otherwise.  Use
 to decode byte filenames.



()¶
Return the inode number of the entry.
The result is cached on the  object. Use
 to fetch up-to-date
information.
On the first, uncached call, a system call is required on Windows but
not on Unix.



(*, follow_symlinks=True)¶
Return  if this entry is a directory or a symbolic link pointing
to a directory; return  if the entry is or points to any other
kind of file, or if it doesn’t exist anymore.
If follow_symlinks is , return  only if this entry
is a directory (without following symlinks); return  if the
entry is any other kind of file or if it doesn’t exist anymore.
The result is cached on the  object, with a separate cache
for follow_symlinks  and . Call  along
with  to fetch up-to-date information.
On the first, uncached call, no system call is required in most cases.
Specifically, for non-symlinks, neither Windows or Unix require a system
call, except on certain Unix file systems, such as network file systems,
that return . If the entry is a symlink,
a system call will be required to follow the symlink unless
follow_symlinks is .
This method can raise , such as ,
but  is caught and not raised.



(*, follow_symlinks=True)¶
Return  if this entry is a file or a symbolic link pointing to a
file; return  if the entry is or points to a directory or other
non-file entry, or if it doesn’t exist anymore.
If follow_symlinks is , return  only if this entry
is a file (without following symlinks); return  if the entry is
a directory or other non-file entry, or if it doesn’t exist anymore.
The result is cached on the  object. Caching, system calls
made, and exceptions raised are as per .



()¶
Return  if this entry is a symbolic link (even if broken);
return  if the entry points to a directory or any kind of file,
or if it doesn’t exist anymore.
The result is cached on the  object. Call
 to fetch up-to-date information.
On the first, uncached call, no system call is required in most cases.
Specifically, neither Windows or Unix require a system call, except on
certain Unix file systems, such as network file systems, that return
.
This method can raise , such as ,
but  is caught and not raised.



(*, follow_symlinks=True)¶
Return a  object for this entry. This method
follows symbolic links by default; to stat a symbolic link add the
 argument.
On Unix, this method always requires a system call. On Windows, it
only requires a system call if follow_symlinks is  and the
entry is a symbolic link.
On Windows, the ,  and  attributes of the
 are always set to zero. Call  to
get these attributes.
The result is cached on the  object, with a separate cache
for follow_symlinks  and . Call  to
fetch up-to-date information.

Note that there is a nice correspondence between several attributes
and methods of  and of .  In
particular, the  attribute has the same
meaning, as do the , , 
and  methods.

New in version 3.5.


Changed in version 3.6: Added support for the  interface.  Added support
for  paths on Windows.




(path, *, dir_fd=None, follow_symlinks=True)¶
Get the status of a file or a file descriptor. Perform the equivalent of a
 system call on the given path. path may be specified as
either a string or bytes – directly or indirectly through the 
interface – or as an open file descriptor. Return a 
object.
This function normally follows symlinks; to stat a symlink add the argument
, or use .
This function can support specifying a file descriptor and
not following symlinks.
Example:



See also
 and  functions.


New in version 3.3: Added the dir_fd and follow_symlinks arguments, specifying a file
descriptor instead of a path.


Changed in version 3.6: Accepts a path-like object.




class ¶
Object whose attributes correspond roughly to the members of the
 structure. It is used for the result of ,
 and .
Attributes:


¶
File mode: file type and file mode bits (permissions).



¶
Platform dependent, but if non-zero, uniquely identifies the
file for a given value of . Typically:

the inode number on Unix,
the file index on
Windows




¶
Identifier of the device on which this file resides.



¶
Number of hard links.



¶
User identifier of the file owner.



¶
Group identifier of the file owner.



¶
Size of the file in bytes, if it is a regular file or a symbolic link.
The size of a symbolic link is the length of the pathname it contains,
without a terminating null byte.

Timestamps:


¶
Time of most recent access expressed in seconds.



¶
Time of most recent content modification expressed in seconds.



¶
Platform dependent:

the time of most recent metadata change on Unix,
the time of creation on Windows, expressed in seconds.




¶
Time of most recent access expressed in nanoseconds as an integer.



¶
Time of most recent content modification expressed in nanoseconds as an
integer.



¶
Platform dependent:

the time of most recent metadata change on Unix,
the time of creation on Windows, expressed in nanoseconds as an
integer.



Note
The exact meaning and resolution of the ,
, and  attributes depend on the operating
system and the file system. For example, on Windows systems using the FAT
or FAT32 file systems,  has 2-second resolution, and
 has only 1-day resolution.  See your operating system
documentation for details.
Similarly, although , ,
and  are always expressed in nanoseconds, many
systems do not provide nanosecond precision.  On systems that do
provide nanosecond precision, the floating-point object used to
store , , and 
cannot preserve all of it, and as such will be slightly inexact.
If you need the exact timestamps you should always use
, , and .

On some Unix systems (such as Linux), the following attributes may also be
available:


¶
Number of 512-byte blocks allocated for file.
This may be smaller than /512 when the file has holes.



¶
“Preferred” blocksize for efficient file system I/O. Writing to a file in
smaller chunks may cause an inefficient read-modify-rewrite.



¶
Type of device if an inode device.



¶
User defined flags for file.

On other Unix systems (such as FreeBSD), the following attributes may be
available (but may be only filled out if root tries to use them):


¶
File generation number.



¶
Time of file creation.

On Solaris and derivatives, the following attributes may also be
available:


¶
String that uniquely identifies the type of the filesystem that
contains the file.

On Mac OS systems, the following attributes may also be available:


¶
Real size of the file.



¶
Creator of the file.



¶
File type.

On Windows systems, the following attribute is also available:


¶
Windows file attributes:  member of the
 structure returned by
. See the 
constants in the  module.

The standard module  defines functions and constants that are
useful for extracting information from a  structure. (On
Windows, some items are filled with dummy values.)
For backward compatibility, a  instance is also
accessible as a tuple of at least 10 integers giving the most important (and
portable) members of the  structure, in the order
, , , ,
, , , ,
, . More items may be added at the end by
some implementations. For compatibility with older Python versions,
accessing  as a tuple always returns integers.

New in version 3.3: Added the , , and
 members.


New in version 3.5: Added the  member on Windows.


Changed in version 3.5: Windows now returns the file index as  when
available.


New in version 3.7: Added the  member to Solaris/derivatives.




(path)¶
Perform a  system call on the given path.  The return value is
an object whose attributes describe the filesystem on the given path, and
correspond to the members of the  structure, namely:
, , , ,
, , , ,
, , .
Two module-level constants are defined for the  attribute’s
bit-flags: if  is set, the filesystem is mounted
read-only, and if  is set, the semantics of
setuid/setgid bits are disabled or not supported.
Additional module-level constants are defined for GNU/glibc based systems.
These are  (disallow access to device special files),
 (disallow program execution), 
(writes are synced at once),  (allow mandatory locks on an FS),
 (write on file/directory/symlink), 
(append-only file),  (immutable file), 
(do not update access times),  (do not update directory access
times),  (update atime relative to mtime/ctime).
This function can support specifying a file descriptor.
Availability: Unix.

Changed in version 3.2: The  and  constants were added.


New in version 3.3: Added support for specifying an open file descriptor for path.


Changed in version 3.4: The , , ,
, , ,
, , ,
and  constants were added.


Changed in version 3.6: Accepts a path-like object.


New in version 3.7: Added .




¶
A  object indicating which functions in the
 module permit use of their dir_fd parameter.  Different platforms
provide different functionality, and an option that might work on one might
be unsupported on another.  For consistency’s sakes, functions that support
dir_fd always allow specifying the parameter, but will raise an exception
if the functionality is not actually available.
To check whether a particular function permits use of its dir_fd
parameter, use the  operator on .  As an example,
this expression determines whether the dir_fd parameter of 
is locally available:


Currently dir_fd parameters only work on Unix platforms; none of them work
on Windows.

New in version 3.3.




¶
A  object indicating which functions in the
 module permit use of the effective_ids parameter for
.  If the local platform supports it, the collection will
contain , otherwise it will be empty.
To check whether you can use the effective_ids parameter for
, use the  operator on ,
like so:


Currently effective_ids only works on Unix platforms; it does not work on
Windows.

New in version 3.3.




¶
A  object indicating which functions in the
 module permit specifying their path parameter as an open file
descriptor.  Different platforms provide different functionality, and an
option that might work on one might be unsupported on another.  For
consistency’s sakes, functions that support fd always allow specifying
the parameter, but will raise an exception if the functionality is not
actually available.
To check whether a particular function permits specifying an open file
descriptor for its path parameter, use the  operator on
. As an example, this expression determines whether
 accepts open file descriptors when called on your local
platform:



New in version 3.3.




¶
A  object indicating which functions in the
 module permit use of their follow_symlinks parameter.  Different
platforms provide different functionality, and an option that might work on
one might be unsupported on another.  For consistency’s sakes, functions that
support follow_symlinks always allow specifying the parameter, but will
raise an exception if the functionality is not actually available.
To check whether a particular function permits use of its follow_symlinks
parameter, use the  operator on .  As an
example, this expression determines whether the follow_symlinks parameter
of  is locally available:



New in version 3.3.




(src, dst, target_is_directory=False, *, dir_fd=None)¶
Create a symbolic link pointing to src named dst.
On Windows, a symlink represents either a file or a directory, and does not
morph to the target dynamically.  If the target is present, the type of the
symlink will be created to match. Otherwise, the symlink will be created
as a directory if target_is_directory is  or a file symlink (the
default) otherwise.  On non-Windows platforms, target_is_directory is ignored.
Symbolic link support was introduced in Windows 6.0 (Vista).  
will raise a  on Windows versions earlier than 6.0.
This function can support paths relative to directory descriptors.

Note
On Windows, the SeCreateSymbolicLinkPrivilege is required in order to
successfully create symlinks. This privilege is not typically granted to
regular users but is available to accounts which can escalate privileges
to the administrator level. Either obtaining the privilege or running your
application as an administrator are ways to successfully create symlinks.
 is raised when the function is called by an unprivileged
user.

Availability: Unix, Windows.

Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.


New in version 3.3: Added the dir_fd argument, and now allow target_is_directory
on non-Windows platforms.


Changed in version 3.6: Accepts a path-like object for src and dst.




()¶
Force write of everything to disk.
Availability: Unix.

New in version 3.3.




(path, length)¶
Truncate the file corresponding to path, so that it is at most
length bytes in size.
This function can support specifying a file descriptor.
Availability: Unix, Windows.

New in version 3.3.


Changed in version 3.5: Added support for Windows


Changed in version 3.6: Accepts a path-like object.




(path, *, dir_fd=None)¶
Remove (delete) the file path.  This function is semantically
identical to ; the  name is its
traditional Unix name.  Please see the documentation for
 for further information.

New in version 3.3: The dir_fd parameter.


Changed in version 3.6: Accepts a path-like object.




(path, times=None, *, [ns, ]dir_fd=None, follow_symlinks=True)¶
Set the access and modified times of the file specified by path.
 takes two optional parameters, times and ns.
These specify the times set on path and are used as follows:

If ns is specified,
it must be a 2-tuple of the form 
where each member is an int expressing nanoseconds.
If times is not ,
it must be a 2-tuple of the form 
where each member is an int or float expressing seconds.
If times is  and ns is unspecified,
this is equivalent to specifying 
where both times are the current time.

It is an error to specify tuples for both times and ns.
Whether a directory can be given for path
depends on whether the operating system implements directories as files
(for example, Windows does not).  Note that the exact times you set here may
not be returned by a subsequent  call, depending on the
resolution with which your operating system records access and modification
times; see .  The best way to preserve exact times is to
use the st_atime_ns and st_mtime_ns fields from the 
result object with the ns parameter to utime.
This function can support specifying a file descriptor,
paths relative to directory descriptors and not
following symlinks.

New in version 3.3: Added support for specifying an open file descriptor for path,
and the dir_fd, follow_symlinks, and ns parameters.


Changed in version 3.6: Accepts a path-like object.




(top, topdown=True, onerror=None, followlinks=False)¶
Generate the file names in a directory tree by walking the tree
either top-down or bottom-up. For each directory in the tree rooted at directory
top (including top itself), it yields a 3-tuple .
dirpath is a string, the path to the directory.  dirnames is a list of the
names of the subdirectories in dirpath (excluding  and ).
filenames is a list of the names of the non-directory files in dirpath.
Note that the names in the lists contain no path components.  To get a full path
(which begins with top) to a file or directory in dirpath, do
.
If optional argument topdown is  or not specified, the triple for a
directory is generated before the triples for any of its subdirectories
(directories are generated top-down).  If topdown is , the triple
for a directory is generated after the triples for all of its subdirectories
(directories are generated bottom-up). No matter the value of topdown, the
list of subdirectories is retrieved before the tuples for the directory and
its subdirectories are generated.
When topdown is , the caller can modify the dirnames list in-place
(perhaps using  or slice assignment), and  will only
recurse into the subdirectories whose names remain in dirnames; this can be
used to prune the search, impose a specific order of visiting, or even to inform
 about directories the caller creates or renames before it resumes
 again.  Modifying dirnames when topdown is  has
no effect on the behavior of the walk, because in bottom-up mode the directories
in dirnames are generated before dirpath itself is generated.
By default, errors from the  call are ignored.  If optional
argument onerror is specified, it should be a function; it will be called with
one argument, an  instance.  It can report the error to continue
with the walk, or raise the exception to abort the walk.  Note that the filename
is available as the  attribute of the exception object.
By default,  will not walk down into symbolic links that resolve to
directories. Set followlinks to  to visit directories pointed to by
symlinks, on systems that support them.

Note
Be aware that setting followlinks to  can lead to infinite
recursion if a link points to a parent directory of itself. 
does not keep track of the directories it visited already.


Note
If you pass a relative pathname, don’t change the current working directory
between resumptions of .   never changes the current
directory, and assumes that its caller doesn’t either.

This example displays the number of bytes taken by non-directory files in each
directory under the starting directory, except that it doesn’t look under any
CVS subdirectory:


In the next example (simple implementation of ),
walking the tree bottom-up is essential,  doesn’t allow
deleting a directory before the directory is empty:



Changed in version 3.5: This function now calls  instead of ,
making it faster by reducing the number of calls to .


Changed in version 3.6: Accepts a path-like object.




(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None)¶
This behaves exactly like , except that it yields a 4-tuple
, and it supports .
dirpath, dirnames and filenames are identical to  output,
and dirfd is a file descriptor referring to the directory dirpath.
This function always supports paths relative to directory descriptors and not following symlinks.  Note however
that, unlike other functions, the  default value for
follow_symlinks is .

Note
Since  yields file descriptors, those are only valid until
the next iteration step, so you should duplicate them (e.g. with
) if you want to keep them longer.

This example displays the number of bytes taken by non-directory files in each
directory under the starting directory, except that it doesn’t look under any
CVS subdirectory:


In the next example, walking the tree bottom-up is essential:
 doesn’t allow deleting a directory before the directory is
empty:


Availability: Unix.

New in version 3.3.


Changed in version 3.6: Accepts a path-like object.


Changed in version 3.7: Added support for  paths.



Linux extended attributes¶

New in version 3.3.

These functions are all available on Linux only.


(path, attribute, *, follow_symlinks=True)¶
Return the value of the extended filesystem attribute attribute for
path. attribute can be bytes or str (directly or indirectly through the
 interface). If it is str, it is encoded with the filesystem
encoding.
This function can support specifying a file descriptor and
not following symlinks.

Changed in version 3.6: Accepts a path-like object for path and attribute.




(path=None, *, follow_symlinks=True)¶
Return a list of the extended filesystem attributes on path.  The
attributes in the list are represented as strings decoded with the filesystem
encoding.  If path is ,  will examine the current
directory.
This function can support specifying a file descriptor and
not following symlinks.

Changed in version 3.6: Accepts a path-like object.




(path, attribute, *, follow_symlinks=True)¶
Removes the extended filesystem attribute attribute from path.
attribute should be bytes or str (directly or indirectly through the
 interface). If it is a string, it is encoded
with the filesystem encoding.
This function can support specifying a file descriptor and
not following symlinks.

Changed in version 3.6: Accepts a path-like object for path and attribute.




(path, attribute, value, flags=0, *, follow_symlinks=True)¶
Set the extended filesystem attribute attribute on path to value.
attribute must be a bytes or str with no embedded NULs (directly or
indirectly through the  interface). If it is a str,
it is encoded with the filesystem encoding.  flags may be
 or . If  is
given and the attribute does not exist,  will be raised.
If  is given and the attribute already exists, the
attribute will not be created and  will be raised.
This function can support specifying a file descriptor and
not following symlinks.

Note
A bug in Linux kernel versions less than 2.6.39 caused the flags argument
to be ignored on some filesystems.


Changed in version 3.6: Accepts a path-like object for path and attribute.




¶
The maximum size the value of an extended attribute can be. Currently, this
is 64 KiB on Linux.



¶
This is a possible value for the flags argument in . It
indicates the operation must create an attribute.



¶
This is a possible value for the flags argument in . It
indicates the operation must replace an existing attribute.


