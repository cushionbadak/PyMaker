link:
library/functools.html#functools.singledispatch

docs:


¶
Transform a function into a single-dispatch generic function.
To define a generic function, decorate it with the 
decorator. Note that the dispatch happens on the type of the first argument,
create your function accordingly:


To add overloaded implementations to the function, use the 
attribute of the generic function.  It is a decorator.  For functions
annotated with types, the decorator will infer the type of the first
argument automatically:


For code which doesn’t use type annotations, the appropriate type
argument can be passed explicitly to the decorator itself:


To enable registering lambdas and pre-existing functions, the
 attribute can be used in a functional form:


The  attribute returns the undecorated function which
enables decorator stacking, pickling, as well as creating unit tests for
each variant independently:


When called, the generic function dispatches on the type of the first
argument:


Where there is no registered implementation for a specific type, its
method resolution order is used to find a more generic implementation.
The original function decorated with  is registered
for the base  type, which means it is used if no better
implementation is found.
To check which implementation will the generic function choose for
a given type, use the  attribute:


To access all registered implementations, use the read-only 
attribute:



New in version 3.4.


Changed in version 3.7: The  attribute supports using type annotations.

