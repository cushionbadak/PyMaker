link:
library/logging.handlers.html#baserotatinghandler

docs:

BaseRotatingHandler¶
The  class, located in the 
module, is the base class for the rotating file handlers,
 and . You should
not need to instantiate this class, but it has attributes and methods you may
need to override.


class (filename, mode, encoding=None, delay=False)¶
The parameters are as for . The attributes are:


¶
If this attribute is set to a callable, the 
method delegates to this callable. The parameters passed to the callable
are those passed to .

Note
The namer function is called quite a few times during rollover,
so it should be as simple and as fast as possible. It should also
return the same output every time for a given input, otherwise the
rollover behaviour may not work as expected.


New in version 3.3.




¶
If this attribute is set to a callable, the  method
delegates to this callable.  The parameters passed to the callable are
those passed to .

New in version 3.3.




(default_name)¶
Modify the filename of a log file when rotating.
This is provided so that a custom filename can be provided.
The default implementation calls the ‘namer’ attribute of the handler,
if it’s callable, passing the default name to it. If the attribute isn’t
callable (the default is ), the name is returned unchanged.




Parameters:default_name – The default name for the log file.




New in version 3.3.




(source, dest)¶
When rotating, rotate the current log.
The default implementation calls the ‘rotator’ attribute of the handler,
if it’s callable, passing the source and dest arguments to it. If the
attribute isn’t callable (the default is ), the source is simply
renamed to the destination.




Parameters:
source – The source filename. This is normally the base
filename, e.g. ‘test.log’.
dest – The destination filename. This is normally
what the source is rotated to, e.g. ‘test.log.1’.






New in version 3.3.



The reason the attributes exist is to save you having to subclass - you can use
the same callables for instances of  and
. If either the namer or rotator callable
raises an exception, this will be handled in the same way as any other
exception during an  call, i.e. via the  method
of the handler.
If you need to make more significant changes to rotation processing, you can
override the methods.
For an example, see Using a rotator and namer to customize log rotation processing.
