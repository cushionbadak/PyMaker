link:
faq/library.html#general-library-questions

docs:

General Library Questions¶

How do I find a module or application to perform task X?¶
Check the Library Reference to see if there’s a relevant
standard library module.  (Eventually you’ll learn what’s in the standard
library and will be able to skip this step.)
For third-party packages, search the Python Package Index or try Google or
another Web search engine.  Searching for “Python” plus a keyword or two for
your topic of interest will usually find something helpful.


Where is the math.py (socket.py, regex.py, etc.) source file?¶
If you can’t find a source file for a module it may be a built-in or
dynamically loaded module implemented in C, C++ or other compiled language.
In this case you may not have the source file or it may be something like
, somewhere in a C source directory (not on the Python Path).
There are (at least) three kinds of modules in Python:

modules written in Python (.py);

modules written in C and dynamically loaded (.dll, .pyd, .so, .sl, etc);

modules written in C and linked with the interpreter; to get a list of these,
type:






How do I make a Python script executable on Unix?¶
You need to do two things: the script file’s mode must be executable and the
first line must begin with  followed by the path of the Python
interpreter.
The first is done by executing  or perhaps .
The second can be done in a number of ways.  The most straightforward way is to
write


as the very first line of your file, using the pathname for where the Python
interpreter is installed on your platform.
If you would like the script to be independent of where the Python interpreter
lives, you can use the env program.  Almost all Unix variants support
the following, assuming the Python interpreter is in a directory on the user’s
:


Don’t do this for CGI scripts.  The  variable for CGI scripts is
often very minimal, so you need to use the actual absolute pathname of the
interpreter.
Occasionally, a user’s environment is so full that the /usr/bin/env
program fails; or there’s no env program at all.  In that case, you can try the
following hack (due to Alex Rezinsky):


The minor disadvantage is that this defines the script’s __doc__ string.
However, you can fix that by adding




Is there a curses/termcap package for Python?¶
For Unix variants: The standard Python source distribution comes with a curses
module in the Modules subdirectory, though it’s not compiled by default.
(Note that this is not available in the Windows distribution – there is no
curses module for Windows.)
The  module supports basic curses features as well as many additional
functions from ncurses and SYSV curses such as colour, alternative character set
support, pads, and mouse support. This means the module isn’t compatible with
operating systems that only have BSD curses, but there don’t seem to be any
currently maintained OSes that fall into this category.
For Windows: use the consolelib module.


Is there an equivalent to C’s onexit() in Python?¶
The  module provides a register function that is similar to C’s
.


Why don’t my signal handlers work?¶
The most common problem is that the signal handler is declared with the wrong
argument list.  It is called as


so it should be declared with two arguments:



