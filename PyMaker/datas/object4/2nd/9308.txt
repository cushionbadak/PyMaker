link:
library/dataclasses.html

docs:


 — Data Classes¶
Source code: Lib/dataclasses.py

This module provides a decorator and functions for automatically
adding generated special methods such as  and
 to user-defined classes.  It was originally described
in PEP 557.
The member variables to use in these generated methods are defined
using PEP 526 type annotations.  For example this code:


Will add, among other things, a  that looks like:


Note that this method is automatically added to the class: it is not
directly specified in the  definition shown above.

New in version 3.7.


Module-level decorators, classes, and functions¶


(*, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)¶
This function is a decorator that is used to add generated
special methods to classes, as described below.
The  decorator examines the class to find
s.  A  is defined as class variable that has a
type annotation.  With two
exceptions described below, nothing in 
examines the type specified in the variable annotation.
The order of the fields in all of the generated methods is the
order in which they appear in the class definition.
The  decorator will add various “dunder” methods to
the class, described below.  If any of the added methods already
exist on the class, the behavior depends on the parameter, as documented
below. The decorator returns the same class that is called on; no new
class is created.
If  is used just as a simple decorator with no parameters,
it acts as if it has the default values documented in this
signature.  That is, these three uses of  are
equivalent:


The parameters to  are:

: If true (the default), a  method will be
generated.
If the class already defines , this parameter is
ignored.

: If true (the default), a  method will be
generated.  The generated repr string will have the class name and
the name and repr of each field, in the order they are defined in
the class.  Fields that are marked as being excluded from the repr
are not included.  For example:
.
If the class already defines , this parameter is
ignored.

: If true (the default), an  method will be
generated.  This method compares the class as if it were a tuple
of its fields, in order.  Both instances in the comparison must
be of the identical type.
If the class already defines , this parameter is
ignored.

: If true (the default is ), ,
, , and  methods will be
generated.  These compare the class as if it were a tuple of its
fields, in order.  Both instances in the comparison must be of the
identical type.  If  is true and  is false, a
 is raised.
If the class already defines any of ,
, , or , then
 is raised.

: If  (the default), a  method
is generated according to how  and  are set.
 is used by built-in , and when objects are
added to hashed collections such as dictionaries and sets.  Having a
 implies that instances of the class are immutable.
Mutability is a complicated property that depends on the programmer’s
intent, the existence and behavior of , and the values of
the  and  flags in the  decorator.
By default,  will not implicitly add a 
method unless it is safe to do so.  Neither will it add or change an
existing explicitly defined  method.  Setting the class
attribute  has a specific meaning to Python, as
described in the  documentation.
If  is not explicit defined, or if it is set to ,
then  may add an implicit  method.
Although not recommended, you can force  to create a
 method with . This might be the case
if your class is logically immutable but can nonetheless be mutated.
This is a specialized use case and should be considered carefully.
Here are the rules governing implicit creation of a 
method.  Note that you cannot both have an explicit 
method in your dataclass and set ; this will result
in a .
If  and  are both true, by default  will
generate a  method for you.  If  is true and
 is false,  will be set to , marking it
unhashable (which it is, since it is mutable).  If  is false,
 will be left untouched meaning the 
method of the superclass will be used (if the superclass is
, this means it will fall back to id-based hashing).

: If true (the default is False), assigning to fields will
generate an exception.  This emulates read-only frozen instances.  If
 or  is defined in the class, then
 is raised.  See the discussion below.


s may optionally specify a default value, using normal
Python syntax:


In this example, both  and  will be included in the added
 method, which will be defined as:


 will be raised if a field without a default value
follows a field with a default value.  This is true either when this
occurs in a single class, or as a result of class inheritance.



(*, default=MISSING, default_factory=MISSING, repr=True, hash=None, init=True, compare=True, metadata=None)¶
For common and simple use cases, no other functionality is
required.  There are, however, some dataclass features that
require additional per-field information.  To satisfy this need for
additional information, you can replace the default field value
with a call to the provided  function.  For example:


As shown above, the  value is a sentinel object used to
detect if the  and  parameters are
provided.  This sentinel is used because  is a valid value
for .  No code should directly use the 
value.
The parameters to  are:

: If provided, this will be the default value for this
field.  This is needed because the  call itself
replaces the normal position of the default value.

: If provided, it must be a zero-argument
callable that will be called when a default value is needed for
this field.  Among other purposes, this can be used to specify
fields with mutable default values, as discussed below.  It is an
error to specify both  and .

: If true (the default), this field is included as a
parameter to the generated  method.

: If true (the default), this field is included in the
string returned by the generated  method.

: If true (the default), this field is included in the
generated equality and comparison methods (,
, et al.).

: This can be a bool or .  If true, this field is
included in the generated  method.  If  (the
default), use the value of : this would normally be
the expected behavior.  A field should be considered in the hash
if it’s used for comparisons.  Setting this value to anything
other than  is discouraged.
One possible reason to set  but 
would be if a field is expensive to compute a hash value for,
that field is needed for equality testing, and there are other
fields that contribute to the type’s hash value.  Even if a field
is excluded from the hash, it will still be used for comparisons.

: This can be a mapping or None. None is treated as
an empty dict.  This value is wrapped in
 to make it read-only, and exposed
on the  object. It is not used at all by Data
Classes, and is provided as a third-party extension mechanism.
Multiple third-parties can each have their own key, to use as a
namespace in the metadata.


If the default value of a field is specified by a call to
, then the class attribute for this field will be
replaced by the specified  value.  If no  is
provided, then the class attribute will be deleted.  The intent is
that after the  decorator runs, the class
attributes will all contain the default values for the fields, just
as if the default value itself were specified.  For example,
after:


The class attribute  will be , the class attribute
 will be , and the class attributes  and
 will not be set.



class ¶
 objects describe each defined field. These objects
are created internally, and are returned by the 
module-level method (see below).  Users should never instantiate a
 object directly.  Its documented attributes are:


: The name of the field.
: The type of the field.
, , , , ,
, and  have the identical meaning and
values as they do in the  declaration.


Other attributes may exist, but they are private and must not be
inspected or relied on.



(class_or_instance)¶
Returns a tuple of  objects that define the fields for this
dataclass.  Accepts either a dataclass, or an instance of a dataclass.
Raises  if not passed a dataclass or instance of one.
Does not return pseudo-fields which are  or .



(instance, *, dict_factory=dict)¶
Converts the dataclass  to a dict (by using the
factory function ).  Each dataclass is converted
to a dict of its fields, as  pairs.  dataclasses, dicts,
lists, and tuples are recursed into.  For example:


Raises  if  is not a dataclass instance.



(instance, *, tuple_factory=tuple)¶
Converts the dataclass  to a tuple (by using the
factory function ).  Each dataclass is converted
to a tuple of its field values.  dataclasses, dicts, lists, and
tuples are recursed into.
Continuing from the previous example:


Raises  if  is not a dataclass instance.



(cls_name, fields, *, bases=(), namespace=None, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)¶
Creates a new dataclass with name , fields as defined
in , base classes as given in , and initialized
with a namespace as given in .   is an
iterable whose elements are each either , ,
or .  If just  is supplied,
 is used for .  The values of ,
, , , , and  have
the same meaning as they do in .
This function is not strictly required, because any Python
mechanism for creating a new class with  can
then apply the  function to convert that class to
a dataclass.  This function is provided as a convenience.  For
example:


Is equivalent to:





(instance, **changes)¶
Creates a new object of the same type of , replacing
fields with values from .  If  is not a Data
Class, raises .  If values in  do not
specify fields, raises .
The newly returned object is created by calling the 
method of the dataclass.  This ensures that
, if present, is also called.
Init-only variables without default values, if any exist, must be
specified on the call to  so that they can be passed to
 and .
It is an error for  to contain any fields that are
defined as having .  A  will be raised
in this case.
Be forewarned about how  fields work during a call to
.  They are not copied from the source object, but
rather are initialized in , if they’re
initialized at all.  It is expected that  fields will
be rarely and judiciously used.  If they are used, it might be wise
to have alternate class constructors, or perhaps a custom
 (or similarly named) method which handles instance
copying.



(class_or_instance)¶
Returns True if its parameter is a dataclass or an instance of one,
otherwise returns False.
If you need to know if a class is an instance of a dataclass (and
not a dataclass itself), then add a further check for :





Post-init processing¶
The generated  code will call a method named
, if  is defined on the
class.  It will normally be called as .
However, if any  fields are defined, they will also be
passed to  in the order they were defined in the
class.  If no  method is generated, then
 will not automatically be called.
Among other uses, this allows for initializing field values that
depend on one or more other fields.  For example:


See the section below on init-only variables for ways to pass
parameters to .  Also see the warning about how
 handles  fields.


Class variables¶
One of two places where  actually inspects the type
of a field is to determine if a field is a class variable as defined
in PEP 526.  It does this by checking if the type of the field is
.  If a field is a , it is excluded
from consideration as a field and is ignored by the dataclass
mechanisms.  Such  pseudo-fields are not returned by the
module-level  function.


Init-only variables¶
The other place where  inspects a type annotation is to
determine if a field is an init-only variable.  It does this by seeing
if the type of a field is of type .  If a field
is an , it is considered a pseudo-field called an init-only
field.  As it is not a true field, it is not returned by the
module-level  function.  Init-only fields are added as
parameters to the generated  method, and are passed to
the optional  method.  They are not otherwise used
by dataclasses.
For example, suppose a field will be initialized from a database, if a
value is not provided when creating the class:


In this case,  will return  objects for  and
, but not for .


Frozen instances¶
It is not possible to create truly immutable Python objects.  However,
by passing  to the  decorator you can
emulate immutability.  In that case, dataclasses will add
 and  methods to the class.  These
methods will raise a  when invoked.
There is a tiny performance penalty when using :
 cannot use simple assignment to initialize fields, and
must use .


Inheritance¶
When the dataclass is being created by the  decorator,
it looks through all of the class’s base classes in reverse MRO (that
is, starting at ) and, for each dataclass that it finds,
adds the fields from that base class to an ordered mapping of fields.
After all of the base class fields are added, it adds its own fields
to the ordered mapping.  All of the generated methods will use this
combined, calculated ordered mapping of fields.  Because the fields
are in insertion order, derived classes override base classes.  An
example:


The final list of fields is, in order, , , .  The final
type of  is , as specified in class .
The generated  method for  will look like:




Default factory functions¶

If a  specifies a , it is called with
zero arguments when a default value for the field is needed.  For
example, to create a new instance of a list, use:


If a field is excluded from  (using )
and the field also specifies , then the default
factory function will always be called from the generated
 function.  This happens because there is no other
way to give the field an initial value.



Mutable default values¶

Python stores default member variable values in class attributes.
Consider this example, not using dataclasses:


Note that the two instances of class  share the same class
variable , as expected.
Using dataclasses, if this code was valid:


it would generate code similar to:


This has the same issue as the original example using class .
That is, two instances of class  that do not specify a value for
 when creating a class instance will share the same copy of
.  Because dataclasses just use normal Python class creation
they also share this behavior.  There is no general way for Data
Classes to detect this condition.  Instead, dataclasses will raise a
 if it detects a default parameter of type ,
, or .  This is a partial solution, but it does protect
against many common errors.
Using default factory functions is a way to create new instances of
mutable types as default values for fields:





Exceptions¶


exception ¶
Raised when an implicitly defined  or
 is called on a dataclass which was defined with
.



