link:
library/datetime.html#strftime-and-strptime-behavior

docs:

 and  Behavior¶
, , and  objects all support a
 method, to create a string representing the time under the
control of an explicit format string.  Broadly speaking, 
acts like the  module’s 
although not all objects support a  method.
Conversely, the  class method creates a
 object from a string representing a date and time and a
corresponding format string.  is
equivalent to , except
when the format includes sub-second components or timezone offset information,
which are supported in  but are discarded by .
For  objects, the format codes for year, month, and day should not
be used, as time objects have no such values.  If they’re used anyway, 
is substituted for the year, and  for the month and day.
For  objects, the format codes for hours, minutes, seconds, and
microseconds should not be used, as  objects have no such
values.  If they’re used anyway,  is substituted for them.
The full set of format codes supported varies across platforms, because Python
calls the platform C library’s  function, and platform
variations are common.  To see the full set of format codes supported on your
platform, consult the strftime(3) documentation.
For the same reason, handling of format strings containing Unicode code points
that can’t be represented in the charset of the current locale is also
platform-dependent. On some platforms such code points are preserved intact in
the output, while on others  may raise  or return
an empty string instead.
The following is a list of all the format codes that the C standard (1989
version) requires, and these work on all platforms with a standard C
implementation.  Note that the 1999 version of the C standard added additional
format codes.








Directive
Meaning
Example
Notes




Weekday as locale’s
abbreviated name.

Sun, Mon, …, Sat
(en_US);
So, Mo, …, Sa
(de_DE)


(1)


Weekday as locale’s full name.

Sunday, Monday, …,
Saturday (en_US);
Sonntag, Montag, …,
Samstag (de_DE)


(1)


Weekday as a decimal number,
where 0 is Sunday and 6 is
Saturday.
0, 1, …, 6
 


Day of the month as a
zero-padded decimal number.
01, 02, …, 31
 


Month as locale’s abbreviated
name.

Jan, Feb, …, Dec
(en_US);
Jan, Feb, …, Dez
(de_DE)


(1)


Month as locale’s full name.

January, February,
…, December (en_US);
Januar, Februar, …,
Dezember (de_DE)


(1)


Month as a zero-padded
decimal number.
01, 02, …, 12
 


Year without century as a
zero-padded decimal number.
00, 01, …, 99
 


Year with century as a decimal
number.
0001, 0002, …, 2013,
2014, …, 9998, 9999
(2)


Hour (24-hour clock) as a
zero-padded decimal number.
00, 01, …, 23
 


Hour (12-hour clock) as a
zero-padded decimal number.
01, 02, …, 12
 


Locale’s equivalent of either
AM or PM.

AM, PM (en_US);
am, pm (de_DE)


(1),
(3)


Minute as a zero-padded
decimal number.
00, 01, …, 59
 


Second as a zero-padded
decimal number.
00, 01, …, 59
(4)


Microsecond as a decimal
number, zero-padded on the
left.
000000, 000001, …,
999999
(5)


UTC offset in the form
±HHMM[SS[.ffffff]] (empty
string if the object is
naive).
(empty), +0000,
-0400, +1030,
+063415,
-030712.345216
(6)


Time zone name (empty string
if the object is naive).
(empty), UTC, EST, CST
 


Day of the year as a
zero-padded decimal number.
001, 002, …, 366
 


Week number of the year
(Sunday as the first day of
the week) as a zero padded
decimal number. All days in a
new year preceding the first
Sunday are considered to be in
week 0.
00, 01, …, 53
(7)


Week number of the year
(Monday as the first day of
the week) as a decimal number.
All days in a new year
preceding the first Monday
are considered to be in
week 0.
00, 01, …, 53
(7)


Locale’s appropriate date and
time representation.

Tue Aug 16 21:30:00
1988 (en_US);
Di 16 Aug 21:30:00
1988 (de_DE)


(1)


Locale’s appropriate date
representation.

08/16/88 (None);
08/16/1988 (en_US);
16.08.1988 (de_DE)


(1)


Locale’s appropriate time
representation.

21:30:00 (en_US);
21:30:00 (de_DE)


(1)


A literal  character.
%
 



Several additional directives not required by the C89 standard are included for
convenience. These parameters all correspond to ISO 8601 date values. These
may not be available on all platforms when used with the 
method. The ISO 8601 year and ISO 8601 week directives are not interchangeable
with the year and week number directives above. Calling  with
incomplete or ambiguous ISO 8601 directives will raise a .








Directive
Meaning
Example
Notes




ISO 8601 year with century
representing the year that
contains the greater part of
the ISO week ().
0001, 0002, …, 2013,
2014, …, 9998, 9999
(8)


ISO 8601 weekday as a decimal
number where 1 is Monday.
1, 2, …, 7
 


ISO 8601 week as a decimal
number with Monday as
the first day of the week.
Week 01 is the week containing
Jan 4.
01, 02, …, 53
(8)




New in version 3.6: ,  and  were added.

Notes:

Because the format depends on the current locale, care should be taken when
making assumptions about the output value. Field orderings will vary (for
example, “month/day/year” versus “day/month/year”), and the output may
contain Unicode characters encoded using the locale’s default encoding (for
example, if the current locale is , the default encoding could be
any one of , , or ; use 
to determine the current locale’s encoding).

The  method can parse years in the full [1, 9999] range, but
years < 1000 must be zero-filled to 4-digit width.

Changed in version 3.2: In previous versions,  method was restricted to
years >= 1900.


Changed in version 3.3: In version 3.2,  method was restricted to
years >= 1000.


When used with the  method, the  directive only affects
the output hour field if the  directive is used to parse the hour.

Unlike the  module, the  module does not support
leap seconds.

When used with the  method, the  directive
accepts from one to six digits and zero pads on the right.   is
an extension to the set of format characters in the C standard (but
implemented separately in datetime objects, and therefore always
available).

For a naive object, the  and  format codes are replaced by empty
strings.
For an aware object:


 is transformed into a string of the form
±HHMM[SS[.ffffff]], where HH is a 2-digit string giving the number of UTC
offset hours, MM is a 2-digit string giving the number of UTC offset
minutes, SS is a 2-digit string giving the number of UTC offset
seconds and ffffff is a 6-digit string giving the number of UTC
offset microseconds.  The ffffff part is omitted when the offset is a
whole number of seconds and both the ffffff and the SS part is omitted
when the offset is a whole number of minutes.  For example, if
 returns ,  is
replaced with the string .



Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes.


Changed in version 3.7: When the  directive is provided to the   method,
the UTC offsets can have a colon as a separator between hours, minutes
and seconds.
For example,  will be parsed as an offset of one hour.
In addition, providing  is identical to .



If  returns ,  is replaced by an empty
string.  Otherwise  is replaced by the returned value, which must
be a string.



Changed in version 3.2: When the  directive is provided to the  method, an
aware  object will be produced.  The  of the
result will be set to a  instance.


When used with the  method,  and  are only used
in calculations when the day of the week and the calendar year ()
are specified.

Similar to  and ,  is only used in calculations when the
day of the week and the ISO year () are specified in a
 format string. Also note that  and  are not
interchangeable.


Footnotes



[1]If, that is, we ignore the effects of Relativity


