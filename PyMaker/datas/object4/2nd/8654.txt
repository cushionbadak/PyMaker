link:
library/unittest.mock-examples.html#mocking-a-dictionary-with-magicmock

docs:

Mocking a dictionary with MagicMock¶
You may want to mock a dictionary, or other container object, recording all
access to it whilst having it still behave like a dictionary.
We can do this with , which will behave like a dictionary,
and using  to delegate dictionary access to a real
underlying dictionary that is under our control.
When the  and  methods of our  are called
(normal dictionary access) then  is called with the key (and in
the case of  the value too). We can also control what is returned.
After the  has been used we can use attributes like
 to assert about how the dictionary was used:



Note
An alternative to using  is to use  and only provide
the magic methods you specifically want:


A third option is to use  but passing in  as the spec
(or spec_set) argument so that the  created only has
dictionary magic methods available:



With these side effect functions in place, the  will behave like a normal
dictionary but recording the access. It even raises a  if you try
to access a key that doesn’t exist.


After it has been used you can make assertions about the access using the normal
mock methods and attributes:


