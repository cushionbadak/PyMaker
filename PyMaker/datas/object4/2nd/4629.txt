link:
library/asyncio-task.html#asyncio.Task

docs:


class (coro, *, loop=None)¶
A  object that runs a Python
coroutine.  Not thread-safe.
Tasks are used to run coroutines in event loops.
If a coroutine awaits on a Future, the Task suspends
the execution of the coroutine and waits for the completion
of the Future.  When the Future is done, the execution of
the wrapped coroutine resumes.
Event loops use cooperative scheduling: an event loop runs
one Task at a time.  While a Task awaits for the completion of a
Future, the event loop runs other Tasks, callbacks, or performs
IO operations.
Use the high-level  function to create
Tasks, or the low-level  or
 functions.  Manual instantiation of Tasks
is discouraged.
To cancel a running Task use the  method.  Calling it
will cause the Task to throw a  exception into
the wrapped coroutine.  If a coroutine is awaiting on a Future
object during cancellation, the Future object will be cancelled.
 can be used to check if the Task was cancelled.
The method returns  if the wrapped coroutine did not
suppress the  exception and was actually
cancelled.
 inherits from  all of its
APIs except  and
.
Tasks support the  module.  When a Task
is created it copies the current context and later runs its
coroutine in the copied context.

Changed in version 3.7: Added support for the  module.



()¶
Request the Task to be cancelled.
This arranges for a  exception to be thrown
into the wrapped coroutine on the next cycle of the event loop.
The coroutine then has a chance to clean up or even deny the
request by suppressing the exception with a  …
…  …  block.
Therefore, unlike ,  does
not guarantee that the Task will be cancelled, although
suppressing cancellation completely is not common and is actively
discouraged.
The following example illustrates how coroutines can intercept
the cancellation request:





()¶
Return  if the Task is cancelled.
The Task is cancelled when the cancellation was requested with
 and the wrapped coroutine propagated the
 exception thrown into it.



()¶
Return  if the Task is done.
A Task is done when the wrapped coroutine either returned
a value, raised an exception, or the Task was cancelled.



()¶
Return the result of the Task.
If the Task is done, the result of the wrapped coroutine
is returned (or if the coroutine raised an exception, that
exception is re-raised.)
If the Task has been cancelled, this method raises
a  exception.
If the Task’s result isn’t yet available, this method raises
a  exception.



()¶
Return the exception of the Task.
If the wrapped coroutine raised an exception that exception
is returned.  If the wrapped coroutine returned normally
this method returns .
If the Task has been cancelled, this method raises a
 exception.
If the Task isn’t done yet, this method raises an
 exception.



(callback, *, context=None)¶
Add a callback to be run when the Task is done.
This method should only be used in low-level callback-based code.
See the documentation of 
for more details.



(callback)¶
Remove callback from the callbacks list.
This method should only be used in low-level callback-based code.
See the documentation of 
for more details.



(*, limit=None)¶
Return the list of stack frames for this Task.
If the wrapped coroutine is not done, this returns the stack
where it is suspended.  If the coroutine has completed
successfully or was cancelled, this returns an empty list.
If the coroutine was terminated by an exception, this returns
the list of traceback frames.
The frames are always ordered from oldest to newest.
Only one stack frame is returned for a suspended coroutine.
The optional limit argument sets the maximum number of frames
to return; by default all available frames are returned.
The ordering of the returned list differs depending on whether
a stack or a traceback is returned: the newest frames of a
stack are returned, but the oldest frames of a traceback are
returned.  (This matches the behavior of the traceback module.)



(*, limit=None, file=None)¶
Print the stack or traceback for this Task.
This produces output similar to that of the traceback module
for the frames retrieved by .
The limit argument is passed to  directly.
The file argument is an I/O stream to which the output
is written; by default output is written to .



classmethod (loop=None)¶
Return a set of all tasks for an event loop.
By default all tasks for the current event loop are returned.
If loop is , the  function
is used to get the current loop.
This method is deprecated and will be removed in
Python 3.9.  Use the  function instead.



classmethod (loop=None)¶
Return the currently running task or .
If loop is , the  function
is used to get the current loop.
This method is deprecated and will be removed in
Python 3.9.  Use the  function
instead.

