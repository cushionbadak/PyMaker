link:
library/tempfile.html

docs:


 — Generate temporary files and directories¶
Source code: Lib/tempfile.py

This module creates temporary files and directories.  It works on all
supported platforms. , ,
, and  are high-level
interfaces which provide automatic cleanup and can be used as
context managers.  and
 are lower-level functions which require manual cleanup.
All the user-callable functions and constructors take additional arguments which
allow direct control over the location and name of temporary files and
directories. Files names used by this module include a string of
random characters which allows those files to be securely created in
shared temporary directories.
To maintain backward compatibility, the argument order is somewhat odd; it
is recommended to use keyword arguments for clarity.
The module defines the following user-callable items:


(mode='w+b', buffering=None, encoding=None, newline=None, suffix=None, prefix=None, dir=None)¶
Return a file-like object that can be used as a temporary storage area.
The file is created securely, using the same rules as . It will be destroyed as soon
as it is closed (including an implicit close when the object is garbage
collected).  Under Unix, the directory entry for the file is either not created at all or is removed
immediately after the file is created.  Other platforms do not support
this; your code should not rely on a temporary file created using this
function having or not having a visible name in the file system.
The resulting object can be used as a context manager (see
Examples).  On completion of the context or
destruction of the file object the temporary file will be removed
from the filesystem.
The mode parameter defaults to  so that the file created can
be read and written without being closed.  Binary mode is used so that it
behaves consistently on all platforms without regard for the data that is
stored.  buffering, encoding and newline are interpreted as for
.
The dir, prefix and suffix parameters have the same meaning and
defaults as with .
The returned object is a true file object on POSIX platforms.  On other
platforms, it is a file-like object whose  attribute is the
underlying true file object.
The  flag is used if it is available and works
(Linux-specific, requires Linux kernel 3.11 or later).

Changed in version 3.5: The  flag is now used if available.




(mode='w+b', buffering=None, encoding=None, newline=None, suffix=None, prefix=None, dir=None, delete=True)¶
This function operates exactly as  does, except that
the file is guaranteed to have a visible name in the file system (on
Unix, the directory entry is not unlinked).  That name can be retrieved
from the  attribute of the returned
file-like object.  Whether the name can be
used to open the file a second time, while the named temporary file is
still open, varies across platforms (it can be so used on Unix; it cannot
on Windows NT or later).  If delete is true (the default), the file is
deleted as soon as it is closed.
The returned object is always a file-like object whose 
attribute is the underlying true file object. This file-like object can
be used in a  statement, just like a normal file.



(max_size=0, mode='w+b', buffering=None, encoding=None, newline=None, suffix=None, prefix=None, dir=None)¶
This function operates exactly as  does, except that
data is spooled in memory until the file size exceeds max_size, or
until the file’s  method is called, at which point the
contents are written to disk and operation proceeds as with
.
The resulting file has one additional method, , which
causes the file to roll over to an on-disk file regardless of its size.
The returned object is a file-like object whose  attribute
is either an  or  object (depending on
whether binary or text mode was specified) or a true file
object, depending on whether  has been called.  This
file-like object can be used in a  statement, just like
a normal file.

Changed in version 3.3: the truncate method now accepts a  argument.




(suffix=None, prefix=None, dir=None)¶
This function securely creates a temporary directory using the same rules as .
The resulting object can be used as a context manager (see
Examples).  On completion of the context or destruction
of the temporary directory object the newly created temporary directory
and all its contents are removed from the filesystem.
The directory name can be retrieved from the  attribute of the
returned object.  When the returned object is used as a context manager, the
 will be assigned to the target of the  clause in
the  statement, if there is one.
The directory can be explicitly cleaned up by calling the
 method.

New in version 3.2.




(suffix=None, prefix=None, dir=None, text=False)¶
Creates a temporary file in the most secure manner possible.  There are
no race conditions in the file’s creation, assuming that the platform
properly implements the  flag for .  The
file is readable and writable only by the creating user ID.  If the
platform uses permission bits to indicate whether a file is executable,
the file is executable by no one.  The file descriptor is not inherited
by child processes.
Unlike , the user of  is responsible
for deleting the temporary file when done with it.
If suffix is not , the file name will end with that suffix,
otherwise there will be no suffix.   does not put a dot
between the file name and the suffix; if you need one, put it at the
beginning of suffix.
If prefix is not , the file name will begin with that prefix;
otherwise, a default prefix is used.  The default is the return value of
 or , as appropriate.
If dir is not , the file will be created in that directory;
otherwise, a default directory is used.  The default directory is chosen
from a platform-dependent list, but the user of the application can
control the directory location by setting the TMPDIR, TEMP or TMP
environment variables.  There is thus no guarantee that the generated
filename will have any nice properties, such as not requiring quoting
when passed to external commands via .
If any of suffix, prefix, and dir are not
, they must be the same type.
If they are bytes, the returned name will be bytes instead of str.
If you want to force a bytes return value with otherwise default behavior,
pass .
If text is specified, it indicates whether to open the file in binary
mode (the default) or text mode.  On some platforms, this makes no
difference.
 returns a tuple containing an OS-level handle to an open
file (as would be returned by ) and the absolute pathname
of that file, in that order.

Changed in version 3.5: suffix, prefix, and dir may now be supplied in bytes in order to
obtain a bytes return value.  Prior to this, only str was allowed.
suffix and prefix now accept and default to  to cause
an appropriate default value to be used.




(suffix=None, prefix=None, dir=None)¶
Creates a temporary directory in the most secure manner possible. There
are no race conditions in the directory’s creation.  The directory is
readable, writable, and searchable only by the creating user ID.
The user of  is responsible for deleting the temporary
directory and its contents when done with it.
The prefix, suffix, and dir arguments are the same as for
.
 returns the absolute pathname of the new directory.

Changed in version 3.5: suffix, prefix, and dir may now be supplied in bytes in order to
obtain a bytes return value.  Prior to this, only str was allowed.
suffix and prefix now accept and default to  to cause
an appropriate default value to be used.




()¶
Return the name of the directory used for temporary files. This
defines the default value for the dir argument to all functions
in this module.
Python searches a standard list of directories to find one which
the calling user can create files in.  The list is:

The directory named by the  environment variable.
The directory named by the  environment variable.
The directory named by the  environment variable.
A platform-specific location:
On Windows, the directories , ,
, and , in that order.
On all other platforms, the directories , , and
, in that order.


As a last resort, the current working directory.

The result of this search is cached, see the description of
 below.



()¶
Same as  but the return value is in bytes.

New in version 3.5.




()¶
Return the filename prefix used to create temporary files.  This does not
contain the directory component.



()¶
Same as  but the return value is in bytes.

New in version 3.5.


The module uses a global variable to store the name of the directory
used for temporary files returned by .  It can be
set directly to override the selection process, but this is discouraged.
All functions in this module take a dir argument which can be used
to specify the directory and this is the recommended approach.


¶
When set to a value other than , this variable defines the
default value for the dir argument to the functions defined in this
module.
If  is  (the default) at any call to any of the above
functions except  it is initialized following the
algorithm described in .


Examples¶
Here are some examples of typical usage of the  module:




Deprecated functions and variables¶
A historical way to create temporary files was to first generate a
file name with the  function and then create a file
using this name. Unfortunately this is not secure, because a different
process may create a file with this name in the time between the call
to  and the subsequent attempt to create the file by the
first process. The solution is to combine the two steps and create the
file immediately. This approach is used by  and the
other functions described above.


(suffix='', prefix='tmp', dir=None)¶

Deprecated since version 2.3: Use  instead.

Return an absolute pathname of a file that did not exist at the time the
call is made.  The prefix, suffix, and dir arguments are similar
to those of , except that bytes file names, 
and  are not supported.

Warning
Use of this function may introduce a security hole in your program.  By
the time you get around to doing anything with the file name it returns,
someone else may have beaten you to the punch.   usage can
be replaced easily with , passing it the
 parameter:






