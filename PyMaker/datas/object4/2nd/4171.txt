link:
library/concurrency.html

docs:


Concurrent Execution¶
The modules described in this chapter provide support for concurrent
execution of code. The appropriate choice of tool will depend on the
task to be executed (CPU bound vs IO bound) and preferred style of
development (event driven cooperative multitasking vs preemptive
multitasking). Here’s an overview:


 — Thread-based parallelism
Thread-Local Data
Thread Objects
Lock Objects
RLock Objects
Condition Objects
Semaphore Objects
 Example


Event Objects
Timer Objects
Barrier Objects
Using locks, conditions, and semaphores in the  statement


 — Process-based parallelism
Introduction
The  class
Contexts and start methods
Exchanging objects between processes
Synchronization between processes
Sharing state between processes
Using a pool of workers


Reference
 and exceptions
Pipes and Queues
Miscellaneous
Connection Objects
Synchronization primitives
Shared  Objects
The  module


Managers
Customized managers
Using a remote manager


Proxy Objects
Cleanup


Process Pools
Listeners and Clients
Address Formats


Authentication keys
Logging
The  module


Programming guidelines
All start methods
The spawn and forkserver start methods


Examples


The  package
 — Launching parallel tasks
Executor Objects
ThreadPoolExecutor
ThreadPoolExecutor Example


ProcessPoolExecutor
ProcessPoolExecutor Example


Future Objects
Module Functions
Exception classes


 — Subprocess management
Using the  Module
Frequently Used Arguments
Popen Constructor
Exceptions


Security Considerations
Popen Objects
Windows Popen Helpers
Windows Constants


Older high-level API
Replacing Older Functions with the  Module
Replacing /bin/sh shell backquote
Replacing shell pipeline
Replacing 
Replacing the  family
Replacing , , 
Replacing functions from the  module


Legacy Shell Invocation Functions
Notes
Converting an argument sequence to a string on Windows




 — Event scheduler
Scheduler Objects


 — A synchronized queue class
Queue Objects
SimpleQueue Objects




The following are support modules for some of the above services:


 — Low-level threading API
 — Drop-in replacement for the  module
 — Drop-in replacement for the  module



