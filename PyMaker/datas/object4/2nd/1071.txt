link:
library/datetime.html#timedelta-objects

docs:

 Objects¶
A  object represents a duration, the difference between two
dates or times.


class (days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)¶
All arguments are optional and default to .  Arguments may be integers
or floats, and may be positive or negative.
Only days, seconds and microseconds are stored internally.  Arguments are
converted to those units:

A millisecond is converted to 1000 microseconds.
A minute is converted to 60 seconds.
An hour is converted to 3600 seconds.
A week is converted to 7 days.

and days, seconds and microseconds are then normalized so that the
representation is unique, with


 (the number of seconds in one day)


If any argument is a float and there are fractional microseconds,
the fractional microseconds left over from all arguments are
combined and their sum is rounded to the nearest microsecond using
round-half-to-even tiebreaker.  If no argument is a float, the
conversion and normalization processes are exact (no information is
lost).
If the normalized value of days lies outside the indicated range,
 is raised.
Note that normalization of negative values may be surprising at first. For
example,



Class attributes are:


¶
The most negative  object, .



¶
The most positive  object, .



¶
The smallest possible difference between non-equal  objects,
.

Note that, because of normalization,  > .
 is not representable as a  object.
Instance attributes (read-only):






Attribute
Value




Between -999999999 and 999999999 inclusive


Between 0 and 86399 inclusive


Between 0 and 999999 inclusive



Supported operations:






Operation
Result




Sum of t2 and t3. Afterwards t1-t2 ==
t3 and t1-t3 == t2 are true. (1)


Difference of t2 and t3. Afterwards t1
== t2 - t3 and t2 == t1 + t3 are
true. (1)(6)


Delta multiplied by an integer.
Afterwards t1 // i == t2 is true,
provided .

 
In general, t1 * i == t1 * (i-1) + t1
is true. (1)


Delta multiplied by a float. The result is
rounded to the nearest multiple of
timedelta.resolution using round-half-to-even.


Division (3) of overall duration t2 by
interval unit t3. Returns a 
object.


Delta divided by a float or an int. The result
is rounded to the nearest multiple of
timedelta.resolution using round-half-to-even.

 or

The floor is computed and the remainder (if
any) is thrown away.  In the second case, an
integer is returned. (3)


The remainder is computed as a
 object. (3)


Computes the quotient and the remainder:
 (3) and .
q is an integer and r is a 
object.


Returns a  object with the
same value. (2)


equivalent to
(-t1.days,
-t1.seconds, -t1.microseconds),
and to t1* -1. (1)(4)


equivalent to +t when , and
to -t when . (2)


Returns a string in the form
, where D
is negative for negative . (5)


Returns a string representation of the
 object as a constructor
call with canonical attribute values.



Notes:

This is exact, but may overflow.

This is exact, and cannot overflow.

Division by 0 raises .

-timedelta.max is not representable as a  object.

String representations of  objects are normalized
similarly to their internal representation.  This leads to somewhat
unusual results for negative timedeltas.  For example:



The expression  will always be equal to the expression  except
when t3 is equal to ; in that case the former will produce a result
while the latter will overflow.


In addition to the operations listed above  objects support
certain additions and subtractions with  and 
objects (see below).

Changed in version 3.2: Floor division and true division of a  object by another
 object are now supported, as are remainder operations and
the  function.  True division and multiplication of a
 object by a  object are now supported.

Comparisons of  objects are supported with the
 object representing the smaller duration considered to be the
smaller timedelta. In order to stop mixed-type comparisons from falling back to
the default comparison by object address, when a  object is
compared to an object of a different type,  is raised unless the
comparison is  or .  The latter cases return  or
, respectively.
 objects are hashable (usable as dictionary keys), support
efficient pickling, and in Boolean contexts, a  object is
considered to be true if and only if it isn’t equal to .
Instance methods:


()¶
Return the total number of seconds contained in the duration. Equivalent to
. For interval units other than seconds, use the
division form directly (e.g. ).
Note that for very large time intervals (greater than 270 years on
most platforms) this method will lose microsecond accuracy.

New in version 3.2.


Example usage:


