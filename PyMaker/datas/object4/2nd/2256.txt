link:
library/linecache.html

docs:


 — Random access to text lines¶
Source code: Lib/linecache.py

The  module allows one to get any line from a Python source file, while
attempting to optimize internally, using a cache, the common case where many
lines are read from a single file.  This is used by the  module
to retrieve source lines for inclusion in  the formatted traceback.
The  function is used to open files. This
function uses  to get the encoding of the
file; in the absence of an encoding token, the file encoding defaults to UTF-8.
The  module defines the following functions:


(filename, lineno, module_globals=None)¶
Get line lineno from file named filename. This function will never raise an
exception — it will return  on errors (the terminating newline character
will be included for lines that are found).
If a file named filename is not found, the function will look for it in the
module search path, , after first checking for a PEP 302
 in module_globals, in case the module was imported from a
zipfile or other non-filesystem import source.



()¶
Clear the cache.  Use this function if you no longer need lines from files
previously read using .



(filename=None)¶
Check the cache for validity.  Use this function if files in the cache  may have
changed on disk, and you require the updated version.  If filename is omitted,
it will check all the entries in the cache.



(filename, module_globals)¶
Capture enough detail about a non-file-based module to permit getting its
lines later via  even if module_globals is  in the later
call. This avoids doing I/O until a line is actually needed, without having
to carry the module globals around indefinitely.

New in version 3.5.


Example:



