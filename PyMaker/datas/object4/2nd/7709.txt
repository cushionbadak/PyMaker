link:
library/gettext.html#module-gettext

docs:

 — Multilingual internationalization services¶
Source code: Lib/gettext.py

The  module provides internationalization (I18N) and localization
(L10N) services for your Python modules and applications. It supports both the
GNU gettext message catalog API and a higher level, class-based API that may
be more appropriate for Python files.  The interface described below allows you
to write your module and application messages in one natural language, and
provide a catalog of translated messages for running under different natural
languages.
Some hints on localizing your Python modules and applications are also given.

GNU gettext API¶
The  module defines the following API, which is very similar to
the GNU gettext API.  If you use this API you will affect the
translation of your entire application globally.  Often this is what you want if
your application is monolingual, with the choice of language dependent on the
locale of your user.  If you are localizing a Python module, or if your
application needs to switch languages on the fly, you probably want to use the
class-based API instead.


(domain, localedir=None)¶
Bind the domain to the locale directory localedir.  More concretely,
 will look for binary  files for the given domain using
the path (on Unix): , where
languages is searched for in the environment variables ,
, , and  respectively.
If localedir is omitted or , then the current binding for domain is
returned. [1]



(domain, codeset=None)¶
Bind the domain to codeset, changing the encoding of byte strings
returned by the , , 
and  functions.
If codeset is omitted, then the current binding is returned.



(domain=None)¶
Change or query the current global domain.  If domain is , then the
current global domain is returned, otherwise the global domain is set to
domain, which is returned.



(message)¶
Return the localized translation of message, based on the current global
domain, language, and locale directory.  This function is usually aliased as
 in the local namespace (see examples below).



(domain, message)¶
Like , but look the message up in the specified domain.



(singular, plural, n)¶
Like , but consider plural forms. If a translation is found,
apply the plural formula to n, and return the resulting message (some
languages have more than two plural forms). If no translation is found, return
singular if n is 1; return plural otherwise.
The Plural formula is taken from the catalog header. It is a C or Python
expression that has a free variable n; the expression evaluates to the index
of the plural in the catalog. See
the GNU gettext documentation
for the precise syntax to be used in  files and the
formulas for a variety of languages.



(domain, singular, plural, n)¶
Like , but look the message up in the specified domain.



(message)¶



(domain, message)¶



(singular, plural, n)¶



(domain, singular, plural, n)¶
Equivalent to the corresponding functions without the  prefix
(, ,  and ),
but the translation is returned as a byte string encoded in the preferred
system encoding if no other encoding was explicitly set with
.

Warning
These functions should be avoided in Python 3, because they return
encoded bytes.  It’s much better to use alternatives which return
Unicode strings instead, since most Python applications will want to
manipulate human readable text as strings instead of bytes.  Further,
it’s possible that you may get unexpected Unicode-related exceptions
if there are encoding problems with the translated strings.  It is
possible that the  functions will be deprecated in future Python
versions due to their inherent problems and limitations.


Note that GNU gettext also defines a  method, but
this was deemed not useful and so it is currently unimplemented.
Here’s an example of typical usage for this API:




Class-based API¶
The class-based API of the  module gives you more flexibility and
greater convenience than the GNU gettext API.  It is the recommended
way of localizing your Python applications and modules.   defines
a  class which implements the parsing of GNU  format
files, and has methods for returning strings. Instances of this class can also
install themselves in the built-in namespace as the function .


(domain, localedir=None, languages=None, all=False)¶
This function implements the standard  file search algorithm.  It
takes a domain, identical to what  takes.  Optional
localedir is as in . Optional languages is a list of
strings, where each string is a language code.
If localedir is not given, then the default system locale directory is used.
[2]  If languages is not given, then the following environment variables are
searched: , , , and
.  The first one returning a non-empty value is used for the
languages variable. The environment variables should contain a colon separated
list of languages, which will be split on the colon to produce the expected list
of language code strings.
 then expands and normalizes the languages, and then iterates
through them, searching for an existing file built of these components:

The first such file name that exists is returned by . If no such
file is found, then  is returned. If all is given, it returns a list
of all file names, in the order in which they appear in the languages list or
the environment variables.



(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None)¶
Return a  instance based on the domain, localedir,
and languages, which are first passed to  to get a list of the
associated  file paths.  Instances with identical  file
names are cached.  The actual class instantiated is class_ if
provided, otherwise .  The class’s constructor must
take a single file object argument.  If provided, codeset will change
the charset used to encode translated strings in the
 and 
methods.
If multiple files are found, later files are used as fallbacks for earlier ones.
To allow setting the fallback,  is used to clone each
translation object from the cache; the actual instance data is still shared with
the cache.
If no  file is found, this function raises  if
fallback is false (which is the default), and returns a
 instance if fallback is true.

Changed in version 3.3:  used to be raised instead of .




(domain, localedir=None, codeset=None, names=None)¶
This installs the function  in Python’s builtins namespace, based on
domain, localedir, and codeset which are passed to the function
.
For the names parameter, please see the description of the translation
object’s  method.
As seen below, you usually mark the strings in your application that are
candidates for translation, by wrapping them in a call to the 
function, like this:


For convenience, you want the  function to be installed in Python’s
builtins namespace, so it is easily accessible in all modules of your
application.


The  class¶
Translation classes are what actually implement the translation of original
source file message strings to translated message strings. The base class used
by all translation classes is ; this provides the basic
interface you can use to write your own specialized translation classes.  Here
are the methods of :


class (fp=None)¶
Takes an optional file object fp, which is ignored by the base class.
Initializes “protected” instance variables _info and _charset which are set
by derived classes, as well as _fallback, which is set through
.  It then calls  if fp is not
.


(fp)¶
No-op in the base class, this method takes file object fp, and reads
the data from the file, initializing its message catalog.  If you have an
unsupported message catalog file format, you should override this method
to parse your format.



(fallback)¶
Add fallback as the fallback object for the current translation object.
A translation object should consult the fallback if it cannot provide a
translation for a given message.



(message)¶
If a fallback has been set, forward  to the fallback.
Otherwise, return message.  Overridden in derived classes.



(singular, plural, n)¶
If a fallback has been set, forward  to the fallback.
Otherwise, return singular if n is 1; return plural otherwise.
Overridden in derived classes.



(message)¶



(singular, plural, n)¶
Equivalent to  and , but the translation
is returned as a byte string encoded in the preferred system encoding
if no encoding was explicitly set with .
Overridden in derived classes.

Warning
These methods should be avoided in Python 3.  See the warning for the
 function.




()¶
Return the “protected”  variable, a dictionary containing
the metadata found in the message catalog file.



()¶
Return the encoding of the message catalog file.



()¶
Return the encoding used to return translated messages in 
and .



(charset)¶
Change the encoding used to return translated messages.



(names=None)¶
This method installs  into the built-in namespace,
binding it to .
If the names parameter is given, it must be a sequence containing the
names of functions you want to install in the builtins namespace in
addition to .  Supported names are , ,
 and .
Note that this is only one way, albeit the most convenient way, to make
the  function available to your application.  Because it affects
the entire application globally, and specifically the built-in namespace,
localized modules should never install . Instead, they should use
this code to make  available to their module:


This puts  only in the module’s global namespace and so only
affects calls within this module.




The  class¶
The  module provides one additional class derived from
: .  This class overrides
 to enable reading GNU gettext format  files
in both big-endian and little-endian format.
 parses optional metadata out of the translation
catalog. It is convention with GNU gettext to include metadata as
the translation for the empty string. This metadata is in RFC 822-style
 pairs, and should contain the  key.  If the
key  is found, then the  property is used to
initialize the “protected”  instance variable, defaulting to
 if not found.  If the charset encoding is specified, then all message
ids and message strings read from the catalog are converted to Unicode using
this encoding, else ASCII is assumed.
Since message ids are read as Unicode strings too, all  methods
will assume message ids as Unicode strings, not byte strings.
The entire set of key/value pairs are placed into a dictionary and set as the
“protected”  instance variable.
If the  file’s magic number is invalid, the major version number is
unexpected, or if other problems occur while reading the file, instantiating a
 class can raise .


class ¶
The following methods are overridden from the base class implementation:


(message)¶
Look up the message id in the catalog and return the corresponding message
string, as a Unicode string.  If there is no entry in the catalog for the
message id, and a fallback has been set, the look up is forwarded to the
fallback’s  method.  Otherwise, the
message id is returned.



(singular, plural, n)¶
Do a plural-forms lookup of a message id.  singular is used as the message id
for purposes of lookup in the catalog, while n is used to determine which
plural form to use.  The returned message string is a Unicode string.
If the message id is not found in the catalog, and a fallback is specified,
the request is forwarded to the fallback’s 
method.  Otherwise, when n is 1 singular is returned, and plural is
returned in all other cases.
Here is an example:





(message)¶



(singular, plural, n)¶
Equivalent to  and , but the translation
is returned as a byte string encoded in the preferred system encoding
if no encoding  was explicitly set with
.

Warning
These methods should be avoided in Python 3.  See the warning for the
 function.





Solaris message catalog support¶
The Solaris operating system defines its own binary  file format, but
since no documentation can be found on this format, it is not supported at this
time.


The Catalog constructor¶
GNOME uses a version of the  module by James Henstridge, but this
version has a slightly different API.  Its documented usage was:


For compatibility with this older module, the function  is an
alias for the  function described above.
One difference between this module and Henstridge’s: his catalog objects
supported access through a mapping API, but this appears to be unused and so is
not currently supported.



Internationalizing your programs and modules¶
Internationalization (I18N) refers to the operation by which a program is made
aware of multiple languages.  Localization (L10N) refers to the adaptation of
your program, once internationalized, to the local language and cultural habits.
In order to provide multilingual messages for your Python programs, you need to
take the following steps:

prepare your program or module by specially marking translatable strings
run a suite of tools over your marked files to generate raw messages catalogs
create language-specific translations of the message catalogs
use the  module so that message strings are properly translated

In order to prepare your code for I18N, you need to look at all the strings in
your files.  Any string that needs to be translated should be marked by wrapping
it in  — that is, a call to the function .  For example:


In this example, the string  is marked as a candidate
for translation, while the strings  and  are not.
There are a few tools to extract the strings meant for translation.
The original GNU gettext only supported C or C++ source
code but its extended version xgettext scans code written
in a number of languages, including Python, to find strings marked as
translatable.  Babel is a Python
internationalization library that includes a  script to
extract and compile message catalogs.  François Pinard’s program
called xpot does a similar job and is available as part of
his po-utils package.
(Python also includes pure-Python versions of these programs, called
pygettext.py and msgfmt.py; some Python distributions
will install them for you.  pygettext.py is similar to
xgettext, but only understands Python source code and
cannot handle other programming languages such as C or C++.
pygettext.py supports a command-line interface similar to
xgettext; for details on its use, run .  msgfmt.py is binary compatible with GNU
msgfmt.  With these two programs, you may not need the GNU
gettext package to internationalize your Python
applications.)
xgettext, pygettext, and similar tools generate
 files that are message catalogs.  They are structured
human-readable files that contain every marked string in the source
code, along with a placeholder for the translated versions of these
strings.
Copies of these  files are then handed over to the
individual human translators who write translations for every
supported natural language.  They send back the completed
language-specific versions as a  file that’s
compiled into a machine-readable  binary catalog file using
the msgfmt program.  The  files are used by the
 module for the actual translation processing at
run-time.
How you use the  module in your code depends on whether you are
internationalizing a single module or your entire application. The next two
sections will discuss each case.

Localizing your module¶
If you are localizing your module, you must take care not to make global
changes, e.g. to the built-in namespace. You should not use the GNU gettext
API but instead the class-based API.
Let’s say your module is called “spam” and the module’s various natural language
translation  files reside in  in GNU
gettext format.  Here’s what you would put at the top of your
module:




Localizing your application¶
If you are localizing your application, you can install the  function
globally into the built-in namespace, usually in the main driver file of your
application.  This will let all your application-specific files just use
 without having to explicitly install it in each file.
In the simple case then, you need only add the following bit of code to the main
driver file of your application:


If you need to set the locale directory, you can pass it into the
 function:




Changing languages on the fly¶
If your program needs to support many languages at the same time, you may want
to create multiple translation instances and then switch between them
explicitly, like so:




Deferred translations¶
In most coding situations, strings are translated where they are coded.
Occasionally however, you need to mark strings for translation, but defer actual
translation until later.  A classic example is:


Here, you want to mark the strings in the  list as being
translatable, but you don’t actually want to translate them until they are
printed.
Here is one way you can handle this situation:


This works because the dummy definition of  simply returns the string
unchanged.  And this dummy definition will temporarily override any definition
of  in the built-in namespace (until the  command). Take
care, though if you have a previous definition of  in the local
namespace.
Note that the second use of  will not identify “a” as being
translatable to the gettext program, because the parameter
is not a string literal.
Another way to handle this is with the following example:


In this case, you are marking translatable strings with the function
, which won’t conflict with any definition of .
However, you will need to teach your message extraction program to
look for translatable strings marked with . xgettext,
pygettext, , and xpot all
support this through the use of the  command-line switch.
The choice of  here is totally arbitrary; it could have just
as easily been .



Acknowledgements¶
The following people contributed code, feedback, design suggestions, previous
implementations, and valuable experience to the creation of this module:

Peter Funk
James Henstridge
Juan David Ibáñez Palomar
Marc-André Lemburg
Martin von Löwis
François Pinard
Barry Warsaw
Gustavo Niemeyer

Footnotes



[1]The default locale directory is system dependent; for example, on RedHat Linux
it is , but on Solaris it is .
The  module does not try to support these system dependent
defaults; instead its default is  (see
). For this reason, it is always best to call
 with an explicit absolute path at the start of your
application.





[2]See the footnote for  above.



