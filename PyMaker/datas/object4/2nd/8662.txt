link:
library/2to3.html#fixers

docs:

Fixers¶
Each step of transforming code is encapsulated in a fixer.  The command  lists them.  As documented above, each can be turned on
and off individually.  They are described here in more detail.


¶
Removes usage of .  For example  is converted to .



¶
Replaces deprecated  method names with the correct ones.






From
To












































¶
Converts  to .



¶
Converts  to .  This fixer is optional
because the  API is similar but not exactly the same as
that of .



¶
Fixes dictionary iteration methods.   is converted to
,  to , and
 to .  Similarly,
,  and  are
converted respectively to ,  and
.  It also wraps existing usages of ,
, and  in a call to .



¶
Converts  to .



¶
Converts the  statement to the  function.



¶
Removes usage of .  The argument to  is
wrapped in calls to , , and .



¶
Changes assignment of  to use of the 
module.



¶
Wraps  usage in a  call.



¶
Fixes function attributes that have been renamed.  For example,
 is converted to .



¶
Removes  statements.



¶
Renames  to .



¶
Changes  to .



¶
This optional fixer performs several transformations that make Python code
more idiomatic.  Type comparisons like  and
 are converted to .
 becomes .  This fixer also tries to make use of
 in appropriate places.  For example, this block


is changed to





¶
Detects sibling imports and converts them to relative imports.



¶
Handles module renames in the standard library.



¶
Handles other modules renames in the standard library.  It is separate from
the  fixer only because of technical limitations.



¶
Converts  to .



¶
Converts  to .



¶
Fixes duplicate types in the second argument of .  For
example,  is converted to  and  is converted to
.



¶
Removes imports of , , and
.  Imports of  are also
changed to .



¶
Changes usage of , , and
 to their built-in equivalents.
 is changed to .



¶
Renames  to .



¶
Wraps  in a  call.  It also changes 
to .  Using  disables this
fixer.



¶
Converts the old metaclass syntax ( in the class
body) to the new ().



¶
Fixes old method attribute names.  For example,  is converted
to .



¶
Converts the old not-equal syntax, , to .



¶
Converts the use of iterator’s  methods to the
 function.  It also renames  methods to
.



¶
Renames  to .



¶
Converts octal literals into the new syntax.



¶
Converts calls to various functions in the  module to other,
but equivalent, function calls.  When needed, the appropriate 
statements are added, e.g. .  The following mapping
are made:






From
To





























¶
Add extra parenthesis where they are required in list comprehensions.  For
example,  becomes .



¶
Converts the  statement to the  function.



¶
Converts  to , and  to .  If  is a tuple, the translation will be
incorrect because substituting tuples for exceptions has been removed in 3.0.



¶
Converts  to .



¶
Handles the move of  to .



¶
Converts  to .



¶
Changes  to .



¶
Replaces backtick repr with the  function.



¶
Replaces use of the  constructor with set literals.  This fixer
is optional.



¶
Renames  to .



¶
Changes the deprecated , ,
 to use .



¶
Fixes the API change in generator’s  method.



¶
Removes implicit tuple parameter unpacking.  This fixer inserts temporary
variables.



¶
Fixes code broken from the removal of some members in the 
module.



¶
Renames  to .



¶
Handles the rename of  and  to the 
package.



¶
Removes excess whitespace from comma separated items.  This fixer is
optional.



¶
Renames  to  and wraps existing 
calls with .



¶
Changes  to .



¶
Wraps  usage in a  call.  This is disabled when
 appears.

