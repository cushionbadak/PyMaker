link:
library/sys.html#sys.stderr

docs:


¶

¶

¶
File objects used by the interpreter for standard
input, output and errors:

 is used for all interactive input (including calls to
);
 is used for the output of  and expression
statements and for the prompts of ;
The interpreter’s own prompts and its error messages go to .

These streams are regular text files like those
returned by the  function.  Their parameters are chosen as
follows:

The character encoding is platform-dependent.  Non-Windows
platforms use the locale encoding (see
).
On Windows, UTF-8 is used for the console device.  Non-character
devices such as disk files and pipes use the system locale
encoding (i.e. the ANSI codepage).  Non-console character
devices such as NUL (i.e. where isatty() returns True) use the
value of the console input and output codepages at startup,
respectively for stdin and stdout/stderr. This defaults to the
system locale encoding if the process is not initially attached
to a console.
The special behaviour of the console can be overridden
by setting the environment variable PYTHONLEGACYWINDOWSSTDIO
before starting Python. In that case, the console codepages are
used as for any other character device.
Under all platforms, you can override the character encoding by
setting the  environment variable before
starting Python or by using the new   command
line option and  environment variable.  However,
for the Windows console, this only applies when
 is also set.

When interactive,  and  streams are line-buffered.
Otherwise, they are block-buffered like regular text files.  You can
override this value with the  command-line option.



Note
To write or read binary data from/to the standard streams, use the
underlying binary  object.  For example, to
write bytes to , use .
However, if you are writing a library (and do not control in which
context its code will be executed), be aware that the standard streams
may be replaced with file-like objects like  which
do not support the  attribute.

