link:
library/urllib.request.html#basehandler-objects

docs:

BaseHandler Objects¶
 objects provide a couple of methods that are directly
useful, and others that are meant to be used by derived classes.  These are
intended for direct use:


(director)¶
Add a director as parent.



()¶
Remove any parents.

The following attribute and methods should only be used by classes derived from
.

Note
The convention has been adopted that subclasses defining
 or  methods are named
; all others are named .



¶
A valid , which can be used to open using a different
protocol, or handle errors.



(req)¶
This method is not defined in , but subclasses should
define it if they want to catch all URLs.
This method, if implemented, will be called by the parent
.  It should return a file-like object as described in
the return value of the  of , or .
It should raise , unless a truly exceptional
thing happens (for example,  should not be mapped to
).
This method will be called before any protocol-specific open method.




This method is not defined in , but subclasses should
define it if they want to handle URLs with the given protocol.
This method, if defined, will be called by the parent .
Return values should be the same as for  .



(req)¶
This method is not defined in , but subclasses should
define it if they want to catch all URLs with no specific registered handler to
open it.
This method, if implemented, will be called by the 
.  Return values should be the same as for
.



(req, fp, code, msg, hdrs)¶
This method is not defined in , but subclasses should
override it if they intend to provide a catch-all for otherwise unhandled HTTP
errors.  It will be called automatically by the   getting
the error, and should not normally be called in other circumstances.
req will be a  object, fp will be a file-like object with
the HTTP error body, code will be the three-digit code of the error, msg
will be the user-visible explanation of the code and hdrs will be a mapping
object with the headers of the error.
Return values and exceptions raised should be the same as those of
.




nnn should be a three-digit HTTP error code.  This method is also not defined
in , but will be called, if it exists, on an instance of a
subclass, when an HTTP error with code nnn occurs.
Subclasses should override this method to handle specific HTTP errors.
Arguments, return values and exceptions raised should be the same as for
.




This method is not defined in , but subclasses should
define it if they want to pre-process requests of the given protocol.
This method, if defined, will be called by the parent .
req will be a  object. The return value should be a
 object.




This method is not defined in , but subclasses should
define it if they want to post-process responses of the given protocol.
This method, if defined, will be called by the parent .
req will be a  object. response will be an object
implementing the same interface as the return value of .  The
return value should implement the same interface as the return value of
.

