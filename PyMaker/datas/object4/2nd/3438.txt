link:
library/argparse.html#the-parse-args-method

docs:

The parse_args() method¶


(args=None, namespace=None)¶
Convert argument strings to objects and assign them as attributes of the
namespace.  Return the populated namespace.
Previous calls to  determine exactly what objects are
created and how they are assigned. See the documentation for
 for details.

args - List of strings to parse.  The default is taken from
.
namespace - An object to take the attributes.  The default is a new empty
 object.



Option value syntax¶
The  method supports several ways of
specifying the value of an option (if it takes one).  In the simplest case, the
option and its value are passed as two separate arguments:


For long options (options with names longer than a single character), the option
and value can also be passed as a single command-line argument, using  to
separate them:


For short options (options only one character long), the option and its value
can be concatenated:


Several short options can be joined together, using only a single  prefix,
as long as only the last option (or none of them) requires a value:




Invalid arguments¶
While parsing the command line,  checks for a
variety of errors, including ambiguous options, invalid types, invalid options,
wrong number of positional arguments, etc.  When it encounters such an error,
it exits and prints the error along with a usage message:




Arguments containing ¶
The  method attempts to give errors whenever
the user has clearly made a mistake, but some situations are inherently
ambiguous.  For example, the command-line argument  could either be an
attempt to specify an option or an attempt to provide a positional argument.
The  method is cautious here: positional
arguments may only begin with  if they look like negative numbers and
there are no options in the parser that look like negative numbers:


If you have positional arguments that must begin with  and don’t look
like negative numbers, you can insert the pseudo-argument  which tells
 that everything after that is a positional
argument:




Argument abbreviations (prefix matching)¶
The  method by default
allows long options to be abbreviated to a prefix, if the abbreviation is
unambiguous (the prefix matches a unique option):


An error is produced for arguments that could produce more than one options.
This feature can be disabled by setting allow_abbrev to .


Beyond ¶
Sometimes it may be useful to have an ArgumentParser parse arguments other than those
of .  This can be accomplished by passing a list of strings to
.  This is useful for testing at the
interactive prompt:




The Namespace object¶


class ¶
Simple class used by default by  to create
an object holding attributes and return it.

This class is deliberately simple, just an  subclass with a
readable string representation. If you prefer to have dict-like view of the
attributes, you can use the standard Python idiom, :


It may also be useful to have an  assign attributes to an
already existing object, rather than a new  object.  This can
be achieved by specifying the  keyword argument:



