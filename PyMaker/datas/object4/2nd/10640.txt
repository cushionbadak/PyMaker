link:
faq/library.html#how-do-i-read-or-write-binary-data

docs:

How do I read (or write) binary data?¶
To read or write complex binary data formats, it’s best to use the 
module.  It allows you to take a string containing binary data (usually numbers)
and convert it to Python objects; and vice versa.
For example, the following code reads two 2-byte integers and one 4-byte integer
in big-endian format from a file:


The ‘>’ in the format string forces big-endian data; the letter ‘h’ reads one
“short integer” (2 bytes), and ‘l’ reads one “long integer” (4 bytes) from the
string.
For data that is more regular (e.g. a homogeneous list of ints or floats),
you can also use the  module.

Note
To read and write binary data, it is mandatory to open the file in
binary mode (here, passing  to ).  If you use
 instead (the default), the file will be open in text mode
and  will return  objects rather than
 objects.

