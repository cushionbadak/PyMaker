link:
library/xml.dom.html#conformance

docs:

Conformance¶
This section describes the conformance requirements and relationships between
the Python DOM API, the W3C DOM recommendations, and the OMG IDL mapping for
Python.

Type Mapping¶
The IDL types used in the DOM specification are mapped to Python types
according to the following table.






IDL Type
Python Type




 or 











 or 








Accessor Methods¶
The mapping from OMG IDL to Python defines accessor functions for IDL
 declarations in much the way the Java mapping does.
Mapping the IDL declarations


yields three accessor functions:  a “get” method for 
(), and “get” and “set” methods for 
( and ).  The mapping, in
particular, does not require that the IDL attributes are accessible as normal
Python attributes:   is not required to work, and may
raise an .
The Python DOM API, however, does require that normal attribute access work.
This means that the typical surrogates generated by Python IDL compilers are not
likely to work, and wrapper objects may be needed on the client if the DOM
objects are accessed via CORBA. While this does require some additional
consideration for CORBA DOM clients, the implementers with experience using DOM
over CORBA from Python do not consider this a problem.  Attributes that are
declared  may not restrict write access in all DOM
implementations.
In the Python DOM API, accessor functions are not required.  If provided, they
should take the form defined by the Python IDL mapping, but these methods are
considered unnecessary since the attributes are accessible directly from Python.
“Set” accessors should never be provided for  attributes.
The IDL definitions do not fully embody the requirements of the W3C DOM API,
such as the notion of certain objects, such as the return value of
, being “live”.  The Python DOM API does not require
implementations to enforce such requirements.

