link:
library/asyncio-task.html#waiting-primitives

docs:

Waiting Primitives¶


coroutine (aws, *, loop=None, timeout=None, return_when=ALL_COMPLETED)¶
Run awaitable objects in the aws
set concurrently and block until the condition specified
by return_when.
If any awaitable in aws is a coroutine, it is automatically
scheduled as a Task.  Passing coroutines objects to
 directly is deprecated as it leads to
confusing behavior.
Returns two sets of Tasks/Futures: .
Usage:


The loop argument is deprecated and scheduled for removal
in Python 3.10.
timeout (a float or int), if specified, can be used to control
the maximum number of seconds to wait before returning.
Note that this function does not raise .
Futures or Tasks that aren’t done when the timeout occurs are simply
returned in the second set.
return_when indicates when this function should return.  It must
be one of the following constants:






Constant
Description




The function will return when any
future finishes or is cancelled.


The function will return when any
future finishes by raising an
exception.  If no future raises an
exception then it is equivalent to
.


The function will return when all
futures finish or are cancelled.



Unlike ,  does not cancel the
futures when a timeout occurs.

Note
 schedules coroutines as Tasks automatically and later
returns those implicitly created Task objects in 
sets.  Therefore the following code won’t work as expected:


Here is how the above snippet can be fixed:


Passing coroutine objects to  directly is
deprecated.




(aws, *, loop=None, timeout=None)¶
Run awaitable objects in the aws
set concurrently.  Return an iterator of  objects.
Each Future object returned represents the earliest result
from the set of the remaining awaitables.
Raises  if the timeout occurs before
all Futures are done.
Example:



