link:
library/doctest.html#debugging

docs:

Debugging¶
Doctest provides several mechanisms for debugging doctest examples:

Several functions convert doctests to executable Python programs, which can be
run under the Python debugger, .

The  class is a subclass of  that
raises an exception for the first failing example, containing information about
that example. This information can be used to perform post-mortem debugging on
the example.

The  cases generated by  support the
 method defined by .

You can add a call to  in a doctest example, and you’ll
drop into the Python debugger when that line is executed.  Then you can inspect
current values of variables, and so on.  For example, suppose 
contains just this module docstring:


Then an interactive Python session may look like this:




Functions that convert doctests to Python code, and possibly run the synthesized
code under the debugger:


(s)¶
Convert text with examples to a script.
Argument s is a string containing doctest examples.  The string is converted
to a Python script, where doctest examples in s are converted to regular code,
and everything else is converted to Python comments.  The generated script is
returned as a string. For example,


displays:


This function is used internally by other functions (see below), but can also be
useful when you want to transform an interactive Python session into a Python
script.



(module, name)¶
Convert the doctest for an object to a script.
Argument module is a module object, or dotted name of a module, containing the
object whose doctests are of interest.  Argument name is the name (within the
module) of the object with the doctests of interest.  The result is a string,
containing the object’s docstring converted to a Python script, as described for
 above.  For example, if module 
contains a top-level function , then


prints a script version of function ’s docstring, with doctests
converted to code, and the rest placed in comments.



(module, name, pm=False)¶
Debug the doctests for an object.
The module and name arguments are the same as for function
 above.  The synthesized Python script for the named object’s
docstring is written to a temporary file, and then that file is run under the
control of the Python debugger, .
A shallow copy of  is used for both local and global
execution context.
Optional argument pm controls whether post-mortem debugging is used.  If pm
has a true value, the script file is run directly, and the debugger gets
involved only if the script terminates via raising an unhandled exception.  If
it does, then post-mortem debugging is invoked, via ,
passing the traceback object from the unhandled exception.  If pm is not
specified, or is false, the script is run under the debugger from the start, via
passing an appropriate  call to .



(src, pm=False, globs=None)¶
Debug the doctests in a string.
This is like function  above, except that a string containing
doctest examples is specified directly, via the src argument.
Optional argument pm has the same meaning as in function  above.
Optional argument globs gives a dictionary to use as both local and global
execution context.  If not specified, or , an empty dictionary is used.
If specified, a shallow copy of the dictionary is used.

The  class, and the special exceptions it may raise, are of
most interest to testing framework authors, and will only be sketched here.  See
the source code, and especially ’s docstring (which is a
doctest!) for more details:


class (checker=None, verbose=None, optionflags=0)¶
A subclass of  that raises an exception as soon as a
failure is encountered.  If an unexpected exception occurs, an
 exception is raised, containing the test, the
example, and the original exception.  If the output doesn’t match, then a
 exception is raised, containing the test, the example, and
the actual output.
For information about the constructor parameters and methods, see the
documentation for  in section Advanced API.

There are two exceptions that may be raised by  instances:


exception (test, example, got)¶
An exception raised by  to signal that a doctest example’s
actual output did not match its expected output. The constructor arguments are
used to initialize the attributes of the same names.

 defines the following attributes:


¶
The  object that was being run when the example failed.



¶
The  that failed.



¶
The example’s actual output.



exception (test, example, exc_info)¶
An exception raised by  to signal that a doctest
example raised an unexpected exception.  The constructor arguments are used
to initialize the attributes of the same names.

 defines the following attributes:


¶
The  object that was being run when the example failed.



¶
The  that failed.



¶
A tuple containing information about the unexpected exception, as returned by
.

