link:
library/crypt.html#module-crypt

docs:

 — Function to check Unix passwords¶
Source code: Lib/crypt.py

This module implements an interface to the crypt(3) routine, which is
a one-way hash function based upon a modified DES algorithm; see the Unix man
page for further details.  Possible uses include storing hashed passwords
so you can check passwords without storing the actual password, or attempting
to crack Unix passwords with a dictionary.
Notice that the behavior of this module depends on the actual implementation  of
the crypt(3) routine in the running system.  Therefore, any
extensions available on the current implementation will also  be available on
this module.

Hashing Methods¶

New in version 3.3.

The  module defines the list of hashing methods (not all methods
are available on all platforms):


¶
A Modular Crypt Format method with 16 character salt and 86 character
hash based on the SHA-512 hash function.  This is the strongest method.



¶
Another Modular Crypt Format method with 16 character salt and 43
character hash based on the SHA-256 hash function.



¶
Another Modular Crypt Format method with 22 character salt and 31
character hash based on the Blowfish cipher.

New in version 3.7.




¶
Another Modular Crypt Format method with 8 character salt and 22
character hash based on the MD5 hash function.



¶
The traditional method with a 2 character salt and 13 characters of
hash.  This is the weakest method.



Module Attributes¶

New in version 3.3.



¶
A list of available password hashing algorithms, as
 objects.  This list is sorted from strongest to
weakest.



Module Functions¶
The  module defines the following functions:


(word, salt=None)¶
word will usually be a user’s password as typed at a prompt or  in a graphical
interface.  The optional salt is either a string as returned from
, one of the  values (though not all
may be available on all platforms), or a full encrypted password
including salt, as returned by this function.  If salt is not
provided, the strongest method will be used (as returned by
).
Checking a password is usually done by passing the plain-text password
as word and the full results of a previous  call,
which should be the same as the results of this call.
salt (either a random 2 or 16 character string, possibly prefixed with
 to indicate the method) which will be used to perturb the
encryption algorithm.  The characters in salt must be in the set
, with the exception of Modular Crypt Format which
prefixes a .
Returns the hashed password as a string, which will be composed of
characters from the same alphabet as the salt.
Since a few crypt(3) extensions allow different values, with
different sizes in the salt, it is recommended to use  the full crypted
password as salt when checking for a password.

Changed in version 3.3: Accept  values in addition to strings for salt.




(method=None, *, rounds=None)¶
Return a randomly generated salt of the specified method.  If no
method is given, the strongest method available as returned by
 is used.
The return value is a string suitable for passing as the salt argument
to .
rounds specifies the number of rounds for ,
 and .
For  and  it must be an integer between
 and , the default is .  For
 it must be a power of two between  (24)
and  (231), the default is 
(212).

New in version 3.3.


Changed in version 3.7: Added the rounds parameter.




Examples¶
A simple example illustrating typical use (a constant-time comparison
operation is needed to limit exposure to timing attacks.
 is suitable for this purpose):


To generate a hash of a password using the strongest available method and
check it against the original:



