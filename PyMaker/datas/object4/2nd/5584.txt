link:
library/email.policy.html#email.policy.EmailPolicy

docs:


class (**kw)¶
This concrete  provides behavior that is intended to be fully
compliant with the current email RFCs.  These include (but are not limited
to) RFC 5322, RFC 2047, and the current MIME RFCs.
This policy adds new header parsing and folding algorithms.  Instead of
simple strings, headers are  subclasses with attributes that depend
on the type of the field.  The parsing and folding algorithm fully implement
RFC 2047 and RFC 5322.
The default value for the 
attribute is .
In addition to the settable attributes listed above that apply to all
policies, this policy adds the following additional attributes:

New in version 3.6: [1]



¶
If , follow RFC 5322, supporting non-ASCII characters in
headers by encoding them as “encoded words”.  If , follow
RFC 6532 and use  encoding for headers.  Messages
formatted in this way may be passed to SMTP servers that support
the  extension (RFC 6531).



¶
If the value for a header in the  object originated from a
 (as opposed to being set by a program), this
attribute indicates whether or not a generator should refold that value
when transforming the message back into serialized form.  The possible
values are:







all source values use original folding


source values that have any line that is longer than
 will be refolded


all values are refolded.



The default is .



¶
A callable that takes two arguments,  and , where
 is a header field name and  is an unfolded header field
value, and returns a string subclass that represents that header.  A
default  (see ) is provided
that supports custom parsing for the various address and date RFC 5322
header field types, and the major MIME header field stypes.  Support for
additional custom parsing will be added in the future.



¶
An object with at least two methods: get_content and set_content.  When
the  or
 method of an
 object is called, it calls the
corresponding method of this object, passing it the message object as its
first argument, and any arguments or keywords that were passed to it as
additional arguments.  By default  is set to
.

New in version 3.4.


The class provides the following concrete implementations of the abstract
methods of :


(name)¶
Returns the value of the
 attribute of the
specialized class used to represent the header with the given name.



(sourcelines)¶
The name is parsed as everything up to the ‘’ and returned
unmodified.  The value is determined by stripping leading whitespace off
the remainder of the first line, joining all subsequent lines together,
and stripping any trailing carriage return or linefeed characters.



(name, value)¶
The name is returned unchanged.  If the input value has a 
attribute and it matches name ignoring case, the value is returned
unchanged.  Otherwise the name and value are passed to
, and the resulting header object is returned as
the value.  In this case a  is raised if the input value
contains CR or LF characters.



(name, value)¶
If the value has a  attribute, it is returned to unmodified.
Otherwise the name, and the value with any CR or LF characters
removed, are passed to the , and the resulting
header object is returned.  Any surrogateescaped bytes get turned into
the unicode unknown-character glyph.



(name, value)¶
Header folding is controlled by the  policy setting.
A value is considered to be a ‘source value’ if and only if it does not
have a  attribute (having a  attribute means it is a
header object of some sort).  If a source value needs to be refolded
according to the policy, it is converted into a header object by
passing the name and the value with any CR and LF characters removed
to the .  Folding of a header object is done by
calling its  method with the current policy.
Source values are split into lines using .  If
the value is not to be refolded, the lines are rejoined using the
 from the policy and returned.  The exception is lines
containing non-ascii binary data.  In that case the value is refolded
regardless of the  setting, which causes the binary data
to be CTE encoded using the  charset.



(name, value)¶
The same as  if  is , except
that the returned value is bytes.
If  is , non-ASCII binary data is
converted back
into bytes.  Headers with binary data are not refolded, regardless of the
 setting, since there is no way to know whether the
binary data consists of single byte characters or multibyte characters.

