link:
library/asyncio-future.html#futures

docs:

Futures¶
Future objects are used to bridge low-level callback-based code
with high-level async/await code.

Future Functions¶


(obj)¶
Return  if obj is either of:

an instance of ,
an instance of ,
a Future-like object with a 
attribute.


New in version 3.5.




(obj, *, loop=None)¶
Return:

obj argument as is, if obj is a ,
a , or a Future-like object (
is used for the test.)
a  object wrapping obj, if obj is a
coroutine ( is used for the test.)
a  object that would await on obj, if obj is an
awaitable ( is used for the test.)

If obj is neither of the above a  is raised.

Important
See also the  function which is the
preferred way for creating new Tasks.


Changed in version 3.5.1: The function accepts any awaitable object.




(future, *, loop=None)¶
Wrap a  object in a
 object.



Future Object¶


class (*, loop=None)¶
A Future represents an eventual result of an asynchronous
operation.  Not thread-safe.
Future is an awaitable object.  Coroutines can await on
Future objects until they either have a result or an exception
set, or until they are cancelled.
Typically Futures are used to enable low-level
callback-based code (e.g. in protocols implemented using asyncio
transports)
to interoperate with high-level async/await code.
The rule of thumb is to never expose Future objects in user-facing
APIs, and the recommended way to create a Future object is to call
.  This way alternative event loop
implementations can inject their own optimized implementations
of a Future object.

Changed in version 3.7: Added support for the  module.



()¶
Return the result of the Future.
If the Future is done and has a result set by the
 method, the result value is returned.
If the Future is done and has an exception set by the
 method, this method raises the exception.
If the Future has been cancelled, this method raises
a  exception.
If the Future’s result isn’t yet available, this method raises
a  exception.



(result)¶
Mark the Future as done and set its result.
Raises a  error if the Future is
already done.



(exception)¶
Mark the Future as done and set an exception.
Raises a  error if the Future is
already done.



()¶
Return  if the Future is done.
A Future is done if it was cancelled or if it has a result
or an exception set with  or
 calls.



()¶
Return  if the Future was cancelled.
The method is usually used to check if a Future is not
cancelled before setting a result or an exception for it:





(callback, *, context=None)¶
Add a callback to be run when the Future is done.
The callback is called with the Future object as its only
argument.
If the Future is already done when this method is called,
the callback is scheduled with .
An optional keyword-only context argument allows specifying a
custom  for the callback to run in.
The current context is used when no context is provided.
 can be used to pass parameters
to the callback, e.g.:



Changed in version 3.7: The context keyword-only parameter was added.
See PEP 567 for more details.




(callback)¶
Remove callback from the callbacks list.
Returns the number of callbacks removed, which is typically 1,
unless a callback was added more than once.



()¶
Cancel the Future and schedule callbacks.
If the Future is already done or cancelled, return .
Otherwise, change the Future’s state to cancelled,
schedule the callbacks, and return .



()¶
Return the exception that was set on this Future.
The exception (or  if no exception was set) is
returned only if the Future is done.
If the Future has been cancelled, this method raises a
 exception.
If the Future isn’t done yet, this method raises an
 exception.



()¶
Return the event loop the Future object is bound to.

New in version 3.7.



This example creates a Future object, creates and schedules an
asynchronous Task to set result for the Future, and waits until
the Future has a result:



Important
The Future object was designed to mimic
.  Key differences include:

unlike asyncio Futures, 
instances cannot be awaited.
 and 
do not accept the timeout argument.
 and 
raise an  exception when the Future is not
done.
Callbacks registered with 
are not called immediately.  They are scheduled with
 instead.
asyncio Future is not compatible with the
 and
 functions.



