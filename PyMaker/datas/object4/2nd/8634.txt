link:
library/unittest.mock-examples.html#using-mock

docs:

Using Mock¶

Mock Patching Methods¶
Common uses for  objects include:

Patching methods
Recording method calls on objects

You might want to replace a method on an object to check that
it is called with the correct arguments by another part of the system:


Once our mock has been used ( in this example) it has methods
and attributes that allow you to make assertions about how it has been used.

Note
In most of these examples the  and  classes
are interchangeable. As the  is the more capable class it makes
a sensible one to use by default.

Once the mock has been called its  attribute is set to
. More importantly we can use the  or
 method to check that it was called with
the correct arguments.
This example tests that calling  results in a call to
the  method:




Mock for Method Calls on an Object¶
In the last example we patched a method directly on an object to check that it
was called correctly. Another common use case is to pass an object into a
method (or some part of the system under test) and then check that it is used
in the correct way.
The simple  below has a  method. If it is called with
an object then it calls  on it.


So to test it we need to pass in an object with a  method and check
that it was called correctly.


We don’t have to do any work to provide the ‘close’ method on our mock.
Accessing close creates it. So, if ‘close’ hasn’t already been called then
accessing it in the test will create it, but 
will raise a failure exception.


Mocking Classes¶
A common use case is to mock out classes instantiated by your code under test.
When you patch a class, then that class is replaced with a mock. Instances
are created by calling the class. This means you access the “mock instance”
by looking at the return value of the mocked class.
In the example below we have a function  that instantiates 
and calls a method on it. The call to  replaces the class  with a
mock. The  instance is the result of calling the mock, so it is configured
by modifying the mock .




Naming your mocks¶
It can be useful to give your mocks a name. The name is shown in the repr of
the mock and can be helpful when the mock appears in test failure messages. The
name is also propagated to attributes or methods of the mock:




Tracking all Calls¶
Often you want to track more than a single call to a method. The
 attribute records all calls
to child attributes of the mock - and also to their children.


If you make an assertion about  and any unexpected methods
have been called, then the assertion will fail. This is useful because as well
as asserting that the calls you expected have been made, you are also checking
that they were made in the right order and with no additional calls:
You use the  object to construct lists for comparing with
:


However, parameters to calls that return mocks are not recorded, which means it is not
possible to track nested calls where the parameters used to create ancestors are important:




Setting Return Values and Attributes¶
Setting the return values on a mock object is trivially easy:


Of course you can do the same for methods on the mock:


The return value can also be set in the constructor:


If you need an attribute setting on your mock, just do it:


Sometimes you want to mock up a more complex situation, like for example
. If we wanted this call to
return a list, then we have to configure the result of the nested call.
We can use  to construct the set of calls in a “chained call” like
this for easy assertion afterwards:


It is the call to  that turns our call object into a list of
calls representing the chained calls.


Raising exceptions with mocks¶
A useful attribute is . If you set this to an
exception class or instance then the exception will be raised when the mock
is called.




Side effect functions and iterables¶
 can also be set to a function or an iterable. The use case for
 as an iterable is where your mock is going to be called several
times, and you want each call to return a different value. When you set
 to an iterable every call to the mock returns the next value
from the iterable:


For more advanced use cases, like dynamically varying the return values
depending on what the mock is called with,  can be a function.
The function will be called with the same arguments as the mock. Whatever the
function returns is what the call returns:




Creating a Mock from an Existing Object¶
One problem with over use of mocking is that it couples your tests to the
implementation of your mocks rather than your real code. Suppose you have a
class that implements . In a test for another class, you
provide a mock of this object that also provides . If later
you refactor the first class, so that it no longer has  - then
your tests will continue to pass even though your code is now broken!
 allows you to provide an object as a specification for the mock,
using the spec keyword argument. Accessing methods / attributes on the
mock that don’t exist on your specification object will immediately raise an
attribute error. If you change the implementation of your specification, then
tests that use that class will start failing immediately without you having to
instantiate the class in those tests.


Using a specification also enables a smarter matching of calls made to the
mock, regardless of whether some parameters were passed as positional or
named arguments:


If you want this smarter matching to also work with method calls on the mock,
you can use auto-speccing.
If you want a stronger form of specification that prevents the setting
of arbitrary attributes as well as the getting of them then you can use
spec_set instead of spec.

