link:
library/asyncio-eventloop.html#creating-futures-and-tasks

docs:

Creating Futures and Tasks¶


()¶
Create an  object attached to the event loop.
This is the preferred way to create Futures in asyncio. This lets
third-party event loops provide alternative implementations of
the Future object (with better performance or instrumentation).

New in version 3.5.2.




(coro)¶
Schedule the execution of a Coroutines.
Return a  object.
Third-party event loops can use their own subclass of 
for interoperability. In this case, the result type is a subclass
of .



(factory)¶
Set a task factory that will be used by
.
If factory is  the default task factory will be set.
Otherwise, factory must be a callable with the signature matching
, where loop is a reference to the active
event loop, and coro is a coroutine object.  The callable
must return a -compatible object.



()¶
Return a task factory or  if the default one is in use.

