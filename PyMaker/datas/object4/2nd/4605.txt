link:
library/asyncio-task.html#coroutines-and-tasks

docs:

Coroutines and Tasks¶
This section outlines high-level asyncio APIs to work with coroutines
and Tasks.


Coroutines
Awaitables
Running an asyncio Program
Creating Tasks
Sleeping
Running Tasks Concurrently
Shielding From Cancellation
Timeouts
Waiting Primitives
Scheduling From Other Threads
Introspection
Task Object
Generator-based Coroutines



Coroutines¶
Coroutines declared with async/await syntax is the preferred way of
writing asyncio applications.  For example, the following snippet
of code (requires Python 3.7+) prints “hello”, waits 1 second,
and then prints “world”:


Note that simply calling a coroutine will not schedule it to
be executed:


To actually run a coroutine, asyncio provides three main mechanisms:

The  function to run the top-level
entry point “main()” function (see the above example.)

Awaiting on a coroutine.  The following snippet of code will
print “hello” after waiting for 1 second, and then print “world”
after waiting for another 2 seconds:


Expected output:



The  function to run coroutines
concurrently as asyncio .
Let’s modify the above example and run two  coroutines
concurrently:


Note that expected output now shows that the snippet runs
1 second faster than before:






Awaitables¶
We say that an object is an awaitable object if it can be used
in an  expression.  Many asyncio APIs are designed to
accept awaitables.
There are three main types of awaitable objects:
coroutines, Tasks, and Futures.
Coroutines
Python coroutines are awaitables and therefore can be awaited from
other coroutines:



Important
In this documentation the term “coroutine” can be used for
two closely related concepts:

a coroutine function: an  function;
a coroutine object: an object returned by calling a
coroutine function.


asyncio also supports legacy generator-based coroutines.
Tasks
Tasks are used to schedule coroutines concurrently.
When a coroutine is wrapped into a Task with functions like
 the coroutine is automatically
scheduled to run soon:


Futures
A  is a special low-level awaitable object that
represents an eventual result of an asynchronous operation.
When a Future object is awaited it means that the coroutine will
wait until the Future is resolved in some other place.
Future objects in asyncio are needed to allow callback-based code
to be used with async/await.
Normally there is no need to create Future objects at the
application level code.
Future objects, sometimes exposed by libraries and some asyncio
APIs, can be awaited:


A good example of a low-level function that returns a Future object
is .


Running an asyncio Program¶


(coro, *, debug=False)¶
This function runs the passed coroutine, taking care of
managing the asyncio event loop and finalizing asynchronous
generators.
This function cannot be called when another asyncio event loop is
running in the same thread.
If debug is , the event loop will be run in debug mode.
This function always creates a new event loop and closes it at
the end.  It should be used as a main entry point for asyncio
programs, and should ideally only be called once.

New in version 3.7: Important: this function has been added to asyncio in
Python 3.7 on a provisional basis.




Creating Tasks¶


(coro)¶
Wrap the coro coroutine into a 
and schedule its execution.  Return the Task object.
The task is executed in the loop returned by ,
 is raised if there is no running loop in
current thread.
This function has been added in Python 3.7.  Prior to
Python 3.7, the low-level  function
can be used instead:



New in version 3.7.




Sleeping¶


coroutine (delay, result=None, *, loop=None)¶
Block for delay seconds.
If result is provided, it is returned to the caller
when the coroutine completes.
 always suspends the current task, allowing other tasks
to run.
The loop argument is deprecated and scheduled for removal
in Python 3.10.
Example of coroutine displaying the current date every second
for 5 seconds:





Running Tasks Concurrently¶


awaitable (*aws, loop=None, return_exceptions=False)¶
Run awaitable objects in the aws
sequence concurrently.
If any awaitable in aws is a coroutine, it is automatically
scheduled as a Task.
If all awaitables are completed successfully, the result is an
aggregate list of returned values.  The order of result values
corresponds to the order of awaitables in aws.
If return_exceptions is  (default), the first
raised exception is immediately propagated to the task that
awaits on .  Other awaitables in the aws sequence
won’t be cancelled and will continue to run.
If return_exceptions is , exceptions are treated the
same as successful results, and aggregated in the result list.
If  is cancelled, all submitted awaitables
(that have not completed yet) are also cancelled.
If any Task or Future from the aws sequence is cancelled, it is
treated as if it raised  – the 
call is not cancelled in this case.  This is to prevent the
cancellation of one submitted Task/Future to cause other
Tasks/Futures to be cancelled.
Example:



Changed in version 3.7: If the gather itself is cancelled, the cancellation is
propagated regardless of return_exceptions.




Shielding From Cancellation¶


awaitable (aw, *, loop=None)¶
Protect an awaitable object
from being .
If aw is a coroutine it is automatically scheduled as a Task.
The statement:


is equivalent to:


except that if the coroutine containing it is cancelled, the
Task running in  is not cancelled.  From the point
of view of , the cancellation did not happen.
Although its caller is still cancelled, so the “await” expression
still raises a .
If  is cancelled by other means (i.e. from within
itself) that would also cancel .
If it is desired to completely ignore cancellation (not recommended)
the  function should be combined with a try/except
clause, as follows:





Timeouts¶


coroutine (aw, timeout, *, loop=None)¶
Wait for the aw awaitable
to complete with a timeout.
If aw is a coroutine it is automatically scheduled as a Task.
timeout can either be  or a float or int number of seconds
to wait for.  If timeout is , block until the future
completes.
If a timeout occurs, it cancels the task and raises
.
To avoid the task ,
wrap it in .
The function will wait until the future is actually cancelled,
so the total wait time may exceed the timeout.
If the wait is cancelled, the future aw is also cancelled.
The loop argument is deprecated and scheduled for removal
in Python 3.10.
Example:



Changed in version 3.7: When aw is cancelled due to a timeout,  waits
for aw to be cancelled.  Previously, it raised
 immediately.




Waiting Primitives¶


coroutine (aws, *, loop=None, timeout=None, return_when=ALL_COMPLETED)¶
Run awaitable objects in the aws
set concurrently and block until the condition specified
by return_when.
If any awaitable in aws is a coroutine, it is automatically
scheduled as a Task.  Passing coroutines objects to
 directly is deprecated as it leads to
confusing behavior.
Returns two sets of Tasks/Futures: .
Usage:


The loop argument is deprecated and scheduled for removal
in Python 3.10.
timeout (a float or int), if specified, can be used to control
the maximum number of seconds to wait before returning.
Note that this function does not raise .
Futures or Tasks that aren’t done when the timeout occurs are simply
returned in the second set.
return_when indicates when this function should return.  It must
be one of the following constants:






Constant
Description




The function will return when any
future finishes or is cancelled.


The function will return when any
future finishes by raising an
exception.  If no future raises an
exception then it is equivalent to
.


The function will return when all
futures finish or are cancelled.



Unlike ,  does not cancel the
futures when a timeout occurs.

Note
 schedules coroutines as Tasks automatically and later
returns those implicitly created Task objects in 
sets.  Therefore the following code won’t work as expected:


Here is how the above snippet can be fixed:


Passing coroutine objects to  directly is
deprecated.




(aws, *, loop=None, timeout=None)¶
Run awaitable objects in the aws
set concurrently.  Return an iterator of  objects.
Each Future object returned represents the earliest result
from the set of the remaining awaitables.
Raises  if the timeout occurs before
all Futures are done.
Example:





Scheduling From Other Threads¶


(coro, loop)¶
Submit a coroutine to the given event loop.  Thread-safe.
Return a  to wait for the result
from another OS thread.
This function is meant to be called from a different OS thread
than the one where the event loop is running.  Example:


If an exception is raised in the coroutine, the returned Future
will be notified.  It can also be used to cancel the task in
the event loop:


See the concurrency and multithreading
section of the documentation.
Unlike other asyncio functions this function requires the loop
argument to be passed explicitly.

New in version 3.5.1.




Introspection¶


(loop=None)¶
Return the currently running  instance, or  if
no task is running.
If loop is   is used to get
the current loop.

New in version 3.7.




(loop=None)¶
Return a set of not yet finished  objects run by
the loop.
If loop is ,  is used for getting
current loop.

New in version 3.7.




Task Object¶


class (coro, *, loop=None)¶
A  object that runs a Python
coroutine.  Not thread-safe.
Tasks are used to run coroutines in event loops.
If a coroutine awaits on a Future, the Task suspends
the execution of the coroutine and waits for the completion
of the Future.  When the Future is done, the execution of
the wrapped coroutine resumes.
Event loops use cooperative scheduling: an event loop runs
one Task at a time.  While a Task awaits for the completion of a
Future, the event loop runs other Tasks, callbacks, or performs
IO operations.
Use the high-level  function to create
Tasks, or the low-level  or
 functions.  Manual instantiation of Tasks
is discouraged.
To cancel a running Task use the  method.  Calling it
will cause the Task to throw a  exception into
the wrapped coroutine.  If a coroutine is awaiting on a Future
object during cancellation, the Future object will be cancelled.
 can be used to check if the Task was cancelled.
The method returns  if the wrapped coroutine did not
suppress the  exception and was actually
cancelled.
 inherits from  all of its
APIs except  and
.
Tasks support the  module.  When a Task
is created it copies the current context and later runs its
coroutine in the copied context.

Changed in version 3.7: Added support for the  module.



()¶
Request the Task to be cancelled.
This arranges for a  exception to be thrown
into the wrapped coroutine on the next cycle of the event loop.
The coroutine then has a chance to clean up or even deny the
request by suppressing the exception with a  …
…  …  block.
Therefore, unlike ,  does
not guarantee that the Task will be cancelled, although
suppressing cancellation completely is not common and is actively
discouraged.
The following example illustrates how coroutines can intercept
the cancellation request:





()¶
Return  if the Task is cancelled.
The Task is cancelled when the cancellation was requested with
 and the wrapped coroutine propagated the
 exception thrown into it.



()¶
Return  if the Task is done.
A Task is done when the wrapped coroutine either returned
a value, raised an exception, or the Task was cancelled.



()¶
Return the result of the Task.
If the Task is done, the result of the wrapped coroutine
is returned (or if the coroutine raised an exception, that
exception is re-raised.)
If the Task has been cancelled, this method raises
a  exception.
If the Task’s result isn’t yet available, this method raises
a  exception.



()¶
Return the exception of the Task.
If the wrapped coroutine raised an exception that exception
is returned.  If the wrapped coroutine returned normally
this method returns .
If the Task has been cancelled, this method raises a
 exception.
If the Task isn’t done yet, this method raises an
 exception.



(callback, *, context=None)¶
Add a callback to be run when the Task is done.
This method should only be used in low-level callback-based code.
See the documentation of 
for more details.



(callback)¶
Remove callback from the callbacks list.
This method should only be used in low-level callback-based code.
See the documentation of 
for more details.



(*, limit=None)¶
Return the list of stack frames for this Task.
If the wrapped coroutine is not done, this returns the stack
where it is suspended.  If the coroutine has completed
successfully or was cancelled, this returns an empty list.
If the coroutine was terminated by an exception, this returns
the list of traceback frames.
The frames are always ordered from oldest to newest.
Only one stack frame is returned for a suspended coroutine.
The optional limit argument sets the maximum number of frames
to return; by default all available frames are returned.
The ordering of the returned list differs depending on whether
a stack or a traceback is returned: the newest frames of a
stack are returned, but the oldest frames of a traceback are
returned.  (This matches the behavior of the traceback module.)



(*, limit=None, file=None)¶
Print the stack or traceback for this Task.
This produces output similar to that of the traceback module
for the frames retrieved by .
The limit argument is passed to  directly.
The file argument is an I/O stream to which the output
is written; by default output is written to .



classmethod (loop=None)¶
Return a set of all tasks for an event loop.
By default all tasks for the current event loop are returned.
If loop is , the  function
is used to get the current loop.
This method is deprecated and will be removed in
Python 3.9.  Use the  function instead.



classmethod (loop=None)¶
Return the currently running task or .
If loop is , the  function
is used to get the current loop.
This method is deprecated and will be removed in
Python 3.9.  Use the  function
instead.




Generator-based Coroutines¶

Note
Support for generator-based coroutines is deprecated and
is scheduled for removal in Python 3.10.

Generator-based coroutines predate async/await syntax.  They are
Python generators that use  expressions to await
on Futures and other coroutines.
Generator-based coroutines should be decorated with
, although this is not
enforced.


¶
Decorator to mark generator-based coroutines.
This decorator enables legacy generator-based coroutines to be
compatible with async/await code:


This decorator is deprecated and is scheduled for removal in
Python 3.10.
This decorator should not be used for 
coroutines.



(obj)¶
Return  if obj is a coroutine object.
This method is different from  because
it returns  for generator-based coroutines.



(func)¶
Return  if func is a coroutine function.
This method is different from 
because it returns  for generator-based coroutine functions
decorated with .


