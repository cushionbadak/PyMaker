link:
library/netrc.html

docs:


 — netrc file processing¶
Source code: Lib/netrc.py

The  class parses and encapsulates the netrc file format used by
the Unix ftp program and other FTP clients.


class ([file])¶
A  instance or subclass instance encapsulates data from  a netrc
file.  The initialization argument, if present, specifies the file to parse.  If
no argument is given, the file  in the user’s home directory –
as determined by  – will be read.  Otherwise,
a  exception will be raised.
Parse errors will raise  with diagnostic
information including the file name, line number, and terminating token.
If no argument is specified on a POSIX system, the presence of passwords in
the  file will raise a  if the file
ownership or permissions are insecure (owned by a user other than the user
running the process, or accessible for read or write by any other user).
This implements security behavior equivalent to that of ftp and other
programs that use .

Changed in version 3.4: Added the POSIX permission check.


Changed in version 3.7:  is used to find the location of the
 file when file is not passed as argument.




exception ¶
Exception raised by the  class when syntactical errors are
encountered in source text.  Instances of this exception provide three
interesting attributes:   is a textual explanation of the error,
 is the name of the source file, and  gives the
line number on which the error was found.


netrc Objects¶
A  instance has the following methods:


(host)¶
Return a 3-tuple  of authenticators for host.
If the netrc file did not contain an entry for the given host, return the tuple
associated with the ‘default’ entry.  If neither matching host nor default entry
is available, return .



()¶
Dump the class data as a string in the format of a netrc file. (This discards
comments and may reorder the entries.)

Instances of  have public instance variables:


¶
Dictionary mapping host names to  tuples.  The
‘default’ entry, if any, is represented as a pseudo-host by that name.



¶
Dictionary mapping macro names to string lists.


Note
Passwords are limited to a subset of the ASCII character set.  All ASCII
punctuation is allowed in passwords, however, note that whitespace and
non-printable characters are not allowed in passwords.  This is a limitation
of the way the .netrc file is parsed and may be removed in the future.



