link:
reference/import.html#cached-bytecode-invalidation

docs:

5.4.7. Cached bytecode invalidation¶
Before Python loads cached bytecode from  file, it checks whether the
cache is up-to-date with the source  file. By default, Python does this
by storing the source’s last-modified timestamp and size in the cache file when
writing it. At runtime, the import system then validates the cache file by
checking the stored metadata in the cache file against at source’s
metadata.
Python also supports “hash-based” cache files, which store a hash of the source
file’s contents rather than its metadata. There are two variants of hash-based
 files: checked and unchecked. For checked hash-based  files,
Python validates the cache file by hashing the source file and comparing the
resulting hash with the hash in the cache file. If a checked hash-based cache
file is found to be invalid, Python regenerates it and writes a new checked
hash-based cache file. For unchecked hash-based  files, Python simply
assumes the cache file is valid if it exists. Hash-based  files
validation behavior may be overridden with the 
flag.

Changed in version 3.7: Added hash-based  files. Previously, Python only supported
timestamp-based invalidation of bytecode caches.

