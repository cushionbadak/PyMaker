link:
library/math.html#module-math

docs:

 — Mathematical functions¶

This module provides access to the mathematical functions defined by the C
standard.
These functions cannot be used with complex numbers; use the functions of the
same name from the  module if you require support for complex
numbers.  The distinction between functions which support complex numbers and
those which don’t is made since most users do not want to learn quite as much
mathematics as required to understand complex numbers.  Receiving an exception
instead of a complex result allows earlier detection of the unexpected complex
number used as a parameter, so that the programmer can determine how and why it
was generated in the first place.
The following functions are provided by this module.  Except when explicitly
noted otherwise, all return values are floats.

Number-theoretic and representation functions¶


(x)¶
Return the ceiling of x, the smallest integer greater than or equal to x.
If x is not a float, delegates to , which should return an
 value.



(x, y)¶
Return a float with the magnitude (absolute value) of x but the sign of
y.  On platforms that support signed zeros, 
returns -1.0.



(x)¶
Return the absolute value of x.



(x)¶
Return x factorial.  Raises  if x is not integral or
is negative.



(x)¶
Return the floor of x, the largest integer less than or equal to x.
If x is not a float, delegates to , which should return an
 value.



(x, y)¶
Return , as defined by the platform C library. Note that the
Python expression  may not return the same result.  The intent of the C
standard is that  be exactly (mathematically; to infinite
precision) equal to  for some integer n such that the result has
the same sign as x and magnitude less than .  Python’s 
returns a result with the sign of y instead, and may not be exactly computable
for float arguments. For example,  is , but
the result of Python’s  is , which cannot be
represented exactly as a float, and rounds to the surprising .  For
this reason, function  is generally preferred when working with
floats, while Python’s  is preferred when working with integers.



(x)¶
Return the mantissa and exponent of x as the pair .  m is a float
and e is an integer such that  exactly. If x is zero,
returns , otherwise .  This is used to “pick
apart” the internal representation of a float in a portable way.



(iterable)¶
Return an accurate floating point sum of values in the iterable.  Avoids
loss of precision by tracking multiple intermediate partial sums:


The algorithm’s accuracy depends on IEEE-754 arithmetic guarantees and the
typical case where the rounding mode is half-even.  On some non-Windows
builds, the underlying C library uses extended precision addition and may
occasionally double-round an intermediate sum causing it to be off in its
least significant bit.
For further discussion and two alternative approaches, see the ASPN cookbook
recipes for accurate floating point summation.



(a, b)¶
Return the greatest common divisor of the integers a and b.  If either
a or b is nonzero, then the value of  is the largest
positive integer that divides both a and b.   returns
.

New in version 3.5.




(a, b, *, rel_tol=1e-09, abs_tol=0.0)¶
Return  if the values a and b are close to each other and
 otherwise.
Whether or not two values are considered close is determined according to
given absolute and relative tolerances.
rel_tol is the relative tolerance – it is the maximum allowed difference
between a and b, relative to the larger absolute value of a or b.
For example, to set a tolerance of 5%, pass .  The default
tolerance is , which assures that the two values are the same
within about 9 decimal digits.  rel_tol must be greater than zero.
abs_tol is the minimum absolute tolerance – useful for comparisons near
zero. abs_tol must be at least zero.
If no errors occur, the result will be:
.
The IEEE 754 special values of , , and  will be
handled according to IEEE rules.  Specifically,  is not considered
close to any other value, including .   and  are only
considered close to themselves.

New in version 3.5.


See also
PEP 485 – A function for testing approximate equality




(x)¶
Return  if x is neither an infinity nor a NaN, and
 otherwise.  (Note that  is considered finite.)

New in version 3.2.




(x)¶
Return  if x is a positive or negative infinity, and
 otherwise.



(x)¶
Return  if x is a NaN (not a number), and  otherwise.



(x, i)¶
Return .  This is essentially the inverse of function
.



(x)¶
Return the fractional and integer parts of x.  Both results carry the sign
of x and are floats.



(x, y)¶
Return the IEEE 754-style remainder of x with respect to y.  For
finite x and finite nonzero y, this is the difference ,
where  is the closest integer to the exact value of the quotient .  If  is exactly halfway between two consecutive integers, the
nearest even integer is used for .  The remainder  thus always satisfies .
Special cases follow IEEE 754: in particular,  is
x for any finite x, and  and
 raise  for any non-NaN x.
If the result of the remainder operation is zero, that zero will have
the same sign as x.
On platforms using IEEE 754 binary floating-point, the result of this
operation is always exactly representable: no rounding error is introduced.

New in version 3.7.




(x)¶
Return the  value x truncated to an
 (usually an integer). Delegates to
.

Note that  and  have a different call/return pattern
than their C equivalents: they take a single argument and return a pair of
values, rather than returning their second return value through an ‘output
parameter’ (there is no such thing in Python).
For the , , and  functions, note that all
floating-point numbers of sufficiently large magnitude are exact integers.
Python floats typically carry no more than 53 bits of precision (the same as the
platform C double type), in which case any float x with 
necessarily has no fractional bits.


Power and logarithmic functions¶


(x)¶
Return e raised to the power x, where e = 2.718281… is the base
of natural logarithms.  This is usually more accurate than 
or .



(x)¶
Return e raised to the power x, minus 1.  Here e is the base of natural
logarithms.  For small floats x, the subtraction in 
can result in a significant loss of precision; the 
function provides a way to compute this quantity to full precision:



New in version 3.2.




(x[, base])¶
With one argument, return the natural logarithm of x (to base e).
With two arguments, return the logarithm of x to the given base,
calculated as .



(x)¶
Return the natural logarithm of 1+x (base e). The
result is calculated in a way which is accurate for x near zero.



(x)¶
Return the base-2 logarithm of x. This is usually more accurate than
.

New in version 3.3.


See also
 returns the number of bits necessary to represent
an integer in binary, excluding the sign and leading zeros.




(x)¶
Return the base-10 logarithm of x.  This is usually more accurate
than .



(x, y)¶
Return  raised to the power .  Exceptional cases follow
Annex ‘F’ of the C99 standard as far as possible.  In particular,
 and  always return , even
when  is a zero or a NaN.  If both  and  are finite,
 is negative, and  is not an integer then 
is undefined, and raises .
Unlike the built-in  operator,  converts both
its arguments to type .  Use  or the built-in
 function for computing exact integer powers.



(x)¶
Return the square root of x.



Trigonometric functions¶


(x)¶
Return the arc cosine of x, in radians.



(x)¶
Return the arc sine of x, in radians.



(x)¶
Return the arc tangent of x, in radians.



(y, x)¶
Return , in radians. The result is between  and .
The vector in the plane from the origin to point  makes this angle
with the positive X axis. The point of  is that the signs of both
inputs are known to it, so it can compute the correct quadrant for the angle.
For example,  and  are both , but  is .



(x)¶
Return the cosine of x radians.



(x, y)¶
Return the Euclidean norm, . This is the length of the vector
from the origin to point .



(x)¶
Return the sine of x radians.



(x)¶
Return the tangent of x radians.



Angular conversion¶


(x)¶
Convert angle x from radians to degrees.



(x)¶
Convert angle x from degrees to radians.



Hyperbolic functions¶
Hyperbolic functions
are analogs of trigonometric functions that are based on hyperbolas
instead of circles.


(x)¶
Return the inverse hyperbolic cosine of x.



(x)¶
Return the inverse hyperbolic sine of x.



(x)¶
Return the inverse hyperbolic tangent of x.



(x)¶
Return the hyperbolic cosine of x.



(x)¶
Return the hyperbolic sine of x.



(x)¶
Return the hyperbolic tangent of x.



Special functions¶


(x)¶
Return the error function at
x.
The  function can be used to compute traditional statistical
functions such as the cumulative standard normal distribution:



New in version 3.2.




(x)¶
Return the complementary error function at x.  The complementary error
function is defined as
.  It is used for large values of x where a subtraction
from one would cause a loss of significance.

New in version 3.2.




(x)¶
Return the Gamma function at
x.

New in version 3.2.




(x)¶
Return the natural logarithm of the absolute value of the Gamma
function at x.

New in version 3.2.




Constants¶


¶
The mathematical constant π = 3.141592…, to available precision.



¶
The mathematical constant e = 2.718281…, to available precision.



¶
The mathematical constant τ = 6.283185…, to available precision.
Tau is a circle constant equal to 2π, the ratio of a circle’s circumference to
its radius. To learn more about Tau, check out Vi Hart’s video Pi is (still)
Wrong, and start celebrating
Tau day by eating twice as much pie!

New in version 3.6.




¶
A floating-point positive infinity.  (For negative infinity, use
.)  Equivalent to the output of .

New in version 3.5.




¶
A floating-point “not a number” (NaN) value.  Equivalent to the output of
.

New in version 3.5.



CPython implementation detail: The  module consists mostly of thin wrappers around the platform C
math library functions.  Behavior in exceptional cases follows Annex F of
the C99 standard where appropriate.  The current implementation will raise
 for invalid operations like  or 
(where C99 Annex F recommends signaling invalid operation or divide-by-zero),
and  for results that overflow (for example,
).  A NaN will not be returned from any of the functions
above unless one or more of the input arguments was a NaN; in that case,
most functions will return a NaN, but (again following C99 Annex F) there
are some exceptions to this rule, for example  or
.
Note that Python makes no effort to distinguish signaling NaNs from
quiet NaNs, and behavior for signaling NaNs remains unspecified.
Typical behavior is to treat all NaNs as though they were quiet.


See also

Module 
Complex number versions of many of these functions.



