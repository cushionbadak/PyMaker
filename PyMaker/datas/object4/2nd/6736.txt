link:
library/urllib.parse.html#urllib.parse.urlparse

docs:


(urlstring, scheme='', allow_fragments=True)¶
Parse a URL into six components, returning a 6-item named tuple.  This
corresponds to the general structure of a URL:
.
Each tuple item is a string, possibly empty. The components are not broken up in
smaller parts (for example, the network location is a single string), and %
escapes are not expanded. The delimiters as shown above are not part of the
result, except for a leading slash in the path component, which is retained if
present.  For example:


Following the syntax specifications in RFC 1808, urlparse recognizes
a netloc only if it is properly introduced by ‘//’.  Otherwise the
input is presumed to be a relative URL and thus to start with
a path component.


The scheme argument gives the default addressing scheme, to be
used only if the URL does not specify one.  It should be the same type
(text or bytes) as urlstring, except that the default value  is
always allowed, and is automatically converted to  if appropriate.
If the allow_fragments argument is false, fragment identifiers are not
recognized.  Instead, they are parsed as part of the path, parameters
or query component, and  is set to the empty string in
the return value.
The return value is a named tuple, which means that its items can
be accessed by index or as named attributes, which are:








Attribute
Index
Value
Value if not present




0
URL scheme specifier
scheme parameter


1
Network location part
empty string


2
Hierarchical path
empty string


3
Parameters for last path
element
empty string


4
Query component
empty string


5
Fragment identifier
empty string


 
User name



 
Password



 
Host name (lower case)



 
Port number as integer,
if present




Reading the  attribute will raise a  if
an invalid port is specified in the URL.  See section
Structured Parse Results for more information on the result object.
Unmatched square brackets in the  attribute will raise a
.
Characters in the  attribute that decompose under NFKC
normalization (as used by the IDNA encoding) into any of , ,
, , or  will raise a . If the URL is
decomposed before parsing, no error will be raised.
As is the case with all named tuples, the subclass has a few additional methods
and attributes that are particularly useful. One such method is .
The  method will return a new ParseResult object replacing specified
fields with new values.



Changed in version 3.2: Added IPv6 URL parsing capabilities.


Changed in version 3.3: The fragment is now parsed for all URL schemes (unless allow_fragment is
false), in accordance with RFC 3986.  Previously, a whitelist of
schemes that support fragments existed.


Changed in version 3.6: Out-of-range port numbers now raise , instead of
returning .


Changed in version 3.7.3: Characters that affect netloc parsing under NFKC normalization will
now raise .

