link:
library/collections.abc.html#module-collections.abc

docs:

 — Abstract Base Classes for Containers¶

New in version 3.3: Formerly, this module was part of the  module.

Source code: Lib/_collections_abc.py

This module provides abstract base classes that
can be used to test whether a class provides a particular interface; for
example, whether it is hashable or whether it is a mapping.

Collections Abstract Base Classes¶
The collections module offers the following ABCs:








ABC
Inherits from
Abstract Methods
Mixin Methods




 

 


 

 


 

 









 



, 
, , 


 

 


 

 


,
,

,
,

 


,

,

, , ,
, and 



,
,
,
,

Inherited  methods and
, , , ,
, and 



,

Inherited  methods



,
,

, , , ,
, , , ,
, , and 



,
,
,
,

Inherited  methods and
, , , ,
, , and 



,
,

, , , ,
, , and 



,
,
,
,

Inherited  methods and
, , , ,
and 



 



,

 
,



,

 
,



,

 
, 


 

 



, 



 

 








, 
, , 





class ¶

class ¶

class ¶

class ¶
ABCs for classes that provide respectively the methods ,
, , and .



class ¶
ABC for classes that provide the  method.
Checking  detects classes that are registered
as  or that have an  method, but it does
not detect classes that iterate with the  method.
The only reliable way to determine whether an object is iterable
is to call .



class ¶
ABC for sized iterable container classes.

New in version 3.6.




class ¶
ABC for classes that provide the  and
 methods.  See also the definition of
iterator.



class ¶
ABC for iterable classes that also provide the 
method.

New in version 3.6.




class ¶
ABC for generator classes that implement the protocol defined in
PEP 342 that extends iterators with the ,
 and  methods.
See also the definition of generator.

New in version 3.5.




class ¶

class ¶

class ¶
ABCs for read-only and mutable sequences.
Implementation note: Some of the mixin methods, such as
,  and , make
repeated calls to the underlying  method.
Consequently, if  is implemented with constant
access speed, the mixin methods will have linear performance;
however, if the underlying method is linear (as it would be with a
linked list), the mixins will have quadratic performance and will
likely need to be overridden.

Changed in version 3.5: The index() method added support for stop and start
arguments.




class ¶

class ¶
ABCs for read-only and mutable sets.



class ¶

class ¶
ABCs for read-only and mutable mappings.



class ¶

class ¶

class ¶

class ¶
ABCs for mapping, items, keys, and values views.



class ¶
ABC for awaitable objects, which can be used in 
expressions.  Custom implementations must provide the 
method.
Coroutine objects and instances of the
 ABC are all instances of this ABC.

Note
In CPython, generator-based coroutines (generators decorated with
 or ) are
awaitables, even though they do not have an  method.
Using  for them will return .
Use  to detect them.


New in version 3.5.




class ¶
ABC for coroutine compatible classes.  These implement the
following methods, defined in Coroutine Objects:
, , and
.  Custom implementations must also implement
.  All  instances are also instances of
.  See also the definition of coroutine.

Note
In CPython, generator-based coroutines (generators decorated with
 or ) are
awaitables, even though they do not have an  method.
Using  for them will return .
Use  to detect them.


New in version 3.5.




class ¶
ABC for classes that provide  method.  See also the
definition of asynchronous iterable.

New in version 3.5.




class ¶
ABC for classes that provide  and 
methods.  See also the definition of asynchronous iterator.

New in version 3.5.




class ¶
ABC for asynchronous generator classes that implement the protocol
defined in PEP 525 and PEP 492.

New in version 3.6.


These ABCs allow us to ask classes or instances if they provide
particular functionality, for example:


Several of the ABCs are also useful as mixins that make it easier to develop
classes supporting container APIs.  For example, to write a class supporting
the full  API, it is only necessary to supply the three underlying
abstract methods: , , and .
The ABC supplies the remaining methods such as  and
:


Notes on using  and  as a mixin:

Since some set operations create new sets, the default mixin methods need
a way to create new instances from an iterable. The class constructor is
assumed to have a signature in the form .
That assumption is factored-out to an internal classmethod called
 which calls  to produce a new set.
If the  mixin is being used in a class with a different
constructor signature, you will need to override 
with a classmethod that can construct new instances from
an iterable argument.
To override the comparisons (presumably for speed, as the
semantics are fixed), redefine  and ,
then the other operations will automatically follow suit.
The  mixin provides a  method to compute a hash value
for the set; however,  is not defined because not all sets
are hashable or immutable.  To add set hashability using mixins,
inherit from both  and , then define
.


See also

OrderedSet recipe for an
example built on .
For more about ABCs, see the  module and PEP 3119.



