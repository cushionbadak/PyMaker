link:
library/bisect.html

docs:


 — Array bisection algorithm¶
Source code: Lib/bisect.py

This module provides support for maintaining a list in sorted order without
having to sort the list after each insertion.  For long lists of items with
expensive comparison operations, this can be an improvement over the more common
approach.  The module is called  because it uses a basic bisection
algorithm to do its work.  The source code may be most useful as a working
example of the algorithm (the boundary conditions are already right!).
The following functions are provided:


(a, x, lo=0, hi=len(a))¶
Locate the insertion point for x in a to maintain sorted order.
The parameters lo and hi may be used to specify a subset of the list
which should be considered; by default the entire list is used.  If x is
already present in a, the insertion point will be before (to the left of)
any existing entries.  The return value is suitable for use as the first
parameter to  assuming that a is already sorted.
The returned insertion point i partitions the array a into two halves so
that  for the left side and
 for the right side.



(a, x, lo=0, hi=len(a))¶

(a, x, lo=0, hi=len(a))¶
Similar to , but returns an insertion point which comes
after (to the right of) any existing entries of x in a.
The returned insertion point i partitions the array a into two halves so
that  for the left side and
 for the right side.



(a, x, lo=0, hi=len(a))¶
Insert x in a in sorted order.  This is equivalent to
 assuming that a is
already sorted.  Keep in mind that the O(log n) search is dominated by
the slow O(n) insertion step.



(a, x, lo=0, hi=len(a))¶

(a, x, lo=0, hi=len(a))¶
Similar to , but inserting x in a after any existing
entries of x.


See also
SortedCollection recipe that uses
bisect to build a full-featured collection class with straight-forward search
methods and support for a key-function.  The keys are precomputed to save
unnecessary calls to the key function during searches.


Searching Sorted Lists¶
The above  functions are useful for finding insertion points but
can be tricky or awkward to use for common searching tasks. The following five
functions show how to transform them into the standard lookups for sorted
lists:




Other Examples¶
The  function can be useful for numeric table lookups. This
example uses  to look up a letter grade for an exam score (say)
based on a set of ordered numeric breakpoints: 90 and up is an ‘A’, 80 to 89 is
a ‘B’, and so on:


Unlike the  function, it does not make sense for the 
functions to have key or reversed arguments because that would lead to an
inefficient design (successive calls to bisect functions would not “remember”
all of the previous key lookups).
Instead, it is better to search a list of precomputed keys to find the index
of the record in question:




