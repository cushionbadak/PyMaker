link:
library/threading.html#thread-objects

docs:

Thread Objects¶
The  class represents an activity that is run in a separate
thread of control.  There are two ways to specify the activity: by passing a
callable object to the constructor, or by overriding the 
method in a subclass.  No other methods (except for the constructor) should be
overridden in a subclass.  In other words, only  override the
 and  methods of this class.
Once a thread object is created, its activity must be started by calling the
thread’s  method.  This invokes the 
method in a separate thread of control.
Once the thread’s activity is started, the thread is considered ‘alive’. It
stops being alive when its  method terminates – either
normally, or by raising an unhandled exception.  The 
method tests whether the thread is alive.
Other threads can call a thread’s  method.  This blocks
the calling thread until the thread whose  method is
called is terminated.
A thread has a name.  The name can be passed to the constructor, and read or
changed through the  attribute.
A thread can be flagged as a “daemon thread”.  The significance of this flag is
that the entire Python program exits when only daemon threads are left.  The
initial value is inherited from the creating thread.  The flag can be set
through the  property or the daemon constructor
argument.

Note
Daemon threads are abruptly stopped at shutdown.  Their resources (such
as open files, database transactions, etc.) may not be released properly.
If you want your threads to stop gracefully, make them non-daemonic and
use a suitable signalling mechanism such as an .

There is a “main thread” object; this corresponds to the initial thread of
control in the Python program.  It is not a daemon thread.
There is the possibility that “dummy thread objects” are created. These are
thread objects corresponding to “alien threads”, which are threads of control
started outside the threading module, such as directly from C code.  Dummy
thread objects have limited functionality; they are always considered alive and
daemonic, and cannot be ed.  They are never deleted,
since it is impossible to detect the termination of alien threads.


class (group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)¶
This constructor should always be called with keyword arguments.  Arguments
are:
group should be ; reserved for future extension when a
 class is implemented.
target is the callable object to be invoked by the  method.
Defaults to , meaning nothing is called.
name is the thread name.  By default, a unique name is constructed of the
form “Thread-N” where N is a small decimal number.
args is the argument tuple for the target invocation.  Defaults to .
kwargs is a dictionary of keyword arguments for the target invocation.
Defaults to .
If not , daemon explicitly sets whether the thread is daemonic.
If  (the default), the daemonic property is inherited from the
current thread.
If the subclass overrides the constructor, it must make sure to invoke the
base class constructor () before doing anything else to
the thread.

Changed in version 3.3: Added the daemon argument.



()¶
Start the thread’s activity.
It must be called at most once per thread object.  It arranges for the
object’s  method to be invoked in a separate thread
of control.
This method will raise a  if called more than once
on the same thread object.



()¶
Method representing the thread’s activity.
You may override this method in a subclass.  The standard 
method invokes the callable object passed to the object’s constructor as
the target argument, if any, with positional and keyword arguments taken
from the args and kwargs arguments, respectively.



(timeout=None)¶
Wait until the thread terminates. This blocks the calling thread until
the thread whose  method is called terminates – either
normally or through an unhandled exception – or until the optional
timeout occurs.
When the timeout argument is present and not , it should be a
floating point number specifying a timeout for the operation in seconds
(or fractions thereof). As  always returns ,
you must call  after  to
decide whether a timeout happened – if the thread is still alive, the
 call timed out.
When the timeout argument is not present or , the operation will
block until the thread terminates.
A thread can be ed many times.
 raises a  if an attempt is made
to join the current thread as that would cause a deadlock. It is also
an error to  a thread before it has been started
and attempts to do so raise the same exception.



¶
A string used for identification purposes only. It has no semantics.
Multiple threads may be given the same name.  The initial name is set by
the constructor.



()¶

()¶
Old getter/setter API for ; use it directly as a
property instead.



¶
The ‘thread identifier’ of this thread or  if the thread has not
been started.  This is a nonzero integer.  See the 
function.  Thread identifiers may be recycled when a thread exits and
another thread is created.  The identifier is available even after the
thread has exited.



()¶
Return whether the thread is alive.
This method returns  just before the  method
starts until just after the  method terminates.  The
module function  returns a list of all alive threads.



¶
A boolean value indicating whether this thread is a daemon thread (True)
or not (False).  This must be set before  is called,
otherwise  is raised.  Its initial value is inherited
from the creating thread; the main thread is not a daemon thread and
therefore all threads created in the main thread default to
 = .
The entire Python program exits when no alive non-daemon threads are left.



()¶

()¶
Old getter/setter API for ; use it directly as a
property instead.



CPython implementation detail: In CPython, due to the Global Interpreter Lock, only one thread
can execute Python code at once (even though certain performance-oriented
libraries might overcome this limitation).
If you want your application to make better use of the computational
resources of multi-core machines, you are advised to use
 or .
However, threading is still an appropriate model if you want to run
multiple I/O-bound tasks simultaneously.

