link:
library/importlib.html#importlib.abc.SourceLoader

docs:


class ¶
An abstract base class for implementing source (and optionally bytecode)
file loading. The class inherits from both  and
, requiring the implementation of:




Should only return the path to the source file; sourceless
loading is not supported.



The abstract methods defined by this class are to add optional bytecode
file support. Not implementing these optional methods (or causing them to
raise ) causes the loader to
only work with source code. Implementing the methods allows the loader to
work with source and bytecode files; it does not allow for sourceless
loading where only bytecode is provided.  Bytecode files are an
optimization to speed up loading by removing the parsing step of Python’s
compiler, and so no bytecode-specific API is exposed.


(path)¶
Optional abstract method which returns a  containing
metadata about the specified path.  Supported dictionary keys are:

 (mandatory): an integer or floating-point number
representing the modification time of the source code;
 (optional): the size in bytes of the source code.

Any other keys in the dictionary are ignored, to allow for future
extensions. If the path cannot be handled,  is raised.

New in version 3.3.


Changed in version 3.4: Raise  instead of .




(path)¶
Optional abstract method which returns the modification time for the
specified path.

Deprecated since version 3.3: This method is deprecated in favour of .  You don’t
have to implement it, but it is still available for compatibility
purposes. Raise  if the path cannot be handled.


Changed in version 3.4: Raise  instead of .




(path, data)¶
Optional abstract method which writes the specified bytes to a file
path. Any intermediate directories which do not exist are to be created
automatically.
When writing to the path fails because the path is read-only
(/), do not propagate the
exception.

Changed in version 3.4: No longer raises  when called.




(fullname)¶
Concrete implementation of .



(module)¶
Concrete implementation of .

New in version 3.4.




(fullname)¶
Concrete implementation of .

Deprecated since version 3.4: Use  instead.




(fullname)¶
Concrete implementation of .



(fullname)¶
Concrete implementation of . A module
is determined to be a package if its file path (as provided by
) is a file named
 when the file extension is removed and the module name
itself does not end in .

