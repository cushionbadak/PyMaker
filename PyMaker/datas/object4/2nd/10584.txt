link:
library/optparse.html#adding-new-types

docs:

Adding new types¶
To add new types, you need to define your own subclass of ’s
 class.  This class has a couple of attributes that define
’s types:  and .


¶
A tuple of type names; in your subclass, simply define a new tuple
 that builds on the standard one.



¶
A dictionary mapping type names to type-checking functions.  A type-checking
function has the following signature:


where  is an  instance,  is an option string
(e.g., ), and  is the string from the command line that must
be checked and converted to your desired type.   should
return an object of the hypothetical type .  The value returned by
a type-checking function will wind up in the OptionValues instance returned
by , or be passed to a callback as the
 parameter.
Your type-checking function should raise  if it
encounters any problems.   takes a single string
argument, which is passed as-is to ’s 
method, which in turn prepends the program name and the string 
and prints everything to stderr before terminating the process.

Here’s a silly example that demonstrates adding a  option type to
parse Python-style complex numbers on the command line.  (This is even sillier
than it used to be, because  1.3 added built-in support for
complex numbers, but never mind.)
First, the necessary imports:


You need to define your type-checker first, since it’s referred to later (in the
 class attribute of your Option subclass):


Finally, the Option subclass:


(If we didn’t make a  of , we would end
up modifying the  attribute of ’s
Option class.  This being Python, nothing stops you from doing that except good
manners and common sense.)
That’s it!  Now you can write a script that uses the new option type just like
any other -based script, except you have to instruct your
OptionParser to use MyOption instead of Option:


Alternately, you can build your own option list and pass it to OptionParser; if
you don’t use  in the above way, you don’t need to tell
OptionParser which option class to use:


