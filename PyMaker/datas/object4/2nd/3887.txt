link:
library/platform.html#cross-platform

docs:

Cross Platform¶


(executable=sys.executable, bits='', linkage='')¶
Queries the given executable (defaults to the Python interpreter binary) for
various architecture information.
Returns a tuple  which contain information about the bit
architecture and the linkage format used for the executable. Both values are
returned as strings.
Values that cannot be determined are returned as given by the parameter presets.
If bits is given as , the  (or
 on Python version < 1.5.2) is used as indicator for the
supported pointer size.
The function relies on the system’s  command to do the actual work.
This is available on most if not all Unix  platforms and some non-Unix platforms
and then only if the executable points to the Python interpreter.  Reasonable
defaults are used when the above needs are not met.

Note
On Mac OS X (and perhaps other platforms), executable files may be
universal files containing multiple architectures.
To get at the “64-bitness” of the current interpreter, it is more
reliable to query the  attribute:






()¶
Returns the machine type, e.g. . An empty string is returned if the
value cannot be determined.



()¶
Returns the computer’s network name (may not be fully qualified!). An empty
string is returned if the value cannot be determined.



(aliased=0, terse=0)¶
Returns a single string identifying the underlying platform with as much useful
information as possible.
The output is intended to be human readable rather than machine parseable. It
may look different on different platforms and this is intended.
If aliased is true, the function will use aliases for various platforms that
report system names which differ from their common names, for example SunOS will
be reported as Solaris.  The  function is used to implement
this.
Setting terse to true causes the function to return only the absolute minimum
information needed to identify the platform.



()¶
Returns the (real) processor name, e.g. .
An empty string is returned if the value cannot be determined. Note that many
platforms do not provide this information or simply return the same value as for
.  NetBSD does this.



()¶
Returns a tuple  stating the Python build number and
date as strings.



()¶
Returns a string identifying the compiler used for compiling Python.



()¶
Returns a string identifying the Python implementation SCM branch.



()¶
Returns a string identifying the Python implementation. Possible return values
are: ‘CPython’, ‘IronPython’, ‘Jython’, ‘PyPy’.



()¶
Returns a string identifying the Python implementation SCM revision.



()¶
Returns the Python version as string .
Note that unlike the Python , the returned value will always
include the patchlevel (it defaults to 0).



()¶
Returns the Python version as tuple  of strings.
Note that unlike the Python , the returned value will always
include the patchlevel (it defaults to ).



()¶
Returns the system’s release, e.g.  or  An empty string is
returned if the value cannot be determined.



()¶
Returns the system/OS name, e.g. , , or . An
empty string is returned if the value cannot be determined.



(system, release, version)¶
Returns  aliased to common marketing names used
for some systems.  It also does some reordering of the information in some cases
where it would otherwise cause confusion.



()¶
Returns the system’s release version, e.g. . An empty string is
returned if the value cannot be determined.



()¶
Fairly portable uname interface. Returns a 
containing six attributes: , , ,
, , and .
Note that this adds a sixth attribute () not present
in the  result.  Also, the attribute names are different
for the first two attributes;  names them
 and .
Entries which cannot be determined are set to .

Changed in version 3.3: Result changed from a tuple to a namedtuple.


