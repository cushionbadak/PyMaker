link:
library/asyncio-protocol.html#transports

docs:

Transports¶
Transports are classes provided by  in order to abstract
various kinds of communication channels.
Transport objects are always instantiated by an
ref:asyncio event loop <asyncio-event-loop>.
asyncio implements transports for TCP, UDP, SSL, and subprocess pipes.
The methods available on a transport depend on the transport’s kind.
The transport classes are not thread safe.

Transports Hierarchy¶


class ¶
Base class for all transports.  Contains methods that all
asyncio transports share.



class (BaseTransport)¶
A base transport for write-only connections.
Instances of the WriteTransport class are returned from
the  event loop method and
are also used by subprocess-related methods like
.



class (BaseTransport)¶
A base transport for read-only connections.
Instances of the ReadTransport class are returned from
the  event loop method and
are also used by subprocess-related methods like
.



class (WriteTransport, ReadTransport)¶
Interface representing a bidirectional transport, such as a
TCP connection.
The user does not instantiate a transport directly; they call a
utility function, passing it a protocol factory and other
information necessary to create the transport and protocol.
Instances of the Transport class are returned from or used by
event loop methods like ,
,
, , etc.



class (BaseTransport)¶
A transport for datagram (UDP) connections.
Instances of the DatagramTransport class are returned from
the  event loop method.



class (BaseTransport)¶
An abstraction to represent a connection between a parent and its
child OS process.
Instances of the SubprocessTransport class are returned from
event loop methods  and
.



Base Transport¶


()¶
Close the transport.
If the transport has a buffer for outgoing
data, buffered data will be flushed asynchronously.  No more data
will be received.  After all buffered data is flushed, the
protocol’s  method will be called with
 as its argument.



()¶
Return  if the transport is closing or is closed.



(name, default=None)¶
Return information about the transport or underlying resources
it uses.
name is a string representing the piece of transport-specific
information to get.
default is the value to return if the information is not
available, or if the transport does not support querying it
with the given third-party event loop implementation or on the
current platform.
For example, the following code attempts to get the underlying
socket object of the transport:


Categories of information that can be queried on some transports:

socket:
: the remote address to which the socket is
connected, result of 
( on error)
:  instance
: the socket’s own address,
result of 


SSL socket:
: the compression algorithm being used as a
string, or  if the connection isn’t compressed; result
of 
: a three-value tuple containing the name of the
cipher being used, the version of the SSL protocol that defines
its use, and the number of secret bits being used; result of

: peer certificate; result of

:  instance
:  or
 instance


pipe:
: pipe object


subprocess:
:  instance






(protocol)¶
Set a new protocol.
Switching protocol should only be done when both
protocols are documented to support the switch.



()¶
Return the current protocol.



Read-only Transports¶


()¶
Return  if the transport is receiving new data.

New in version 3.7.




()¶
Pause the receiving end of the transport.  No data will be passed to
the protocol’s 
method until  is called.

Changed in version 3.7: The method is idempotent, i.e. it can be called when the
transport is already paused or closed.




()¶
Resume the receiving end.  The protocol’s
 method
will be called once again if some data is available for reading.

Changed in version 3.7: The method is idempotent, i.e. it can be called when the
transport is already reading.




Write-only Transports¶


()¶
Close the transport immediately, without waiting for pending operations
to complete.  Buffered data will be lost.  No more data will be received.
The protocol’s  method will eventually be
called with  as its argument.



()¶
Return  if the transport supports
,  if not.



()¶
Return the current size of the output buffer used by the transport.



()¶
Get the high and low watermarks for write flow control. Return a
tuple  where low and high are positive number of
bytes.
Use  to set the limits.

New in version 3.4.2.




(high=None, low=None)¶
Set the high and low watermarks for write flow control.
These two values (measured in number of
bytes) control when the protocol’s

and 
methods are called. If specified, the low watermark must be less
than or equal to the high watermark.  Neither high nor low
can be negative.
 is called when the buffer size
becomes greater than or equal to the high value. If writing has
been paused,  is called when
the buffer size becomes less than or equal to the low value.
The defaults are implementation-specific.  If only the
high watermark is given, the low watermark defaults to an
implementation-specific value less than or equal to the
high watermark.  Setting high to zero forces low to zero as
well, and causes  to be called
whenever the buffer becomes non-empty.  Setting low to zero causes
 to be called only once the
buffer is empty. Use of zero for either limit is generally
sub-optimal as it reduces opportunities for doing I/O and
computation concurrently.
Use 
to get the limits.



(data)¶
Write some data bytes to the transport.
This method does not block; it buffers the data and arranges for it
to be sent out asynchronously.



(list_of_data)¶
Write a list (or any iterable) of data bytes to the transport.
This is functionally equivalent to calling  on each
element yielded by the iterable, but may be implemented more
efficiently.



()¶
Close the write end of the transport after flushing all buffered data.
Data may still be received.
This method can raise  if the transport
(e.g. SSL) doesn’t support half-closed connections.



Datagram Transports¶


(data, addr=None)¶
Send the data bytes to the remote peer given by addr (a
transport-dependent target address).  If addr is ,
the data is sent to the target address given on transport
creation.
This method does not block; it buffers the data and arranges
for it to be sent out asynchronously.



()¶
Close the transport immediately, without waiting for pending
operations to complete.  Buffered data will be lost.
No more data will be received.  The protocol’s

method will eventually be called with  as its argument.



Subprocess Transports¶


()¶
Return the subprocess process id as an integer.



(fd)¶
Return the transport for the communication pipe corresponding to the
integer file descriptor fd:

: readable streaming transport of the standard input (stdin),
or  if the subprocess was not created with 
: writable streaming transport of the standard output (stdout),
or  if the subprocess was not created with 
: writable streaming transport of the standard error (stderr),
or  if the subprocess was not created with 
other fd: 




()¶
Return the subprocess return code as an integer or 
if it hasn’t returned, which is similar to the
 attribute.



()¶
Kill the subprocess.
On POSIX systems, the function sends SIGKILL to the subprocess.
On Windows, this method is an alias for .
See also .



(signal)¶
Send the signal number to the subprocess, as in
.



()¶
Stop the subprocess.
On POSIX systems, this method sends SIGTERM to the subprocess.
On Windows, the Windows API function TerminateProcess() is called to
stop the subprocess.
See also .



()¶
Kill the subprocess by calling the  method.
If the subprocess hasn’t returned yet, and close transports of
stdin, stdout, and stderr pipes.


