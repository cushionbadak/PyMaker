link:
library/unittest.mock.html#helpers

docs:

Helpers¶

sentinel¶


¶
The  object provides a convenient way of providing unique
objects for your tests.
Attributes are created on demand when you access them by name. Accessing
the same attribute will always return the same object. The objects
returned have a sensible repr so that test failure messages are readable.

Changed in version 3.7: The  attributes now preserve their identity when they are
 or .


Sometimes when testing you need to test that a specific object is passed as an
argument to another method, or returned. It can be common to create named
sentinel objects to test this.  provides a convenient way of
creating and testing the identity of objects like this.
In this example we monkey patch  to return :




DEFAULT¶


¶
The  object is a pre-created sentinel (actually
). It can be used by 
functions to indicate that the normal return value should be used.



call¶


(*args, **kwargs)¶
 is a helper object for making simpler assertions, for comparing with
, ,
 and .  can also be
used with .





()¶
For a call object that represents multiple calls, 
returns a list of all the intermediate calls as well as the
final call.

 is particularly useful for making assertions on “chained calls”. A
chained call is multiple calls on a single line of code. This results in
multiple entries in  on a mock. Manually constructing
the sequence of calls can be tedious.
 can construct the sequence of calls from the same
chained call:


A  object is either a tuple of (positional args, keyword args) or
(name, positional args, keyword args) depending on how it was constructed. When
you construct them yourself this isn’t particularly interesting, but the 
objects that are in the ,  and
 attributes can be introspected to get at the individual
arguments they contain.
The  objects in  and 
are two-tuples of (positional args, keyword args) whereas the  objects
in , along with ones you construct yourself, are
three-tuples of (name, positional args, keyword args).
You can use their “tupleness” to pull out the individual arguments for more
complex introspection and assertions. The positional arguments are a tuple
(an empty tuple if there are no positional arguments) and the keyword
arguments are a dictionary:






create_autospec¶


(spec, spec_set=False, instance=False, **kwargs)¶
Create a mock object using another object as a spec. Attributes on the
mock will use the corresponding attribute on the spec object as their
spec.
Functions or methods being mocked will have their arguments checked to
ensure that they are called with the correct signature.
If spec_set is  then attempting to set attributes that don’t exist
on the spec object will raise an .
If a class is used as a spec then the return value of the mock (the
instance of the class) will have the same spec. You can use a class as the
spec for an instance object by passing . The returned mock
will only be callable if instances of the mock are callable.
 also takes arbitrary keyword arguments that are passed to
the constructor of the created mock.

See Autospeccing for examples of how to use auto-speccing with
 and the autospec argument to .


ANY¶


¶

Sometimes you may need to make assertions about some of the arguments in a
call to mock, but either not care about some of the arguments or want to pull
them individually out of  and make more complex
assertions on them.
To ignore certain arguments you can pass in objects that compare equal to
everything. Calls to  and
 will then succeed no matter what was
passed in.


 can also be used in comparisons with call lists like
:




FILTER_DIR¶


¶

 is a module level variable that controls the way mock objects
respond to  (only for Python 2.6 or more recent). The default is ,
which uses the filtering described below, to only show useful members. If you
dislike this filtering, or need to switch it off for diagnostic purposes, then
set .
With filtering on,  shows only useful attributes and will
include any dynamically created attributes that wouldn’t normally be shown.
If the mock was created with a spec (or autospec of course) then all the
attributes from the original are shown, even if they haven’t been accessed
yet:


Many of the not-very-useful (private to  rather than the thing being
mocked) underscore and double underscore prefixed attributes have been
filtered from the result of calling  on a . If you dislike this
behaviour you can switch it off by setting the module level switch
:


Alternatively you can just use  (instance members) and
 (type members) to bypass the filtering irrespective of
.


mock_open¶


(mock=None, read_data=None)¶
A helper function to create a mock to replace the use of . It works
for  called directly or used as a context manager.
The mock argument is the mock object to configure. If  (the
default) then a  will be created for you, with the API limited
to methods or attributes available on standard file handles.
read_data is a string for the ,
, and  methods
of the file handle to return.  Calls to those methods will take data from
read_data until it is depleted.  The mock of these methods is pretty
simplistic: every time the mock is called, the read_data is rewound to
the start.  If you need more control over the data that you are feeding to
the tested code you will need to customize this mock for yourself.  When that
is insufficient, one of the in-memory filesystem packages on PyPI can offer a realistic filesystem for testing.

Changed in version 3.4: Added  and  support.
The mock of  changed to consume read_data rather
than returning it on each call.


Changed in version 3.5: read_data is now reset on each call to the mock.


Changed in version 3.7.1: Added  to implementation so that iteration (such as in for
loops) correctly consumes read_data.


Using  as a context manager is a great way to ensure your file handles
are closed properly and is becoming common:


The issue is that even if you mock out the call to  it is the
returned object that is used as a context manager (and has  and
 called).
Mocking context managers with a  is common enough and fiddly
enough that a helper function is useful.


And for reading files:




Autospeccing¶
Autospeccing is based on the existing  feature of mock. It limits the
api of mocks to the api of an original object (the spec), but it is recursive
(implemented lazily) so that attributes of mocks only have the same api as
the attributes of the spec. In addition mocked functions / methods have the
same call signature as the original so they raise a  if they are
called incorrectly.
Before I explain how auto-speccing works, here’s why it is needed.
 is a very powerful and flexible object, but it suffers from two flaws
when used to mock out objects from a system under test. One of these flaws is
specific to the  api and the other is a more general problem with using
mock objects.
First the problem specific to .  has two assert methods that are
extremely handy:  and
.


Because mocks auto-create attributes on demand, and allow you to call them
with arbitrary arguments, if you misspell one of these assert methods then
your assertion is gone:


Your tests can pass silently and incorrectly because of the typo.
The second issue is more general to mocking. If you refactor some of your
code, rename members and so on, any tests for code that is still using the
old api but uses mocks instead of the real objects will still pass. This
means your tests can all pass even though your code is broken.
Note that this is another reason why you need integration tests as well as
unit tests. Testing everything in isolation is all fine and dandy, but if you
don’t test how your units are “wired together” there is still lots of room
for bugs that tests might have caught.
 already provides a feature to help with this, called speccing. If you
use a class or instance as the  for a mock then you can only access
attributes on the mock that exist on the real class:


The spec only applies to the mock itself, so we still have the same issue
with any methods on the mock:


Auto-speccing solves this problem. You can either pass  to
 /  or use the  function to create a
mock with a spec. If you use the  argument to  then the
object that is being replaced will be used as the spec object. Because the
speccing is done “lazily” (the spec is created as attributes on the mock are
accessed) you can use it with very complex or deeply nested objects (like
modules that import modules that import modules) without a big performance
hit.
Here’s an example of it in use:


You can see that  has a spec.  takes two
arguments in the constructor (one of which is self). Here’s what happens if
we try to call it incorrectly:


The spec also applies to instantiated classes (i.e. the return value of
specced mocks):


 objects are not callable, so the return value of instantiating our
mocked out  is a non-callable mock. With the spec in place
any typos in our asserts will raise the correct error:


In many cases you will just be able to add  to your existing
 calls and then be protected against bugs due to typos and api
changes.
As well as using autospec through  there is a
 for creating autospecced mocks directly:


This isn’t without caveats and limitations however, which is why it is not
the default behaviour. In order to know what attributes are available on the
spec object, autospec has to introspect (access attributes) the spec. As you
traverse attributes on the mock a corresponding traversal of the original
object is happening under the hood. If any of your specced objects have
properties or descriptors that can trigger code execution then you may not be
able to use autospec. On the other hand it is much better to design your
objects so that introspection is safe [4].
A more serious problem is that it is common for instance attributes to be
created in the  method and not to exist on the class at all.
autospec can’t know about any dynamically created attributes and restricts
the api to visible attributes.


There are a few different ways of resolving this problem. The easiest, but
not necessarily the least annoying, way is to simply set the required
attributes on the mock after creation. Just because autospec doesn’t allow
you to fetch attributes that don’t exist on the spec it doesn’t prevent you
setting them:


There is a more aggressive version of both spec and autospec that does
prevent you setting non-existent attributes. This is useful if you want to
ensure your code only sets valid attributes too, but obviously it prevents
this particular scenario:


Probably the best way of solving the problem is to add class attributes as
default values for instance members initialised in . Note that if
you are only setting default attributes in  then providing them via
class attributes (shared between instances of course) is faster too. e.g.


This brings up another issue. It is relatively common to provide a default
value of  for members that will later be an object of a different type.
 would be useless as a spec because it wouldn’t let you access any
attributes or methods on it. As  is never going to be useful as a
spec, and probably indicates a member that will normally of some other type,
autospec doesn’t use a spec for members that are set to . These will
just be ordinary mocks (well - MagicMocks):


If modifying your production classes to add defaults isn’t to your liking
then there are more options. One of these is simply to use an instance as the
spec rather than the class. The other is to create a subclass of the
production class and add the defaults to the subclass without affecting the
production class. Both of these require you to use an alternative object as
the spec. Thankfully  supports this - you can simply pass the
alternative object as the autospec argument:





[4]This only applies to classes or already instantiated objects. Calling
a mocked class to create a mock instance does not create a real instance.
It is only attribute lookups - along with calls to  - that are done.




Sealing mocks¶


(mock)¶
Seal will disable the automatic creation of mocks when accessing an attribute of
the mock being sealed or any of its attributes that are already mocks recursively.
If a mock instance with a name or a spec is assigned to an attribute
it won’t be considered in the sealing chain. This allows one to prevent seal from
fixing part of the mock object.



New in version 3.7.



