link:
reference/lexical_analysis.html#identifiers

docs:

2.3. Identifiers and keywords¶
Identifiers (also referred to as names) are described by the following lexical
definitions.
The syntax of identifiers in Python is based on the Unicode standard annex
UAX-31, with elaboration and changes as defined below; see also PEP 3131 for
further details.
Within the ASCII range (U+0001..U+007F), the valid characters for identifiers
are the same as in Python 2.x: the uppercase and lowercase letters  through
, the underscore  and, except for the first character, the digits
 through .
Python 3.0 introduces additional characters from outside the ASCII range (see
PEP 3131).  For these characters, the classification uses the version of the
Unicode Character Database as included in the  module.
Identifiers are unlimited in length.  Case is significant.

The Unicode category codes mentioned above stand for:

Lu - uppercase letters
Ll - lowercase letters
Lt - titlecase letters
Lm - modifier letters
Lo - other letters
Nl - letter numbers
Mn - nonspacing marks
Mc - spacing combining marks
Nd - decimal numbers
Pc - connector punctuations
Other_ID_Start - explicit list of characters in PropList.txt to support backwards
compatibility
Other_ID_Continue - likewise

All identifiers are converted into the normal form NFKC while parsing; comparison
of identifiers is based on NFKC.
A non-normative HTML file listing all valid identifier characters for Unicode
4.1 can be found at
https://www.dcl.hpi.uni-potsdam.de/home/loewis/table-3131.html.

2.3.1. Keywords¶
The following identifiers are used as reserved words, or keywords of the
language, and cannot be used as ordinary identifiers.  They must be spelled
exactly as written here:




2.3.2. Reserved classes of identifiers¶
Certain classes of identifiers (besides keywords) have special meanings.  These
classes are identified by the patterns of leading and trailing underscore
characters:


Not imported by .  The special identifier  is used
in the interactive interpreter to store the result of the last evaluation; it is
stored in the  module.  When not in interactive mode, 
has no special meaning and is not defined. See section The import statement.

Note
The name  is often used in conjunction with internationalization;
refer to the documentation for the  module for more
information on this convention.



System-defined names. These names are defined by the interpreter and its
implementation (including the standard library).  Current system names are
discussed in the Special method names section and elsewhere.  More will likely
be defined in future versions of Python.  Any use of  names, in
any context, that does not follow explicitly documented use, is subject to
breakage without warning.

Class-private names.  Names in this category, when used within the context of a
class definition, are re-written to use a mangled form to help avoid name
clashes between “private” attributes of base and derived classes. See section
Identifiers (Names).


