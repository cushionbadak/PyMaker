link:
library/gettext.html#the-nulltranslations-class

docs:

The  class¶
Translation classes are what actually implement the translation of original
source file message strings to translated message strings. The base class used
by all translation classes is ; this provides the basic
interface you can use to write your own specialized translation classes.  Here
are the methods of :


class (fp=None)¶
Takes an optional file object fp, which is ignored by the base class.
Initializes “protected” instance variables _info and _charset which are set
by derived classes, as well as _fallback, which is set through
.  It then calls  if fp is not
.


(fp)¶
No-op in the base class, this method takes file object fp, and reads
the data from the file, initializing its message catalog.  If you have an
unsupported message catalog file format, you should override this method
to parse your format.



(fallback)¶
Add fallback as the fallback object for the current translation object.
A translation object should consult the fallback if it cannot provide a
translation for a given message.



(message)¶
If a fallback has been set, forward  to the fallback.
Otherwise, return message.  Overridden in derived classes.



(singular, plural, n)¶
If a fallback has been set, forward  to the fallback.
Otherwise, return singular if n is 1; return plural otherwise.
Overridden in derived classes.



(message)¶



(singular, plural, n)¶
Equivalent to  and , but the translation
is returned as a byte string encoded in the preferred system encoding
if no encoding was explicitly set with .
Overridden in derived classes.

Warning
These methods should be avoided in Python 3.  See the warning for the
 function.




()¶
Return the “protected”  variable, a dictionary containing
the metadata found in the message catalog file.



()¶
Return the encoding of the message catalog file.



()¶
Return the encoding used to return translated messages in 
and .



(charset)¶
Change the encoding used to return translated messages.



(names=None)¶
This method installs  into the built-in namespace,
binding it to .
If the names parameter is given, it must be a sequence containing the
names of functions you want to install in the builtins namespace in
addition to .  Supported names are , ,
 and .
Note that this is only one way, albeit the most convenient way, to make
the  function available to your application.  Because it affects
the entire application globally, and specifically the built-in namespace,
localized modules should never install . Instead, they should use
this code to make  available to their module:


This puts  only in the module’s global namespace and so only
affects calls within this module.


