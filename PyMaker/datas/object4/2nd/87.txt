link:
reference/datamodel.html#emulating-container-types

docs:

3.3.7. Emulating container types¶
The following methods can be defined to implement container objects.  Containers
usually are sequences (such as lists or tuples) or mappings (like dictionaries),
but can represent other containers as well.  The first set of methods is used
either to emulate a sequence or to emulate a mapping; the difference is that for
a sequence, the allowable keys should be the integers k for which  where N is the length of the sequence, or slice objects, which define a
range of items.  It is also recommended that mappings provide the methods
, , , , ,
, , , , and
 behaving similar to those for Python’s standard dictionary
objects.  The  module provides a

abstract base class to help create those methods from a base set of
, , , and .
Mutable sequences should provide methods , ,
, , , , ,
 and , like Python standard list objects.  Finally,
sequence types should implement addition (meaning concatenation) and
multiplication (meaning repetition) by defining the methods ,
, , ,  and
 described below; they should not define other numerical
operators.  It is recommended that both mappings and sequences implement the
 method to allow efficient use of the  operator; for
mappings,  should search the mapping’s keys; for sequences, it should
search through the values.  It is further recommended that both mappings and
sequences implement the  method to allow efficient iteration
through the container; for mappings,  should be the same as
; for sequences, it should iterate through the values.


(self)¶
Called to implement the built-in function .  Should return the length
of the object, an integer  0.  Also, an object that doesn’t define a
 method and whose  method returns zero is
considered to be false in a Boolean context.

CPython implementation detail: In CPython, the length is required to be at most .
If the length is larger than  some features (such as
) may raise .  To prevent raising
 by truth value testing, an object must define a
 method.




(self)¶
Called to implement . Should return an estimated
length for the object (which may be greater or less than the actual length).
The length must be an integer  0. This method is purely an
optimization and is never required for correctness.

New in version 3.4.



Note
Slicing is done exclusively with the following three methods.  A call like


is translated to


and so forth.  Missing slice items are always filled in with .



(self, key)¶
Called to implement evaluation of . For sequence types, the
accepted keys should be integers and slice objects.  Note that the special
interpretation of negative indexes (if the class wishes to emulate a sequence
type) is up to the  method. If key is of an inappropriate
type,  may be raised; if of a value outside the set of indexes
for the sequence (after any special interpretation of negative values),
 should be raised. For mapping types, if key is missing (not
in the container),  should be raised.

Note
 loops expect that an  will be raised for illegal
indexes to allow proper detection of the end of the sequence.




(self, key, value)¶
Called to implement assignment to .  Same note as for
.  This should only be implemented for mappings if the
objects support changes to the values for keys, or if new keys can be added, or
for sequences if elements can be replaced.  The same exceptions should be raised
for improper key values as for the  method.



(self, key)¶
Called to implement deletion of .  Same note as for
.  This should only be implemented for mappings if the
objects support removal of keys, or for sequences if elements can be removed
from the sequence.  The same exceptions should be raised for improper key
values as for the  method.



(self, key)¶
Called by . to implement  for dict subclasses
when key is not in the dictionary.



(self)¶
This method is called when an iterator is required for a container. This method
should return a new iterator object that can iterate over all the objects in the
container.  For mappings, it should iterate over the keys of the container.
Iterator objects also need to implement this method; they are required to return
themselves.  For more information on iterator objects, see Iterator Types.



(self)¶
Called (if present) by the  built-in to implement
reverse iteration.  It should return a new iterator object that iterates
over all the objects in the container in reverse order.
If the  method is not provided, the 
built-in will fall back to using the sequence protocol ( and
).  Objects that support the sequence protocol should
only provide  if they can provide an implementation
that is more efficient than the one provided by .

The membership test operators ( and ) are normally
implemented as an iteration through a sequence.  However, container objects can
supply the following special method with a more efficient implementation, which
also does not require the object be a sequence.


(self, item)¶
Called to implement membership test operators.  Should return true if item
is in self, false otherwise.  For mapping objects, this should consider the
keys of the mapping rather than the values or the key-item pairs.
For objects that don’t define , the membership test first
tries iteration via , then the old sequence iteration
protocol via , see this section in the language
reference.

