link:
library/argparse.html#example

docs:

Example¶
The following code is a Python program that takes a list of integers and
produces either the sum or the max:


Assuming the Python code above is saved into a file called , it can
be run at the command line and provides useful help messages:


When run with the appropriate arguments, it prints either the sum or the max of
the command-line integers:


If invalid arguments are passed in, it will issue an error:


The following sections walk you through this example.

Creating a parser¶
The first step in using the  is creating an
 object:


The  object will hold all the information necessary to
parse the command line into Python data types.


Adding arguments¶
Filling an  with information about program arguments is
done by making calls to the  method.
Generally, these calls tell the  how to take the strings
on the command line and turn them into objects.  This information is stored and
used when  is called. For example:


Later, calling  will return an object with
two attributes,  and .  The  attribute
will be a list of one or more ints, and the  attribute will be
either the  function, if  was specified at the command line,
or the  function if it was not.


Parsing arguments¶
 parses arguments through the
 method.  This will inspect the command line,
convert each argument to the appropriate type and then invoke the appropriate action.
In most cases, this means a simple  object will be built up from
attributes parsed out of the command line:


In a script,  will typically be called with no
arguments, and the  will automatically determine the
command-line arguments from .

