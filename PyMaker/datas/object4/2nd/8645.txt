link:
library/unittest.mock-examples.html#further-examples

docs:

Further Examples¶
Here are some more examples for some slightly more advanced scenarios.

Mocking chained calls¶
Mocking chained calls is actually straightforward with mock once you
understand the  attribute. When a mock is called for
the first time, or you fetch its  before it has been called, a
new  is created.
This means that you can see how the object returned from a call to a mocked
object has been used by interrogating the  mock:


From here it is a simple step to configure and then make assertions about
chained calls. Of course another alternative is writing your code in a more
testable way in the first place…
So, suppose we have some code that looks a little bit like this:


Assuming that  is already well tested, how do we test
? Specifically, we want to test that the code section  uses the response object in the correct way.
As this chain of calls is made from an instance attribute we can monkey patch
the  attribute on a  instance. In this particular case
we are only interested in the return value from the final call to
 so we don’t have much configuration to do. Let’s assume the
object it returns is ‘file-like’, so we’ll ensure that our response object
uses the builtin  as its .
To do this we create a mock instance as our mock backend and create a mock
response object for it. To set the response as the return value for that final
 we could do this:


We can do that in a slightly nicer way using the 
method to directly set the return value for us:


With these we monkey patch the “mock backend” in place and can make the real
call:


Using  we can check the chained call with a single
assert. A chained call is several calls in one line of code, so there will be
several entries in . We can use  to create
this list of calls for us:




Partial mocking¶
In some tests I wanted to mock out a call to 
to return a known date, but I didn’t want to prevent the code under test from
creating new date objects. Unfortunately  is written in C, and
so I couldn’t just monkey-patch out the static  method.
I found a simple way of doing this that involved effectively wrapping the date
class with a mock, but passing through calls to the constructor to the real
class (and returning real instances).
The  is used here to
mock out the  class in the module under test. The 
attribute on the mock date class is then set to a lambda function that returns
a real date. When the mock date class is called a real date will be
constructed and returned by .


Note that we don’t patch  globally, we patch  in the
module that uses it. See where to patch.
When  is called a known date is returned, but calls to the
 constructor still return normal dates. Without this you can find
yourself having to calculate an expected result using exactly the same
algorithm as the code under test, which is a classic testing anti-pattern.
Calls to the date constructor are recorded in the  attributes
( and friends) which may also be useful for your tests.
An alternative way of dealing with mocking dates, or other builtin classes,
is discussed in this blog entry.


Mocking a Generator Method¶
A Python generator is a function or method that uses the  statement
to return a series of values when iterated over [1].
A generator method / function is called to return the generator object. It is
the generator object that is then iterated over. The protocol method for
iteration is , so we can
mock this using a .
Here’s an example class with an “iter” method implemented as a generator:


How would we mock this class, and in particular its “iter” method?
To configure the values returned from the iteration (implicit in the call to
), we need to configure the object returned by the call to .





[1]There are also generator expressions and more advanced uses of generators, but we aren’t
concerned about them here. A very good introduction to generators and how
powerful they are is: Generator Tricks for Systems Programmers.




Applying the same patch to every test method¶
If you want several patches in place for multiple test methods the obvious way
is to apply the patch decorators to every method. This can feel like unnecessary
repetition. For Python 2.6 or more recent you can use  (in all its
various forms) as a class decorator. This applies the patches to all test
methods on the class. A test method is identified by methods whose names start
with :


An alternative way of managing patches is to use the patch methods: start and stop.
These allow you to move the patching into your  and  methods.


If you use this technique you must ensure that the patching is “undone” by
calling . This can be fiddlier than you might think, because if an
exception is raised in the setUp then tearDown is not called.
 makes this easier:




Mocking Unbound Methods¶
Whilst writing tests today I needed to patch an unbound method (patching the
method on the class rather than on the instance). I needed self to be passed
in as the first argument because I want to make asserts about which objects
were calling this particular method. The issue is that you can’t patch with a
mock for this, because if you replace an unbound method with a mock it doesn’t
become a bound method when fetched from the instance, and so it doesn’t get
self passed in. The workaround is to patch the unbound method with a real
function instead. The  decorator makes it so simple to
patch out methods with a mock that having to create a real function becomes a
nuisance.
If you pass  to patch then it does the patching with a
real function object. This function object has the same signature as the one
it is replacing, but delegates to a mock under the hood. You still get your
mock auto-created in exactly the same way as before. What it means though, is
that if you use it to patch out an unbound method on a class the mocked
function will be turned into a bound method if it is fetched from an instance.
It will have  passed in as the first argument, which is exactly what I
wanted:


If we don’t use  then the unbound method is patched out
with a Mock instance instead, and isn’t called with .


Checking multiple calls with mock¶
mock has a nice API for making assertions about how your mock objects are used.


If your mock is only being called once you can use the
 method that also asserts that the
 is one.


Both  and  make assertions about
the most recent call. If your mock is going to be called several times, and
you want to make assertions about all those calls you can use
:


The  helper makes it easy to make assertions about these calls. You
can build up a list of expected calls and compare it to . This
looks remarkably similar to the repr of the :




Coping with mutable arguments¶
Another situation is rare, but can bite you, is when your mock is called with
mutable arguments.  and  store references to the
arguments. If the arguments are mutated by the code under test then you can no
longer make assertions about what the values were when the mock was called.
Here’s some example code that shows the problem. Imagine the following functions
defined in ‘mymodule’:


When we try to test that  calls  with the correct argument look
what happens:


One possibility would be for mock to copy the arguments you pass in. This
could then cause problems if you do assertions that rely on object identity
for equality.
Here’s one solution that uses the 
functionality. If you provide a  function for a mock then
 will be called with the same args as the mock. This gives us an
opportunity to copy the arguments and store them for later assertions. In this
example I’m using another mock to store the arguments so that I can use the
mock methods for doing the assertion. Again a helper function sets this up for
me.


 is called with the mock that will be called. It returns a new
mock that we do the assertion on. The  function makes a copy of
the args and calls our  with the copy.

Note
If your mock is only going to be used once there is an easier way of
checking arguments at the point they are called. You can simply do the
checking inside a  function.



An alternative approach is to create a subclass of  or
 that copies (using ) the arguments.
Here’s an example implementation:


When you subclass  or  all dynamically created attributes,
and the  will use your subclass automatically. That means all
children of a  will also have the type .


Nesting Patches¶
Using patch as a context manager is nice, but if you do multiple patches you
can end up with nested with statements indenting further and further to the
right:


With unittest  functions and the patch methods: start and stop we can
achieve the same effect without the nested indentation. A simple helper
method, , puts the patch in place and returns the created mock
for us:




Mocking a dictionary with MagicMock¶
You may want to mock a dictionary, or other container object, recording all
access to it whilst having it still behave like a dictionary.
We can do this with , which will behave like a dictionary,
and using  to delegate dictionary access to a real
underlying dictionary that is under our control.
When the  and  methods of our  are called
(normal dictionary access) then  is called with the key (and in
the case of  the value too). We can also control what is returned.
After the  has been used we can use attributes like
 to assert about how the dictionary was used:



Note
An alternative to using  is to use  and only provide
the magic methods you specifically want:


A third option is to use  but passing in  as the spec
(or spec_set) argument so that the  created only has
dictionary magic methods available:



With these side effect functions in place, the  will behave like a normal
dictionary but recording the access. It even raises a  if you try
to access a key that doesn’t exist.


After it has been used you can make assertions about the access using the normal
mock methods and attributes:




Mock subclasses and their attributes¶
There are various reasons why you might want to subclass . One
reason might be to add helper methods. Here’s a silly example:


The standard behaviour for  instances is that attributes and the return
value mocks are of the same type as the mock they are accessed on. This ensures
that  attributes are  and  attributes are 
[2]. So if you’re subclassing to add helper methods then they’ll also be
available on the attributes and return value mock of instances of your
subclass.


Sometimes this is inconvenient. For example, one user is subclassing mock to
created a Twisted adaptor.
Having this applied to attributes too actually causes errors.
 (in all its flavours) uses a method called  to create
these “sub-mocks” for attributes and return values. You can prevent your
subclass being used for attributes by overriding this method. The signature is
that it takes arbitrary keyword arguments () which are then passed
onto the mock constructor:





[2]An exception to this rule are the non-callable mocks. Attributes use the
callable variant because otherwise non-callable mocks couldn’t have callable
methods.




Mocking imports with patch.dict¶
One situation where mocking can be hard is where you have a local import inside
a function. These are harder to mock because they aren’t using an object from
the module namespace that we can patch out.
Generally local imports are to be avoided. They are sometimes done to prevent
circular dependencies, for which there is usually a much better way to solve
the problem (refactor the code) or to prevent “up front costs” by delaying the
import. This can also be solved in better ways than an unconditional local
import (store the module as a class or module attribute and only do the import
on first use).
That aside there is a way to use  to affect the results of an import.
Importing fetches an object from the  dictionary. Note that it
fetches an object, which need not be a module. Importing a module for the
first time results in a module object being put in sys.modules, so usually
when you import something you get a module back. This need not be the case
however.
This means you can use  to temporarily put a mock in place
in . Any imports whilst this patch is active will fetch the mock.
When the patch is complete (the decorated function exits, the with statement
body is complete or  is called) then whatever was there
previously will be restored safely.
Here’s an example that mocks out the ‘fooble’ module.


As you can see the  succeeds, but on exit there is no ‘fooble’
left in .
This also works for the  form:


With slightly more work you can also mock package imports:




Tracking order of calls and less verbose call assertions¶
The  class allows you to track the order of method calls on
your mock objects through the  attribute. This
doesn’t allow you to track the order of calls between separate mock objects,
however we can use  to achieve the same effect.
Because mocks track calls to child mocks in , and accessing an
arbitrary attribute of a mock creates a child mock, we can create our separate
mocks from a parent one. Calls to those child mock will then all be recorded,
in order, in the  of the parent:






We can then assert about the calls, including the order, by comparing with
the  attribute on the manager mock:


If  is creating, and putting in place, your mocks then you can attach
them to a manager mock using the  method. After
attaching calls will be recorded in  of the manager.


If many calls have been made, but you’re only interested in a particular
sequence of them then an alternative is to use the
 method. This takes a list of calls (constructed
with the  object). If that sequence of calls are in
 then the assert succeeds.


Even though the chained call  aren’t the only calls that
have been made to the mock, the assert still succeeds.
Sometimes a mock may have several calls made to it, and you are only interested
in asserting about some of those calls. You may not even care about the
order. In this case you can pass  to :




More complex argument matching¶
Using the same basic concept as  we can implement matchers to do more
complex assertions on objects used as arguments to mocks.
Suppose we expect some object to be passed to a mock that by default
compares equal based on object identity (which is the Python default for user
defined classes). To use  we would need to pass
in the exact same object. If we are only interested in some of the attributes
of this object then we can create a matcher that will check these attributes
for us.
You can see in this example how a ‘standard’ call to  isn’t
sufficient:


A comparison function for our  class might look something like this:


And a matcher object that can use comparison functions like this for its
equality operation would look something like this:


Putting all this together:


The  is instantiated with our compare function and the  object
we want to compare against. In  the  equality
method will be called, which compares the object the mock was called with
against the one we created our matcher with. If they match then
 passes, and if they don’t an  is raised:


With a bit of tweaking you could have the comparison function raise the
 directly and provide a more useful failure message.
As of version 1.5, the Python testing library PyHamcrest provides similar functionality,
that may be useful here, in the form of its equality matcher
(hamcrest.library.integration.match_equality).

