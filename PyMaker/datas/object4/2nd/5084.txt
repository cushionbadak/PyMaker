link:
library/socket.html#socket-objects

docs:

Socket Objects¶
Socket objects have the following methods.  Except for
, these correspond to Unix system calls applicable
to sockets.

Changed in version 3.2: Support for the context manager protocol was added.  Exiting the
context manager is equivalent to calling .



()¶
Accept a connection. The socket must be bound to an address and listening for
connections. The return value is a pair  where conn is a
new socket object usable to send and receive data on the connection, and
address is the address bound to the socket on the other end of the connection.
The newly created socket is non-inheritable.

Changed in version 3.4: The socket is now non-inheritable.


Changed in version 3.5: If the system call is interrupted and the signal handler does not raise
an exception, the method now retries the system call instead of raising
an  exception (see PEP 475 for the rationale).




(address)¶
Bind the socket to address.  The socket must not already be bound. (The format
of address depends on the address family — see above.)



()¶
Mark the socket closed.  The underlying system resource (e.g. a file
descriptor) is also closed when all file objects from 
are closed.  Once that happens, all future operations on the socket
object will fail. The remote end will receive no more data (after
queued data is flushed).
Sockets are automatically closed when they are garbage-collected, but
it is recommended to  them explicitly, or to use a
 statement around them.

Changed in version 3.6:  is now raised if an error occurs when the underlying
 call is made.


Note
 releases the resource associated with a connection but
does not necessarily close the connection immediately.  If you want
to close the connection in a timely fashion, call 
before .




(address)¶
Connect to a remote socket at address. (The format of address depends on the
address family — see above.)
If the connection is interrupted by a signal, the method waits until the
connection completes, or raise a  on timeout, if the
signal handler doesn’t raise an exception and the socket is blocking or has
a timeout. For non-blocking sockets, the method raises an
 exception if the connection is interrupted by a
signal (or the exception raised by the signal handler).

Changed in version 3.5: The method now waits until the connection completes instead of raising an
 exception if the connection is interrupted by a
signal, the signal handler doesn’t raise an exception and the socket is
blocking or has a timeout (see the PEP 475 for the rationale).




(address)¶
Like , but return an error indicator instead of raising an
exception for errors returned by the C-level  call (other
problems, such as “host not found,” can still raise exceptions).  The error
indicator is  if the operation succeeded, otherwise the value of the
 variable.  This is useful to support, for example, asynchronous
connects.



()¶
Put the socket object into closed state without actually closing the
underlying file descriptor.  The file descriptor is returned, and can
be reused for other purposes.

New in version 3.2.




()¶
Duplicate the socket.
The newly created socket is non-inheritable.

Changed in version 3.4: The socket is now non-inheritable.




()¶
Return the socket’s file descriptor (a small integer), or -1 on failure. This
is useful with .
Under Windows the small integer returned by this method cannot be used where a
file descriptor can be used (such as ).  Unix does not have
this limitation.



()¶
Get the inheritable flag of the socket’s file
descriptor or socket’s handle:  if the socket can be inherited in
child processes,  if it cannot.

New in version 3.4.




()¶
Return the remote address to which the socket is connected.  This is useful to
find out the port number of a remote IPv4/v6 socket, for instance. (The format
of the address returned depends on the address family — see above.)  On some
systems this function is not supported.



()¶
Return the socket’s own address.  This is useful to find out the port number of
an IPv4/v6 socket, for instance. (The format of the address returned depends on
the address family — see above.)



(level, optname[, buflen])¶
Return the value of the given socket option (see the Unix man page
getsockopt(2)).  The needed symbolic constants ( etc.)
are defined in this module.  If buflen is absent, an integer option is assumed
and its integer value is returned by the function.  If buflen is present, it
specifies the maximum length of the buffer used to receive the option in, and
this buffer is returned as a bytes object.  It is up to the caller to decode the
contents of the buffer (see the optional built-in module  for a way
to decode C structures encoded as byte strings).



()¶
Return  if socket is in blocking mode,  if in
non-blocking.
This is equivalent to checking .

New in version 3.7.




()¶
Return the timeout in seconds (float) associated with socket operations,
or  if no timeout is set.  This reflects the last call to
 or .



(control, option)¶




Platform:Windows



The  method is a limited interface to the WSAIoctl system
interface.  Please refer to the Win32 documentation for more
information.
On other platforms, the generic  and 
functions may be used; they accept a socket object as their first argument.
Currently only the following control codes are supported:
, , and .

Changed in version 3.6:  was added.




([backlog])¶
Enable a server to accept connections.  If backlog is specified, it must
be at least 0 (if it is lower, it is set to 0); it specifies the number of
unaccepted connections that the system will allow before refusing new
connections. If not specified, a default reasonable value is chosen.

Changed in version 3.5: The backlog parameter is now optional.




(mode='r', buffering=None, *, encoding=None, errors=None, newline=None)¶
Return a file object associated with the socket.  The exact returned
type depends on the arguments given to .  These arguments are
interpreted the same way as by the built-in  function, except
the only supported mode values are  (default),  and .
The socket must be in blocking mode; it can have a timeout, but the file
object’s internal buffer may end up in an inconsistent state if a timeout
occurs.
Closing the file object returned by  won’t close the
original socket unless all other file objects have been closed and
 has been called on the socket object.

Note
On Windows, the file-like object created by  cannot be
used where a file object with a file descriptor is expected, such as the
stream arguments of .




(bufsize[, flags])¶
Receive data from the socket.  The return value is a bytes object representing the
data received.  The maximum amount of data to be received at once is specified
by bufsize.  See the Unix manual page recv(2) for the meaning of
the optional argument flags; it defaults to zero.

Note
For best match with hardware and network realities, the value of  bufsize
should be a relatively small power of 2, for example, 4096.


Changed in version 3.5: If the system call is interrupted and the signal handler does not raise
an exception, the method now retries the system call instead of raising
an  exception (see PEP 475 for the rationale).




(bufsize[, flags])¶
Receive data from the socket.  The return value is a pair 
where bytes is a bytes object representing the data received and address is the
address of the socket sending the data.  See the Unix manual page
recv(2) for the meaning of the optional argument flags; it defaults
to zero. (The format of address depends on the address family — see above.)

Changed in version 3.5: If the system call is interrupted and the signal handler does not raise
an exception, the method now retries the system call instead of raising
an  exception (see PEP 475 for the rationale).


Changed in version 3.7: For multicast IPv6 address, first item of address does not contain
 part anymore. In order to get full IPv6 address use
.




(bufsize[, ancbufsize[, flags]])¶
Receive normal data (up to bufsize bytes) and ancillary data from
the socket.  The ancbufsize argument sets the size in bytes of
the internal buffer used to receive the ancillary data; it defaults
to 0, meaning that no ancillary data will be received.  Appropriate
buffer sizes for ancillary data can be calculated using
 or , and items which do not fit
into the buffer might be truncated or discarded.  The flags
argument defaults to 0 and has the same meaning as for
.
The return value is a 4-tuple: .  The data item is a  object holding the
non-ancillary data received.  The ancdata item is a list of zero
or more tuples  representing
the ancillary data (control messages) received: cmsg_level and
cmsg_type are integers specifying the protocol level and
protocol-specific type respectively, and cmsg_data is a
 object holding the associated data.  The msg_flags
item is the bitwise OR of various flags indicating conditions on
the received message; see your system documentation for details.
If the receiving socket is unconnected, address is the address of
the sending socket, if available; otherwise, its value is
unspecified.
On some systems,  and  can be used to
pass file descriptors between processes over an 
socket.  When this facility is used (it is often restricted to
 sockets),  will return, in its
ancillary data, items of the form , where fds is a  object
representing the new file descriptors as a binary array of the
native C  type.  If  raises an
exception after the system call returns, it will first attempt to
close any file descriptors received via this mechanism.
Some systems do not indicate the truncated length of ancillary data
items which have been only partially received.  If an item appears
to extend beyond the end of the buffer,  will issue
a , and will return the part of it which is
inside the buffer provided it has not been truncated before the
start of its associated data.
On systems which support the  mechanism, the
following function will receive up to maxfds file descriptors,
returning the message data and a list containing the descriptors
(while ignoring unexpected conditions such as unrelated control
messages being received).  See also .


Availability: most Unix platforms, possibly others.

New in version 3.3.


Changed in version 3.5: If the system call is interrupted and the signal handler does not raise
an exception, the method now retries the system call instead of raising
an  exception (see PEP 475 for the rationale).




(buffers[, ancbufsize[, flags]])¶
Receive normal data and ancillary data from the socket, behaving as
 would, but scatter the non-ancillary data into a
series of buffers instead of returning a new bytes object.  The
buffers argument must be an iterable of objects that export
writable buffers (e.g.  objects); these will be
filled with successive chunks of the non-ancillary data until it
has all been written or there are no more buffers.  The operating
system may set a limit ( value )
on the number of buffers that can be used.  The ancbufsize and
flags arguments have the same meaning as for .
The return value is a 4-tuple: , where nbytes is the total number of bytes of
non-ancillary data written into the buffers, and ancdata,
msg_flags and address are the same as for .
Example:


Availability: most Unix platforms, possibly others.

New in version 3.3.




(buffer[, nbytes[, flags]])¶
Receive data from the socket, writing it into buffer instead of creating a
new bytestring.  The return value is a pair  where nbytes is
the number of bytes received and address is the address of the socket sending
the data.  See the Unix manual page recv(2) for the meaning of the
optional argument flags; it defaults to zero.  (The format of address
depends on the address family — see above.)



(buffer[, nbytes[, flags]])¶
Receive up to nbytes bytes from the socket, storing the data into a buffer
rather than creating a new bytestring.  If nbytes is not specified (or 0),
receive up to the size available in the given buffer.  Returns the number of
bytes received.  See the Unix manual page recv(2) for the meaning
of the optional argument flags; it defaults to zero.



(bytes[, flags])¶
Send data to the socket.  The socket must be connected to a remote socket.  The
optional flags argument has the same meaning as for  above.
Returns the number of bytes sent. Applications are responsible for checking that
all data has been sent; if only some of the data was transmitted, the
application needs to attempt delivery of the remaining data. For further
information on this topic, consult the Socket Programming HOWTO.

Changed in version 3.5: If the system call is interrupted and the signal handler does not raise
an exception, the method now retries the system call instead of raising
an  exception (see PEP 475 for the rationale).




(bytes[, flags])¶
Send data to the socket.  The socket must be connected to a remote socket.  The
optional flags argument has the same meaning as for  above.
Unlike , this method continues to send data from bytes until
either all data has been sent or an error occurs.   is returned on
success.  On error, an exception is raised, and there is no way to determine how
much data, if any, was successfully sent.

Changed in version 3.5: The socket timeout is no more reset each time data is sent successfully.
The socket timeout is now the maximum total duration to send all data.


Changed in version 3.5: If the system call is interrupted and the signal handler does not raise
an exception, the method now retries the system call instead of raising
an  exception (see PEP 475 for the rationale).




(bytes, address)¶

(bytes, flags, address)
Send data to the socket.  The socket should not be connected to a remote socket,
since the destination socket is specified by address.  The optional flags
argument has the same meaning as for  above.  Return the number of
bytes sent. (The format of address depends on the address family — see
above.)

Changed in version 3.5: If the system call is interrupted and the signal handler does not raise
an exception, the method now retries the system call instead of raising
an  exception (see PEP 475 for the rationale).




(buffers[, ancdata[, flags[, address]]])¶
Send normal and ancillary data to the socket, gathering the
non-ancillary data from a series of buffers and concatenating it
into a single message.  The buffers argument specifies the
non-ancillary data as an iterable of
bytes-like objects
(e.g.  objects); the operating system may set a limit
( value ) on the number of buffers
that can be used.  The ancdata argument specifies the ancillary
data (control messages) as an iterable of zero or more tuples
, where cmsg_level and
cmsg_type are integers specifying the protocol level and
protocol-specific type respectively, and cmsg_data is a
bytes-like object holding the associated data.  Note that
some systems (in particular, systems without )
might support sending only one control message per call.  The
flags argument defaults to 0 and has the same meaning as for
.  If address is supplied and not , it sets a
destination address for the message.  The return value is the
number of bytes of non-ancillary data sent.
The following function sends the list of file descriptors fds
over an  socket, on systems which support the
 mechanism.  See also .


Availability: most Unix platforms, possibly others.

New in version 3.3.


Changed in version 3.5: If the system call is interrupted and the signal handler does not raise
an exception, the method now retries the system call instead of raising
an  exception (see PEP 475 for the rationale).




([msg, ]*, op[, iv[, assoclen[, flags]]])¶
Specialized version of  for  socket.
Set mode, IV, AEAD associated data length and flags for  socket.
Availability: Linux >= 2.6.38.

New in version 3.6.




(file, offset=0, count=None)¶
Send a file until EOF is reached by using high-performance
 and return the total number of bytes which were sent.
file must be a regular file object opened in binary mode. If
 is not available (e.g. Windows) or file is not a
regular file  will be used instead. offset tells from where to
start reading the file. If specified, count is the total number of bytes
to transmit as opposed to sending the file until EOF is reached. File
position is updated on return or also in case of error in which case
 can be used to figure out the number of
bytes which were sent. The socket must be of  type.
Non-blocking sockets are not supported.

New in version 3.5.




(inheritable)¶
Set the inheritable flag of the socket’s file
descriptor or socket’s handle.

New in version 3.4.




(flag)¶
Set blocking or non-blocking mode of the socket: if flag is false, the
socket is set to non-blocking, else to blocking mode.
This method is a shorthand for certain  calls:

 is equivalent to 
 is equivalent to 


Changed in version 3.7: The method no longer applies  flag on
.




(value)¶
Set a timeout on blocking socket operations.  The value argument can be a
nonnegative floating point number expressing seconds, or .
If a non-zero value is given, subsequent socket operations will raise a
 exception if the timeout period value has elapsed before
the operation has completed.  If zero is given, the socket is put in
non-blocking mode. If  is given, the socket is put in blocking mode.
For further information, please consult the notes on socket timeouts.

Changed in version 3.7: The method no longer toggles  flag on
.




(level, optname, value: int)¶



(level, optname, value: buffer)



(level, optname, None, optlen: int)
Set the value of the given socket option (see the Unix manual page
setsockopt(2)).  The needed symbolic constants are defined in the
 module ( etc.).  The value can be an integer,
 or a bytes-like object representing a buffer. In the later
case it is up to the caller to ensure that the bytestring contains the
proper bits (see the optional built-in module  for a way to
encode C structures as bytestrings). When value is set to ,
optlen argument is required. It’s equivalent to call setsockopt C
function with optval=NULL and optlen=optlen.

Changed in version 3.5: Writable bytes-like object is now accepted.


Changed in version 3.6: setsockopt(level, optname, None, optlen: int) form added.




(how)¶
Shut down one or both halves of the connection.  If how is ,
further receives are disallowed.  If how is , further sends
are disallowed.  If how is , further sends and receives are
disallowed.



(process_id)¶
Duplicate a socket and prepare it for sharing with a target process.  The
target process must be provided with process_id.  The resulting bytes object
can then be passed to the target process using some form of interprocess
communication and the socket can be recreated there using .
Once this method has been called, it is safe to close the socket since
the operating system has already duplicated it for the target process.
Availability: Windows.

New in version 3.3.


Note that there are no methods  or ; use
 and  without flags argument instead.
Socket objects also have these (read-only) attributes that correspond to the
values given to the  constructor.


¶
The socket family.



¶
The socket type.



¶
The socket protocol.

