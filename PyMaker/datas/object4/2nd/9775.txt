link:
library/parser.html#converting-st-objects

docs:

Converting ST Objects¶
ST objects, regardless of the input used to create them, may be converted to
parse trees represented as list- or tuple- trees, or may be compiled into
executable code objects.  Parse trees may be extracted with or without line
numbering information.


(st, line_info=False, col_info=False)¶
This function accepts an ST object from the caller in st and returns a
Python list representing the equivalent parse tree.  The resulting list
representation can be used for inspection or the creation of a new parse tree in
list form.  This function does not fail so long as memory is available to build
the list representation.  If the parse tree will only be used for inspection,
 should be used instead to reduce memory consumption and
fragmentation.  When the list representation is required, this function is
significantly faster than retrieving a tuple representation and converting that
to nested lists.
If line_info is true, line number information will be included for all
terminal tokens as a third element of the list representing the token.  Note
that the line number provided specifies the line on which the token ends.
This information is omitted if the flag is false or omitted.



(st, line_info=False, col_info=False)¶
This function accepts an ST object from the caller in st and returns a
Python tuple representing the equivalent parse tree.  Other than returning a
tuple instead of a list, this function is identical to .
If line_info is true, line number information will be included for all
terminal tokens as a third element of the list representing the token.  This
information is omitted if the flag is false or omitted.



(st, filename='<syntax-tree>')¶
The Python byte compiler can be invoked on an ST object to produce code objects
which can be used as part of a call to the built-in  or 
functions. This function provides the interface to the compiler, passing the
internal parse tree from st to the parser, using the source file name
specified by the filename parameter. The default value supplied for filename
indicates that the source was an ST object.
Compiling an ST object may result in exceptions related to compilation; an
example would be a  caused by the parse tree for :
this statement is considered legal within the formal grammar for Python but is
not a legal language construct.  The  raised for this
condition is actually generated by the Python byte-compiler normally, which is
why it can be raised at this point by the  module.  Most causes of
compilation failure can be diagnosed programmatically by inspection of the parse
tree.

