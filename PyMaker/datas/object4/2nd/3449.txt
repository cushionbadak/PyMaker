link:
library/argparse.html#argparse.ArgumentParser.add_subparsers

docs:


([title][, description][, prog][, parser_class][, action][, option_string][, dest][, required][, help][, metavar])¶
Many programs split up their functionality into a number of sub-commands,
for example, the  program can invoke sub-commands like , , and .  Splitting up functionality
this way can be a particularly good idea when a program performs several
different functions which require different kinds of command-line arguments.
 supports the creation of such sub-commands with the
 method.  The  method is normally
called with no arguments and returns a special action object.  This object
has a single method, , which takes a
command name and any  constructor arguments, and
returns an  object that can be modified as usual.
Description of parameters:

title - title for the sub-parser group in help output; by default
“subcommands” if description is provided, otherwise uses title for
positional arguments
description - description for the sub-parser group in help output, by
default 
prog - usage information that will be displayed with sub-command help,
by default the name of the program and any positional arguments before the
subparser argument
parser_class - class which will be used to create sub-parser instances, by
default the class of the current parser (e.g. ArgumentParser)
action - the basic type of action to be taken when this argument is
encountered at the command line
dest - name of the attribute under which sub-command name will be
stored; by default  and no value is stored
required - Whether or not a subcommand must be provided, by default
.
help - help for sub-parser group in help output, by default 
metavar - string presenting available sub-commands in help; by default it
is  and presents sub-commands in form {cmd1, cmd2, ..}

Some example usage:


Note that the object returned by  will only contain
attributes for the main parser and the subparser that was selected by the
command line (and not any other subparsers).  So in the example above, when
the  command is specified, only the  and  attributes are
present, and when the  command is specified, only the  and
 attributes are present.
Similarly, when a help message is requested from a subparser, only the help
for that particular parser will be printed.  The help message will not
include parent parser or sibling parser messages.  (A help message for each
subparser command, however, can be given by supplying the  argument
to  as above.)


The  method also supports  and 
keyword arguments.  When either is present, the subparser’s commands will
appear in their own group in the help output.  For example:


Furthermore,  supports an additional  argument,
which allows multiple strings to refer to the same subparser. This example,
like , aliases  as a shorthand for :


One particularly effective way of handling sub-commands is to combine the use
of the  method with calls to  so
that each subparser knows which Python function it should execute.  For
example:


This way, you can let  do the job of calling the
appropriate function after argument parsing is complete.  Associating
functions with actions like this is typically the easiest way to handle the
different actions for each of your subparsers.  However, if it is necessary
to check the name of the subparser that was invoked, the  keyword
argument to the  call will work:


