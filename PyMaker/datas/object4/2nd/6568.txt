link:
library/wsgiref.html#module-wsgiref.simple_server

docs:

 – a simple WSGI HTTP server¶
This module implements a simple HTTP server (based on )
that serves WSGI applications.  Each server instance serves a single WSGI
application on a given host and port.  If you want to serve multiple
applications on a single host and port, you should create a WSGI application
that parses  to select which application to invoke for each
request.  (E.g., using the  function from
.)


(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)¶
Create a new WSGI server listening on host and port, accepting connections
for app.  The return value is an instance of the supplied server_class, and
will process requests using the specified handler_class.  app must be a WSGI
application object, as defined by PEP 3333.
Example usage:





(environ, start_response)¶
This function is a small but complete WSGI application that returns a text page
containing the message “Hello world!” and a list of the key/value pairs provided
in the environ parameter.  It’s useful for verifying that a WSGI server (such
as ) is able to run a simple WSGI application
correctly.



class (server_address, RequestHandlerClass)¶
Create a  instance.  server_address should be a
 tuple, and RequestHandlerClass should be the subclass of
 that will be used to process
requests.
You do not normally need to call this constructor, as the 
function can handle all the details for you.
 is a subclass of , so all
of its methods (such as  and ) are
available.  also provides these WSGI-specific methods:


(application)¶
Sets the callable application as the WSGI application that will receive
requests.



()¶
Returns the currently-set application callable.

Normally, however, you do not need to use these additional methods, as
 is normally called by , and the
 exists mainly for the benefit of request handler instances.



class (request, client_address, server)¶
Create an HTTP handler for the given request (i.e. a socket), client_address
(a  tuple), and server ( instance).
You do not need to create instances of this class directly; they are
automatically created as needed by  objects.  You can,
however, subclass this class and supply it as a handler_class to the
 function.  Some possibly relevant methods for overriding in
subclasses:


()¶
Returns a dictionary containing the WSGI environment for a request.  The default
implementation copies the contents of the  object’s
 dictionary attribute and then adds various headers derived
from the HTTP request.  Each call to this method should return a new dictionary
containing all of the relevant CGI environment variables as specified in
PEP 3333.



()¶
Return the object that should be used as the  stream. The default
implementation just returns .



()¶
Process the HTTP request.  The default implementation creates a handler instance
using a  class to implement the actual WSGI application
interface.


