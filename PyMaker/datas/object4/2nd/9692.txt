link:
library/importlib.html#module-importlib.machinery

docs:

 – Importers and path hooks¶
Source code: Lib/importlib/machinery.py

This module contains the various objects that help 
find and load modules.


¶
A list of strings representing the recognized file suffixes for source
modules.

New in version 3.3.




¶
A list of strings representing the file suffixes for non-optimized bytecode
modules.

New in version 3.3.


Deprecated since version 3.5: Use  instead.




¶
A list of strings representing the file suffixes for optimized bytecode
modules.

New in version 3.3.


Deprecated since version 3.5: Use  instead.




¶
A list of strings representing the recognized file suffixes for bytecode
modules (including the leading dot).

New in version 3.3.


Changed in version 3.5: The value is no longer dependent on .




¶
A list of strings representing the recognized file suffixes for
extension modules.

New in version 3.3.




()¶
Returns a combined list of strings representing all file suffixes for
modules recognized by the standard import machinery. This is a
helper for code which simply needs to know if a filesystem path
potentially refers to a module without needing any details on the kind
of module (for example, ).

New in version 3.3.




class ¶
An importer for built-in modules. All known built-in modules are
listed in . This class implements the
 and
 ABCs.
Only class methods are defined by this class to alleviate the need for
instantiation.

Changed in version 3.5: As part of PEP 489, the builtin importer now implements
 and 




class ¶
An importer for frozen modules. This class implements the
 and
 ABCs.
Only class methods are defined by this class to alleviate the need for
instantiation.



class ¶
Finder for modules declared in the Windows registry.  This class
implements the  ABC.
Only class methods are defined by this class to alleviate the need for
instantiation.

New in version 3.3.


Deprecated since version 3.6: Use  configuration instead. Future versions of Python may
not enable this finder by default.




class ¶
A Finder for  and package  attributes.
This class implements the  ABC.
Only class methods are defined by this class to alleviate the need for
instantiation.


classmethod (fullname, path=None, target=None)¶
Class method that attempts to find a spec
for the module specified by fullname on  or, if
defined, on path. For each path entry that is searched,
 is checked. If a non-false object
is found then it is used as the path entry finder to look
for the module being searched for. If no entry is found in
, then  is
searched for a finder for the path entry and, if found, is stored
in  along with being queried about
the module. If no finder is ever found then  is both
stored in the cache and returned.

New in version 3.4.


Changed in version 3.5: If the current working directory – represented by an empty string –
is no longer valid then  is returned but no value is cached
in .




classmethod (fullname, path=None)¶
A legacy wrapper around .

Deprecated since version 3.4: Use  instead.




classmethod ()¶
Calls  on all
finders stored in  that define the method.
Otherwise entries in  set to  are
deleted.

Changed in version 3.7: Entries of  in  are deleted.



Changed in version 3.4: Calls objects in  with the current working
directory for  (i.e. the empty string).




class (path, *loader_details)¶
A concrete implementation of  which
caches results from the file system.
The path argument is the directory for which the finder is in charge of
searching.
The loader_details argument is a variable number of 2-item tuples each
containing a loader and a sequence of file suffixes the loader recognizes.
The loaders are expected to be callables which accept two arguments of
the module’s name and the path to the file found.
The finder will cache the directory contents as necessary, making stat calls
for each module search to verify the cache is not outdated. Because cache
staleness relies upon the granularity of the operating system’s state
information of the file system, there is a potential race condition of
searching for a module, creating a new file, and then searching for the
module the new file represents. If the operations happen fast enough to fit
within the granularity of stat calls, then the module search will fail. To
prevent this from happening, when you create a module dynamically, make sure
to call .

New in version 3.3.



¶
The path the finder will search in.



(fullname, target=None)¶
Attempt to find the spec to handle fullname within .

New in version 3.4.




(fullname)¶
Attempt to find the loader to handle fullname within .



()¶
Clear out the internal cache.



classmethod (*loader_details)¶
A class method which returns a closure for use on .
An instance of  is returned by the closure using the
path argument given to the closure directly and loader_details
indirectly.
If the argument to the closure is not an existing directory,
 is raised.




class (fullname, path)¶
A concrete implementation of  by
subclassing  and providing some concrete
implementations of other methods.

New in version 3.3.



¶
The name of the module that this loader will handle.



¶
The path to the source file.



(fullname)¶
Return true if  appears to be for a package.



(path)¶
Concrete implementation of .



(path, data)¶
Concrete implementation of .



(name=None)¶
Concrete implementation of  where
specifying the name of the module to load is optional.

Deprecated since version 3.6: Use  instead.





class (fullname, path)¶
A concrete implementation of  which can
import bytecode files (i.e. no source code files exist).
Please note that direct use of bytecode files (and thus not source code
files) inhibits your modules from being usable by all Python
implementations or new versions of Python which change the bytecode
format.

New in version 3.3.



¶
The name of the module the loader will handle.



¶
The path to the bytecode file.



(fullname)¶
Determines if the module is a package based on .



(fullname)¶
Returns the code object for  created from .



(fullname)¶
Returns  as bytecode files have no source when this loader is
used.



(name=None)¶

Concrete implementation of  where
specifying the name of the module to load is optional.

Deprecated since version 3.6: Use  instead.




class (fullname, path)¶
A concrete implementation of  for
extension modules.
The fullname argument specifies the name of the module the loader is to
support. The path argument is the path to the extension module’s file.

New in version 3.3.



¶
Name of the module the loader supports.



¶
Path to the extension module.



(spec)¶
Creates the module object from the given specification in accordance
with PEP 489.

New in version 3.5.




(module)¶
Initializes the given module object in accordance with PEP 489.

New in version 3.5.




(fullname)¶
Returns  if the file path points to a package’s 
module based on .



(fullname)¶
Returns  as extension modules lack a code object.



(fullname)¶
Returns  as extension modules do not have source code.



(fullname)¶
Returns .

New in version 3.4.





class (name, loader, *, origin=None, loader_state=None, is_package=None)¶
A specification for a module’s import-system-related state.  This is
typically exposed as the module’s  attribute.  In the
descriptions below, the names in parentheses give the corresponding
attribute available directly on the module object.
E.g. .  Note however that
while the values are usually equivalent, they can differ since there is
no synchronization between the two objects.  Thus it is possible to update
the module’s  at runtime, and this will not be automatically
reflected in .

New in version 3.4.



¶

()
A string for the fully-qualified name of the module.


¶

()
The loader to use for loading.  For namespace packages this should be
set to .


¶

()
Name of the place from which the module is loaded, e.g. “builtin” for
built-in modules and the filename for modules loaded from source.
Normally “origin” should be set, but it may be  (the default)
which indicates it is unspecified (e.g. for namespace packages).


¶

()
List of strings for where to find submodules, if a package (
otherwise).


¶

Container of extra module-specific data for use during loading (or
).


¶

()
String for where the compiled module should be stored (or ).


¶

()
(Read-only) Fully-qualified name of the package to which the module
belongs as a submodule (or ).


¶

Boolean indicating whether or not the module’s “origin”
attribute refers to a loadable location.

