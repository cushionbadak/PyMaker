link:
library/http.cookiejar.html

docs:


 — Cookie handling for HTTP clients¶
Source code: Lib/http/cookiejar.py

The  module defines classes for automatic handling of HTTP
cookies.  It is useful for accessing web sites that require small pieces of data
– cookies – to be set on the client machine by an HTTP response from a
web server, and then returned to the server in later HTTP requests.
Both the regular Netscape cookie protocol and the protocol defined by
RFC 2965 are handled.  RFC 2965 handling is switched off by default.
RFC 2109 cookies are parsed as Netscape cookies and subsequently treated
either as Netscape or RFC 2965 cookies according to the ‘policy’ in effect.
Note that the great majority of cookies on the Internet are Netscape cookies.
 attempts to follow the de-facto Netscape cookie protocol (which
differs substantially from that set out in the original Netscape specification),
including taking note of the  and  cookie-attributes
introduced with RFC 2965.

Note
The various named parameters found in Set-Cookie and
Set-Cookie2 headers (eg.  and ) are
conventionally referred to as attributes.  To distinguish them from
Python attributes, the documentation for this module uses the term
cookie-attribute instead.

The module defines the following exception:


exception ¶
Instances of  raise this exception on failure to load
cookies from a file.   is a subclass of .

Changed in version 3.3: LoadError was made a subclass of  instead of
.


The following classes are provided:


class (policy=None)¶
policy is an object implementing the  interface.
The  class stores HTTP cookies.  It extracts cookies from HTTP
requests, and returns them in HTTP responses.  instances
automatically expire contained cookies when necessary.  Subclasses are also
responsible for storing and retrieving cookies from a file or database.



class (filename, delayload=None, policy=None)¶
policy is an object implementing the  interface.  For the
other arguments, see the documentation for the corresponding attributes.
A  which can load cookies from, and perhaps save cookies to, a
file on disk.  Cookies are NOT loaded from the named file until either the
 or  method is called.  Subclasses of this class are
documented in section FileCookieJar subclasses and co-operation with web browsers.



class ¶
This class is responsible for deciding whether each cookie should be accepted
from / returned to the server.



class (blocked_domains=None, allowed_domains=None, netscape=True, rfc2965=False, rfc2109_as_netscape=None, hide_cookie2=False, strict_domain=False, strict_rfc2965_unverifiable=True, strict_ns_unverifiable=False, strict_ns_domain=DefaultCookiePolicy.DomainLiberal, strict_ns_set_initial_dollar=False, strict_ns_set_path=False)¶
Constructor arguments should be passed as keyword arguments only.
blocked_domains is a sequence of domain names that we never accept cookies
from, nor return cookies to. allowed_domains if not , this is a
sequence of the only domains for which we accept and return cookies.  For all
other arguments, see the documentation for  and
 objects.
 implements the standard accept / reject rules for
Netscape and RFC 2965 cookies.  By default, RFC 2109 cookies (ie. cookies
received in a Set-Cookie header with a version cookie-attribute of
1) are treated according to the RFC 2965 rules.  However, if RFC 2965 handling
is turned off or  is , RFC 2109 cookies are
‘downgraded’ by the  instance to Netscape cookies, by
setting the  attribute of the  instance to 0.
 also provides some parameters to allow some
fine-tuning of policy.



class ¶
This class represents Netscape, RFC 2109 and RFC 2965 cookies.  It is not
expected that users of  construct their own 
instances.  Instead, if necessary, call  on a
 instance.


See also

Module 
URL opening with automatic cookie handling.
Module 
HTTP cookie classes, principally useful for server-side code.  The
 and  modules do not depend on each
other.
https://curl.haxx.se/rfc/cookie_spec.html
The specification of the original Netscape cookie protocol.  Though this is
still the dominant protocol, the ‘Netscape cookie protocol’ implemented by all
the major browsers (and ) only bears a passing resemblance to
the one sketched out in .
RFC 2109 - HTTP State Management Mechanism
Obsoleted by RFC 2965. Uses Set-Cookie with version=1.
RFC 2965 - HTTP State Management Mechanism
The Netscape protocol with the bugs fixed.  Uses Set-Cookie2 in
place of Set-Cookie.  Not widely used.
http://kristol.org/cookie/errata.html
Unfinished errata to RFC 2965.

RFC 2964 - Use of HTTP State Management


CookieJar and FileCookieJar Objects¶
 objects support the iterator protocol for iterating over
contained  objects.
 has the following methods:


(request)¶
Add correct Cookie header to request.
If policy allows (ie. the  and  attributes of
the ’s  instance are true and false
respectively), the Cookie2 header is also added when appropriate.
The request object (usually a  instance)
must support the methods , ,
, , ,
, , 
and  attribute as documented by
.

Changed in version 3.3: request object needs  attribute. Dependency on a
deprecated method  has been removed.




(response, request)¶
Extract cookies from HTTP response and store them in the ,
where allowed by policy.
The  will look for allowable Set-Cookie and
Set-Cookie2 headers in the response argument, and store cookies
as appropriate (subject to the  method’s approval).
The response object (usually the result of a call to
, or similar) should support an 
method, which returns an  instance.
The request object (usually a  instance)
must support the methods , ,
, and  attribute, as documented
by .  The request is used to set default values for
cookie-attributes as well as for checking that the cookie is allowed to be
set.

Changed in version 3.3: request object needs  attribute. Dependency on a
deprecated method  has been removed.




(policy)¶
Set the  instance to be used.



(response, request)¶
Return sequence of  objects extracted from response object.
See the documentation for  for the interfaces required of
the response and request arguments.



(cookie, request)¶
Set a  if policy says it’s OK to do so.



(cookie)¶
Set a , without checking with policy to see whether or not it
should be set.



([domain[, path[, name]]])¶
Clear some cookies.
If invoked without arguments, clear all cookies.  If given a single argument,
only cookies belonging to that domain will be removed. If given two arguments,
cookies belonging to the specified domain and URL path are removed.  If
given three arguments, then the cookie with the specified domain, path and
name is removed.
Raises  if no matching cookie exists.



()¶
Discard all session cookies.
Discards all contained cookies that have a true  attribute
(usually because they had either no  or  cookie-attribute,
or an explicit  cookie-attribute).  For interactive browsers, the end
of a session usually corresponds to closing the browser window.
Note that the  method won’t save session cookies anyway, unless you
ask otherwise by passing a true ignore_discard argument.

 implements the following additional methods:


(filename=None, ignore_discard=False, ignore_expires=False)¶
Save cookies to a file.
This base class raises .  Subclasses may leave this
method unimplemented.
filename is the name of file in which to save cookies.  If filename is not
specified,  is used (whose default is the value passed to
the constructor, if any); if  is ,
 is raised.
ignore_discard: save even cookies set to be discarded. ignore_expires: save
even cookies that have expired
The file is overwritten if it already exists, thus wiping all the cookies it
contains.  Saved cookies can be restored later using the  or
 methods.



(filename=None, ignore_discard=False, ignore_expires=False)¶
Load cookies from a file.
Old cookies are kept unless overwritten by newly loaded ones.
Arguments are as for .
The named file must be in the format understood by the class, or
 will be raised.  Also,  may be raised, for
example if the file does not exist.

Changed in version 3.3:  used to be raised, it is now an alias of .




(filename=None, ignore_discard=False, ignore_expires=False)¶
Clear all cookies and reload cookies from a saved file.
 can raise the same exceptions as . If there is a
failure, the object’s state will not be altered.

 instances have the following public attributes:


¶
Filename of default file in which to keep cookies.  This attribute may be
assigned to.



¶
If true, load cookies lazily from disk.  This attribute should not be assigned
to.  This is only a hint, since this only affects performance, not behaviour
(unless the cookies on disk are changing). A  object may
ignore it.  None of the  classes included in the standard
library lazily loads cookies.



FileCookieJar subclasses and co-operation with web browsers¶
The following  subclasses are provided for reading and
writing.


class (filename, delayload=None, policy=None)¶
A  that can load from and save cookies to disk in the
Mozilla  file format (which is also used by the Lynx and Netscape
browsers).

Note
This loses information about RFC 2965 cookies, and also about newer or
non-standard cookie-attributes such as .


Warning
Back up your cookies before saving if you have cookies whose loss / corruption
would be inconvenient (there are some subtleties which may lead to slight
changes in the file over a load / save round-trip).

Also note that cookies saved while Mozilla is running will get clobbered by
Mozilla.



class (filename, delayload=None, policy=None)¶
A  that can load from and save cookies to disk in format
compatible with the libwww-perl library’s  file format.  This is
convenient if you want to store cookies in a human-readable file.



CookiePolicy Objects¶
Objects implementing the  interface have the following
methods:


(cookie, request)¶
Return boolean value indicating whether cookie should be accepted from server.
cookie is a  instance.  request is an object
implementing the interface defined by the documentation for
.



(cookie, request)¶
Return boolean value indicating whether cookie should be returned to server.
cookie is a  instance.  request is an object
implementing the interface defined by the documentation for
.



(domain, request)¶
Return false if cookies should not be returned, given cookie domain.
This method is an optimization.  It removes the need for checking every cookie
with a particular domain (which might involve reading many files).  Returning
true from  and  leaves all the
work to .
If  returns true for the cookie domain,
 is called for the cookie path.  Otherwise,
 and  are never called for that cookie
domain.  If  returns true,  is called
with the  object itself for a full check.  Otherwise,
 is never called for that cookie path.
Note that  is called for every cookie domain, not just
for the request domain.  For example, the function might be called with both
 and  if the request domain is
.  The same goes for .
The request argument is as documented for .



(path, request)¶
Return false if cookies should not be returned, given cookie path.
See the documentation for .

In addition to implementing the methods above, implementations of the
 interface must also supply the following attributes,
indicating which protocols should be used, and how.  All of these attributes may
be assigned to.


¶
Implement Netscape protocol.



¶
Implement RFC 2965 protocol.



¶
Don’t add Cookie2 header to requests (the presence of this header
indicates to the server that we understand RFC 2965 cookies).

The most useful way to define a  class is by subclassing
from  and overriding some or all of the methods
above.   itself may be used as a ‘null policy’ to allow
setting and receiving any and all cookies (this is unlikely to be useful).


DefaultCookiePolicy Objects¶
Implements the standard rules for accepting and returning cookies.
Both RFC 2965 and Netscape cookies are covered.  RFC 2965 handling is switched
off by default.
The easiest way to provide your own policy is to override this class and call
its methods in your overridden implementations before adding your own additional
checks:


In addition to the features required to implement the 
interface, this class allows you to block and allow domains from setting and
receiving cookies.  There are also some strictness switches that allow you to
tighten up the rather loose Netscape protocol rules a little bit (at the cost of
blocking some benign cookies).
A domain blacklist and whitelist is provided (both off by default). Only domains
not in the blacklist and present in the whitelist (if the whitelist is active)
participate in cookie setting and returning.  Use the blocked_domains
constructor argument, and  and
 methods (and the corresponding argument and methods
for allowed_domains).  If you set a whitelist, you can turn it off again by
setting it to .
Domains in block or allow lists that do not start with a dot must equal the
cookie domain to be matched.  For example,  matches a blacklist
entry of , but  does not.  Domains that do
start with a dot are matched by more specific domains too. For example, both
 and  match 
(but  itself does not).  IP addresses are an exception, and
must match exactly.  For example, if blocked_domains contains 
and , 192.168.1.2 is blocked, but 193.168.1.2 is not.
 implements the following additional methods:


()¶
Return the sequence of blocked domains (as a tuple).



(blocked_domains)¶
Set the sequence of blocked domains.



(domain)¶
Return whether domain is on the blacklist for setting or receiving cookies.



()¶
Return , or the sequence of allowed domains (as a tuple).



(allowed_domains)¶
Set the sequence of allowed domains, or .



(domain)¶
Return whether domain is not on the whitelist for setting or receiving
cookies.

 instances have the following attributes, which are
all initialised from the constructor arguments of the same name, and which may
all be assigned to.


¶
If true, request that the  instance downgrade RFC 2109 cookies
(ie. cookies received in a Set-Cookie header with a version
cookie-attribute of 1) to Netscape cookies by setting the version attribute of
the  instance to 0.  The default value is , in which
case RFC 2109 cookies are downgraded if and only if RFC 2965 handling is turned
off.  Therefore, RFC 2109 cookies are downgraded by default.

General strictness switches:


¶
Don’t allow sites to set two-component domains with country-code top-level
domains like , , .etc.  This is far from perfect
and isn’t guaranteed to work!

RFC 2965 protocol strictness switches:


¶
Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable
transaction is one resulting from a redirect or a request for an image hosted on
another site).  If this is false, cookies are never blocked on the basis of
verifiability

Netscape protocol strictness switches:


¶
Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies.



¶
Flags indicating how strict to be with domain-matching rules for Netscape
cookies.  See below for acceptable values.



¶
Ignore cookies in Set-Cookie: headers that have names starting with .



¶
Don’t allow setting cookies whose path doesn’t path-match request URI.

 is a collection of flags.  Its value is constructed by
or-ing together (for example,  means
both flags are set).


¶
When setting cookies, the ‘host prefix’ must not contain a dot (eg.
 can’t set a cookie for , because 
contains a dot).



¶
Cookies that did not explicitly specify a  cookie-attribute can only
be returned to a domain equal to the domain that set the cookie (eg.
 won’t be returned cookies from  that had no
 cookie-attribute).



¶
When setting cookies, require a full RFC 2965 domain-match.

The following attributes are provided for convenience, and are the most useful
combinations of the above flags:


¶
Equivalent to 0 (ie. all of the above Netscape domain strictness flags switched
off).



¶
Equivalent to .



Cookie Objects¶
 instances have Python attributes roughly corresponding to the
standard cookie-attributes specified in the various cookie standards.  The
correspondence is not one-to-one, because there are complicated rules for
assigning default values, because the  and 
cookie-attributes contain equivalent information, and because RFC 2109 cookies
may be ‘downgraded’ by  from version 1 to version 0 (Netscape)
cookies.
Assignment to these attributes should not be necessary other than in rare
circumstances in a  method.  The class does not enforce
internal consistency, so you should know what you’re doing if you do that.


¶
Integer or .  Netscape cookies have  0. RFC 2965 and
RFC 2109 cookies have a  cookie-attribute of 1.  However, note that
 may ‘downgrade’ RFC 2109 cookies to Netscape cookies, in which
case  is 0.



¶
Cookie name (a string).



¶
Cookie value (a string), or .



¶
String representing a port or a set of ports (eg. ‘80’, or ‘80,8080’), or
.



¶
Cookie path (a string, eg. ).



¶
 if cookie should only be returned over a secure connection.



¶
Integer expiry date in seconds since epoch, or .  See also the
 method.



¶
 if this is a session cookie.



¶
String comment from the server explaining the function of this cookie, or
.



¶
URL linking to a comment from the server explaining the function of this cookie,
or .



¶
 if this cookie was received as an RFC 2109 cookie (ie. the cookie
arrived in a Set-Cookie header, and the value of the Version
cookie-attribute in that header was 1).  This attribute is provided because
 may ‘downgrade’ RFC 2109 cookies to Netscape cookies, in
which case  is 0.



¶
 if a port or set of ports was explicitly specified by the server (in the
Set-Cookie / Set-Cookie2 header).



¶
 if a domain was explicitly specified by the server.



¶
 if the domain explicitly specified by the server began with a dot
().

Cookies may have additional non-standard cookie-attributes.  These may be
accessed using the following methods:


(name)¶
Return true if cookie has the named cookie-attribute.



(name, default=None)¶
If cookie has the named cookie-attribute, return its value. Otherwise, return
default.



(name, value)¶
Set the value of the named cookie-attribute.

The  class also defines the following method:


(now=None)¶
 if cookie has passed the time at which the server requested it should
expire.  If now is given (in seconds since the epoch), return whether the
cookie has expired at the specified time.



Examples¶
The first example shows the most common usage of :


This example illustrates how to open a URL using your Netscape, Mozilla, or Lynx
cookies (assumes Unix/Netscape convention for location of the cookies file):


The next example illustrates the use of . Turn on
RFC 2965 cookies, be more strict about domains when setting and returning
Netscape cookies, and block some domains from setting cookies or having them
returned:




