link:
library/turtle.html#introduction

docs:

Introduction¶
Turtle graphics is a popular way for introducing programming to kids.  It was
part of the original Logo programming language developed by Wally Feurzig and
Seymour Papert in 1966.
Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After an , give it the
command , and it moves (on-screen!) 15 pixels in the
direction it is facing, drawing a line as it moves.  Give it the command
, and it rotates in-place 25 degrees clockwise.

Turtle star
Turtle can draw intricate shapes using programs that repeat simple
moves.




By combining together these and similar commands, intricate shapes and pictures
can easily be drawn.
The  module is an extended reimplementation of the same-named
module from the Python standard distribution up to version Python 2.5.
It tries to keep the merits of the old turtle module and to be (nearly) 100%
compatible with it.  This means in the first place to enable the learning
programmer to use all the commands, classes and methods interactively when using
the module from within IDLE run with the  switch.
The turtle module provides turtle graphics primitives, in both object-oriented
and procedure-oriented ways.  Because it uses  for the underlying
graphics, it needs a version of Python installed with Tk support.
The object-oriented interface uses essentially two+two classes:

The  class defines graphics windows as a playground for
the drawing turtles.  Its constructor needs a  or a
 as argument.  It should be used when  is
used as part of some application.
The function  returns a singleton object of a
 subclass. This function should be used when
 is used as a standalone tool for doing graphics.
As a singleton object, inheriting from its class is not possible.
All methods of TurtleScreen/Screen also exist as functions, i.e. as part of
the procedure-oriented interface.

 (alias: ) defines Turtle objects which draw
on a .  Its constructor needs a Canvas, ScrolledCanvas
or TurtleScreen as argument, so the RawTurtle objects know where to draw.
Derived from RawTurtle is the subclass  (alias: ),
which draws on “the”  instance which is automatically
created, if not already present.
All methods of RawTurtle/Turtle also exist as functions, i.e. part of the
procedure-oriented interface.


The procedural interface provides functions which are derived from the methods
of the classes  and .  They have the same names as
the corresponding methods.  A screen object is automatically created whenever a
function derived from a Screen method is called.  An (unnamed) turtle object is
automatically created whenever any of the functions derived from a Turtle method
is called.
To use multiple turtles on a screen one has to use the object-oriented interface.

Note
In the following documentation the argument list for functions is given.
Methods, of course, have the additional first argument self which is
omitted here.

