link:
library/fileinput.html

docs:


 — Iterate over lines from multiple input streams¶
Source code: Lib/fileinput.py

This module implements a helper class and functions to quickly write a
loop over standard input or a list of files. If you just want to read or
write one file see .
The typical use is:


This iterates over the lines of all files listed in , defaulting
to  if the list is empty.  If a filename is , it is also
replaced by .  To specify an alternative list of filenames, pass it
as the first argument to .  A single file name is also allowed.
All files are opened in text mode by default, but you can override this by
specifying the mode parameter in the call to  or
.  If an I/O error occurs during opening or reading a file,
 is raised.

Changed in version 3.3:  used to be raised; it is now an alias of .

If  is used more than once, the second and further use will return
no lines, except perhaps for interactive use, or if it has been explicitly reset
(e.g. using ).
Empty files are opened and immediately closed; the only time their presence in
the list of filenames is noticeable at all is when the last file opened is
empty.
Lines are returned with any newlines intact, which means that the last line in
a file may not have one.
You can control how files are opened by providing an opening hook via the
openhook parameter to  or . The
hook must be a function that takes two arguments, filename and mode, and
returns an accordingly opened file-like object. Two useful hooks are already
provided by this module.
The following function is the primary interface of this module:


(files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None)¶
Create an instance of the  class.  The instance will be used
as global state for the functions of this module, and is also returned to use
during iteration.  The parameters to this function will be passed along to the
constructor of the  class.
The  instance can be used as a context manager in the
 statement.  In this example, input is closed after the
 statement is exited, even if an exception occurs:



Changed in version 3.2: Can be used as a context manager.


Deprecated since version 3.6, will be removed in version 3.8: The bufsize parameter.


The following functions use the global state created by ;
if there is no active state,  is raised.


()¶
Return the name of the file currently being read.  Before the first line has
been read, returns .



()¶
Return the integer “file descriptor” for the current file. When no file is
opened (before the first line and between files), returns .



()¶
Return the cumulative line number of the line that has just been read.  Before
the first line has been read, returns .  After the last line of the last
file has been read, returns the line number of that line.



()¶
Return the line number in the current file.  Before the first line has been
read, returns .  After the last line of the last file has been read,
returns the line number of that line within the file.



()¶
Returns true if the line just read is the first line of its file, otherwise
returns false.



()¶
Returns true if the last line was read from , otherwise returns
false.



()¶
Close the current file so that the next iteration will read the first line from
the next file (if any); lines not read from the file will not count towards the
cumulative line count.  The filename is not changed until after the first line
of the next file has been read.  Before the first line has been read, this
function has no effect; it cannot be used to skip the first file.  After the
last line of the last file has been read, this function has no effect.



()¶
Close the sequence.

The class which implements the sequence behavior provided by the module is
available for subclassing as well:


class (files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None)¶
Class  is the implementation; its methods ,
, , , ,
,  and  correspond to the
functions of the same name in the module. In addition it has a
 method which returns the next input line,
and a  method which implements the sequence behavior.
The sequence must be accessed in strictly sequential order; random access
and  cannot be mixed.
With mode you can specify which file mode will be passed to . It
must be one of , ,  and .
The openhook, when given, must be a function that takes two arguments,
filename and mode, and returns an accordingly opened file-like object. You
cannot use inplace and openhook together.
A  instance can be used as a context manager in the
 statement.  In this example, input is closed after the
 statement is exited, even if an exception occurs:



Changed in version 3.2: Can be used as a context manager.


Deprecated since version 3.4: The  and  modes.


Deprecated since version 3.6, will be removed in version 3.8: The bufsize parameter.


Optional in-place filtering: if the keyword argument  is
passed to  or to the  constructor, the
file is moved to a backup file and standard output is directed to the input file
(if a file of the same name as the backup file already exists, it will be
replaced silently).  This makes it possible to write a filter that rewrites its
input file in place.  If the backup parameter is given (typically as
), it specifies the extension for the backup file,
and the backup file remains around; by default, the extension is  and
it is deleted when the output file is closed.  In-place filtering is disabled
when standard input is read.
The two following opening hooks are provided by this module:


(filename, mode)¶
Transparently opens files compressed with gzip and bzip2 (recognized by the
extensions  and ) using the  and 
modules.  If the filename extension is not  or , the file is
opened normally (ie, using  without any decompression).
Usage example:  



(encoding, errors=None)¶
Returns a hook which opens each file with , using the given
encoding and errors to read the file.
Usage example: 

Changed in version 3.6: Added the optional errors parameter.



