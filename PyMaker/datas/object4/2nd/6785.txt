link:
library/http.client.html

docs:


 — HTTP protocol client¶
Source code: Lib/http/client.py

This module defines classes which implement the client side of the HTTP and
HTTPS protocols.  It is normally not used directly — the module
 uses it to handle URLs that use HTTP and HTTPS.

See also
The Requests package
is recommended for a higher-level HTTP client interface.


Note
HTTPS support is only available if Python was compiled with SSL support
(through the  module).

The module provides the following classes:


class (host, port=None, [timeout, ]source_address=None, blocksize=8192)¶
An  instance represents one transaction with an HTTP
server.  It should be instantiated passing it a host and optional port
number.  If no port number is passed, the port is extracted from the host
string if it has the form , else the default HTTP port (80) is
used.  If the optional timeout parameter is given, blocking
operations (like connection attempts) will timeout after that many seconds
(if it is not given, the global default timeout setting is used).
The optional source_address parameter may be a tuple of a (host, port)
to use as the source address the HTTP connection is made from.
The optional blocksize parameter sets the buffer size in bytes for
sending a file-like message body.
For example, the following calls all create instances that connect to the server
at the same host and port:



Changed in version 3.2: source_address was added.


Changed in version 3.4: The  strict parameter was removed. HTTP 0.9-style “Simple Responses” are
not longer supported.


Changed in version 3.7: blocksize parameter was added.




class (host, port=None, key_file=None, cert_file=None, [timeout, ]source_address=None, *, context=None, check_hostname=None, blocksize=8192)¶
A subclass of  that uses SSL for communication with
secure servers.  Default port is .  If context is specified, it
must be a  instance describing the various SSL
options.
Please read Security considerations for more information on best practices.

Changed in version 3.2: source_address, context and check_hostname were added.


Changed in version 3.2: This class now supports HTTPS virtual hosts if possible (that is,
if  is true).


Changed in version 3.4: The strict parameter was removed. HTTP 0.9-style “Simple Responses” are
no longer supported.


Changed in version 3.4.3: This class now performs all the necessary certificate and hostname checks
by default. To revert to the previous, unverified, behavior
 can be passed to the context
parameter.


Deprecated since version 3.6: key_file and cert_file are deprecated in favor of context.
Please use  instead, or let
 select the system’s trusted CA
certificates for you.
The check_hostname parameter is also deprecated; the
 attribute of context should
be used instead.




class (sock, debuglevel=0, method=None, url=None)¶
Class whose instances are returned upon successful connection.  Not
instantiated directly by user.

Changed in version 3.4: The strict parameter was removed. HTTP 0.9 style “Simple Responses” are
no longer supported.


The following exceptions are raised as appropriate:


exception ¶
The base class of the other exceptions in this module.  It is a subclass of
.



exception ¶
A subclass of .



exception ¶
A subclass of , raised if a port is given and is either
non-numeric or empty.



exception ¶
A subclass of .



exception ¶
A subclass of .



exception ¶
A subclass of .



exception ¶
A subclass of .



exception ¶
A subclass of .



exception ¶
A subclass of .



exception ¶
A subclass of .



exception ¶
A subclass of .



exception ¶
A subclass of .  Raised if a server responds with a HTTP
status code that we don’t understand.



exception ¶
A subclass of .  Raised if an excessively long line
is received in the HTTP protocol from the server.



exception ¶
A subclass of  and .  Raised
by  when the attempt to read the response
results in no data read from the connection, indicating that the remote end
has closed the connection.

New in version 3.5: Previously,  was raised.


The constants defined in this module are:


¶
The default port for the HTTP protocol (always ).



¶
The default port for the HTTPS protocol (always ).



¶
This dictionary maps the HTTP 1.1 status codes to the W3C names.
Example:  is .

See HTTP status codes for a list of HTTP status codes that are
available in this module as constants.

HTTPConnection Objects¶
 instances have the following methods:


(method, url, body=None, headers={}, *, encode_chunked=False)¶
This will send a request to the server using the HTTP request
method method and the selector url.
If body is specified, the specified data is sent after the headers are
finished.  It may be a , a bytes-like object, an
open file object, or an iterable of .  If body
is a string, it is encoded as ISO-8859-1, the default for HTTP.  If it
is a bytes-like object, the bytes are sent as is.  If it is a file
object, the contents of the file is sent; this file object should
support at least the  method.  If the file object is an
instance of , the data returned by the 
method will be encoded as ISO-8859-1, otherwise the data returned by
 is sent as is.  If body is an iterable, the elements of the
iterable are sent as is until the iterable is exhausted.
The headers argument should be a mapping of extra HTTP headers to send
with the request.
If headers contains neither Content-Length nor Transfer-Encoding,
but there is a request body, one of those
header fields will be added automatically.  If
body is , the Content-Length header is set to  for
methods that expect a body (, , and ).  If
body is a string or a bytes-like object that is not also a
file, the Content-Length header is
set to its length.  Any other type of body (files
and iterables in general) will be chunk-encoded, and the
Transfer-Encoding header will automatically be set instead of
Content-Length.
The encode_chunked argument is only relevant if Transfer-Encoding is
specified in headers.  If encode_chunked is , the
HTTPConnection object assumes that all encoding is handled by the
calling code.  If it is , the body will be chunk-encoded.

Note
Chunked transfer encoding has been added to the HTTP protocol
version 1.1.  Unless the HTTP server is known to handle HTTP 1.1,
the caller must either specify the Content-Length, or must pass a
 or bytes-like object that is not also a file as the
body representation.


New in version 3.2: body can now be an iterable.


Changed in version 3.6: If neither Content-Length nor Transfer-Encoding are set in
headers, file and iterable body objects are now chunk-encoded.
The encode_chunked argument was added.
No attempt is made to determine the Content-Length for file
objects.




()¶
Should be called after a request is sent to get the response from the server.
Returns an  instance.

Note
Note that you must have read the whole response before you can send a new
request to the server.


Changed in version 3.5: If a  or subclass is raised, the
 object will be ready to reconnect when
a new request is sent.




(level)¶
Set the debugging level.  The default debug level is , meaning no
debugging output is printed.  Any value greater than  will cause all
currently defined debug output to be printed to stdout.  The 
is passed to any new  objects that are created.

New in version 3.1.




(host, port=None, headers=None)¶
Set the host and the port for HTTP Connect Tunnelling. This allows running
the connection through a proxy server.
The host and port arguments specify the endpoint of the tunneled connection
(i.e. the address included in the CONNECT request, not the address of the
proxy server).
The headers argument should be a mapping of extra HTTP headers to send with
the CONNECT request.
For example, to tunnel through a HTTPS proxy server running locally on port
8080, we would pass the address of the proxy to the 
constructor, and the address of the host that we eventually want to reach to
the  method:



New in version 3.2.




()¶
Connect to the server specified when the object was created.  By default,
this is called automatically when making a request if the client does not
already have a connection.



()¶
Close the connection to the server.



¶
Buffer size in bytes for sending a file-like message body.

New in version 3.7.


As an alternative to using the  method described above, you can
also send your request step by step, by using the four functions below.


(method, url, skip_host=False, skip_accept_encoding=False)¶
This should be the first call after the connection to the server has been
made. It sends a line to the server consisting of the method string,
the url string, and the HTTP version ().  To disable automatic
sending of  or  headers (for example to accept
additional content encodings), specify skip_host or skip_accept_encoding
with non-False values.



(header, argument[, ...])¶
Send an RFC 822-style header to the server.  It sends a line to the server
consisting of the header, a colon and a space, and the first argument.  If more
arguments are given, continuation lines are sent, each consisting of a tab and
an argument.



(message_body=None, *, encode_chunked=False)¶
Send a blank line to the server, signalling the end of the headers. The
optional message_body argument can be used to pass a message body
associated with the request.
If encode_chunked is , the result of each iteration of
message_body will be chunk-encoded as specified in RFC 7230,
Section 3.3.1.  How the data is encoded is dependent on the type of
message_body.  If message_body implements the buffer interface the encoding will result in a single chunk.
If message_body is a , each iteration
of message_body will result in a chunk.  If message_body is a
file object, each call to  will result in a chunk.
The method automatically signals the end of the chunk-encoded data
immediately after message_body.

Note
Due to the chunked encoding specification, empty chunks
yielded by an iterator body will be ignored by the chunk-encoder.
This is to avoid premature termination of the read of the request by
the target server due to malformed encoding.


New in version 3.6: Chunked encoding support.  The encode_chunked parameter was
added.




(data)¶
Send data to the server.  This should be used directly only after the
 method has been called and before  is
called.



HTTPResponse Objects¶
An  instance wraps the HTTP response from the
server.  It provides access to the request headers and the entity
body.  The response is an iterable object and can be used in a with
statement.

Changed in version 3.5: The  interface is now implemented and
all of its reader operations are supported.



([amt])¶
Reads and returns the response body, or up to the next amt bytes.



(b)¶
Reads up to the next len(b) bytes of the response body into the buffer b.
Returns the number of bytes read.

New in version 3.3.




(name, default=None)¶
Return the value of the header name, or default if there is no header
matching name.  If there is more than one  header with the name name,
return all of the values joined by ‘, ‘.  If ‘default’ is any iterable other
than a single string, its elements are similarly returned joined by commas.



()¶
Return a list of (header, value) tuples.



()¶
Return the  of the underlying socket.



¶
A  instance containing the response
headers.   is a subclass of
.



¶
HTTP protocol version used by server.  10 for HTTP/1.0, 11 for HTTP/1.1.



¶
Status code returned by server.



¶
Reason phrase returned by server.



¶
A debugging hook.  If  is greater than zero, messages
will be printed to stdout as the response is read and parsed.



¶
Is  if the stream is closed.



Examples¶
Here is an example session that uses the  method:


Here is an example session that uses the  method.  Note that the
 method never returns any data.


Here is an example session that shows how to  requests:


Client side  requests are very similar to  requests. The
difference lies only the server side where HTTP server will allow resources to
be created via  request. It should be noted that custom HTTP methods
+are also handled in  by sending the appropriate
+method attribute.Here is an example session that shows how to do 
request using http.client:




HTTPMessage Objects¶
An  instance holds the headers from an HTTP
response.  It is implemented using the  class.


