link:
library/contextlib.html#reusable-context-managers

docs:

Reusable context managers¶
Distinct from both single use and reentrant context managers are “reusable”
context managers (or, to be completely explicit, “reusable, but not
reentrant” context managers, since reentrant context managers are also
reusable). These context managers support being used multiple times, but
will fail (or otherwise not work correctly) if the specific context manager
instance has already been used in a containing with statement.
 is an example of a reusable, but not reentrant,
context manager (for a reentrant lock, it is necessary to use
 instead).
Another example of a reusable, but not reentrant, context manager is
, as it invokes all currently registered callbacks
when leaving any with statement, regardless of where those callbacks
were added:


As the output from the example shows, reusing a single stack object across
multiple with statements works correctly, but attempting to nest them
will cause the stack to be cleared at the end of the innermost with
statement, which is unlikely to be desirable behaviour.
Using separate  instances instead of reusing a single
instance avoids that problem:


