link:
library/unittest.html#class-and-module-fixtures

docs:

Class and Module Fixtures¶
Class and module level fixtures are implemented in . When
the test suite encounters a test from a new class then 
from the previous class (if there is one) is called, followed by
 from the new class.
Similarly if a test is from a different module from the previous test then
 from the previous module is run, followed by
 from the new module.
After all the tests have run the final  and
 are run.
Note that shared fixtures do not play well with [potential] features like test
parallelization and they break test isolation. They should be used with care.
The default ordering of tests created by the unittest test loaders is to group
all tests from the same modules and classes together. This will lead to
 /  (etc) being called exactly once per class and
module. If you randomize the order, so that tests from different modules and
classes are adjacent to each other, then these shared fixture functions may be
called multiple times in a single test run.
Shared fixtures are not intended to work with suites with non-standard
ordering. A  still exists for frameworks that don’t want to
support shared fixtures.
If there are any exceptions raised during one of the shared fixture functions
the test is reported as an error. Because there is no corresponding test
instance an  object (that has the same interface as a
) is created to represent the error. If you are just using
the standard unittest test runner then this detail doesn’t matter, but if you
are a framework author it may be relevant.

setUpClass and tearDownClass¶
These must be implemented as class methods:


If you want the  and  on base classes called
then you must call up to them yourself. The implementations in
 are empty.
If an exception is raised during a  then the tests in the class
are not run and the  is not run. Skipped classes will not
have  or  run. If the exception is a
 exception then the class will be reported as having been skipped
instead of as an error.


setUpModule and tearDownModule¶
These should be implemented as functions:


If an exception is raised in a  then none of the tests in the
module will be run and the  will not be run. If the exception is a
 exception then the module will be reported as having been skipped
instead of as an error.

