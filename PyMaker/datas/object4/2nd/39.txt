link:
reference/datamodel.html#basic-customization

docs:

3.3.1. Basic customization¶


(cls[, ...])¶
Called to create a new instance of class cls.   is a static
method (special-cased so you need not declare it as such) that takes the class
of which an instance was requested as its first argument.  The remaining
arguments are those passed to the object constructor expression (the call to the
class).  The return value of  should be the new object instance
(usually an instance of cls).
Typical implementations create a new instance of the class by invoking the
superclass’s  method using 
with appropriate arguments and then modifying the newly-created instance
as necessary before returning it.
If  returns an instance of cls, then the new instance’s
 method will be invoked like , where
self is the new instance and the remaining arguments are the same as were
passed to .
If  does not return an instance of cls, then the new instance’s
 method will not be invoked.
 is intended mainly to allow subclasses of immutable types (like
int, str, or tuple) to customize instance creation.  It is also commonly
overridden in custom metaclasses in order to customize class creation.



(self[, ...])¶
Called after the instance has been created (by ), but before
it is returned to the caller.  The arguments are those passed to the
class constructor expression.  If a base class has an 
method, the derived class’s  method, if any, must explicitly
call it to ensure proper initialization of the base class part of the
instance; for example: .
Because  and  work together in constructing
objects ( to create it, and  to customize it),
no non- value may be returned by ; doing so will
cause a  to be raised at runtime.



(self)¶
Called when the instance is about to be destroyed.  This is also called a
finalizer or (improperly) a destructor.  If a base class has a
 method, the derived class’s  method,
if any, must explicitly call it to ensure proper deletion of the base
class part of the instance.
It is possible (though not recommended!) for the  method
to postpone destruction of the instance by creating a new reference to
it.  This is called object resurrection.  It is implementation-dependent
whether  is called a second time when a resurrected object
is about to be destroyed; the current CPython implementation
only calls it once.
It is not guaranteed that  methods are called for objects
that still exist when the interpreter exits.

Note
 doesn’t directly call  — the former decrements
the reference count for  by one, and the latter is only called when
’s reference count reaches zero.


CPython implementation detail: It is possible for a reference cycle to prevent the reference count
of an object from going to zero.  In this case, the cycle will be
later detected and deleted by the cyclic garbage collector.  A common cause of reference cycles is when
an exception has been caught in a local variable.  The frame’s
locals then reference the exception, which references its own
traceback, which references the locals of all frames caught in the
traceback.

See also
Documentation for the  module.



Warning
Due to the precarious circumstances under which  methods are
invoked, exceptions that occur during their execution are ignored, and a warning
is printed to  instead.  In particular:

 can be invoked when arbitrary code is being executed,
including from any arbitrary thread.  If  needs to take
a lock or invoke any other blocking resource, it may deadlock as
the resource may already be taken by the code that gets interrupted
to execute .
 can be executed during interpreter shutdown.  As a
consequence, the global variables it needs to access (including other
modules) may already have been deleted or set to . Python
guarantees that globals whose name begins with a single underscore
are deleted from their module before other globals are deleted; if
no other references to such globals exist, this may help in assuring
that imported modules are still available at the time when the
 method is called.





(self)¶
Called by the  built-in function to compute the “official” string
representation of an object.  If at all possible, this should look like a
valid Python expression that could be used to recreate an object with the
same value (given an appropriate environment).  If this is not possible, a
string of the form  should be returned.
The return value must be a string object. If a class defines 
but not , then  is also used when an
“informal” string representation of instances of that class is required.
This is typically used for debugging, so it is important that the representation
is information-rich and unambiguous.



(self)¶
Called by  and the built-in functions
 and  to compute the “informal” or nicely
printable string representation of an object.  The return value must be a
string object.
This method differs from  in that there is no
expectation that  return a valid Python expression: a more
convenient or concise representation can be used.
The default implementation defined by the built-in type 
calls .



(self)¶
Called by bytes to compute a byte-string representation
of an object. This should return a  object.



(self, format_spec)¶
Called by the  built-in function,
and by extension, evaluation of formatted string literals and the  method, to produce a “formatted”
string representation of an object. The format_spec argument is
a string that contains a description of the formatting options desired.
The interpretation of the format_spec argument is up to the type
implementing , however most classes will either
delegate formatting to one of the built-in types, or use a similar
formatting option syntax.
See Format Specification Mini-Language for a description of the standard formatting syntax.
The return value must be a string object.

Changed in version 3.4: The __format__ method of  itself raises a 
if passed any non-empty string.


Changed in version 3.7:  is now equivalent to  rather
than .




(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶
These are the so-called “rich comparison” methods. The correspondence between
operator symbols and method names is as follows:  calls ,
 calls ,  calls ,  calls
,  calls , and  calls
.
A rich comparison method may return the singleton  if it does
not implement the operation for a given pair of arguments. By convention,
 and  are returned for a successful comparison. However, these
methods can return any value, so if the comparison operator is used in a Boolean
context (e.g., in the condition of an  statement), Python will call
 on the value to determine if the result is true or false.
By default,  delegates to  and
inverts the result unless it is .  There are no other
implied relationships among the comparison operators, for example,
the truth of  does not imply .
To automatically generate ordering operations from a single root operation,
see .
See the paragraph on  for
some important notes on creating hashable objects which support
custom comparison operations and are usable as dictionary keys.
There are no swapped-argument versions of these methods (to be used when the
left argument does not support the operation but the right argument does);
rather,  and  are each other’s reflection,
 and  are each other’s reflection, and
 and  are their own reflection.
If the operands are of different types, and right operand’s type is
a direct or indirect subclass of the left operand’s type,
the reflected method of the right operand has priority, otherwise
the left operand’s method has priority.  Virtual subclassing is
not considered.



(self)¶
Called by built-in function  and for operations on members of
hashed collections including , , and
.   should return an integer. The only required
property is that objects which compare equal have the same hash value; it is
advised to mix together the hash values of the components of the object that
also play a part in comparison of objects by packing them into a tuple and
hashing the tuple. Example:



Note
 truncates the value returned from an object’s custom
 method to the size of a .  This is
typically 8 bytes on 64-bit builds and 4 bytes on 32-bit builds.  If an
object’s    must interoperate on builds of different bit
sizes, be sure to check the width on all supported builds.  An easy way
to do this is with
.

If a class does not define an  method it should not define a
 operation either; if it defines  but not
, its instances will not be usable as items in hashable
collections.  If a class defines mutable objects and implements an
 method, it should not implement , since the
implementation of hashable collections requires that a key’s hash value is
immutable (if the object’s hash value changes, it will be in the wrong hash
bucket).
User-defined classes have  and  methods
by default; with them, all objects compare unequal (except with themselves)
and  returns an appropriate value such that 
implies both that  and .
A class that overrides  and does not define 
will have its  implicitly set to .  When the
 method of a class is , instances of the class will
raise an appropriate  when a program attempts to retrieve
their hash value, and will also be correctly identified as unhashable when
checking .
If a class that overrides  needs to retain the implementation
of  from a parent class, the interpreter must be told this
explicitly by setting .
If a class that does not override  wishes to suppress hash
support, it should include  in the class definition.
A class which defines its own  that explicitly raises
a  would be incorrectly identified as hashable by
an  call.

Note
By default, the  values of str, bytes and datetime
objects are “salted” with an unpredictable random value.  Although they
remain constant within an individual Python process, they are not
predictable between repeated invocations of Python.
This is intended to provide protection against a denial-of-service caused
by carefully-chosen inputs that exploit the worst case performance of a
dict insertion, O(n^2) complexity.  See
http://www.ocert.org/advisories/ocert-2011-003.html for details.
Changing hash values affects the iteration order of sets.
Python has never made guarantees about this ordering
(and it typically varies between 32-bit and 64-bit builds).
See also .


Changed in version 3.3: Hash randomization is enabled by default.




(self)¶
Called to implement truth value testing and the built-in operation
; should return  or .  When this method is not
defined,  is called, if it is defined, and the object is
considered true if its result is nonzero.  If a class defines neither
 nor , all its instances are considered
true.

