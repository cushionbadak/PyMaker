link:
library/unittest.html#basic-example

docs:

Basic exampleÂ¶
The  module provides a rich set of tools for constructing and
running tests.  This section demonstrates that a small subset of the tools
suffice to meet the needs of most users.
Here is a short script to test three string methods:


A testcase is created by subclassing .  The three
individual tests are defined with methods whose names start with the letters
.  This naming convention informs the test runner about which methods
represent tests.
The crux of each test is a call to  to check for an
expected result;  or 
to verify a condition; or  to verify that a
specific exception gets raised.  These methods are used instead of the
 statement so the test runner can accumulate all test results
and produce a report.
The  and  methods allow you
to define instructions that will be executed before and after each test method.
They are covered in more detail in the section Organizing test code.
The final block shows a simple way to run the tests. 
provides a command-line interface to the test script.  When run from the command
line, the above script produces an output that looks like this:


Passing the  option to your test script will instruct 
to enable a higher level of verbosity, and produce the following output:


The above examples show the most commonly used  features which
are sufficient to meet many everyday testing needs.  The remainder of the
documentation explores the full feature set from first principles.
