link:
library/sys.html#sys.settrace

docs:


(tracefunc)¶
Set the system’s trace function, which allows you to implement a Python
source code debugger in Python.  The function is thread-specific; for a
debugger to support multiple threads, it must register a trace function using
 for each thread being debugged or use .
Trace functions should have three arguments: frame, event, and
arg. frame is the current stack frame.  event is a string: ,
, ,  or .  arg depends on
the event type.
The trace function is invoked (with event set to ) whenever a new
local scope is entered; it should return a reference to a local trace
function to be used that scope, or  if the scope shouldn’t be traced.
The local trace function should return a reference to itself (or to another
function for further tracing in that scope), or  to turn off tracing
in that scope.
If there is any error occurred in the trace function, it will be unset, just
like  is called.
The events have the following meaning:


A function is called (or some other code block entered).  The
global trace function is called; arg is ; the return value
specifies the local trace function.

The interpreter is about to execute a new line of code or re-execute the
condition of a loop.  The local trace function is called; arg is
; the return value specifies the new local trace function.  See
 for a detailed explanation of how this
works.
Per-line events may be disabled for a frame by setting
 to  on that frame.

A function (or other code block) is about to return.  The local trace
function is called; arg is the value that will be returned, or 
if the event is caused by an exception being raised.  The trace function’s
return value is ignored.

An exception has occurred.  The local trace function is called; arg is a
tuple ; the return value specifies the
new local trace function.

The interpreter is about to execute a new opcode (see  for
opcode details).  The local trace function is called; arg is
; the return value specifies the new local trace function.
Per-opcode events are not emitted by default: they must be explicitly
requested by setting  to  on the
frame.

Note that as an exception is propagated down the chain of callers, an
 event is generated at each level.
For more information on code and frame objects, refer to The standard type hierarchy.

CPython implementation detail: The  function is intended only for implementing debuggers,
profilers, coverage tools and the like.  Its behavior is part of the
implementation platform, rather than part of the language definition, and
thus may not be available in all Python implementations.


Changed in version 3.7:  event type added;  and
 attributes added to frames

