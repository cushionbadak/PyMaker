link:
library/pathlib.html#methods-and-properties

docs:

Methods and properties¶
Pure paths provide the following methods and properties:


¶
A string representing the drive letter or name, if any:


UNC shares are also considered drives:





¶
A string representing the (local or global) root, if any:


UNC shares always have a root:





¶
The concatenation of the drive and root:





¶
An immutable sequence providing access to the logical ancestors of
the path:





¶
The logical parent of the path:


You cannot go past an anchor, or empty path:



Note
This is a purely lexical operation, hence the following behaviour:


If you want to walk an arbitrary filesystem path upwards, it is
recommended to first call  so as to resolve
symlinks and eliminate “..” components.




¶
A string representing the final path component, excluding the drive and
root, if any:


UNC drive names are not considered:





¶
The file extension of the final component, if any:





¶
A list of the path’s file extensions:





¶
The final path component, without its suffix:





()¶
Return a string representation of the path with forward slashes ():





()¶
Represent the path as a  URI.   is raised if
the path isn’t absolute.





()¶
Return whether the path is absolute or not.  A path is considered absolute
if it has both a root and (if the flavour allows) a drive:





()¶
With , return  if the path is considered
reserved under Windows,  otherwise.  With ,
 is always returned.


File system calls on reserved paths can fail mysteriously or have
unintended effects.



(*other)¶
Calling this method is equivalent to combining the path with each of
the other arguments in turn:





(pattern)¶
Match this path against the provided glob-style pattern.  Return 
if matching is successful,  otherwise.
If pattern is relative, the path can be either relative or absolute,
and matching is done from the right:


If pattern is absolute, the path must be absolute, and the whole path
must match:


As with other methods, case-sensitivity is observed:





(*other)¶
Compute a version of this path relative to the path represented by
other.  If it’s impossible, ValueError is raised:





(name)¶
Return a new path with the  changed.  If the original path
doesn’t have a name, ValueError is raised:





(suffix)¶
Return a new path with the  changed.  If the original path
doesn’t have a suffix, the new suffix is appended instead.  If the
suffix is an empty string, the original suffix is removed:



