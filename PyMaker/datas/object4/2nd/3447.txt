link:
library/argparse.html#other-utilities

docs:

Other utilities¶

Sub-commands¶


([title][, description][, prog][, parser_class][, action][, option_string][, dest][, required][, help][, metavar])¶
Many programs split up their functionality into a number of sub-commands,
for example, the  program can invoke sub-commands like , , and .  Splitting up functionality
this way can be a particularly good idea when a program performs several
different functions which require different kinds of command-line arguments.
 supports the creation of such sub-commands with the
 method.  The  method is normally
called with no arguments and returns a special action object.  This object
has a single method, , which takes a
command name and any  constructor arguments, and
returns an  object that can be modified as usual.
Description of parameters:

title - title for the sub-parser group in help output; by default
“subcommands” if description is provided, otherwise uses title for
positional arguments
description - description for the sub-parser group in help output, by
default 
prog - usage information that will be displayed with sub-command help,
by default the name of the program and any positional arguments before the
subparser argument
parser_class - class which will be used to create sub-parser instances, by
default the class of the current parser (e.g. ArgumentParser)
action - the basic type of action to be taken when this argument is
encountered at the command line
dest - name of the attribute under which sub-command name will be
stored; by default  and no value is stored
required - Whether or not a subcommand must be provided, by default
.
help - help for sub-parser group in help output, by default 
metavar - string presenting available sub-commands in help; by default it
is  and presents sub-commands in form {cmd1, cmd2, ..}

Some example usage:


Note that the object returned by  will only contain
attributes for the main parser and the subparser that was selected by the
command line (and not any other subparsers).  So in the example above, when
the  command is specified, only the  and  attributes are
present, and when the  command is specified, only the  and
 attributes are present.
Similarly, when a help message is requested from a subparser, only the help
for that particular parser will be printed.  The help message will not
include parent parser or sibling parser messages.  (A help message for each
subparser command, however, can be given by supplying the  argument
to  as above.)


The  method also supports  and 
keyword arguments.  When either is present, the subparser’s commands will
appear in their own group in the help output.  For example:


Furthermore,  supports an additional  argument,
which allows multiple strings to refer to the same subparser. This example,
like , aliases  as a shorthand for :


One particularly effective way of handling sub-commands is to combine the use
of the  method with calls to  so
that each subparser knows which Python function it should execute.  For
example:


This way, you can let  do the job of calling the
appropriate function after argument parsing is complete.  Associating
functions with actions like this is typically the easiest way to handle the
different actions for each of your subparsers.  However, if it is necessary
to check the name of the subparser that was invoked, the  keyword
argument to the  call will work:





FileType objects¶


class (mode='r', bufsize=-1, encoding=None, errors=None)¶
The  factory creates objects that can be passed to the type
argument of .  Arguments that have
 objects as their type will open command-line arguments as
files with the requested modes, buffer sizes, encodings and error handling
(see the  function for more details):


FileType objects understand the pseudo-argument  and automatically
convert this into  for readable  objects and
 for writable  objects:



New in version 3.4: The encodings and errors keyword arguments.




Argument groups¶


(title=None, description=None)¶
By default,  groups command-line arguments into
“positional arguments” and “optional arguments” when displaying help
messages. When there is a better conceptual grouping of arguments than this
default one, appropriate groups can be created using the
 method:


The  method returns an argument group object which
has an  method just like a regular
.  When an argument is added to the group, the parser
treats it just like a normal argument, but displays the argument in a
separate group for help messages.  The  method
accepts title and description arguments which can be used to
customize this display:


Note that any arguments not in your user-defined groups will end up back
in the usual “positional arguments” and “optional arguments” sections.



Mutual exclusion¶


(required=False)¶
Create a mutually exclusive group.  will make sure that only
one of the arguments in the mutually exclusive group was present on the
command line:


The  method also accepts a required
argument, to indicate that at least one of the mutually exclusive arguments
is required:


Note that currently mutually exclusive argument groups do not support the
title and description arguments of
.



Parser defaults¶


(**kwargs)¶
Most of the time, the attributes of the object returned by 
will be fully determined by inspecting the command-line arguments and the argument
actions.   allows some additional
attributes that are determined without any inspection of the command line to
be added:


Note that parser-level defaults always override argument-level defaults:


Parser-level defaults can be particularly useful when working with multiple
parsers.  See the  method for an
example of this type.



(dest)¶
Get the default value for a namespace attribute, as set by either
 or by
:





Printing help¶
In most typical applications,  will take
care of formatting and printing any usage or error messages.  However, several
formatting methods are available:


(file=None)¶
Print a brief description of how the  should be
invoked on the command line.  If file is ,  is
assumed.



(file=None)¶
Print a help message, including the program usage and information about the
arguments registered with the .  If file is
,  is assumed.

There are also variants of these methods that simply return a string instead of
printing it:


()¶
Return a string containing a brief description of how the
 should be invoked on the command line.



()¶
Return a string containing a help message, including the program usage and
information about the arguments registered with the .



Partial parsing¶


(args=None, namespace=None)¶

Sometimes a script may only parse a few of the command-line arguments, passing
the remaining arguments on to another script or program. In these cases, the
 method can be useful.  It works much like
 except that it does not produce an error when
extra arguments are present.  Instead, it returns a two item tuple containing
the populated namespace and the list of remaining argument strings.



Warning
Prefix matching rules apply to
. The parser may consume an option even if it’s just
a prefix of one of its known options, instead of leaving it in the remaining
arguments list.



Customizing file parsing¶


(arg_line)¶
Arguments that are read from a file (see the fromfile_prefix_chars
keyword argument to the  constructor) are read one
argument per line.  can be overridden for
fancier reading.
This method takes a single argument arg_line which is a string read from
the argument file.  It returns a list of arguments parsed from this string.
The method is called once per line read from the argument file, in order.
A useful override of this method is one that treats each space-separated word
as an argument.  The following example demonstrates how to do this:





Exiting methods¶


(status=0, message=None)¶
This method terminates the program, exiting with the specified status
and, if given, it prints a message before that.



(message)¶
This method prints a usage message including the message to the
standard error and terminates the program with a status code of 2.



Intermixed parsing¶


(args=None, namespace=None)¶



(args=None, namespace=None)¶

A number of Unix commands allow the user to intermix optional arguments with
positional arguments.  The 
and  methods
support this parsing style.
These parsers do not support all the argparse features, and will raise
exceptions if unsupported features are used.  In particular, subparsers,
, and mutually exclusive groups that include both
optionals and positionals are not supported.
The following example shows the difference between
 and
: the former returns  as unparsed arguments, while the latter collects all the positionals
into .


 returns a two item tuple
containing the populated namespace and the list of remaining argument strings.
 raises an error if there are any
remaining unparsed argument strings.

New in version 3.7.


