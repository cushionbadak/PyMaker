link:
library/ctypes.html#utility-functions

docs:

Utility functions¶


(obj)¶
Returns the address of the memory buffer as integer.  obj must be an
instance of a ctypes type.



(obj_or_type)¶
Returns the alignment requirements of a ctypes type. obj_or_type must be a
ctypes type or instance.



(obj[, offset])¶
Returns a light-weight pointer to obj, which must be an instance of a
ctypes type.  offset defaults to zero, and must be an integer that will be
added to the internal pointer value.
 corresponds to this C code:


The returned object can only be used as a foreign function call parameter.
It behaves similar to , but the construction is a lot faster.



(obj, type)¶
This function is similar to the cast operator in C. It returns a new instance
of type which points to the same memory block as obj.  type must be a
pointer type, and obj must be an object that can be interpreted as a
pointer.



(init_or_size, size=None)¶
This function creates a mutable character buffer. The returned object is a
ctypes array of .
init_or_size must be an integer which specifies the size of the array, or a
bytes object which will be used to initialize the array items.
If a bytes object is specified as first argument, the buffer is made one item
larger than its length so that the last element in the array is a NUL
termination character. An integer can be passed as second argument which allows
specifying the size of the array if the length of the bytes should not be used.



(init_or_size, size=None)¶
This function creates a mutable unicode character buffer. The returned object is
a ctypes array of .
init_or_size must be an integer which specifies the size of the array, or a
string which will be used to initialize the array items.
If a string is specified as first argument, the buffer is made one item
larger than the length of the string so that the last element in the array is a
NUL termination character. An integer can be passed as second argument which
allows specifying the size of the array if the length of the string should not
be used.



()¶
Windows only: This function is a hook which allows implementing in-process
COM servers with ctypes.  It is called from the DllCanUnloadNow function that
the _ctypes extension dll exports.



()¶
Windows only: This function is a hook which allows implementing in-process
COM servers with ctypes.  It is called from the DllGetClassObject function
that the  extension dll exports.



(name)¶
Try to find a library and return a pathname.  name is the library name
without any prefix like , suffix like ,  or version
number (this is the form used for the posix linker option ).  If
no library can be found, returns .
The exact functionality is system dependent.



()¶
Windows only: return the filename of the VC runtime library used by Python,
and by the extension modules.  If the name of the library cannot be
determined,  is returned.
If you need to free memory, for example, allocated by an extension module
with a call to the , it is important that you use the
function in the same library that allocated the memory.



([code])¶
Windows only: Returns a textual description of the error code code.  If no
error code is specified, the last error code is used by calling the Windows
api function GetLastError.



()¶
Windows only: Returns the last error code set by Windows in the calling thread.
This function calls the Windows GetLastError() function directly,
it does not return the ctypes-private copy of the error code.



()¶
Returns the current value of the ctypes-private copy of the system
 variable in the calling thread.



()¶
Windows only: returns the current value of the ctypes-private copy of the system
 variable in the calling thread.



(dst, src, count)¶
Same as the standard C memmove library function: copies count bytes from
src to dst. dst and src must be integers or ctypes instances that can
be converted to pointers.



(dst, c, count)¶
Same as the standard C memset library function: fills the memory block at
address dst with count bytes of value c. dst must be an integer
specifying an address, or a ctypes instance.



(type)¶
This factory function creates and returns a new ctypes pointer type. Pointer
types are cached and reused internally, so calling this function repeatedly is
cheap. type must be a ctypes type.



(obj)¶
This function creates a new pointer instance, pointing to obj. The returned
object is of the type .
Note: If you just want to pass a pointer to an object to a foreign function
call, you should use  which is much faster.



(obj, size)¶
This function resizes the internal memory buffer of obj, which must be an
instance of a ctypes type.  It is not possible to make the buffer smaller
than the native size of the objects type, as given by ,
but it is possible to enlarge the buffer.



(value)¶
Set the current value of the ctypes-private copy of the system 
variable in the calling thread to value and return the previous value.



(value)¶
Windows only: set the current value of the ctypes-private copy of the system
 variable in the calling thread to value and return the
previous value.



(obj_or_type)¶
Returns the size in bytes of a ctypes type or instance memory buffer.
Does the same as the C  operator.



(address, size=-1)¶
This function returns the C string starting at memory address address as a bytes
object. If size is specified, it is used as size, otherwise the string is assumed
to be zero-terminated.



(code=None, descr=None)¶
Windows only: this function is probably the worst-named thing in ctypes. It
creates an instance of OSError.  If code is not specified,
 is called to determine the error code. If descr is not
specified,  is called to get a textual description of the
error.

Changed in version 3.3: An instance of  used to be created.




(address, size=-1)¶
This function returns the wide character string starting at memory address
address as a string.  If size is specified, it is used as the number of
characters of the string, otherwise the string is assumed to be
zero-terminated.

