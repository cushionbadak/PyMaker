link:
reference/expressions.html#operator-precedence

docs:

6.16. Operator precedence¶
The following table summarizes the operator precedence in Python, from lowest
precedence (least binding) to highest precedence (most binding).  Operators in
the same box have the same precedence.  Unless the syntax is explicitly given,
operators are binary.  Operators in the same box group left to right (except for
exponentiation, which groups from right to left).
Note that comparisons, membership tests, and identity tests, all have the same
precedence and have a left-to-right chaining feature as described in the
Comparisons section.






Operator
Description




Lambda expression

 – 
Conditional expression


Boolean OR


Boolean AND

 
Boolean NOT

, ,
, , ,
, , , , 
Comparisons, including membership
tests and identity tests


Bitwise OR


Bitwise XOR


Bitwise AND

, 
Shifts

, 
Addition and subtraction

, , , , 
Multiplication, matrix
multiplication, division, floor
division, remainder [5]

, , 
Positive, negative, bitwise NOT


Exponentiation [6]

 
Await expression

, ,
, 
Subscription, slicing,
call, attribute reference

,
,
,

Binding or tuple display,
list display,
dictionary display,
set display



Footnotes



[1]While  is true mathematically, for floats it may not be
true numerically due to roundoff.  For example, and assuming a platform on which
a Python float is an IEEE 754 double-precision number, in order that  have the same sign as , the computed result is , which is numerically exactly equal to .  The function
 returns a result whose sign matches the sign of the
first argument instead, and so returns  in this case. Which approach
is more appropriate depends on the application.





[2]If x is very close to an exact integer multiple of y, it’s possible for
 to be one larger than  due to rounding.  In such
cases, Python returns the latter result, in order to preserve that
 be very close to .





[3]The Unicode standard distinguishes between code points
(e.g. U+0041) and abstract characters (e.g. “LATIN CAPITAL LETTER A”).
While most abstract characters in Unicode are only represented using one
code point, there is a number of abstract characters that can in addition be
represented using a sequence of more than one code point.  For example, the
abstract character “LATIN CAPITAL LETTER C WITH CEDILLA” can be represented
as a single precomposed character at code position U+00C7, or as a
sequence of a base character at code position U+0043 (LATIN CAPITAL
LETTER C), followed by a combining character at code position U+0327
(COMBINING CEDILLA).
The comparison operators on strings compare at the level of Unicode code
points. This may be counter-intuitive to humans.  For example,
 is , even though both strings
represent the same abstract character “LATIN CAPITAL LETTER C WITH CEDILLA”.
To compare strings at the level of abstract characters (that is, in a way
intuitive to humans), use .






[4]Due to automatic garbage-collection, free lists, and the dynamic nature of
descriptors, you may notice seemingly unusual behaviour in certain uses of
the  operator, like those involving comparisons between instance
methods, or constants.  Check their documentation for more info.





[5]The  operator is also used for string formatting; the same
precedence applies.





[6]The power operator  binds less tightly than an arithmetic or
bitwise unary operator on its right, that is,  is .


