link:
library/http.server.html#http.server.BaseHTTPRequestHandler

docs:


class (request, client_address, server)¶
This class is used to handle the HTTP requests that arrive at the server.  By
itself, it cannot respond to any actual HTTP requests; it must be subclassed
to handle each request method (e.g. GET or POST).
 provides a number of class and instance
variables, and methods for use by subclasses.
The handler will parse the request and the headers, then call a method
specific to the request type. The method name is constructed from the
request. For example, for the request method , the 
method will be called with no arguments. All of the relevant information is
stored in instance variables of the handler.  Subclasses should not need to
override or extend the  method.
 has the following instance variables:


¶
Contains a tuple of the form  referring to the client’s
address.



¶
Contains the server instance.



¶
Boolean that should be set before  returns,
indicating if another request may be expected, or if the connection should
be shut down.



¶
Contains the string representation of the HTTP request line. The
terminating CRLF is stripped. This attribute should be set by
. If no valid request line was processed, it
should be set to the empty string.



¶
Contains the command (request type). For example, .



¶
Contains the request path.



¶
Contains the version string from the request. For example, .



¶
Holds an instance of the class specified by the  class
variable. This instance parses and manages the headers in the HTTP
request. The  function from
 is used to parse the headers and it requires that the
HTTP request provide a valid RFC 2822 style header.



¶
An  input stream, ready to read from
the start of the optional input data.



¶
Contains the output stream for writing a response back to the
client. Proper adherence to the HTTP protocol must be used when writing to
this stream in order to achieve successful interoperation with HTTP
clients.

Changed in version 3.6: This is an  stream.


 has the following attributes:


¶
Specifies the server software version.  You may want to override this. The
format is multiple whitespace-separated strings, where each string is of
the form name[/version]. For example, .



¶
Contains the Python system version, in a form usable by the
 method and the  class
variable. For example, .



¶
Specifies a format string that should be used by  method
for building an error response to the client. The string is filled by
default with variables from  based on the status code
that passed to .



¶
Specifies the Content-Type HTTP header of error responses sent to the
client.  The default value is .



¶
This specifies the HTTP protocol version used in responses.  If set to
, the server will permit HTTP persistent connections;
however, your server must then include an accurate 
header (using ) in all of its responses to clients.
For backwards compatibility, the setting defaults to .



¶
Specifies an -like class to parse HTTP
headers.  Typically, this is not overridden, and it defaults to
.



¶
This attribute contains a mapping of error code integers to two-element tuples
containing a short and long message. For example, . The shortmessage is usually used as the message key in an
error response, and longmessage as the explain key.  It is used by
 and  methods.

A  instance has the following methods:


()¶
Calls  once (or, if persistent connections are
enabled, multiple times) to handle incoming HTTP requests. You should
never need to override it; instead, implement appropriate 
methods.



()¶
This method will parse and dispatch the request to the appropriate
 method.  You should never need to override it.



()¶
When a HTTP/1.1 compliant server receives an 
request header it responds back with a  followed by  headers.
This method can be overridden to raise an error if the server does not
want the client to continue.  For e.g. server can chose to send  as a response header and .

New in version 3.2.




(code, message=None, explain=None)¶
Sends and logs a complete error reply to the client. The numeric code
specifies the HTTP error code, with message as an optional, short, human
readable description of the error.  The explain argument can be used to
provide more detailed information about the error; it will be formatted
using the  attribute and emitted, after
a complete set of headers, as the response body.  The 
attribute holds the default values for message and explain that
will be used if no value is provided; for unknown codes the default value
for both is the string . The body will be empty if the method is
HEAD or the response code is one of the following: ,
, , .

Changed in version 3.4: The error response includes a Content-Length header.
Added the explain argument.




(code, message=None)¶
Adds a response header to the headers buffer and logs the accepted
request. The HTTP response line is written to the internal buffer,
followed by Server and Date headers. The values for these two headers
are picked up from the  and
 methods, respectively. If the server does not
intend to send any other headers using the  method,
then  should be followed by an 
call.

Changed in version 3.3: Headers are stored to an internal buffer and 
needs to be called explicitly.




(keyword, value)¶
Adds the HTTP header to an internal buffer which will be written to the
output stream when either  or  is
invoked. keyword should specify the header keyword, with value
specifying its value. Note that, after the send_header calls are done,
 MUST BE called in order to complete the operation.

Changed in version 3.2: Headers are stored in an internal buffer.




(code, message=None)¶
Sends the response header only, used for the purposes when  response is sent by the server to the client. The headers not
buffered and sent directly the output stream.If the message is not
specified, the HTTP message corresponding the response code  is sent.

New in version 3.2.




()¶
Adds a blank line
(indicating the end of the HTTP headers in the response)
to the headers buffer and calls .

Changed in version 3.2: The buffered headers are written to the output stream.




()¶
Finally send the headers to the output stream and flush the internal
headers buffer.

New in version 3.3.




(code='-', size='-')¶
Logs an accepted (successful) request. code should specify the numeric
HTTP code associated with the response. If a size of the response is
available, then it should be passed as the size parameter.



(...)¶
Logs an error when a request cannot be fulfilled. By default, it passes
the message to , so it takes the same arguments
(format and additional values).



(format, ...)¶
Logs an arbitrary message to . This is typically overridden
to create custom error logging mechanisms. The format argument is a
standard printf-style format string, where the additional arguments to
 are applied as inputs to the formatting. The client
ip address and current date and time are prefixed to every message logged.



()¶
Returns the server software’s version string. This is a combination of the
 and  attributes.



(timestamp=None)¶
Returns the date and time given by timestamp (which must be  or in
the format returned by ), formatted for a message
header. If timestamp is omitted, it uses the current date and time.
The result looks like .



()¶
Returns the current date and time, formatted for logging.



()¶
Returns the client address.

Changed in version 3.3: Previously, a name lookup was performed. To avoid name resolution
delays, it now always returns the IP address.


