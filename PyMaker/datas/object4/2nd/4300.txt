link:
library/multiprocessing.html#multiprocessing.connection.Connection

docs:


class ¶


(obj)¶
Send an object to the other end of the connection which should be read
using .
The object must be picklable.  Very large pickles (approximately 32 MiB+,
though it depends on the OS) may raise a  exception.



()¶
Return an object sent from the other end of the connection using
.  Blocks until there is something to receive.  Raises
 if there is nothing left to receive
and the other end was closed.



()¶
Return the file descriptor or handle used by the connection.



()¶
Close the connection.
This is called automatically when the connection is garbage collected.



([timeout])¶
Return whether there is any data available to be read.
If timeout is not specified then it will return immediately.  If
timeout is a number then this specifies the maximum time in seconds to
block.  If timeout is  then an infinite timeout is used.
Note that multiple connection objects may be polled at once by
using .



(buffer[, offset[, size]])¶
Send byte data from a bytes-like object as a complete message.
If offset is given then data is read from that position in buffer.  If
size is given then that many bytes will be read from buffer.  Very large
buffers (approximately 32 MiB+, though it depends on the OS) may raise a
 exception



([maxlength])¶
Return a complete message of byte data sent from the other end of the
connection as a string.  Blocks until there is something to receive.
Raises  if there is nothing left
to receive and the other end has closed.
If maxlength is specified and the message is longer than maxlength
then  is raised and the connection will no longer be
readable.

Changed in version 3.3: This function used to raise , which is now an
alias of .




(buffer[, offset])¶
Read into buffer a complete message of byte data sent from the other end
of the connection and return the number of bytes in the message.  Blocks
until there is something to receive.  Raises
 if there is nothing left to receive and the other end was
closed.
buffer must be a writable bytes-like object.  If
offset is given then the message will be written into the buffer from
that position.  Offset must be a non-negative integer less than the
length of buffer (in bytes).
If the buffer is too short then a  exception is
raised and the complete message is available as  where 
is the exception instance.


Changed in version 3.3: Connection objects themselves can now be transferred between processes
using  and .


New in version 3.3: Connection objects now support the context management protocol – see
Context Manager Types.   returns the
connection object, and  calls .

