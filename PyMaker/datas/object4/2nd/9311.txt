link:
library/dataclasses.html#dataclasses.dataclass

docs:


(*, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)¶
This function is a decorator that is used to add generated
special methods to classes, as described below.
The  decorator examines the class to find
s.  A  is defined as class variable that has a
type annotation.  With two
exceptions described below, nothing in 
examines the type specified in the variable annotation.
The order of the fields in all of the generated methods is the
order in which they appear in the class definition.
The  decorator will add various “dunder” methods to
the class, described below.  If any of the added methods already
exist on the class, the behavior depends on the parameter, as documented
below. The decorator returns the same class that is called on; no new
class is created.
If  is used just as a simple decorator with no parameters,
it acts as if it has the default values documented in this
signature.  That is, these three uses of  are
equivalent:


The parameters to  are:

: If true (the default), a  method will be
generated.
If the class already defines , this parameter is
ignored.

: If true (the default), a  method will be
generated.  The generated repr string will have the class name and
the name and repr of each field, in the order they are defined in
the class.  Fields that are marked as being excluded from the repr
are not included.  For example:
.
If the class already defines , this parameter is
ignored.

: If true (the default), an  method will be
generated.  This method compares the class as if it were a tuple
of its fields, in order.  Both instances in the comparison must
be of the identical type.
If the class already defines , this parameter is
ignored.

: If true (the default is ), ,
, , and  methods will be
generated.  These compare the class as if it were a tuple of its
fields, in order.  Both instances in the comparison must be of the
identical type.  If  is true and  is false, a
 is raised.
If the class already defines any of ,
, , or , then
 is raised.

: If  (the default), a  method
is generated according to how  and  are set.
 is used by built-in , and when objects are
added to hashed collections such as dictionaries and sets.  Having a
 implies that instances of the class are immutable.
Mutability is a complicated property that depends on the programmer’s
intent, the existence and behavior of , and the values of
the  and  flags in the  decorator.
By default,  will not implicitly add a 
method unless it is safe to do so.  Neither will it add or change an
existing explicitly defined  method.  Setting the class
attribute  has a specific meaning to Python, as
described in the  documentation.
If  is not explicit defined, or if it is set to ,
then  may add an implicit  method.
Although not recommended, you can force  to create a
 method with . This might be the case
if your class is logically immutable but can nonetheless be mutated.
This is a specialized use case and should be considered carefully.
Here are the rules governing implicit creation of a 
method.  Note that you cannot both have an explicit 
method in your dataclass and set ; this will result
in a .
If  and  are both true, by default  will
generate a  method for you.  If  is true and
 is false,  will be set to , marking it
unhashable (which it is, since it is mutable).  If  is false,
 will be left untouched meaning the 
method of the superclass will be used (if the superclass is
, this means it will fall back to id-based hashing).

: If true (the default is False), assigning to fields will
generate an exception.  This emulates read-only frozen instances.  If
 or  is defined in the class, then
 is raised.  See the discussion below.


s may optionally specify a default value, using normal
Python syntax:


In this example, both  and  will be included in the added
 method, which will be defined as:


 will be raised if a field without a default value
follows a field with a default value.  This is true either when this
occurs in a single class, or as a result of class inheritance.
