link:
library/importlib.html#module-importlib.resources

docs:

 – Resources¶
Source code: Lib/importlib/resources.py


New in version 3.7.

This module leverages Python’s import system to provide access to resources
within packages.  If you can import a package, you can access resources
within that package.  Resources can be opened or read, in either binary or
text mode.
Resources are roughly akin to files inside directories, though it’s important
to keep in mind that this is just a metaphor.  Resources and packages do
not have to exist as physical files and directories on the file system.

Note
This module provides functionality similar to pkg_resources Basic
Resource Access
without the performance overhead of that package.  This makes reading
resources included in packages easier, with more stable and consistent
semantics.
The standalone backport of this module provides more information
on using importlib.resources and
migrating from pkg_resources to importlib.resources.

Loaders that wish to support resource reading should implement a
 method as specified by
.
The following types are defined.


¶
The  type is defined as .  This means
that where the function describes accepting a , you can pass in
either a string or a module.  Module objects must have a resolvable
 that is not .



¶
This type describes the resource names passed into the various functions
in this package.  This is defined as .

The following functions are available.


(package, resource)¶
Open for binary reading the resource within package.
package is either a name or a module object which conforms to the
 requirements.  resource is the name of the resource to open
within package; it may not contain path separators and it may not have
sub-resources (i.e. it cannot be a directory).  This function returns a
 instance, a binary I/O stream open for reading.



(package, resource, encoding='utf-8', errors='strict')¶
Open for text reading the resource within package.  By default, the
resource is opened for reading as UTF-8.
package is either a name or a module object which conforms to the
 requirements.  resource is the name of the resource to open
within package; it may not contain path separators and it may not have
sub-resources (i.e. it cannot be a directory).  encoding and errors
have the same meaning as with built-in .
This function returns a  instance, a text I/O stream open
for reading.



(package, resource)¶
Read and return the contents of the resource within package as
.
package is either a name or a module object which conforms to the
 requirements.  resource is the name of the resource to open
within package; it may not contain path separators and it may not have
sub-resources (i.e. it cannot be a directory).  This function returns the
contents of the resource as .



(package, resource, encoding='utf-8', errors='strict')¶
Read and return the contents of resource within package as a .
By default, the contents are read as strict UTF-8.
package is either a name or a module object which conforms to the
 requirements.  resource is the name of the resource to open
within package; it may not contain path separators and it may not have
sub-resources (i.e. it cannot be a directory).  encoding and errors
have the same meaning as with built-in .  This function
returns the contents of the resource as .



(package, resource)¶
Return the path to the resource as an actual file system path.  This
function returns a context manager for use in a  statement.
The context manager provides a  object.
Exiting the context manager cleans up any temporary file created when the
resource needs to be extracted from e.g. a zip file.
package is either a name or a module object which conforms to the
 requirements.  resource is the name of the resource to open
within package; it may not contain path separators and it may not have
sub-resources (i.e. it cannot be a directory).



(package, name)¶
Return  if there is a resource named name in the package,
otherwise .  Remember that directories are not resources!
package is either a name or a module object which conforms to the
 requirements.



(package)¶
Return an iterable over the named items within the package.  The iterable
returns  resources (e.g. files) and non-resources
(e.g. directories).  The iterable does not recurse into subdirectories.
package is either a name or a module object which conforms to the
 requirements.

