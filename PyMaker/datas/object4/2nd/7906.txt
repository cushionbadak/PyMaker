link:
library/turtle.html#methods-of-turtlescreen-screen-and-corresponding-functions

docs:

Methods of TurtleScreen/Screen and corresponding functions¶
Most of the examples in this section refer to a TurtleScreen instance called
.

Window control¶


(*args)¶




Parameters:args – a color string or three numbers in the range 0..colormode or a
3-tuple of such numbers



Set or return background color of the TurtleScreen.





(picname=None)¶




Parameters:picname – a string, name of a gif-file or , or 



Set background image or return name of current backgroundimage.  If picname
is a filename, set the corresponding image as background.  If picname is
, delete background image, if present.  If picname is ,
return the filename of the current backgroundimage.





()

()¶
Delete all drawings and all turtles from the TurtleScreen.  Reset the now
empty TurtleScreen to its initial state: white background, no background
image, no event bindings and tracing on.

Note
This TurtleScreen method is available as a global function only under the
name .  The global function  is a different one
derived from the Turtle method .




()

()¶
Reset all Turtles on the Screen to their initial state.

Note
This TurtleScreen method is available as a global function only under the
name .  The global function  is another one
derived from the Turtle method .




(canvwidth=None, canvheight=None, bg=None)¶




Parameters:
canvwidth – positive integer, new width of canvas in pixels
canvheight – positive integer, new height of canvas in pixels
bg – colorstring or color-tuple, new background color





If no arguments are given, return current (canvaswidth, canvasheight).  Else
resize the canvas the turtles are drawing on.  Do not alter the drawing
window.  To observe hidden parts of the canvas, use the scrollbars. With this
method, one can make visible those parts of a drawing which were outside the
canvas before.


e.g. to search for an erroneously escaped turtle ;-)



(llx, lly, urx, ury)¶




Parameters:
llx – a number, x-coordinate of lower left corner of canvas
lly – a number, y-coordinate of lower left corner of canvas
urx – a number, x-coordinate of upper right corner of canvas
ury – a number, y-coordinate of upper right corner of canvas





Set up user-defined coordinate system and switch to mode “world” if
necessary.  This performs a .  If mode “world” is already
active, all drawings are redrawn according to the new coordinates.
ATTENTION: in user-defined coordinate systems angles may appear
distorted.





Animation control¶


(delay=None)¶




Parameters:delay – positive integer



Set or return the drawing delay in milliseconds.  (This is approximately
the time interval between two consecutive canvas updates.)  The longer the
drawing delay, the slower the animation.
Optional argument:





(n=None, delay=None)¶




Parameters:
n – nonnegative integer
delay – nonnegative integer





Turn turtle animation on/off and set delay for update drawings.  If
n is given, only each n-th regular screen update is really
performed.  (Can be used to accelerate the drawing of complex
graphics.)  When called without arguments, returns the currently
stored value of n. Second argument sets delay value (see
).





()¶
Perform a TurtleScreen update. To be used when tracer is turned off.

See also the RawTurtle/Turtle method .


Using screen events¶


(xdummy=None, ydummy=None)¶
Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments
are provided in order to be able to pass  to the onclick method.



(fun, key)¶

(fun, key)¶




Parameters:
fun – a function with no arguments or 
key – a string: key (e.g. “a”) or key-symbol (e.g. “space”)





Bind fun to key-release event of key.  If fun is , event bindings
are removed. Remark: in order to be able to register key-events, TurtleScreen
must have the focus. (See method .)





(fun, key=None)¶




Parameters:
fun – a function with no arguments or 
key – a string: key (e.g. “a”) or key-symbol (e.g. “space”)





Bind fun to key-press event of key if key is given,
or to any key-press-event if no key is given.
Remark: in order to be able to register key-events, TurtleScreen
must have focus. (See method .)





(fun, btn=1, add=None)

(fun, btn=1, add=None)¶




Parameters:
fun – a function with two arguments which will be called with the
coordinates of the clicked point on the canvas
btn – number of the mouse-button, defaults to 1 (left mouse button)
add –  or  – if , a new binding will be
added, otherwise it will replace a former binding





Bind fun to mouse-click events on this screen.  If fun is ,
existing bindings are removed.
Example for a TurtleScreen instance named  and a Turtle instance
named turtle:



Note
This TurtleScreen method is available as a global function only under the
name .  The global function  is another one
derived from the Turtle method .




(fun, t=0)¶




Parameters:
fun – a function with no arguments
t – a number >= 0





Install a timer that calls fun after t milliseconds.





()¶

()¶
Starts event loop - calling Tkinter’s mainloop function.
Must be the last statement in a turtle graphics program.
Must not be used if a script is run from within IDLE in -n mode
(No subprocess) - for interactive use of turtle graphics.





Input methods¶


(title, prompt)¶




Parameters:
title – string
prompt – string





Pop up a dialog window for input of a string. Parameter title is
the title of the dialog window, prompt is a text mostly describing
what information to input.
Return the string input. If the dialog is canceled, return .





(title, prompt, default=None, minval=None, maxval=None)¶




Parameters:
title – string
prompt – string
default – number (optional)
minval – number (optional)
maxval – number (optional)





Pop up a dialog window for input of a number. title is the title of the
dialog window, prompt is a text mostly describing what numerical information
to input. default: default value, minval: minimum value for input,
maxval: maximum value for input
The number input must be in the range minval .. maxval if these are
given. If not, a hint is issued and the dialog remains open for
correction.
Return the number input. If the dialog is canceled,  return .





Settings and special methods¶


(mode=None)¶




Parameters:mode – one of the strings “standard”, “logo” or “world”



Set turtle mode (“standard”, “logo” or “world”) and perform reset.  If mode
is not given, current mode is returned.
Mode “standard” is compatible with old .  Mode “logo” is
compatible with most Logo turtle graphics.  Mode “world” uses user-defined
“world coordinates”. Attention: in this mode angles appear distorted if
 unit-ratio doesn’t equal 1.







Mode
Initial turtle heading
positive angles



“standard”
to the right (east)
counterclockwise

“logo”
upward    (north)
clockwise








(cmode=None)¶




Parameters:cmode – one of the values 1.0 or 255



Return the colormode or set it to 1.0 or 255.  Subsequently r, g, b
values of color triples have to be in the range 0..cmode.





()¶
Return the Canvas of this TurtleScreen.  Useful for insiders who know what to
do with a Tkinter Canvas.





()¶
Return a list of names of all currently available turtle shapes.





(name, shape=None)¶

(name, shape=None)¶
There are three different ways to call this function:

name is the name of a gif-file and shape is : Install the
corresponding image shape.



Note
Image shapes do not rotate when turning the turtle, so they do not
display the heading of the turtle!


name is an arbitrary string and shape is a tuple of pairs of
coordinates: Install the corresponding polygon shape.



name is an arbitrary string and shape is a (compound) 
object: Install the corresponding compound shape.


Add a turtle shape to TurtleScreen’s shapelist.  Only thusly registered
shapes can be used by issuing the command .



()¶
Return the list of turtles on the screen.





()¶
Return the height of the turtle window.





()¶
Return the width of the turtle window.





Methods specific to Screen, not inherited from TurtleScreen¶


()¶
Shut the turtlegraphics window.



()¶
Bind bye() method to mouse clicks on the Screen.
If the value “using_IDLE” in the configuration dictionary is 
(default value), also enter mainloop.  Remark: If IDLE with the  switch
(no subprocess) is used, this value should be set to  in
.  In this case IDLE’s own mainloop is active also for the
client script.



(width=_CFG["width"], height=_CFG["height"], startx=_CFG["leftright"], starty=_CFG["topbottom"])¶
Set the size and position of the main window.  Default values of arguments
are stored in the configuration dictionary and can be changed via a
 file.




Parameters:
width – if an integer, a size in pixels, if a float, a fraction of the
screen; default is 50% of screen
height – if an integer, the height in pixels, if a float, a fraction of
the screen; default is 75% of screen
startx – if positive, starting position in pixels from the left
edge of the screen, if negative from the right edge, if ,
center window horizontally
starty – if positive, starting position in pixels from the top
edge of the screen, if negative from the bottom edge, if ,
center window vertically










(titlestring)¶




Parameters:titlestring – a string that is shown in the titlebar of the turtle
graphics window



Set title of turtle window to titlestring.




