link:
library/optparse.html#creating-the-parser

docs:

Creating the parser¶
The first step in using  is to create an OptionParser instance.


class (...)¶
The OptionParser constructor has no required arguments, but a number of
optional keyword arguments.  You should always pass them as keyword
arguments, i.e. do not rely on the order in which the arguments are declared.

 (default: )
The usage summary to print when your program is run incorrectly or with a
help option.  When  prints the usage string, it expands
 to  (or to  if you
passed that keyword argument).  To suppress a usage message, pass the
special value .
 (default: )
A list of Option objects to populate the parser with.  The options in
 are added after any options in  (a
class attribute that may be set by OptionParser subclasses), but before
any version or help options. Deprecated; use  after
creating the parser instead.
 (default: optparse.Option)
Class to use when adding options to the parser in .
 (default: )
A version string to print when the user supplies a version option. If you
supply a true value for ,  automatically adds a
version option with the single option string .  The
substring  is expanded the same as for .
 (default: )
Specifies what to do when options with conflicting option strings are
added to the parser; see section
Conflicts between options.
 (default: )
A paragraph of text giving a brief overview of your program.
 reformats this paragraph to fit the current terminal width
and prints it when the user requests help (after , but before the
list of options).
 (default: a new )
An instance of optparse.HelpFormatter that will be used for printing help
text.   provides two concrete classes for this purpose:
IndentedHelpFormatter and TitledHelpFormatter.
 (default: )
If true,  will add a help option (with option strings 
and ) to the parser.

The string to use when expanding  in  and 
instead of .
 (default: )
A paragraph of help text to print after the option help.


