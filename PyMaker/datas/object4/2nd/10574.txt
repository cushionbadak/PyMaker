link:
library/optparse.html#defining-a-callback-option

docs:

Defining a callback option¶
As always, the easiest way to define a callback option is by using the
 method.  Apart from , the
only option attribute you must specify is , the function to call:


 is a function (or other callable object), so you must have already
defined  when you create this callback option. In this simple
case,  doesn’t even know if  takes any arguments,
which usually means that the option takes no arguments—the mere presence of
 on the command-line is all it needs to know.  In some
circumstances, though, you might want your callback to consume an arbitrary
number of command-line arguments.  This is where writing callbacks gets tricky;
it’s covered later in this section.
 always passes four particular arguments to your callback, and it
will only pass additional arguments if you specify them via
 and .  Thus, the
minimal callback function signature is:


The four arguments to a callback are described below.
There are several other option attributes that you can supply when you define a
callback option:


has its usual meaning: as with the  or  actions, it
instructs  to consume one argument and convert it to
.  Rather than storing the converted value(s) anywhere,
though,  passes it to your callback function.

also has its usual meaning: if it is supplied and > 1,  will
consume  arguments, each of which must be convertible to
.  It then passes a tuple of converted values to your
callback.

a tuple of extra positional arguments to pass to the callback

a dictionary of extra keyword arguments to pass to the callback

