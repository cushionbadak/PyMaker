link:
library/optparse.html#generating-help

docs:

Generating help¶
’s ability to generate help and usage text automatically is
useful for creating user-friendly command-line interfaces.  All you have to do
is supply a  value for each option, and optionally a short
usage message for your whole program.  Here’s an OptionParser populated with
user-friendly (documented) options:


If  encounters either  or  on the
command-line, or if you just call , it prints the
following to standard output:


(If the help output is triggered by a help option,  exits after
printing the help text.)
There’s a lot going on here to help  generate the best possible
help message:

the script defines its own usage message:


 expands  in the usage string to the name of the
current program, i.e. .  The expanded string
is then printed before the detailed option help.
If you don’t supply a usage string,  uses a bland but sensible
default: , which is fine if your script doesn’t
take any positional arguments.

every option defines a help string, and doesn’t worry about
line-wrapping— takes care of wrapping lines and making
the help output look good.

options that take a value indicate this fact in their automatically-generated
help message, e.g. for the “mode” option:


Here, “MODE” is called the meta-variable: it stands for the argument that the
user is expected to supply to /.  By default,
 converts the destination variable name to uppercase and uses
that for the meta-variable.  Sometimes, that’s not what you want—for
example, the  option explicitly sets ,
resulting in this automatically-generated option description:


This is important for more than just saving space, though: the manually
written help text uses the meta-variable  to clue the user in that
there’s a connection between the semi-formal syntax  and the informal
semantic description “write output to FILE”. This is a simple but effective
way to make your help text a lot clearer and more useful for end users.

options that have a default value can include  in the help
string— will replace it with  of the option’s
default value.  If an option has no default value (or the default value is
),  expands to .



Grouping Options¶
When dealing with many options, it is convenient to group these options for
better help output.  An  can contain several option groups,
each of which can contain several options.
An option group is obtained using the class :


class (parser, title, description=None)¶
where

parser is the  instance the group will be inserted in
to
title is the group title
description, optional, is a long description of the group


 inherits from  (like
) and so the  method can be used to add
an option to the group.
Once all the options are declared, using the  method
 the group is added to the previously defined parser.
Continuing with the parser defined in the previous section, adding an
 to a parser is easy:


This would result in the following help output:


A bit more complete example might involve using more than one group: still
extending the previous example:


that results in the following output:


Another interesting method, in particular when working programmatically with
option groups is:


(opt_str)¶
Return the  to which the short or long option
string opt_str (e.g.  or ) belongs. If
there’s no such , return .


