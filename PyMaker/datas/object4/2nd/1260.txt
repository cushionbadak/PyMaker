link:
library/collections.html#defaultdict-objects

docs:

 objects¶


class ([default_factory[, ...]])¶
Returns a new dictionary-like object.   is a subclass of the
built-in  class.  It overrides one method and adds one writable
instance variable.  The remaining functionality is the same as for the
 class and is not documented here.
The first argument provides the initial value for the 
attribute; it defaults to . All remaining arguments are treated the same
as if they were passed to the  constructor, including keyword
arguments.
 objects support the following method in addition to the
standard  operations:


(key)¶
If the  attribute is , this raises a
 exception with the key as argument.
If  is not , it is called without arguments
to provide a default value for the given key, this value is inserted in
the dictionary for the key, and returned.
If calling  raises an exception this exception is
propagated unchanged.
This method is called by the  method of the
 class when the requested key is not found; whatever it
returns or raises is then returned or raised by .
Note that  is not called for any operations besides
. This means that  will, like normal
dictionaries, return  as a default rather than using
.

 objects support the following instance variable:


¶
This attribute is used by the  method; it is
initialized from the first argument to the constructor, if present, or to
, if absent.



 Examples¶
Using  as the , it is easy to group a
sequence of key-value pairs into a dictionary of lists:


When each key is encountered for the first time, it is not already in the
mapping; so an entry is automatically created using the 
function which returns an empty .  The 
operation then attaches the value to the new list.  When keys are encountered
again, the look-up proceeds normally (returning the list for that key) and the
 operation adds another value to the list. This technique is
simpler and faster than an equivalent technique using :


Setting the  to  makes the
 useful for counting (like a bag or multiset in other
languages):


When a letter is first encountered, it is missing from the mapping, so the
 function calls  to supply a default count of
zero.  The increment operation then builds up the count for each letter.
The function  which always returns zero is just a special case of
constant functions.  A faster and more flexible way to create constant functions
is to use a lambda function which can supply any constant value (not just
zero):


Setting the  to  makes the
 useful for building a dictionary of sets:



