link:
library/os.path.html

docs:


 — Common pathname manipulations¶
Source code: Lib/posixpath.py (for POSIX),
Lib/ntpath.py (for Windows NT),
and Lib/macpath.py (for Macintosh)

This module implements some useful functions on pathnames. To read or
write files see , and for accessing the filesystem see the
 module. The path parameters can be passed as either strings,
or bytes. Applications are encouraged to represent file names as
(Unicode) character strings. Unfortunately, some file names may not be
representable as strings on Unix, so applications that need to support
arbitrary file names on Unix should use bytes objects to represent
path names. Vice versa, using bytes objects cannot represent all file
names on Windows (in the standard  encoding), hence Windows
applications should use string objects to access all files.
Unlike a unix shell, Python does not do any automatic path expansions.
Functions such as  and  can be invoked
explicitly when an application desires shell-like path expansion.  (See also
the  module.)

See also
The  module offers high-level path objects.


Note
All of these functions accept either only bytes or only string objects as
their parameters.  The result is an object of the same type, if a path or
file name is returned.


Note
Since different operating systems have different path name conventions, there
are several versions of this module in the standard library.  The
 module is always the path module suitable for the operating
system Python is running on, and therefore usable for local paths.  However,
you can also import and use the individual modules if you want to manipulate
a path that is always in one of the different formats.  They all have the
same interface:

 for UNIX-style paths
 for Windows paths
 for old-style MacOS paths




(path)¶
Return a normalized absolutized version of the pathname path. On most
platforms, this is equivalent to calling the function  as
follows: .

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return the base name of pathname path.  This is the second element of the
pair returned by passing path to the function .  Note that
the result of this function is different
from the Unix basename program; where basename for
 returns , the  function returns an
empty string ().

Changed in version 3.6: Accepts a path-like object.




(paths)¶
Return the longest common sub-path of each pathname in the sequence
paths.  Raise  if paths contains both absolute and relative
pathnames, or if paths is empty.  Unlike , this
returns a valid path.
Availability: Unix, Windows.

New in version 3.5.


Changed in version 3.6: Accepts a sequence of path-like objects.




(list)¶
Return the longest path prefix (taken character-by-character) that is a
prefix of all paths in  list.  If list is empty, return the empty string
().

Note
This function may return invalid paths because it works a
character at a time.  To obtain a valid path, see
.




Changed in version 3.6: Accepts a path-like object.




(path)¶
Return the directory name of pathname path.  This is the first element of
the pair returned by passing path to the function .

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return  if path refers to an existing path or an open
file descriptor.  Returns  for broken symbolic links.  On
some platforms, this function may return  if permission is
not granted to execute  on the requested file, even
if the path physically exists.

Changed in version 3.3: path can now be an integer:  is returned if it is an
 open file descriptor,  otherwise.


Changed in version 3.6: Accepts a path-like object.




(path)¶
Return  if path refers to an existing path. Returns  for
broken symbolic links.   Equivalent to  on platforms lacking
.

Changed in version 3.6: Accepts a path-like object.




(path)¶
On Unix and Windows, return the argument with an initial component of  or
 replaced by that user’s home directory.
On Unix, an initial  is replaced by the environment variable 
if it is set; otherwise the current user’s home directory is looked up in the
password directory through the built-in module . An initial 
is looked up directly in the password directory.
On Windows,  and  will be used if set,
otherwise a combination of  and  will be
used.  An initial  is handled by stripping the last directory component
from the created user path derived above.
If the expansion fails or if the path does not begin with a tilde, the path is
returned unchanged.

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return the argument with environment variables expanded.  Substrings of the form
 or  are replaced by the value of environment variable
name.  Malformed variable names and references to non-existing variables are
left unchanged.
On Windows,  expansions are supported in addition to  and
.

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return the time of last access of path.  The return value is a floating point number giving
the number of seconds since the epoch (see the   module).  Raise
 if the file does not exist or is inaccessible.



(path)¶
Return the time of last modification of path.  The return value is a floating point number
giving the number of seconds since the epoch (see the   module).
Raise  if the file does not exist or is inaccessible.

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return the system’s ctime which, on some systems (like Unix) is the time of the
last metadata change, and, on others (like Windows), is the creation time for path.
The return value is a number giving the number of seconds since the epoch (see
the   module).  Raise  if the file does not exist or
is inaccessible.

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return the size, in bytes, of path.  Raise  if the file does
not exist or is inaccessible.

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return  if path is an absolute pathname.  On Unix, that means it
begins with a slash, on Windows that it begins with a (back)slash after chopping
off a potential drive letter.

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return  if path is an  regular file.
This follows symbolic links, so both  and  can
be true for the same path.

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return  if path is an  directory.  This
follows symbolic links, so both  and  can be true
for the same path.

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return  if path refers to an  directory
entry that is a symbolic link.  Always  if symbolic links are not
supported by the Python runtime.

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return  if pathname path is a mount point: a point in a
file system where a different file system has been mounted.  On POSIX, the
function checks whether path’s parent, , is on a different
device than path, or whether  and path point to the same
i-node on the same device — this should detect mount points for all Unix
and POSIX variants.  It is not able to reliably detect bind mounts on the
same filesystem.  On Windows, a drive letter root and a share UNC are
always mount points, and for any other path  is called
to see if it is different from the input path.

New in version 3.4: Support for detecting non-root mount points on Windows.


Changed in version 3.6: Accepts a path-like object.




(path, *paths)¶
Join one or more path components intelligently.  The return value is the
concatenation of path and any members of *paths with exactly one
directory separator () following each non-empty part except the
last, meaning that the result will only end in a separator if the last
part is empty.  If a component is an absolute path, all previous
components are thrown away and joining continues from the absolute path
component.
On Windows, the drive letter is not reset when an absolute path component
(e.g., ) is encountered.  If a component contains a drive
letter, all previous components are thrown away and the drive letter is
reset.  Note that since there is a current directory for each drive,
 represents a path relative to the current
directory on drive  (), not .

Changed in version 3.6: Accepts a path-like object for path and paths.




(path)¶
Normalize the case of a pathname.  On Windows, convert all characters in the
pathname to lowercase, and also convert forward slashes to backward slashes.
On other operating systems, return the path unchanged.
Raise a  if the type of path is not  or  (directly
or indirectly through the  interface).

Changed in version 3.6: Accepts a path-like object.




(path)¶
Normalize a pathname by collapsing redundant separators and up-level
references so that , ,  and  all
become .  This string manipulation may change the meaning of a path
that contains symbolic links.  On Windows, it converts forward slashes to
backward slashes. To normalize case, use .

Changed in version 3.6: Accepts a path-like object.




(path)¶
Return the canonical path of the specified filename, eliminating any symbolic
links encountered in the path (if they are supported by the operating system).

Changed in version 3.6: Accepts a path-like object.




(path, start=os.curdir)¶
Return a relative filepath to path either from the current directory or
from an optional start directory.  This is a path computation:  the
filesystem is not accessed to confirm the existence or nature of path or
start.
start defaults to .
Availability: Unix, Windows.

Changed in version 3.6: Accepts a path-like object.




(path1, path2)¶
Return  if both pathname arguments refer to the same file or directory.
This is determined by the device number and i-node number and raises an
exception if an  call on either pathname fails.
Availability: Unix, Windows.

Changed in version 3.2: Added Windows support.


Changed in version 3.4: Windows now uses the same implementation as all other platforms.


Changed in version 3.6: Accepts a path-like object.




(fp1, fp2)¶
Return  if the file descriptors fp1 and fp2 refer to the same file.
Availability: Unix, Windows.

Changed in version 3.2: Added Windows support.


Changed in version 3.6: Accepts a path-like object.




(stat1, stat2)¶
Return  if the stat tuples stat1 and stat2 refer to the same file.
These structures may have been returned by ,
, or .  This function implements the
underlying comparison used by  and .
Availability: Unix, Windows.

Changed in version 3.4: Added Windows support.


Changed in version 3.6: Accepts a path-like object.




(path)¶
Split the pathname path into a pair,  where tail is the
last pathname component and head is everything leading up to that.  The
tail part will never contain a slash; if path ends in a slash, tail
will be empty.  If there is no slash in path, head will be empty.  If
path is empty, both head and tail are empty.  Trailing slashes are
stripped from head unless it is the root (one or more slashes only).  In
all cases,  returns a path to the same location as path
(but the strings may differ).  Also see the functions  and
.

Changed in version 3.6: Accepts a path-like object.




(path)¶
Split the pathname path into a pair  where drive is either
a mount point or the empty string.  On systems which do not use drive
specifications, drive will always be the empty string.  In all cases,  will be the same as path.
On Windows, splits a pathname into drive/UNC sharepoint and relative path.
If the path contains a drive letter, drive will contain everything
up to and including the colon.
e.g.  returns 
If the path contains a UNC path, drive will contain the host name
and share, up to but not including the fourth separator.
e.g.  returns 

Changed in version 3.6: Accepts a path-like object.




(path)¶
Split the pathname path into a pair   such that , and ext is empty or begins with a period and contains at most one
period. Leading periods on the basename are  ignored; 
returns  .

Changed in version 3.6: Accepts a path-like object.




¶
 if arbitrary Unicode strings can be used as file names (within limitations
imposed by the file system).


