link:
library/concurrent.futures.html#concurrent.futures.Future

docs:


class ¶
Encapsulates the asynchronous execution of a callable.  
instances are created by  and should not be created
directly except for testing.



()¶
Attempt to cancel the call.  If the call is currently being executed and
cannot be cancelled then the method will return , otherwise the
call will be cancelled and the method will return .



()¶
Return  if the call was successfully cancelled.



()¶
Return  if the call is currently being executed and cannot be
cancelled.



()¶
Return  if the call was successfully cancelled or finished
running.



(timeout=None)¶
Return the value returned by the call. If the call hasn’t yet completed
then this method will wait up to timeout seconds.  If the call hasn’t
completed in timeout seconds, then a
 will be raised. timeout can be
an int or float.  If timeout is not specified or , there is no
limit to the wait time.
If the future is cancelled before completing then 
will be raised.
If the call raised, this method will raise the same exception.



(timeout=None)¶
Return the exception raised by the call.  If the call hasn’t yet
completed then this method will wait up to timeout seconds.  If the
call hasn’t completed in timeout seconds, then a
 will be raised.  timeout can be
an int or float.  If timeout is not specified or , there is no
limit to the wait time.
If the future is cancelled before completing then 
will be raised.
If the call completed without raising,  is returned.



(fn)¶
Attaches the callable fn to the future.  fn will be called, with the
future as its only argument, when the future is cancelled or finishes
running.
Added callables are called in the order that they were added and are
always called in a thread belonging to the process that added them.  If
the callable raises an  subclass, it will be logged and
ignored.  If the callable raises a  subclass, the
behavior is undefined.
If the future has already completed or been cancelled, fn will be
called immediately.


The following  methods are meant for use in unit tests and
 implementations.



()¶
This method should only be called by  implementations
before executing the work associated with the  and by unit
tests.
If the method returns  then the  was cancelled,
i.e.  was called and returned True.  Any threads
waiting on the  completing (i.e. through
 or ) will be woken up.
If the method returns  then the  was not cancelled
and has been put in the running state, i.e. calls to
 will return True.
This method can only be called once and cannot be called after
 or  have been
called.



(result)¶
Sets the result of the work associated with the  to
result.
This method should only be used by  implementations and
unit tests.



(exception)¶
Sets the result of the work associated with the  to the
 exception.
This method should only be used by  implementations and
unit tests.


