link:
library/ctypes.html#surprises

docs:

Surprises¶
There are some edges in  where you might expect something other
than what actually happens.
Consider the following example:


Hm. We certainly expected the last statement to print . What
happened? Here are the steps of the  line above:


Note that  and  are objects still using the internal buffer of
the  object above. So executing  copies the buffer
contents of  into  ‘s buffer.  This, in turn, changes the
contents of . So, the last assignment , doesn’t have
the expected effect.
Keep in mind that retrieving sub-objects from Structure, Unions, and Arrays
doesn’t copy the sub-object, instead it retrieves a wrapper object accessing
the root-object’s underlying buffer.
Another example that may behave different from what one would expect is this:


Why is it printing ?  ctypes instances are objects containing a memory
block plus some descriptors accessing the contents of the memory.
Storing a Python object in the memory block does not store the object itself,
instead the  of the object is stored.  Accessing the contents again
constructs a new Python object each time!
