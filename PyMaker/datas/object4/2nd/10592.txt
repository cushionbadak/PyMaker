link:
library/imp.html

docs:


 — Access the import internals¶
Source code: Lib/imp.py

Deprecated since version 3.4: The  package is pending deprecation in favor of .


This module provides an interface to the mechanisms used to implement the
 statement.  It defines the following constants and functions:


()¶
Return the magic string value used to recognize byte-compiled code files
( files).  (This value may be different for each Python version.)

Deprecated since version 3.4: Use  instead.




()¶
Return a list of 3-element tuples, each describing a particular type of
module. Each triple has the form , where suffix is
a string to be appended to the module name to form the filename to search
for, mode is the mode string to pass to the built-in  function
to open the file (this can be  for text files or  for binary
files), and type is the file type, which has one of the values
, , or , described
below.

Deprecated since version 3.3: Use the constants defined on  instead.




(name[, path])¶
Try to find the module name.  If path is omitted or , the list of
directory names given by  is searched, but first a few special
places are searched: the function tries to find a built-in module with the
given name (), then a frozen module (),
and on some systems some other places are looked in as well (on Windows, it
looks in the registry which may point to a specific file).
Otherwise, path must be a list of directory names; each directory is
searched for files with any of the suffixes returned by 
above.  Invalid names in the list are silently ignored (but all list items
must be strings).
If search is successful, the return value is a 3-element tuple :
file is an open file object positioned at the beginning, pathname
is the pathname of the file found, and description is a 3-element tuple as
contained in the list returned by  describing the kind of
module found.
If the module does not live in a file, the returned file is ,
pathname is the empty string, and the description tuple contains empty
strings for its suffix and mode; the module type is indicated as given in
parentheses above.  If the search is unsuccessful,  is
raised.  Other exceptions indicate problems with the arguments or
environment.
If the module is a package, file is , pathname is the package
path and the last item in the description tuple is .
This function does not handle hierarchical module names (names containing
dots).  In order to find P.M, that is, submodule M of package P, use
 and  to find and load package P, and
then use  with the path argument set to .
When P itself has a dotted name, apply this recipe recursively.

Deprecated since version 3.3: Use  instead unless Python 3.3
compatibility is required, in which case use
. For example usage of the former case,
see the Examples section of the 
documentation.




(name, file, pathname, description)¶
Load a module that was previously found by  (or by an
otherwise conducted search yielding compatible results).  This function does
more than importing the module: if the module was already imported, it will
reload the module!  The name argument indicates the full
module name (including the package name, if this is a submodule of a
package).  The file argument is an open file, and pathname is the
corresponding file name; these can be  and , respectively, when
the module is a package or not being loaded from a file.  The description
argument is a tuple, as would be returned by , describing
what kind of module must be loaded.
If the load is successful, the return value is the module object; otherwise,
an exception (usually ) is raised.
Important: the caller is responsible for closing the file argument, if
it was not , even when an exception is raised.  This is best done
using a  …  statement.

Deprecated since version 3.3: If previously used in conjunction with  then
consider using , otherwise use the loader
returned by the replacement you chose for . If you
called  and related functions directly with file
path arguments then use a combination of
 and
. See the Examples
section of the  documentation for details of the various
approaches.




(name)¶
Return a new empty module object called name.  This object is not inserted
in .

Deprecated since version 3.4: Use  instead.




(module)¶
Reload a previously imported module.  The argument must be a module object, so
it must have been successfully imported before.  This is useful if you have
edited the module source file using an external editor and want to try out the
new version without leaving the Python interpreter.  The return value is the
module object (the same as the module argument).
When  is executed:

Python modules’ code is recompiled and the module-level code reexecuted,
defining a new set of objects which are bound to names in the module’s
dictionary.  The  function of extension modules is not called a second
time.
As with all other objects in Python the old objects are only reclaimed after
their reference counts drop to zero.
The names in the module namespace are updated to point to any new or changed
objects.
Other references to the old objects (such as names external to the module) are
not rebound to refer to the new objects and must be updated in each namespace
where they occur if that is desired.

There are a number of other caveats:
When a module is reloaded, its dictionary (containing the module’s global
variables) is retained.  Redefinitions of names will override the old
definitions, so this is generally not a problem.  If the new version of a module
does not define a name that was defined by the old version, the old definition
remains.  This feature can be used to the module’s advantage if it maintains a
global table or cache of objects — with a  statement it can test
for the table’s presence and skip its initialization if desired:


It is legal though generally not very useful to reload built-in or dynamically
loaded modules, except for ,  and .
In many cases, however, extension modules are not designed to be initialized
more than once, and may fail in arbitrary ways when reloaded.
If a module imports objects from another module using  …
 …, calling  for the other module does not
redefine the objects imported from it — one way around this is to re-execute
the  statement, another is to use  and qualified
names (module.*name*) instead.
If a module instantiates instances of a class, reloading the module that defines
the class does not affect the method definitions of the instances — they
continue to use the old class definition.  The same is true for derived classes.

Changed in version 3.3: Relies on both  and  being defined on the module
being reloaded instead of just .


Deprecated since version 3.4: Use  instead.


The following functions are conveniences for handling PEP 3147 byte-compiled
file paths.

New in version 3.2.



(path, debug_override=None)¶
Return the PEP 3147 path to the byte-compiled file associated with the
source path.  For example, if path is  the return
value would be  for Python 3.2.
The  string comes from the current magic tag (see
; if  is not defined then
 will be raised). By passing in  or
 for debug_override you can override the system’s value for
, leading to optimized bytecode.
path need not exist.

Changed in version 3.3: If  is , then
 is raised.


Deprecated since version 3.4: Use  instead.


Changed in version 3.5: The debug_override parameter no longer creates a  file.




(path)¶
Given the path to a PEP 3147 file name, return the associated source code
file path.  For example, if path is
 the returned path would be
.  path need not exist, however if it does not conform
to PEP 3147 format, a  is raised. If
 is not defined,
 is raised.

Changed in version 3.3: Raise  when
 is not defined.


Deprecated since version 3.4: Use  instead.




()¶
Return the PEP 3147 magic tag string matching this version of Python’s
magic number, as returned by .

Deprecated since version 3.4: Use  directly starting
in Python 3.3.


The following functions help interact with the import system’s internal
locking mechanism.  Locking semantics of imports are an implementation
detail which may vary from release to release.  However, Python ensures
that circular imports work without any deadlocks.


()¶
Return  if the global import lock is currently held, else
. On platforms without threads, always return .
On platforms with threads, a thread executing an import first holds a
global import lock, then sets up a per-module lock for the rest of the
import.  This blocks other threads from importing the same module until
the original import completes, preventing other threads from seeing
incomplete module objects constructed by the original thread.  An
exception is made for circular imports, which by construction have to
expose an incomplete module object at some point.

Changed in version 3.3: The locking scheme has changed to per-module locks for
the most part.  A global import lock is kept for some critical tasks,
such as initializing the per-module locks.


Deprecated since version 3.4.




()¶
Acquire the interpreter’s global import lock for the current thread.
This lock should be used by import hooks to ensure thread-safety when
importing modules.
Once a thread has acquired the import lock, the same thread may acquire it
again without blocking; the thread must release it once for each time it has
acquired it.
On platforms without threads, this function does nothing.

Changed in version 3.3: The locking scheme has changed to per-module locks for
the most part.  A global import lock is kept for some critical tasks,
such as initializing the per-module locks.


Deprecated since version 3.4.




()¶
Release the interpreter’s global import lock. On platforms without
threads, this function does nothing.

Changed in version 3.3: The locking scheme has changed to per-module locks for
the most part.  A global import lock is kept for some critical tasks,
such as initializing the per-module locks.


Deprecated since version 3.4.


The following constants with integer values, defined in this module, are used
to indicate the search result of .


¶
The module was found as a source file.

Deprecated since version 3.3.




¶
The module was found as a compiled code object file.

Deprecated since version 3.3.




¶
The module was found as dynamically loadable shared library.

Deprecated since version 3.3.




¶
The module was found as a package directory.

Deprecated since version 3.3.




¶
The module was found as a built-in module.

Deprecated since version 3.3.




¶
The module was found as a frozen module.

Deprecated since version 3.3.




class (path_string)¶
The  type is a PEP 302 import hook that handles
non-directory path strings by failing to find any modules.  Calling this type
with an existing directory or empty string raises .
Otherwise, a  instance is returned.
Instances have only one method:


(fullname[, path])¶
This method always returns , indicating that the requested module could
not be found.


Changed in version 3.3:  is inserted into  instead of an
instance of .


Deprecated since version 3.4: Insert  into  instead.



Examples¶
The following function emulates what was the standard import statement up to
Python 1.4 (no hierarchical module names).  (This implementation wouldn’t work
in that version, since  has been extended and
 has been added in 1.4.)




