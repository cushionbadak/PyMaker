link:
library/gettext.html#class-based-api

docs:

Class-based API¶
The class-based API of the  module gives you more flexibility and
greater convenience than the GNU gettext API.  It is the recommended
way of localizing your Python applications and modules.   defines
a  class which implements the parsing of GNU  format
files, and has methods for returning strings. Instances of this class can also
install themselves in the built-in namespace as the function .


(domain, localedir=None, languages=None, all=False)¶
This function implements the standard  file search algorithm.  It
takes a domain, identical to what  takes.  Optional
localedir is as in . Optional languages is a list of
strings, where each string is a language code.
If localedir is not given, then the default system locale directory is used.
[2]  If languages is not given, then the following environment variables are
searched: , , , and
.  The first one returning a non-empty value is used for the
languages variable. The environment variables should contain a colon separated
list of languages, which will be split on the colon to produce the expected list
of language code strings.
 then expands and normalizes the languages, and then iterates
through them, searching for an existing file built of these components:

The first such file name that exists is returned by . If no such
file is found, then  is returned. If all is given, it returns a list
of all file names, in the order in which they appear in the languages list or
the environment variables.



(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None)¶
Return a  instance based on the domain, localedir,
and languages, which are first passed to  to get a list of the
associated  file paths.  Instances with identical  file
names are cached.  The actual class instantiated is class_ if
provided, otherwise .  The class’s constructor must
take a single file object argument.  If provided, codeset will change
the charset used to encode translated strings in the
 and 
methods.
If multiple files are found, later files are used as fallbacks for earlier ones.
To allow setting the fallback,  is used to clone each
translation object from the cache; the actual instance data is still shared with
the cache.
If no  file is found, this function raises  if
fallback is false (which is the default), and returns a
 instance if fallback is true.

Changed in version 3.3:  used to be raised instead of .




(domain, localedir=None, codeset=None, names=None)¶
This installs the function  in Python’s builtins namespace, based on
domain, localedir, and codeset which are passed to the function
.
For the names parameter, please see the description of the translation
object’s  method.
As seen below, you usually mark the strings in your application that are
candidates for translation, by wrapping them in a call to the 
function, like this:


For convenience, you want the  function to be installed in Python’s
builtins namespace, so it is easily accessible in all modules of your
application.


The  class¶
Translation classes are what actually implement the translation of original
source file message strings to translated message strings. The base class used
by all translation classes is ; this provides the basic
interface you can use to write your own specialized translation classes.  Here
are the methods of :


class (fp=None)¶
Takes an optional file object fp, which is ignored by the base class.
Initializes “protected” instance variables _info and _charset which are set
by derived classes, as well as _fallback, which is set through
.  It then calls  if fp is not
.


(fp)¶
No-op in the base class, this method takes file object fp, and reads
the data from the file, initializing its message catalog.  If you have an
unsupported message catalog file format, you should override this method
to parse your format.



(fallback)¶
Add fallback as the fallback object for the current translation object.
A translation object should consult the fallback if it cannot provide a
translation for a given message.



(message)¶
If a fallback has been set, forward  to the fallback.
Otherwise, return message.  Overridden in derived classes.



(singular, plural, n)¶
If a fallback has been set, forward  to the fallback.
Otherwise, return singular if n is 1; return plural otherwise.
Overridden in derived classes.



(message)¶



(singular, plural, n)¶
Equivalent to  and , but the translation
is returned as a byte string encoded in the preferred system encoding
if no encoding was explicitly set with .
Overridden in derived classes.

Warning
These methods should be avoided in Python 3.  See the warning for the
 function.




()¶
Return the “protected”  variable, a dictionary containing
the metadata found in the message catalog file.



()¶
Return the encoding of the message catalog file.



()¶
Return the encoding used to return translated messages in 
and .



(charset)¶
Change the encoding used to return translated messages.



(names=None)¶
This method installs  into the built-in namespace,
binding it to .
If the names parameter is given, it must be a sequence containing the
names of functions you want to install in the builtins namespace in
addition to .  Supported names are , ,
 and .
Note that this is only one way, albeit the most convenient way, to make
the  function available to your application.  Because it affects
the entire application globally, and specifically the built-in namespace,
localized modules should never install . Instead, they should use
this code to make  available to their module:


This puts  only in the module’s global namespace and so only
affects calls within this module.




The  class¶
The  module provides one additional class derived from
: .  This class overrides
 to enable reading GNU gettext format  files
in both big-endian and little-endian format.
 parses optional metadata out of the translation
catalog. It is convention with GNU gettext to include metadata as
the translation for the empty string. This metadata is in RFC 822-style
 pairs, and should contain the  key.  If the
key  is found, then the  property is used to
initialize the “protected”  instance variable, defaulting to
 if not found.  If the charset encoding is specified, then all message
ids and message strings read from the catalog are converted to Unicode using
this encoding, else ASCII is assumed.
Since message ids are read as Unicode strings too, all  methods
will assume message ids as Unicode strings, not byte strings.
The entire set of key/value pairs are placed into a dictionary and set as the
“protected”  instance variable.
If the  file’s magic number is invalid, the major version number is
unexpected, or if other problems occur while reading the file, instantiating a
 class can raise .


class ¶
The following methods are overridden from the base class implementation:


(message)¶
Look up the message id in the catalog and return the corresponding message
string, as a Unicode string.  If there is no entry in the catalog for the
message id, and a fallback has been set, the look up is forwarded to the
fallback’s  method.  Otherwise, the
message id is returned.



(singular, plural, n)¶
Do a plural-forms lookup of a message id.  singular is used as the message id
for purposes of lookup in the catalog, while n is used to determine which
plural form to use.  The returned message string is a Unicode string.
If the message id is not found in the catalog, and a fallback is specified,
the request is forwarded to the fallback’s 
method.  Otherwise, when n is 1 singular is returned, and plural is
returned in all other cases.
Here is an example:





(message)¶



(singular, plural, n)¶
Equivalent to  and , but the translation
is returned as a byte string encoded in the preferred system encoding
if no encoding  was explicitly set with
.

Warning
These methods should be avoided in Python 3.  See the warning for the
 function.





Solaris message catalog support¶
The Solaris operating system defines its own binary  file format, but
since no documentation can be found on this format, it is not supported at this
time.


The Catalog constructor¶
GNOME uses a version of the  module by James Henstridge, but this
version has a slightly different API.  Its documented usage was:


For compatibility with this older module, the function  is an
alias for the  function described above.
One difference between this module and Henstridge’s: his catalog objects
supported access through a mapping API, but this appears to be unused and so is
not currently supported.

