link:
library/2to3.html#to3-automated-python-2-to-3-code-translation

docs:

2to3 - Automated Python 2 to 3 code translation¶
2to3 is a Python program that reads Python 2.x source code and applies a series
of fixers to transform it into valid Python 3.x code.  The standard library
contains a rich set of fixers that will handle almost all code.  2to3 supporting
library  is, however, a flexible and generic library, so it is
possible to write your own fixers for 2to3.   could also be
adapted to custom applications in which Python code needs to be edited
automatically.

Using 2to3¶
2to3 will usually be installed with the Python interpreter as a script.  It is
also located in the  directory of the Python root.
2to3’s basic arguments are a list of files or directories to transform.  The
directories are recursively traversed for Python sources.
Here is a sample Python 2.x source file, :


It can be converted to Python 3.x code via 2to3 on the command line:


A diff against the original source file is printed.  2to3 can also write the
needed modifications right back to the source file.  (A backup of the original
file is made unless  is also given.)  Writing the changes back is
enabled with the  flag:


After transformation,  looks like this:


Comments and exact indentation are preserved throughout the translation process.
By default, 2to3 runs a set of predefined fixers.  The
 flag lists all available fixers.  An explicit set of fixers to run
can be given with .  Likewise the  explicitly disables a
fixer.  The following example runs only the  and  fixers:


This command runs every fixer except the  fixer:


Some fixers are explicit, meaning they aren’t run by default and must be
listed on the command line to be run.  Here, in addition to the default fixers,
the  fixer is run:


Notice how passing  enables all default fixers.
Sometimes 2to3 will find a place in your source code that needs to be changed,
but 2to3 cannot fix automatically.  In this case, 2to3 will print a warning
beneath the diff for a file.  You should address the warning in order to have
compliant 3.x code.
2to3 can also refactor doctests.  To enable this mode, use the 
flag.  Note that only doctests will be refactored.  This also doesn’t require
the module to be valid Python.  For example, doctest like examples in a reST
document could also be refactored with this option.
The  option enables output of more information on the translation
process.
Since some print statements can be parsed as function calls or statements, 2to3
cannot always read files containing the print function.  When 2to3 detects the
presence of the  compiler directive, it
modifies its internal grammar to interpret  as a function.  This
change can also be enabled manually with the  flag.  Use
 to run fixers on code that already has had its print statements
converted.
The  or  option allows specification of an
alternate directory for processed output files to be written to.  The
 flag is required when using this as backup files do not make sense
when not overwriting the input files.

New in version 3.2.3: The  option was added.

The  or  flag tells 2to3 to always
write output files even if no changes were required to the file.  This is most
useful with  so that an entire Python source tree is copied with
translation from one directory to another.
This option implies the  flag as it would not make sense otherwise.

New in version 3.2.3: The  flag was added.

The  option specifies a string to append to all output
filenames.  The  flag is required when specifying this as backups
are not necessary when writing to different filenames.  Example:


Will cause a converted file named  to be written.

New in version 3.2.3: The  option was added.

To translate an entire project from one directory tree to another use:




Fixers¶
Each step of transforming code is encapsulated in a fixer.  The command  lists them.  As documented above, each can be turned on
and off individually.  They are described here in more detail.


¶
Removes usage of .  For example  is converted to .



¶
Replaces deprecated  method names with the correct ones.






From
To












































¶
Converts  to .



¶
Converts  to .  This fixer is optional
because the  API is similar but not exactly the same as
that of .



¶
Fixes dictionary iteration methods.   is converted to
,  to , and
 to .  Similarly,
,  and  are
converted respectively to ,  and
.  It also wraps existing usages of ,
, and  in a call to .



¶
Converts  to .



¶
Converts the  statement to the  function.



¶
Removes usage of .  The argument to  is
wrapped in calls to , , and .



¶
Changes assignment of  to use of the 
module.



¶
Wraps  usage in a  call.



¶
Fixes function attributes that have been renamed.  For example,
 is converted to .



¶
Removes  statements.



¶
Renames  to .



¶
Changes  to .



¶
This optional fixer performs several transformations that make Python code
more idiomatic.  Type comparisons like  and
 are converted to .
 becomes .  This fixer also tries to make use of
 in appropriate places.  For example, this block


is changed to





¶
Detects sibling imports and converts them to relative imports.



¶
Handles module renames in the standard library.



¶
Handles other modules renames in the standard library.  It is separate from
the  fixer only because of technical limitations.



¶
Converts  to .



¶
Converts  to .



¶
Fixes duplicate types in the second argument of .  For
example,  is converted to  and  is converted to
.



¶
Removes imports of , , and
.  Imports of  are also
changed to .



¶
Changes usage of , , and
 to their built-in equivalents.
 is changed to .



¶
Renames  to .



¶
Wraps  in a  call.  It also changes 
to .  Using  disables this
fixer.



¶
Converts the old metaclass syntax ( in the class
body) to the new ().



¶
Fixes old method attribute names.  For example,  is converted
to .



¶
Converts the old not-equal syntax, , to .



¶
Converts the use of iterator’s  methods to the
 function.  It also renames  methods to
.



¶
Renames  to .



¶
Converts octal literals into the new syntax.



¶
Converts calls to various functions in the  module to other,
but equivalent, function calls.  When needed, the appropriate 
statements are added, e.g. .  The following mapping
are made:






From
To





























¶
Add extra parenthesis where they are required in list comprehensions.  For
example,  becomes .



¶
Converts the  statement to the  function.



¶
Converts  to , and  to .  If  is a tuple, the translation will be
incorrect because substituting tuples for exceptions has been removed in 3.0.



¶
Converts  to .



¶
Handles the move of  to .



¶
Converts  to .



¶
Changes  to .



¶
Replaces backtick repr with the  function.



¶
Replaces use of the  constructor with set literals.  This fixer
is optional.



¶
Renames  to .



¶
Changes the deprecated , ,
 to use .



¶
Fixes the API change in generator’s  method.



¶
Removes implicit tuple parameter unpacking.  This fixer inserts temporary
variables.



¶
Fixes code broken from the removal of some members in the 
module.



¶
Renames  to .



¶
Handles the rename of  and  to the 
package.



¶
Removes excess whitespace from comma separated items.  This fixer is
optional.



¶
Renames  to  and wraps existing 
calls with .



¶
Changes  to .



¶
Wraps  usage in a  call.  This is disabled when
 appears.



 - 2to3’s library¶
Source code: Lib/lib2to3/


Note
The  API should be considered unstable and may change
drastically in the future.


