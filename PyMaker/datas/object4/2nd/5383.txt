link:
library/asyncore.html

docs:


 — Asynchronous socket handler¶
Source code: Lib/asyncore.py

Deprecated since version 3.6: Please use  instead.



Note
This module exists for backwards compatibility only.  For new code we
recommend using .

This module provides the basic infrastructure for writing asynchronous  socket
service clients and servers.
There are only two ways to have a program on a single processor do  “more than
one thing at a time.” Multi-threaded programming is the  simplest and most
popular way to do it, but there is another very different technique, that lets
you have nearly all the advantages of  multi-threading, without actually using
multiple threads.  It’s really  only practical if your program is largely I/O
bound.  If your program is processor bound, then pre-emptive scheduled threads
are probably what you really need.  Network servers are rarely processor
bound, however.
If your operating system supports the  system call in its I/O
library (and nearly all do), then you can use it to juggle multiple
communication channels at once; doing other work while your I/O is taking
place in the “background.”  Although this strategy can seem strange and
complex, especially at first, it is in many ways easier to understand and
control than multi-threaded programming.  The  module solves
many of the difficult problems for you, making the task of building
sophisticated high-performance network servers and clients a snap.  For
“conversational” applications and protocols the companion 
module is invaluable.
The basic idea behind both modules is to create one or more network
channels, instances of class  and
.  Creating the channels adds them to a global
map, used by the  function if you do not provide it with your own
map.
Once the initial channel(s) is(are) created, calling the  function
activates channel service, which continues until the last channel (including
any that have been added to the map during asynchronous service) is closed.


([timeout[, use_poll[, map[, count]]]])¶
Enter a polling loop that terminates after count passes or all open
channels have been closed.  All arguments are optional.  The count
parameter defaults to , resulting in the loop terminating only when all
channels have been closed.  The timeout argument sets the timeout
parameter for the appropriate  or 
call, measured in seconds; the default is 30 seconds.  The use_poll
parameter, if true, indicates that  should be used in
preference to  (the default is ).
The map parameter is a dictionary whose items are the channels to watch.
As channels are closed they are deleted from their map.  If map is
omitted, a global map is used. Channels (instances of
,  and subclasses
thereof) can freely be mixed in the map.



class ¶
The  class is a thin wrapper around a low-level socket
object. To make it more useful, it has a few methods for event-handling
which are called from the asynchronous loop.   Otherwise, it can be treated
as a normal non-blocking socket object.
The firing of low-level events at certain times or in certain connection
states tells the asynchronous loop that certain higher-level events have
taken place.  For example, if we have asked for a socket to connect to
another host, we know that the connection has been made when the socket
becomes writable for the first time (at this point you know that you may
write to it with the expectation of success).  The implied higher-level
events are:






Event
Description




Implied by the first read or write
event


Implied by a read event with no data
available


Implied by a read event on a listening
socket



During asynchronous processing, each mapped channel’s  and
 methods are used to determine whether the channel’s socket
should be added to the list of channels ed or
ed for read and write events.
Thus, the set of channel events is larger than the basic socket events.  The
full set of methods that can be overridden in your subclass follows:


()¶
Called when the asynchronous loop detects that a  call on the
channel’s socket will succeed.



()¶
Called when the asynchronous loop detects that a writable socket can be
written.  Often this method will implement the necessary buffering for
performance.  For example:





()¶
Called when there is out of band (OOB) data for a socket connection.  This
will almost never happen, as OOB is tenuously supported and rarely used.



()¶
Called when the active opener’s socket actually makes a connection.  Might
send a “welcome” banner, or initiate a protocol negotiation with the
remote endpoint, for example.



()¶
Called when the socket is closed.



()¶
Called when an exception is raised and not otherwise handled.  The default
version prints a condensed traceback.



()¶
Called on listening channels (passive openers) when a connection can be
established with a new remote endpoint that has issued a 
call for the local endpoint. Deprecated in version 3.2; use
 instead.

Deprecated since version 3.2.




(sock, addr)¶
Called on listening channels (passive openers) when a connection has been
established with a new remote endpoint that has issued a 
call for the local endpoint.  sock is a new socket object usable to
send and receive data on the connection, and addr is the address
bound to the socket on the other end of the connection.

New in version 3.2.




()¶
Called each time around the asynchronous loop to determine whether a
channel’s socket should be added to the list on which read events can
occur.  The default method simply returns , indicating that by
default, all channels will be interested in read events.



()¶
Called each time around the asynchronous loop to determine whether a
channel’s socket should be added to the list on which write events can
occur.  The default method simply returns , indicating that by
default, all channels will be interested in write events.

In addition, each channel delegates or extends many of the socket methods.
Most of these are nearly identical to their socket partners.


(family=socket.AF_INET, type=socket.SOCK_STREAM)¶
This is identical to the creation of a normal socket, and will use the
same options for creation.  Refer to the  documentation for
information on creating sockets.

Changed in version 3.3: family and type arguments can be omitted.




(address)¶
As with the normal socket object, address is a tuple with the first
element the host to connect to, and the second the port number.



(data)¶
Send data to the remote end-point of the socket.



(buffer_size)¶
Read at most buffer_size bytes from the socket’s remote end-point.  An
empty bytes object implies that the channel has been closed from the
other end.
Note that  may raise  , even though
 or  has reported the socket
ready for reading.



(backlog)¶
Listen for connections made to the socket.  The backlog argument
specifies the maximum number of queued connections and should be at least
1; the maximum value is system-dependent (usually 5).



(address)¶
Bind the socket to address.  The socket must not already be bound.  (The
format of address depends on the address family — refer to the
 documentation for more information.)  To mark
the socket as re-usable (setting the  option), call
the  object’s  method.



()¶
Accept a connection.  The socket must be bound to an address and listening
for connections.  The return value can be either  or a pair
 where conn is a new socket object usable to send
and receive data on the connection, and address is the address bound to
the socket on the other end of the connection.
When  is returned it means the connection didn’t take place, in
which case the server should just ignore this event and keep listening
for further incoming connections.



()¶
Close the socket.  All future operations on the socket object will fail.
The remote end-point will receive no more data (after queued data is
flushed).  Sockets are automatically closed when they are
garbage-collected.




class ¶
A  subclass which adds simple buffered output capability,
useful for simple clients. For more sophisticated usage use
.



class ¶
A file_dispatcher takes a file descriptor or file object along
with an optional map argument and wraps it for use with the 
or  functions.  If provided a file object or anything with a
 method, that method will be called and passed to the
 constructor.
Availability: Unix.



class ¶
A file_wrapper takes an integer file descriptor and calls  to
duplicate the handle so that the original handle may be closed independently
of the file_wrapper.  This class implements sufficient methods to emulate a
socket for use by the  class.
Availability: Unix.


asyncore Example basic HTTP client¶
Here is a very basic HTTP client that uses the  class to
implement its socket handling:




asyncore Example basic echo server¶
Here is a basic echo server that uses the  class to accept
connections and dispatches the incoming connections to a handler:




