link:
library/http.client.html#httpconnection-objects

docs:

HTTPConnection Objects¶
 instances have the following methods:


(method, url, body=None, headers={}, *, encode_chunked=False)¶
This will send a request to the server using the HTTP request
method method and the selector url.
If body is specified, the specified data is sent after the headers are
finished.  It may be a , a bytes-like object, an
open file object, or an iterable of .  If body
is a string, it is encoded as ISO-8859-1, the default for HTTP.  If it
is a bytes-like object, the bytes are sent as is.  If it is a file
object, the contents of the file is sent; this file object should
support at least the  method.  If the file object is an
instance of , the data returned by the 
method will be encoded as ISO-8859-1, otherwise the data returned by
 is sent as is.  If body is an iterable, the elements of the
iterable are sent as is until the iterable is exhausted.
The headers argument should be a mapping of extra HTTP headers to send
with the request.
If headers contains neither Content-Length nor Transfer-Encoding,
but there is a request body, one of those
header fields will be added automatically.  If
body is , the Content-Length header is set to  for
methods that expect a body (, , and ).  If
body is a string or a bytes-like object that is not also a
file, the Content-Length header is
set to its length.  Any other type of body (files
and iterables in general) will be chunk-encoded, and the
Transfer-Encoding header will automatically be set instead of
Content-Length.
The encode_chunked argument is only relevant if Transfer-Encoding is
specified in headers.  If encode_chunked is , the
HTTPConnection object assumes that all encoding is handled by the
calling code.  If it is , the body will be chunk-encoded.

Note
Chunked transfer encoding has been added to the HTTP protocol
version 1.1.  Unless the HTTP server is known to handle HTTP 1.1,
the caller must either specify the Content-Length, or must pass a
 or bytes-like object that is not also a file as the
body representation.


New in version 3.2: body can now be an iterable.


Changed in version 3.6: If neither Content-Length nor Transfer-Encoding are set in
headers, file and iterable body objects are now chunk-encoded.
The encode_chunked argument was added.
No attempt is made to determine the Content-Length for file
objects.




()¶
Should be called after a request is sent to get the response from the server.
Returns an  instance.

Note
Note that you must have read the whole response before you can send a new
request to the server.


Changed in version 3.5: If a  or subclass is raised, the
 object will be ready to reconnect when
a new request is sent.




(level)¶
Set the debugging level.  The default debug level is , meaning no
debugging output is printed.  Any value greater than  will cause all
currently defined debug output to be printed to stdout.  The 
is passed to any new  objects that are created.

New in version 3.1.




(host, port=None, headers=None)¶
Set the host and the port for HTTP Connect Tunnelling. This allows running
the connection through a proxy server.
The host and port arguments specify the endpoint of the tunneled connection
(i.e. the address included in the CONNECT request, not the address of the
proxy server).
The headers argument should be a mapping of extra HTTP headers to send with
the CONNECT request.
For example, to tunnel through a HTTPS proxy server running locally on port
8080, we would pass the address of the proxy to the 
constructor, and the address of the host that we eventually want to reach to
the  method:



New in version 3.2.




()¶
Connect to the server specified when the object was created.  By default,
this is called automatically when making a request if the client does not
already have a connection.



()¶
Close the connection to the server.



¶
Buffer size in bytes for sending a file-like message body.

New in version 3.7.


As an alternative to using the  method described above, you can
also send your request step by step, by using the four functions below.


(method, url, skip_host=False, skip_accept_encoding=False)¶
This should be the first call after the connection to the server has been
made. It sends a line to the server consisting of the method string,
the url string, and the HTTP version ().  To disable automatic
sending of  or  headers (for example to accept
additional content encodings), specify skip_host or skip_accept_encoding
with non-False values.



(header, argument[, ...])¶
Send an RFC 822-style header to the server.  It sends a line to the server
consisting of the header, a colon and a space, and the first argument.  If more
arguments are given, continuation lines are sent, each consisting of a tab and
an argument.



(message_body=None, *, encode_chunked=False)¶
Send a blank line to the server, signalling the end of the headers. The
optional message_body argument can be used to pass a message body
associated with the request.
If encode_chunked is , the result of each iteration of
message_body will be chunk-encoded as specified in RFC 7230,
Section 3.3.1.  How the data is encoded is dependent on the type of
message_body.  If message_body implements the buffer interface the encoding will result in a single chunk.
If message_body is a , each iteration
of message_body will result in a chunk.  If message_body is a
file object, each call to  will result in a chunk.
The method automatically signals the end of the chunk-encoded data
immediately after message_body.

Note
Due to the chunked encoding specification, empty chunks
yielded by an iterator body will be ignored by the chunk-encoder.
This is to avoid premature termination of the read of the request by
the target server due to malformed encoding.


New in version 3.6: Chunked encoding support.  The encode_chunked parameter was
added.




(data)¶
Send data to the server.  This should be used directly only after the
 method has been called and before  is
called.

