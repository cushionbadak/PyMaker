link:
library/inspect.html#fetching-attributes-statically

docs:

Fetching attributes statically¶
Both getattr() and hasattr() can trigger code execution when
fetching or checking for the existence of attributes. Descriptors, like
properties, will be invoked and __getattr__() and __getattribute__()
may be called.
For cases where you want passive introspection, like documentation tools, this
can be inconvenient. getattr_static() has the same signature as getattr()
but avoids executing code when it fetches attributes.


inspect.getattr_static(obj, attr, default=None)¶
Retrieve attributes without triggering dynamic lookup via the
descriptor protocol, __getattr__() or __getattribute__().
Note: this function may not be able to retrieve all attributes
that getattr can fetch (like dynamically created attributes)
and may find attributes that getattr can’t (like descriptors
that raise AttributeError). It can also return descriptors objects
instead of instance members.
If the instance __dict__ is shadowed by another member (for
example a property) then this function will be unable to find instance
members.

New in version 3.2.


getattr_static() does not resolve descriptors, for example slot descriptors or
getset descriptors on objects implemented in C. The descriptor object
is returned instead of the underlying attribute.
You can handle these with code like the following. Note that
for arbitrary getset descriptors invoking these may trigger
code execution:
# example code for resolving the builtin descriptor types
class _foo:
    __slots__ = ['foo']

slot_descriptor = type(_foo.foo)
getset_descriptor = type(type(open(__file__)).name)
wrapper_descriptor = type(str.__dict__['__add__'])
descriptor_types = (slot_descriptor, getset_descriptor, wrapper_descriptor)

result = getattr_static(some_object, 'foo')
if type(result) in descriptor_types:
    try:
        result = result.__get__()
    except AttributeError:
        # descriptors can raise AttributeError to
        # indicate there is no underlying value
        # in which case the descriptor itself will
        # have to do
        pass


