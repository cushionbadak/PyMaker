link:
library/os.html#os.scandir

docs:


os.scandir(path='.')¶
Return an iterator of os.DirEntry objects corresponding to the
entries in the directory given by path. The entries are yielded in
arbitrary order, and the special entries '.' and '..' are not
included.
Using scandir() instead of listdir() can significantly
increase the performance of code that also needs file type or file
attribute information, because os.DirEntry objects expose this
information if the operating system provides it when scanning a directory.
All os.DirEntry methods may perform a system call, but
is_dir() and is_file() usually only
require a system call for symbolic links; os.DirEntry.stat()
always requires a system call on Unix but only requires one for
symbolic links on Windows.
path may be a path-like object.  If path is of type bytes
(directly or indirectly through the PathLike interface),
the type of the name and path
attributes of each os.DirEntry will be bytes; in all other
circumstances, they will be of type str.
This function can also support specifying a file descriptor; the file descriptor must refer to a directory.
The scandir() iterator supports the context manager protocol
and has the following method:


scandir.close()¶
Close the iterator and free acquired resources.
This is called automatically when the iterator is exhausted or garbage
collected, or when an error happens during iterating.  However it
is advisable to call it explicitly or use the with
statement.

New in version 3.6.


The following example shows a simple use of scandir() to display all
the files (excluding directories) in the given path that don’t start with
'.'. The entry.is_file() call will generally not make an additional
system call:
with os.scandir(path) as it:
    for entry in it:
        if not entry.name.startswith('.') and entry.is_file():
            print(entry.name)



Note
On Unix-based systems, scandir() uses the system’s
opendir()
and
readdir()
functions. On Windows, it uses the Win32
FindFirstFileW
and
FindNextFileW
functions.


New in version 3.5.


New in version 3.6: Added support for the context manager protocol and the
close() method.  If a scandir() iterator is neither
exhausted nor explicitly closed a ResourceWarning will be emitted
in its destructor.
The function accepts a path-like object.


Changed in version 3.7: Added support for file descriptors on Unix.

