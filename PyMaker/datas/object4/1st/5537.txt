link:
library/email.parser.html#email.parser.BytesFeedParser

docs:


class email.parser.BytesFeedParser(_factory=None, *, policy=policy.compat32)¶
Create a BytesFeedParser instance.  Optional _factory is a
no-argument callable; if not specified use the
message_factory from the policy.  Call
_factory whenever a new message object is needed.
If policy is specified use the rules it specifies to update the
representation of the message.  If policy is not set, use the
compat32 policy, which maintains backward
compatibility with the Python 3.2 version of the email package and provides
Message as the default factory.  All other policies
provide EmailMessage as the default _factory. For
more information on what else policy controls, see the
policy documentation.
Note: The policy keyword should always be specified; The default will
change to email.policy.default in a future version of Python.

New in version 3.2.


Changed in version 3.3: Added the policy keyword.


Changed in version 3.6: _factory defaults to the policy message_factory.



feed(data)¶
Feed the parser some more data.  data should be a bytes-like
object containing one or more lines.  The lines can be partial and the
parser will stitch such partial lines together properly.  The lines can
have any of the three common line endings: carriage return, newline, or
carriage return and newline (they can even be mixed).



close()¶
Complete the parsing of all previously fed data and return the root
message object.  It is undefined what happens if feed() is called
after this method has been called.

