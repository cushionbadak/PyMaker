link:
library/xmlrpc.client.html#xmlrpc.client.Binary

docs:

<dt id="xmlrpc.client.Binary">
<em class="property">class </em><code class="descclassname">xmlrpc.client.</code><code class="descname">Binary</code><a class="headerlink" href="#xmlrpc.client.Binary" title="Permalink to this definition">¶</a></dt>
<dd><p>This class may be initialized from bytes data (which may include NULs). The
primary access to the content of a <a class="reference internal" href="#xmlrpc.client.Binary" title="xmlrpc.client.Binary"><code class="xref py py-class docutils literal notranslate"><span class="pre">Binary</span></code></a> object is provided by an
attribute:</p>
<dl class="attribute">
<dt id="xmlrpc.client.Binary.data">
<code class="descname">data</code><a class="headerlink" href="#xmlrpc.client.Binary.data" title="Permalink to this definition">¶</a></dt>
<dd><p>The binary data encapsulated by the <a class="reference internal" href="#xmlrpc.client.Binary" title="xmlrpc.client.Binary"><code class="xref py py-class docutils literal notranslate"><span class="pre">Binary</span></code></a> instance.  The data is
provided as a <a class="reference internal" href="stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> object.</p>
</dd></dl>
<p><a class="reference internal" href="#xmlrpc.client.Binary" title="xmlrpc.client.Binary"><code class="xref py py-class docutils literal notranslate"><span class="pre">Binary</span></code></a> objects have the following methods, supported mainly for
internal use by the marshalling/unmarshalling code:</p>
<dl class="method">
<dt id="xmlrpc.client.Binary.decode">
<code class="descname">decode</code><span class="sig-paren">(</span><em>bytes</em><span class="sig-paren">)</span><a class="headerlink" href="#xmlrpc.client.Binary.decode" title="Permalink to this definition">¶</a></dt>
<dd><p>Accept a base64 <a class="reference internal" href="stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> object and decode it as the instance’s new data.</p>
</dd></dl>
<dl class="method">
<dt id="xmlrpc.client.Binary.encode">
<code class="descname">encode</code><span class="sig-paren">(</span><em>out</em><span class="sig-paren">)</span><a class="headerlink" href="#xmlrpc.client.Binary.encode" title="Permalink to this definition">¶</a></dt>
<dd><p>Write the XML-RPC base 64 encoding of this binary item to the <em>out</em> stream object.</p>
<p>The encoded data will have newlines every 76 characters as per
<span class="target" id="index-0"></span><a class="rfc reference external" href="https://tools.ietf.org/html/rfc2045.html#section-6.8"><strong>RFC 2045 section 6.8</strong></a>,
which was the de facto standard base64 specification when the
XML-RPC spec was written.</p>
</dd></dl>
<p>It also supports certain of Python’s built-in operators through <a class="reference internal" href="../reference/datamodel.html#object.__eq__" title="object.__eq__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__eq__()</span></code></a>
and <a class="reference internal" href="../reference/datamodel.html#object.__ne__" title="object.__ne__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__ne__()</span></code></a> methods.</p>
</dd>