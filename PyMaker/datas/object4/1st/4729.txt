link:
library/asyncio-queue.html#queue

docs:

Queue¶


class asyncio.Queue(maxsize=0, *, loop=None)¶
A first in, first out (FIFO) queue.
If maxsize is less than or equal to zero, the queue size is
infinite.  If it is an integer greater than 0, then
await put() blocks when the queue reaches maxsize
until an item is removed by get().
Unlike the standard library threading queue, the size of
the queue is always known and can be returned by calling the
qsize() method.
This class is not thread safe.


maxsize¶
Number of items allowed in the queue.



empty()¶
Return True if the queue is empty, False otherwise.



full()¶
Return True if there are maxsize items in the queue.
If the queue was initialized with maxsize=0 (the default),
then full() never returns True.



coroutine get()¶
Remove and return an item from the queue. If queue is empty,
wait until an item is available.



get_nowait()¶
Return an item if one is immediately available, else raise
QueueEmpty.



coroutine join()¶
Block until all items in the queue have been received and processed.
The count of unfinished tasks goes up whenever an item is added
to the queue. The count goes down whenever a consumer coroutine calls
task_done() to indicate that the item was retrieved and all
work on it is complete.  When the count of unfinished tasks drops
to zero, join() unblocks.



coroutine put(item)¶
Put an item into the queue. If the queue is full, wait until a
free slot is available before adding the item.



put_nowait(item)¶
Put an item into the queue without blocking.
If no free slot is immediately available, raise QueueFull.



qsize()¶
Return the number of items in the queue.



task_done()¶
Indicate that a formerly enqueued task is complete.
Used by queue consumers. For each get() used to
fetch a task, a subsequent call to task_done() tells the
queue that the processing on the task is complete.
If a join() is currently blocking, it will resume when all
items have been processed (meaning that a task_done()
call was received for every item that had been put()
into the queue).
Raises ValueError if called more times than there were
items placed in the queue.


