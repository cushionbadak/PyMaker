link:
library/configparser.html#configparser.RawConfigParser

docs:


class configparser.RawConfigParser(defaults=None, dict_type=collections.OrderedDict, allow_no_value=False, *, delimiters=('=', ':'), comment_prefixes=('#', ';'), inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section=configparser.DEFAULTSECT[, interpolation])¶
Legacy variant of the ConfigParser.  It has interpolation
disabled by default and allows for non-string section names, option
names, and values via its unsafe add_section and set methods,
as well as the legacy defaults= keyword argument handling.

Note
Consider using ConfigParser instead which checks types of
the values to be stored internally.  If you don’t want interpolation, you
can use ConfigParser(interpolation=None).



add_section(section)¶
Add a section named section to the instance.  If a section by the given
name already exists, DuplicateSectionError is raised.  If the
default section name is passed, ValueError is raised.
Type of section is not checked which lets users create non-string named
sections.  This behaviour is unsupported and may cause internal errors.



set(section, option, value)¶
If the given section exists, set the given option to the specified value;
otherwise raise NoSectionError.  While it is possible to use
RawConfigParser (or ConfigParser with raw parameters
set to true) for internal storage of non-string values, full
functionality (including interpolation and output to files) can only be
achieved using string values.
This method lets users assign non-string values to keys internally.  This
behaviour is unsupported and will cause errors when attempting to write
to a file or get it in non-raw mode.  Use the mapping protocol API
which does not allow such assignments to take place.

