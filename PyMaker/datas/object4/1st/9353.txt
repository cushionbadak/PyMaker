link:
library/contextlib.html#examples-and-recipes

docs:

Examples and Recipes¶
This section describes some examples and recipes for making effective use of
the tools provided by contextlib.

Supporting a variable number of context managers¶
The primary use case for ExitStack is the one given in the class
documentation: supporting a variable number of context managers and other
cleanup operations in a single with statement. The variability
may come from the number of context managers needed being driven by user
input (such as opening a user specified collection of files), or from
some of the context managers being optional:
with ExitStack() as stack:
    for resource in resources:
        stack.enter_context(resource)
    if need_special_resource():
        special = acquire_special_resource()
        stack.callback(release_special_resource, special)
    # Perform operations that use the acquired resources


As shown, ExitStack also makes it quite easy to use with
statements to manage arbitrary resources that don’t natively support the
context management protocol.


Catching exceptions from __enter__ methods¶
It is occasionally desirable to catch exceptions from an __enter__
method implementation, without inadvertently catching exceptions from
the with statement body or the context manager’s __exit__
method. By using ExitStack the steps in the context management
protocol can be separated slightly in order to allow this:
stack = ExitStack()
try:
    x = stack.enter_context(cm)
except Exception:
    # handle __enter__ exception
else:
    with stack:
        # Handle normal case


Actually needing to do this is likely to indicate that the underlying API
should be providing a direct resource management interface for use with
try/except/finally statements, but not
all APIs are well designed in that regard. When a context manager is the
only resource management API provided, then ExitStack can make it
easier to handle various situations that can’t be handled directly in a
with statement.


Cleaning up in an __enter__ implementation¶
As noted in the documentation of ExitStack.push(), this
method can be useful in cleaning up an already allocated resource if later
steps in the __enter__() implementation fail.
Here’s an example of doing this for a context manager that accepts resource
acquisition and release functions, along with an optional validation function,
and maps them to the context management protocol:
from contextlib import contextmanager, AbstractContextManager, ExitStack

class ResourceManager(AbstractContextManager):

    def __init__(self, acquire_resource, release_resource, check_resource_ok=None):
        self.acquire_resource = acquire_resource
        self.release_resource = release_resource
        if check_resource_ok is None:
            def check_resource_ok(resource):
                return True
        self.check_resource_ok = check_resource_ok

    @contextmanager
    def _cleanup_on_error(self):
        with ExitStack() as stack:
            stack.push(self)
            yield
            # The validation check passed and didn't raise an exception
            # Accordingly, we want to keep the resource, and pass it
            # back to our caller
            stack.pop_all()

    def __enter__(self):
        resource = self.acquire_resource()
        with self._cleanup_on_error():
            if not self.check_resource_ok(resource):
                msg = "Failed validation for {!r}"
                raise RuntimeError(msg.format(resource))
        return resource

    def __exit__(self, *exc_details):
        # We don't need to duplicate any of our resource release logic
        self.release_resource()




Replacing any use of try-finally and flag variables¶
A pattern you will sometimes see is a try-finally statement with a flag
variable to indicate whether or not the body of the finally clause should
be executed. In its simplest form (that can’t already be handled just by
using an except clause instead), it looks something like this:
cleanup_needed = True
try:
    result = perform_operation()
    if result:
        cleanup_needed = False
finally:
    if cleanup_needed:
        cleanup_resources()


As with any try statement based code, this can cause problems for
development and review, because the setup code and the cleanup code can end
up being separated by arbitrarily long sections of code.
ExitStack makes it possible to instead register a callback for
execution at the end of a with statement, and then later decide to skip
executing that callback:
from contextlib import ExitStack

with ExitStack() as stack:
    stack.callback(cleanup_resources)
    result = perform_operation()
    if result:
        stack.pop_all()


This allows the intended cleanup up behaviour to be made explicit up front,
rather than requiring a separate flag variable.
If a particular application uses this pattern a lot, it can be simplified
even further by means of a small helper class:
from contextlib import ExitStack

class Callback(ExitStack):
    def __init__(self, callback, *args, **kwds):
        super(Callback, self).__init__()
        self.callback(callback, *args, **kwds)

    def cancel(self):
        self.pop_all()

with Callback(cleanup_resources) as cb:
    result = perform_operation()
    if result:
        cb.cancel()


If the resource cleanup isn’t already neatly bundled into a standalone
function, then it is still possible to use the decorator form of
ExitStack.callback() to declare the resource cleanup in
advance:
from contextlib import ExitStack

with ExitStack() as stack:
    @stack.callback
    def cleanup_resources():
        ...
    result = perform_operation()
    if result:
        stack.pop_all()


Due to the way the decorator protocol works, a callback function
declared this way cannot take any parameters. Instead, any resources to
be released must be accessed as closure variables.


Using a context manager as a function decorator¶
ContextDecorator makes it possible to use a context manager in
both an ordinary with statement and also as a function decorator.
For example, it is sometimes useful to wrap functions or groups of statements
with a logger that can track the time of entry and time of exit.  Rather than
writing both a function decorator and a context manager for the task,
inheriting from ContextDecorator provides both capabilities in a
single definition:
from contextlib import ContextDecorator
import logging

logging.basicConfig(level=logging.INFO)

class track_entry_and_exit(ContextDecorator):
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        logging.info('Entering: %s', self.name)

    def __exit__(self, exc_type, exc, exc_tb):
        logging.info('Exiting: %s', self.name)


Instances of this class can be used as both a context manager:
with track_entry_and_exit('widget loader'):
    print('Some time consuming activity goes here')
    load_widget()


And also as a function decorator:
@track_entry_and_exit('widget loader')
def activity():
    print('Some time consuming activity goes here')
    load_widget()


Note that there is one additional limitation when using context managers
as function decorators: there’s no way to access the return value of
__enter__(). If that value is needed, then it is still necessary to use
an explicit with statement.

See also

PEP 343 - The “with” statement
The specification, background, and examples for the Python with
statement.



