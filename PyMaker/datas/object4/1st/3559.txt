link:
library/logging.html#logging.setLogRecordFactory

docs:

<dt id="logging.setLogRecordFactory">
<code class="descclassname">logging.</code><code class="descname">setLogRecordFactory</code><span class="sig-paren">(</span><em>factory</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.setLogRecordFactory" title="Permalink to this definition">¶</a></dt>
<dd><p>Set a callable which is used to create a <a class="reference internal" href="#logging.LogRecord" title="logging.LogRecord"><code class="xref py py-class docutils literal notranslate"><span class="pre">LogRecord</span></code></a>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name"/>
<col class="field-body"/>
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>factory</strong> – The factory callable to be used to instantiate a log record.</td>
</tr>
</tbody>
</table>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.2: </span>This function has been provided, along with <a class="reference internal" href="#logging.getLogRecordFactory" title="logging.getLogRecordFactory"><code class="xref py py-func docutils literal notranslate"><span class="pre">getLogRecordFactory()</span></code></a>, to
allow developers more control over how the <a class="reference internal" href="#logging.LogRecord" title="logging.LogRecord"><code class="xref py py-class docutils literal notranslate"><span class="pre">LogRecord</span></code></a> representing
a logging event is constructed.</p>
</div>
<p>The factory has the following signature:</p>
<p><code class="docutils literal notranslate"><span class="pre">factory(name,</span> <span class="pre">level,</span> <span class="pre">fn,</span> <span class="pre">lno,</span> <span class="pre">msg,</span> <span class="pre">args,</span> <span class="pre">exc_info,</span> <span class="pre">func=None,</span> <span class="pre">sinfo=None,</span> <span class="pre">**kwargs)</span></code></p>
<blockquote>
<div><table class="docutils field-list" frame="void" rules="none">
<col class="field-name"/>
<col class="field-body"/>
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">name:</th><td class="field-body">The logger name.</td>
</tr>
<tr class="field-even field"><th class="field-name">level:</th><td class="field-body">The logging level (numeric).</td>
</tr>
<tr class="field-odd field"><th class="field-name">fn:</th><td class="field-body">The full pathname of the file where the logging call was made.</td>
</tr>
<tr class="field-even field"><th class="field-name">lno:</th><td class="field-body">The line number in the file where the logging call was made.</td>
</tr>
<tr class="field-odd field"><th class="field-name">msg:</th><td class="field-body">The logging message.</td>
</tr>
<tr class="field-even field"><th class="field-name">args:</th><td class="field-body">The arguments for the logging message.</td>
</tr>
<tr class="field-odd field"><th class="field-name">exc_info:</th><td class="field-body">An exception tuple, or <code class="docutils literal notranslate"><span class="pre">None</span></code>.</td>
</tr>
<tr class="field-even field"><th class="field-name">func:</th><td class="field-body">The name of the function or method which invoked the logging
call.</td>
</tr>
<tr class="field-odd field"><th class="field-name">sinfo:</th><td class="field-body">A stack traceback such as is provided by
<a class="reference internal" href="traceback.html#traceback.print_stack" title="traceback.print_stack"><code class="xref py py-func docutils literal notranslate"><span class="pre">traceback.print_stack()</span></code></a>, showing the call hierarchy.</td>
</tr>
<tr class="field-even field"><th class="field-name">kwargs:</th><td class="field-body">Additional keyword arguments.</td>
</tr>
</tbody>
</table>
</div></blockquote>
</dd>