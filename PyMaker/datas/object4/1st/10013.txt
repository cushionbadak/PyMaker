link:
library/dis.html#python-bytecode-instructions

docs:

Python Bytecode Instructions¶
The get_instructions() function and Bytecode class provide
details of bytecode instructions as Instruction instances:


class dis.Instruction¶
Details for a bytecode operation


opcode¶
numeric code for operation, corresponding to the opcode values listed
below and the bytecode values in the Opcode collections.



opname¶
human readable name for operation



arg¶
numeric argument to operation (if any), otherwise None



argval¶
resolved arg value (if known), otherwise same as arg



argrepr¶
human readable description of operation argument



offset¶
start index of operation within bytecode sequence



starts_line¶
line started by this opcode (if any), otherwise None



is_jump_target¶
True if other code jumps to here, otherwise False


New in version 3.4.


The Python compiler currently generates the following bytecode instructions.
General instructions


NOP¶
Do nothing code.  Used as a placeholder by the bytecode optimizer.



POP_TOP¶
Removes the top-of-stack (TOS) item.



ROT_TWO¶
Swaps the two top-most stack items.



ROT_THREE¶
Lifts second and third stack item one position up, moves top down to position
three.



DUP_TOP¶
Duplicates the reference on top of the stack.

New in version 3.2.




DUP_TOP_TWO¶
Duplicates the two references on top of the stack, leaving them in the
same order.

New in version 3.2.


Unary operations
Unary operations take the top of the stack, apply the operation, and push the
result back on the stack.


UNARY_POSITIVE¶
Implements TOS = +TOS.



UNARY_NEGATIVE¶
Implements TOS = -TOS.



UNARY_NOT¶
Implements TOS = not TOS.



UNARY_INVERT¶
Implements TOS = ~TOS.



GET_ITER¶
Implements TOS = iter(TOS).



GET_YIELD_FROM_ITER¶
If TOS is a generator iterator or coroutine object
it is left as is.  Otherwise, implements TOS = iter(TOS).

New in version 3.5.


Binary operations
Binary operations remove the top of the stack (TOS) and the second top-most
stack item (TOS1) from the stack.  They perform the operation, and put the
result back on the stack.


BINARY_POWER¶
Implements TOS = TOS1 ** TOS.



BINARY_MULTIPLY¶
Implements TOS = TOS1 * TOS.



BINARY_MATRIX_MULTIPLY¶
Implements TOS = TOS1 @ TOS.

New in version 3.5.




BINARY_FLOOR_DIVIDE¶
Implements TOS = TOS1 // TOS.



BINARY_TRUE_DIVIDE¶
Implements TOS = TOS1 / TOS.



BINARY_MODULO¶
Implements TOS = TOS1 % TOS.



BINARY_ADD¶
Implements TOS = TOS1 + TOS.



BINARY_SUBTRACT¶
Implements TOS = TOS1 - TOS.



BINARY_SUBSCR¶
Implements TOS = TOS1[TOS].



BINARY_LSHIFT¶
Implements TOS = TOS1 << TOS.



BINARY_RSHIFT¶
Implements TOS = TOS1 >> TOS.



BINARY_AND¶
Implements TOS = TOS1 & TOS.



BINARY_XOR¶
Implements TOS = TOS1 ^ TOS.



BINARY_OR¶
Implements TOS = TOS1 | TOS.

In-place operations
In-place operations are like binary operations, in that they remove TOS and
TOS1, and push the result back on the stack, but the operation is done in-place
when TOS1 supports it, and the resulting TOS may be (but does not have to be)
the original TOS1.


INPLACE_POWER¶
Implements in-place TOS = TOS1 ** TOS.



INPLACE_MULTIPLY¶
Implements in-place TOS = TOS1 * TOS.



INPLACE_MATRIX_MULTIPLY¶
Implements in-place TOS = TOS1 @ TOS.

New in version 3.5.




INPLACE_FLOOR_DIVIDE¶
Implements in-place TOS = TOS1 // TOS.



INPLACE_TRUE_DIVIDE¶
Implements in-place TOS = TOS1 / TOS.



INPLACE_MODULO¶
Implements in-place TOS = TOS1 % TOS.



INPLACE_ADD¶
Implements in-place TOS = TOS1 + TOS.



INPLACE_SUBTRACT¶
Implements in-place TOS = TOS1 - TOS.



INPLACE_LSHIFT¶
Implements in-place TOS = TOS1 << TOS.



INPLACE_RSHIFT¶
Implements in-place TOS = TOS1 >> TOS.



INPLACE_AND¶
Implements in-place TOS = TOS1 & TOS.



INPLACE_XOR¶
Implements in-place TOS = TOS1 ^ TOS.



INPLACE_OR¶
Implements in-place TOS = TOS1 | TOS.



STORE_SUBSCR¶
Implements TOS1[TOS] = TOS2.



DELETE_SUBSCR¶
Implements del TOS1[TOS].

Coroutine opcodes


GET_AWAITABLE¶
Implements TOS = get_awaitable(TOS), where get_awaitable(o)
returns o if o is a coroutine object or a generator object with
the CO_ITERABLE_COROUTINE flag, or resolves
o.__await__.

New in version 3.5.




GET_AITER¶
Implements TOS = TOS.__aiter__().

New in version 3.5.


Changed in version 3.7: Returning awaitable objects from __aiter__ is no longer
supported.




GET_ANEXT¶
Implements PUSH(get_awaitable(TOS.__anext__())).  See GET_AWAITABLE
for details about get_awaitable

New in version 3.5.




BEFORE_ASYNC_WITH¶
Resolves __aenter__ and __aexit__ from the object on top of the
stack.  Pushes __aexit__ and result of __aenter__() to the stack.

New in version 3.5.




SETUP_ASYNC_WITH¶
Creates a new frame object.

New in version 3.5.


Miscellaneous opcodes


PRINT_EXPR¶
Implements the expression statement for the interactive mode.  TOS is removed
from the stack and printed.  In non-interactive mode, an expression statement
is terminated with POP_TOP.



BREAK_LOOP¶
Terminates a loop due to a break statement.



CONTINUE_LOOP(target)¶
Continues a loop due to a continue statement.  target is the
address to jump to (which should be a FOR_ITER instruction).



SET_ADD(i)¶
Calls set.add(TOS1[-i], TOS).  Used to implement set comprehensions.



LIST_APPEND(i)¶
Calls list.append(TOS[-i], TOS).  Used to implement list comprehensions.



MAP_ADD(i)¶
Calls dict.setitem(TOS1[-i], TOS, TOS1).  Used to implement dict
comprehensions.

New in version 3.1.


For all of the SET_ADD, LIST_APPEND and MAP_ADD
instructions, while the added value or key/value pair is popped off, the
container object remains on the stack so that it is available for further
iterations of the loop.


RETURN_VALUE¶
Returns with TOS to the caller of the function.



YIELD_VALUE¶
Pops TOS and yields it from a generator.



YIELD_FROM¶
Pops TOS and delegates to it as a subiterator from a generator.

New in version 3.3.




SETUP_ANNOTATIONS¶
Checks whether __annotations__ is defined in locals(), if not it is
set up to an empty dict. This opcode is only emitted if a class
or module body contains variable annotations
statically.

New in version 3.6.




IMPORT_STAR¶
Loads all symbols not starting with '_' directly from the module TOS to
the local namespace. The module is popped after loading all names. This
opcode implements from module import *.



POP_BLOCK¶
Removes one block from the block stack.  Per frame, there is a stack of
blocks, denoting nested loops, try statements, and such.



POP_EXCEPT¶
Removes one block from the block stack. The popped block must be an exception
handler block, as implicitly created when entering an except handler.  In
addition to popping extraneous values from the frame stack, the last three
popped values are used to restore the exception state.



END_FINALLY¶
Terminates a finally clause.  The interpreter recalls whether the
exception has to be re-raised, or whether the function returns, and continues
with the outer-next block.



LOAD_BUILD_CLASS¶
Pushes builtins.__build_class__() onto the stack.  It is later called
by CALL_FUNCTION to construct a class.



SETUP_WITH(delta)¶
This opcode performs several operations before a with block starts.  First,
it loads __exit__() from the context manager and pushes it onto
the stack for later use by WITH_CLEANUP.  Then,
__enter__() is called, and a finally block pointing to delta
is pushed.  Finally, the result of calling the enter method is pushed onto
the stack.  The next opcode will either ignore it (POP_TOP), or
store it in (a) variable(s) (STORE_FAST, STORE_NAME, or
UNPACK_SEQUENCE).

New in version 3.2.




WITH_CLEANUP_START¶
Cleans up the stack when a with statement block exits.  TOS is the
context manager’s __exit__() bound method. Below TOS are 1–3 values
indicating how/why the finally clause was entered:

SECOND = None
(SECOND, THIRD) = (WHY_{RETURN,CONTINUE}), retval
SECOND = WHY_*; no retval below it
(SECOND, THIRD, FOURTH) = exc_info()

In the last case, TOS(SECOND, THIRD, FOURTH) is called, otherwise
TOS(None, None, None).  Pushes SECOND and result of the call
to the stack.



WITH_CLEANUP_FINISH¶
Pops exception type and result of ‘exit’ function call from the stack.
If the stack represents an exception, and the function call returns a
‘true’ value, this information is “zapped” and replaced with a single
WHY_SILENCED to prevent END_FINALLY from re-raising the
exception.  (But non-local gotos will still be resumed.)

All of the following opcodes use their arguments.


STORE_NAME(namei)¶
Implements name = TOS. namei is the index of name in the attribute
co_names of the code object. The compiler tries to use
STORE_FAST or STORE_GLOBAL if possible.



DELETE_NAME(namei)¶
Implements del name, where namei is the index into co_names
attribute of the code object.



UNPACK_SEQUENCE(count)¶
Unpacks TOS into count individual values, which are put onto the stack
right-to-left.



UNPACK_EX(counts)¶
Implements assignment with a starred target: Unpacks an iterable in TOS into
individual values, where the total number of values can be smaller than the
number of items in the iterable: one of the new values will be a list of all
leftover items.
The low byte of counts is the number of values before the list value, the
high byte of counts the number of values after it.  The resulting values
are put onto the stack right-to-left.



STORE_ATTR(namei)¶
Implements TOS.name = TOS1, where namei is the index of name in
co_names.



DELETE_ATTR(namei)¶
Implements del TOS.name, using namei as index into co_names.



STORE_GLOBAL(namei)¶
Works as STORE_NAME, but stores the name as a global.



DELETE_GLOBAL(namei)¶
Works as DELETE_NAME, but deletes a global name.



LOAD_CONST(consti)¶
Pushes co_consts[consti] onto the stack.



LOAD_NAME(namei)¶
Pushes the value associated with co_names[namei] onto the stack.



BUILD_TUPLE(count)¶
Creates a tuple consuming count items from the stack, and pushes the
resulting tuple onto the stack.



BUILD_LIST(count)¶
Works as BUILD_TUPLE, but creates a list.



BUILD_SET(count)¶
Works as BUILD_TUPLE, but creates a set.



BUILD_MAP(count)¶
Pushes a new dictionary object onto the stack.  Pops 2 * count items
so that the dictionary holds count entries:
{..., TOS3: TOS2, TOS1: TOS}.

Changed in version 3.5: The dictionary is created from stack items instead of creating an
empty dictionary pre-sized to hold count items.




BUILD_CONST_KEY_MAP(count)¶
The version of BUILD_MAP specialized for constant keys.  count
values are consumed from the stack.  The top element on the stack contains
a tuple of keys.

New in version 3.6.




BUILD_STRING(count)¶
Concatenates count strings from the stack and pushes the resulting string
onto the stack.

New in version 3.6.




BUILD_TUPLE_UNPACK(count)¶
Pops count iterables from the stack, joins them in a single tuple,
and pushes the result.  Implements iterable unpacking in tuple
displays (*x, *y, *z).

New in version 3.5.




BUILD_TUPLE_UNPACK_WITH_CALL(count)¶
This is similar to BUILD_TUPLE_UNPACK,
but is used for f(*x, *y, *z) call syntax. The stack item at position
count + 1 should be the corresponding callable f.

New in version 3.6.




BUILD_LIST_UNPACK(count)¶
This is similar to BUILD_TUPLE_UNPACK, but pushes a list
instead of tuple.  Implements iterable unpacking in list
displays [*x, *y, *z].

New in version 3.5.




BUILD_SET_UNPACK(count)¶
This is similar to BUILD_TUPLE_UNPACK, but pushes a set
instead of tuple.  Implements iterable unpacking in set
displays {*x, *y, *z}.

New in version 3.5.




BUILD_MAP_UNPACK(count)¶
Pops count mappings from the stack, merges them into a single dictionary,
and pushes the result.  Implements dictionary unpacking in dictionary
displays {**x, **y, **z}.

New in version 3.5.




BUILD_MAP_UNPACK_WITH_CALL(count)¶
This is similar to BUILD_MAP_UNPACK,
but is used for f(**x, **y, **z) call syntax.  The stack item at
position count + 2 should be the corresponding callable f.

New in version 3.5.


Changed in version 3.6: The position of the callable is determined by adding 2 to the opcode
argument instead of encoding it in the second byte of the argument.




LOAD_ATTR(namei)¶
Replaces TOS with getattr(TOS, co_names[namei]).



COMPARE_OP(opname)¶
Performs a Boolean operation.  The operation name can be found in
cmp_op[opname].



IMPORT_NAME(namei)¶
Imports the module co_names[namei].  TOS and TOS1 are popped and provide
the fromlist and level arguments of __import__().  The module
object is pushed onto the stack.  The current namespace is not affected: for
a proper import statement, a subsequent STORE_FAST instruction
modifies the namespace.



IMPORT_FROM(namei)¶
Loads the attribute co_names[namei] from the module found in TOS. The
resulting object is pushed onto the stack, to be subsequently stored by a
STORE_FAST instruction.



JUMP_FORWARD(delta)¶
Increments bytecode counter by delta.



POP_JUMP_IF_TRUE(target)¶
If TOS is true, sets the bytecode counter to target.  TOS is popped.

New in version 3.1.




POP_JUMP_IF_FALSE(target)¶
If TOS is false, sets the bytecode counter to target.  TOS is popped.

New in version 3.1.




JUMP_IF_TRUE_OR_POP(target)¶
If TOS is true, sets the bytecode counter to target and leaves TOS on the
stack.  Otherwise (TOS is false), TOS is popped.

New in version 3.1.




JUMP_IF_FALSE_OR_POP(target)¶
If TOS is false, sets the bytecode counter to target and leaves TOS on the
stack.  Otherwise (TOS is true), TOS is popped.

New in version 3.1.




JUMP_ABSOLUTE(target)¶
Set bytecode counter to target.



FOR_ITER(delta)¶
TOS is an iterator.  Call its __next__() method.  If
this yields a new value, push it on the stack (leaving the iterator below
it).  If the iterator indicates it is exhausted TOS is popped, and the byte
code counter is incremented by delta.



LOAD_GLOBAL(namei)¶
Loads the global named co_names[namei] onto the stack.



SETUP_LOOP(delta)¶
Pushes a block for a loop onto the block stack.  The block spans from the
current instruction with a size of delta bytes.



SETUP_EXCEPT(delta)¶
Pushes a try block from a try-except clause onto the block stack. delta
points to the first except block.



SETUP_FINALLY(delta)¶
Pushes a try block from a try-except clause onto the block stack. delta
points to the finally block.



LOAD_FAST(var_num)¶
Pushes a reference to the local co_varnames[var_num] onto the stack.



STORE_FAST(var_num)¶
Stores TOS into the local co_varnames[var_num].



DELETE_FAST(var_num)¶
Deletes local co_varnames[var_num].



LOAD_CLOSURE(i)¶
Pushes a reference to the cell contained in slot i of the cell and free
variable storage.  The name of the variable is co_cellvars[i] if i is
less than the length of co_cellvars.  Otherwise it is co_freevars[i -
len(co_cellvars)].



LOAD_DEREF(i)¶
Loads the cell contained in slot i of the cell and free variable storage.
Pushes a reference to the object the cell contains on the stack.



LOAD_CLASSDEREF(i)¶
Much like LOAD_DEREF but first checks the locals dictionary before
consulting the cell.  This is used for loading free variables in class
bodies.

New in version 3.4.




STORE_DEREF(i)¶
Stores TOS into the cell contained in slot i of the cell and free variable
storage.



DELETE_DEREF(i)¶
Empties the cell contained in slot i of the cell and free variable storage.
Used by the del statement.

New in version 3.2.




RAISE_VARARGS(argc)¶
Raises an exception. argc indicates the number of arguments to the raise
statement, ranging from 0 to 3.  The handler will find the traceback as TOS2,
the parameter as TOS1, and the exception as TOS.



CALL_FUNCTION(argc)¶
Calls a callable object with positional arguments.
argc indicates the number of positional arguments.
The top of the stack contains positional arguments, with the right-most
argument on top.  Below the arguments is a callable object to call.
CALL_FUNCTION pops all arguments and the callable object off the stack,
calls the callable object with those arguments, and pushes the return value
returned by the callable object.

Changed in version 3.6: This opcode is used only for calls with positional arguments.




CALL_FUNCTION_KW(argc)¶
Calls a callable object with positional (if any) and keyword arguments.
argc indicates the total number of positional and keyword arguments.
The top element on the stack contains a tuple of keyword argument names.
Below that are keyword arguments in the order corresponding to the tuple.
Below that are positional arguments, with the right-most parameter on
top.  Below the arguments is a callable object to call.
CALL_FUNCTION_KW pops all arguments and the callable object off the stack,
calls the callable object with those arguments, and pushes the return value
returned by the callable object.

Changed in version 3.6: Keyword arguments are packed in a tuple instead of a dictionary,
argc indicates the total number of arguments.




CALL_FUNCTION_EX(flags)¶
Calls a callable object with variable set of positional and keyword
arguments.  If the lowest bit of flags is set, the top of the stack
contains a mapping object containing additional keyword arguments.
Below that is an iterable object containing positional arguments and
a callable object to call.  BUILD_MAP_UNPACK_WITH_CALL and
BUILD_TUPLE_UNPACK_WITH_CALL can be used for merging multiple
mapping objects and iterables containing arguments.
Before the callable is called, the mapping object and iterable object
are each “unpacked” and their contents passed in as keyword and
positional arguments respectively.
CALL_FUNCTION_EX pops all arguments and the callable object off the stack,
calls the callable object with those arguments, and pushes the return value
returned by the callable object.

New in version 3.6.




LOAD_METHOD(namei)¶
Loads a method named co_names[namei] from TOS object. TOS is popped and
method and TOS are pushed when interpreter can call unbound method directly.
TOS will be used as the first argument (self) by CALL_METHOD.
Otherwise, NULL and  method is pushed (method is bound method or
something else).

New in version 3.7.




CALL_METHOD(argc)¶
Calls a method.  argc is number of positional arguments.
Keyword arguments are not supported.  This opcode is designed to be used
with LOAD_METHOD.  Positional arguments are on top of the stack.
Below them, two items described in LOAD_METHOD on the stack.
All of them are popped and return value is pushed.

New in version 3.7.




MAKE_FUNCTION(argc)¶
Pushes a new function object on the stack.  From bottom to top, the consumed
stack must consist of values if the argument carries a specified flag value

0x01 a tuple of default values for positional-only and
positional-or-keyword parameters in positional order
0x02 a dictionary of keyword-only parameters’ default values
0x04 an annotation dictionary
0x08 a tuple containing cells for free variables, making a closure
the code associated with the function (at TOS1)
the qualified name of the function (at TOS)




BUILD_SLICE(argc)¶
Pushes a slice object on the stack.  argc must be 2 or 3.  If it is 2,
slice(TOS1, TOS) is pushed; if it is 3, slice(TOS2, TOS1, TOS) is
pushed. See the slice() built-in function for more information.



EXTENDED_ARG(ext)¶
Prefixes any opcode which has an argument too big to fit into the default two
bytes.  ext holds two additional bytes which, taken together with the
subsequent opcode’s argument, comprise a four-byte argument, ext being the
two most-significant bytes.



FORMAT_VALUE(flags)¶
Used for implementing formatted literal strings (f-strings).  Pops
an optional fmt_spec from the stack, then a required value.
flags is interpreted as follows:

(flags & 0x03) == 0x00: value is formatted as-is.
(flags & 0x03) == 0x01: call str() on value before
formatting it.
(flags & 0x03) == 0x02: call repr() on value before
formatting it.
(flags & 0x03) == 0x03: call ascii() on value before
formatting it.
(flags & 0x04) == 0x04: pop fmt_spec from the stack and use
it, else use an empty fmt_spec.

Formatting is performed using PyObject_Format().  The
result is pushed on the stack.

New in version 3.6.




HAVE_ARGUMENT¶
This is not really an opcode.  It identifies the dividing line between
opcodes which don’t use their argument and those that do
(< HAVE_ARGUMENT and >= HAVE_ARGUMENT, respectively).

Changed in version 3.6: Now every instruction has an argument, but opcodes < HAVE_ARGUMENT
ignore it. Before, only opcodes >= HAVE_ARGUMENT had an argument.


