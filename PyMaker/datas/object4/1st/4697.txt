link:
library/asyncio-sync.html#semaphore

docs:

Semaphore¶


class asyncio.Semaphore(value=1, *, loop=None)¶
A Semaphore object.  Not thread-safe.
A semaphore manages an internal counter which is decremented by each
acquire() call and incremented by each release() call.
The counter can never go below zero; when acquire() finds
that it is zero, it blocks, waiting until some task calls
release().
The optional value argument gives the initial value for the
internal counter (1 by default). If the given value is
less than 0 a ValueError is raised.
The preferred way to use a Semaphore is an async with
statement:
sem = asyncio.Semaphore(10)

# ... later
async with sem:
    # work with shared resource


which is equivalent to:
sem = asyncio.Semaphore(10)

# ... later
await sem.acquire()
try:
    # work with shared resource
finally:
    sem.release()




coroutine acquire()¶
Acquire a semaphore.
If the internal counter is greater than zero, decrement
it by one and return True immediately.  If it is zero, wait
until a release() is called and return True.



locked()¶
Returns True if semaphore can not be acquired immediately.



release()¶
Release a semaphore, incrementing the internal counter by one.
Can wake up a task waiting to acquire the semaphore.
Unlike BoundedSemaphore, Semaphore allows
making more release() calls than acquire() calls.


