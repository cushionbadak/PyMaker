link:
library/unittest.mock-examples.html#creating-a-mock-from-an-existing-object

docs:

Creating a Mock from an Existing Object¶
One problem with over use of mocking is that it couples your tests to the
implementation of your mocks rather than your real code. Suppose you have a
class that implements some_method. In a test for another class, you
provide a mock of this object that also provides some_method. If later
you refactor the first class, so that it no longer has some_method - then
your tests will continue to pass even though your code is now broken!
Mock allows you to provide an object as a specification for the mock,
using the spec keyword argument. Accessing methods / attributes on the
mock that don’t exist on your specification object will immediately raise an
attribute error. If you change the implementation of your specification, then
tests that use that class will start failing immediately without you having to
instantiate the class in those tests.
>>> mock = Mock(spec=SomeClass)
>>> mock.old_method()
Traceback (most recent call last):
   ...
AttributeError: object has no attribute 'old_method'


Using a specification also enables a smarter matching of calls made to the
mock, regardless of whether some parameters were passed as positional or
named arguments:
>>> def f(a, b, c): pass
...
>>> mock = Mock(spec=f)
>>> mock(1, 2, 3)
<Mock name='mock()' id='140161580456576'>
>>> mock.assert_called_with(a=1, b=2, c=3)


If you want this smarter matching to also work with method calls on the mock,
you can use auto-speccing.
If you want a stronger form of specification that prevents the setting
of arbitrary attributes as well as the getting of them then you can use
spec_set instead of spec.
