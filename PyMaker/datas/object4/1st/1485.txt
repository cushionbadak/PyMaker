link:
library/enum.html#using-automatic-values

docs:

Using automatic valuesÂ¶
If the exact value is unimportant you can use auto:
>>> from enum import Enum, auto
>>> class Color(Enum):
...     RED = auto()
...     BLUE = auto()
...     GREEN = auto()
...
>>> list(Color)
[<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


The values are chosen by _generate_next_value_(), which can be
overridden:
>>> class AutoName(Enum):
...     def _generate_next_value_(name, start, count, last_values):
...         return name
...
>>> class Ordinal(AutoName):
...     NORTH = auto()
...     SOUTH = auto()
...     EAST = auto()
...     WEST = auto()
...
>>> list(Ordinal)
[<Ordinal.NORTH: 'NORTH'>, <Ordinal.SOUTH: 'SOUTH'>, <Ordinal.EAST: 'EAST'>, <Ordinal.WEST: 'WEST'>]



Note
The goal of the default _generate_next_value_() methods is to provide
the next int in sequence with the last int provided, but
the way it does this is an implementation detail and may change.

