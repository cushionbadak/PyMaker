link:
library/xml.sax.handler.html#contenthandler-objects

docs:

ContentHandler Objects¶
Users are expected to subclass ContentHandler to support their
application.  The following methods are called by the parser on the appropriate
events in the input document:


ContentHandler.setDocumentLocator(locator)¶
Called by the parser to give the application a locator for locating the origin
of document events.
SAX parsers are strongly encouraged (though not absolutely required) to supply a
locator: if it does so, it must supply the locator to the application by
invoking this method before invoking any of the other methods in the
DocumentHandler interface.
The locator allows the application to determine the end position of any
document-related event, even if the parser is not reporting an error. Typically,
the application will use this information for reporting its own errors (such as
character content that does not match an application’s business rules). The
information returned by the locator is probably not sufficient for use with a
search engine.
Note that the locator will return correct information only during the invocation
of the events in this interface. The application should not attempt to use it at
any other time.



ContentHandler.startDocument()¶
Receive notification of the beginning of a document.
The SAX parser will invoke this method only once, before any other methods in
this interface or in DTDHandler (except for setDocumentLocator()).



ContentHandler.endDocument()¶
Receive notification of the end of a document.
The SAX parser will invoke this method only once, and it will be the last method
invoked during the parse. The parser shall not invoke this method until it has
either abandoned parsing (because of an unrecoverable error) or reached the end
of input.



ContentHandler.startPrefixMapping(prefix, uri)¶
Begin the scope of a prefix-URI Namespace mapping.
The information from this event is not necessary for normal Namespace
processing: the SAX XML reader will automatically replace prefixes for element
and attribute names when the feature_namespaces feature is enabled (the
default).
There are cases, however, when applications need to use prefixes in character
data or in attribute values, where they cannot safely be expanded automatically;
the startPrefixMapping() and endPrefixMapping() events supply the
information to the application to expand prefixes in those contexts itself, if
necessary.
Note that startPrefixMapping() and endPrefixMapping() events are not
guaranteed to be properly nested relative to each-other: all
startPrefixMapping() events will occur before the corresponding
startElement() event, and all endPrefixMapping() events will occur
after the corresponding endElement() event, but their order is not
guaranteed.



ContentHandler.endPrefixMapping(prefix)¶
End the scope of a prefix-URI mapping.
See startPrefixMapping() for details. This event will always occur after
the corresponding endElement() event, but the order of
endPrefixMapping() events is not otherwise guaranteed.



ContentHandler.startElement(name, attrs)¶
Signals the start of an element in non-namespace mode.
The name parameter contains the raw XML 1.0 name of the element type as a
string and the attrs parameter holds an object of the
Attributes
interface (see The Attributes Interface) containing the attributes of
the element.  The object passed as attrs may be re-used by the parser; holding
on to a reference to it is not a reliable way to keep a copy of the attributes.
To keep a copy of the attributes, use the copy() method of the attrs
object.



ContentHandler.endElement(name)¶
Signals the end of an element in non-namespace mode.
The name parameter contains the name of the element type, just as with the
startElement() event.



ContentHandler.startElementNS(name, qname, attrs)¶
Signals the start of an element in namespace mode.
The name parameter contains the name of the element type as a (uri,
localname) tuple, the qname parameter contains the raw XML 1.0 name used in
the source document, and the attrs parameter holds an instance of the
AttributesNS interface (see
The AttributesNS Interface)
containing the attributes of the element.  If no namespace is associated with
the element, the uri component of name will be None.  The object passed
as attrs may be re-used by the parser; holding on to a reference to it is not
a reliable way to keep a copy of the attributes.  To keep a copy of the
attributes, use the copy() method of the attrs object.
Parsers may set the qname parameter to None, unless the
feature_namespace_prefixes feature is activated.



ContentHandler.endElementNS(name, qname)¶
Signals the end of an element in namespace mode.
The name parameter contains the name of the element type, just as with the
startElementNS() method, likewise the qname parameter.



ContentHandler.characters(content)¶
Receive notification of character data.
The Parser will call this method to report each chunk of character data. SAX
parsers may return all contiguous character data in a single chunk, or they may
split it into several chunks; however, all of the characters in any single event
must come from the same external entity so that the Locator provides useful
information.
content may be a string or bytes instance; the expat reader module
always produces strings.

Note
The earlier SAX 1 interface provided by the Python XML Special Interest Group
used a more Java-like interface for this method.  Since most parsers used from
Python did not take advantage of the older interface, the simpler signature was
chosen to replace it.  To convert old code to the new interface, use content
instead of slicing content with the old offset and length parameters.




ContentHandler.ignorableWhitespace(whitespace)¶
Receive notification of ignorable whitespace in element content.
Validating Parsers must use this method to report each chunk of ignorable
whitespace (see the W3C XML 1.0 recommendation, section 2.10): non-validating
parsers may also use this method if they are capable of parsing and using
content models.
SAX parsers may return all contiguous whitespace in a single chunk, or they may
split it into several chunks; however, all of the characters in any single event
must come from the same external entity, so that the Locator provides useful
information.



ContentHandler.processingInstruction(target, data)¶
Receive notification of a processing instruction.
The Parser will invoke this method once for each processing instruction found:
note that processing instructions may occur before or after the main document
element.
A SAX parser should never report an XML declaration (XML 1.0, section 2.8) or a
text declaration (XML 1.0, section 4.3.1) using this method.



ContentHandler.skippedEntity(name)¶
Receive notification of a skipped entity.
The Parser will invoke this method once for each entity skipped. Non-validating
processors may skip entities if they have not seen the declarations (because,
for example, the entity was declared in an external DTD subset). All processors
may skip external entities, depending on the values of the
feature_external_ges and the feature_external_pes properties.

