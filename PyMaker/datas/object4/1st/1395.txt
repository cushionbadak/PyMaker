link:
library/types.html#types.prepare_class

docs:

<dt id="types.prepare_class">
<code class="descclassname">types.</code><code class="descname">prepare_class</code><span class="sig-paren">(</span><em>name</em>, <em>bases=()</em>, <em>kwds=None</em><span class="sig-paren">)</span><a class="headerlink" href="#types.prepare_class" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Calculates the appropriate metaclass and creates the class namespace.</p>
<p>The arguments are the components that make up a class definition header:
the class name, the base classes (in order) and the keyword arguments
(such as <code class="docutils literal notranslate"><span class="pre">metaclass</span></code>).</p>
<p>The return value is a 3-tuple: <code class="docutils literal notranslate"><span class="pre">metaclass,</span> <span class="pre">namespace,</span> <span class="pre">kwds</span></code></p>
<p><em>metaclass</em> is the appropriate metaclass, <em>namespace</em> is the
prepared class namespace and <em>kwds</em> is an updated copy of the passed
in <em>kwds</em> argument with any <code class="docutils literal notranslate"><span class="pre">'metaclass'</span></code> entry removed. If no <em>kwds</em>
argument is passed in, this will be an empty dict.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.3.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6: </span>The default value for the <code class="docutils literal notranslate"><span class="pre">namespace</span></code> element of the returned
tuple has changed.  Now an insertion-order-preserving mapping is
used when the metaclass does not have a <code class="docutils literal notranslate"><span class="pre">__prepare__</span></code> method.</p>
</div>
</dd>