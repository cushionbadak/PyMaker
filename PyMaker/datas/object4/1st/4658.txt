link:
library/asyncio-stream.html#streamwriter

docs:

StreamWriter¶


class asyncio.StreamWriter¶
Represents a writer object that provides APIs to write data
to the IO stream.
It is not recommended to instantiate StreamWriter objects
directly; use open_connection() and start_server()
instead.


can_write_eof()¶
Return True if the underlying transport supports
the write_eof() method, False otherwise.



write_eof()¶
Close the write end of the stream after the buffered write
data is flushed.



transport¶
Return the underlying asyncio transport.



get_extra_info(name, default=None)¶
Access optional transport information; see
BaseTransport.get_extra_info() for details.



write(data)¶
Write data to the stream.
This method is not subject to flow control.  Calls to write() should
be followed by drain().



writelines(data)¶
Write a list (or any iterable) of bytes to the stream.
This method is not subject to flow control. Calls to writelines()
should be followed by drain().



coroutine drain()¶
Wait until it is appropriate to resume writing to the stream.
Example:
writer.write(data)
await writer.drain()


This is a flow control method that interacts with the underlying
IO write buffer.  When the size of the buffer reaches
the high watermark, drain() blocks until the size of the
buffer is drained down to the low watermark and writing can
be resumed.  When there is nothing to wait for, the drain()
returns immediately.



close()¶
Close the stream.



is_closing()¶
Return True if the stream is closed or in the process of
being closed.

New in version 3.7.




coroutine wait_closed()¶
Wait until the stream is closed.
Should be called after close() to wait until the underlying
connection is closed.

New in version 3.7.



