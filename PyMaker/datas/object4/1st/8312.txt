link:
library/typing.html#typing.NamedTuple

docs:


class typing.NamedTupleÂ¶
Typed version of collections.namedtuple().
Usage:
class Employee(NamedTuple):
    name: str
    id: int


This is equivalent to:
Employee = collections.namedtuple('Employee', ['name', 'id'])


To give a field a default value, you can assign to it in the class body:
class Employee(NamedTuple):
    name: str
    id: int = 3

employee = Employee('Guido')
assert employee.id == 3


Fields with a default value must come after any fields without a default.
The resulting class has two extra attributes: _field_types,
giving a dict mapping field names to types, and _field_defaults, a dict
mapping field names to default values.  (The field names are in the
_fields attribute, which is part of the namedtuple API.)
NamedTuple subclasses can also have docstrings and methods:
class Employee(NamedTuple):
    """Represents an employee."""
    name: str
    id: int = 3

    def __repr__(self) -> str:
        return f'<Employee {self.name}, id={self.id}>'


Backward-compatible usage:
Employee = NamedTuple('Employee', [('name', str), ('id', int)])



Changed in version 3.6: Added support for PEP 526 variable annotation syntax.


Changed in version 3.6.1: Added support for default values, methods, and docstrings.

