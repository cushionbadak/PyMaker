link:
library/contextvars.html#contextvars.Context.run

docs:


run(callable, *args, **kwargs)Â¶
Execute callable(*args, **kwargs) code in the context object
the run method is called on.  Return the result of the execution
or propagate an exception if one occurred.
Any changes to any context variables that callable makes will
be contained in the context object:
var = ContextVar('var')
var.set('spam')

def main():
    # 'var' was set to 'spam' before
    # calling 'copy_context()' and 'ctx.run(main)', so:
    # var.get() == ctx[var] == 'spam'

    var.set('ham')

    # Now, after setting 'var' to 'ham':
    # var.get() == ctx[var] == 'ham'

ctx = copy_context()

# Any changes that the 'main' function makes to 'var'
# will be contained in 'ctx'.
ctx.run(main)

# The 'main()' function was run in the 'ctx' context,
# so changes to 'var' are contained in it:
# ctx[var] == 'ham'

# However, outside of 'ctx', 'var' is still set to 'spam':
# var.get() == 'spam'


The method raises a RuntimeError when called on the same
context object from more than one OS thread, or when called
recursively.
