link:
library/contextvars.html#contextvars.Context.run

docs:

<dt id="contextvars.Context.run">
<code class="descname">run</code><span class="sig-paren">(</span><em>callable</em>, <em>*args</em>, <em>**kwargs</em><span class="sig-paren">)</span><a class="headerlink" href="#contextvars.Context.run" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Execute <code class="docutils literal notranslate"><span class="pre">callable(*args,</span> <span class="pre">**kwargs)</span></code> code in the context object
the <em>run</em> method is called on.  Return the result of the execution
or propagate an exception if one occurred.</p>
<p>Any changes to any context variables that <em>callable</em> makes will
be contained in the context object:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">var</span> <span class="o">=</span> <span class="n">ContextVar</span><span class="p">(</span><span class="s1">'var'</span><span class="p">)</span>
<span class="n">var</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">'spam'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># 'var' was set to 'spam' before</span>
    <span class="c1"># calling 'copy_context()' and 'ctx.run(main)', so:</span>
    <span class="c1"># var.get() == ctx[var] == 'spam'</span>

    <span class="n">var</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">'ham'</span><span class="p">)</span>

    <span class="c1"># Now, after setting 'var' to 'ham':</span>
    <span class="c1"># var.get() == ctx[var] == 'ham'</span>

<span class="n">ctx</span> <span class="o">=</span> <span class="n">copy_context</span><span class="p">()</span>

<span class="c1"># Any changes that the 'main' function makes to 'var'</span>
<span class="c1"># will be contained in 'ctx'.</span>
<span class="n">ctx</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">)</span>

<span class="c1"># The 'main()' function was run in the 'ctx' context,</span>
<span class="c1"># so changes to 'var' are contained in it:</span>
<span class="c1"># ctx[var] == 'ham'</span>

<span class="c1"># However, outside of 'ctx', 'var' is still set to 'spam':</span>
<span class="c1"># var.get() == 'spam'</span>
</pre></div>
</div>
<p>The method raises a <a class="reference internal" href="exceptions.html#RuntimeError" title="RuntimeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">RuntimeError</span></code></a> when called on the same
context object from more than one OS thread, or when called
recursively.</p>
</dd>