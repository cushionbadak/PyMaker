link:
library/zipfile.html#zipfile-objects

docs:

ZipFile Objects¶


class zipfile.ZipFile(file, mode='r', compression=ZIP_STORED, allowZip64=True, compresslevel=None)¶
Open a ZIP file, where file can be a path to a file (a string), a
file-like object or a path-like object.
The mode parameter should be 'r' to read an existing
file, 'w' to truncate and write a new file, 'a' to append to an
existing file, or 'x' to exclusively create and write a new file.
If mode is 'x' and file refers to an existing file,
a FileExistsError will be raised.
If mode is 'a' and file refers to an existing ZIP
file, then additional files are added to it.  If file does not refer to a
ZIP file, then a new ZIP archive is appended to the file.  This is meant for
adding a ZIP archive to another file (such as python.exe).  If
mode is 'a' and the file does not exist at all, it is created.
If mode is 'r' or 'a', the file should be seekable.
compression is the ZIP compression method to use when writing the archive,
and should be ZIP_STORED, ZIP_DEFLATED,
ZIP_BZIP2 or ZIP_LZMA; unrecognized
values will cause NotImplementedError to be raised.  If
ZIP_DEFLATED, ZIP_BZIP2 or ZIP_LZMA is specified
but the corresponding module (zlib, bz2 or lzma) is not
available, RuntimeError is raised. The default is ZIP_STORED.
If allowZip64 is True (the default) zipfile will create ZIP files that
use the ZIP64 extensions when the zipfile is larger than 4 GiB. If it is
false zipfile will raise an exception when the ZIP file would
require ZIP64 extensions.
The compresslevel parameter controls the compression level to use when
writing files to the archive.
When using ZIP_STORED or ZIP_LZMA it has no effect.
When using ZIP_DEFLATED integers 0 through 9 are accepted
(see zlib for more information).
When using ZIP_BZIP2 integers 1 through 9 are accepted
(see bz2 for more information).
If the file is created with mode 'w', 'x' or 'a' and then
closed without adding any files to the archive, the appropriate
ZIP structures for an empty archive will be written to the file.
ZipFile is also a context manager and therefore supports the
with statement.  In the example, myzip is closed after the
with statement’s suite is finished—even if an exception occurs:
with ZipFile('spam.zip', 'w') as myzip:
    myzip.write('eggs.txt')



New in version 3.2: Added the ability to use ZipFile as a context manager.


Changed in version 3.3: Added support for bzip2 and lzma compression.


Changed in version 3.4: ZIP64 extensions are enabled by default.


Changed in version 3.5: Added support for writing to unseekable streams.
Added support for the 'x' mode.


Changed in version 3.6: Previously, a plain RuntimeError was raised for unrecognized
compression values.


Changed in version 3.6.2: The file parameter accepts a path-like object.


Changed in version 3.7: Add the compresslevel parameter.




ZipFile.close()¶
Close the archive file.  You must call close() before exiting your program
or essential records will not be written.



ZipFile.getinfo(name)¶
Return a ZipInfo object with information about the archive member
name.  Calling getinfo() for a name not currently contained in the
archive will raise a KeyError.



ZipFile.infolist()¶
Return a list containing a ZipInfo object for each member of the
archive.  The objects are in the same order as their entries in the actual ZIP
file on disk if an existing archive was opened.



ZipFile.namelist()¶
Return a list of archive members by name.



ZipFile.open(name, mode='r', pwd=None, *, force_zip64=False)¶
Access a member of the archive as a binary file-like object.  name
can be either the name of a file within the archive or a ZipInfo
object.  The mode parameter, if included, must be 'r' (the default)
or 'w'.  pwd is the password used to decrypt encrypted ZIP files.
open() is also a context manager and therefore supports the
with statement:
with ZipFile('spam.zip') as myzip:
    with myzip.open('eggs.txt') as myfile:
        print(myfile.read())


With mode 'r' the file-like object
(ZipExtFile) is read-only and provides the following methods:
read(), readline(),
readlines(), seek(),
tell(), __iter__(), __next__().
These objects can operate independently of the ZipFile.
With mode='w', a writable file handle is returned, which supports the
write() method.  While a writable file handle is open,
attempting to read or write other files in the ZIP file will raise a
ValueError.
When writing a file, if the file size is not known in advance but may exceed
2 GiB, pass force_zip64=True to ensure that the header format is
capable of supporting large files.  If the file size is known in advance,
construct a ZipInfo object with file_size set, and
use that as the name parameter.

Note
The open(), read() and extract() methods can take a filename
or a ZipInfo object.  You will appreciate this when trying to read a
ZIP file that contains members with duplicate names.


Changed in version 3.6: Removed support of mode='U'.  Use io.TextIOWrapper for reading
compressed text files in universal newlines mode.


Changed in version 3.6: open() can now be used to write files into the archive with the
mode='w' option.


Changed in version 3.6: Calling open() on a closed ZipFile will raise a ValueError.
Previously, a RuntimeError was raised.




ZipFile.extract(member, path=None, pwd=None)¶
Extract a member from the archive to the current working directory; member
must be its full name or a ZipInfo object.  Its file information is
extracted as accurately as possible.  path specifies a different directory
to extract to.  member can be a filename or a ZipInfo object.
pwd is the password used for encrypted files.
Returns the normalized path created (a directory or new file).

Note
If a member filename is an absolute path, a drive/UNC sharepoint and
leading (back)slashes will be stripped, e.g.: ///foo/bar becomes
foo/bar on Unix, and C:\foo\bar becomes foo\bar on Windows.
And all ".." components in a member filename will be removed, e.g.:
../../foo../../ba..r becomes foo../ba..r.  On Windows illegal
characters (:, <, >, |, ", ?, and *)
replaced by underscore (_).


Changed in version 3.6: Calling extract() on a closed ZipFile will raise a
ValueError.  Previously, a RuntimeError was raised.


Changed in version 3.6.2: The path parameter accepts a path-like object.




ZipFile.extractall(path=None, members=None, pwd=None)¶
Extract all members from the archive to the current working directory.  path
specifies a different directory to extract to.  members is optional and must
be a subset of the list returned by namelist().  pwd is the password
used for encrypted files.

Warning
Never extract archives from untrusted sources without prior inspection.
It is possible that files are created outside of path, e.g. members
that have absolute filenames starting with "/" or filenames with two
dots "..".  This module attempts to prevent that.
See extract() note.


Changed in version 3.6: Calling extractall() on a closed ZipFile will raise a
ValueError.  Previously, a RuntimeError was raised.


Changed in version 3.6.2: The path parameter accepts a path-like object.




ZipFile.printdir()¶
Print a table of contents for the archive to sys.stdout.



ZipFile.setpassword(pwd)¶
Set pwd as default password to extract encrypted files.



ZipFile.read(name, pwd=None)¶
Return the bytes of the file name in the archive.  name is the name of the
file in the archive, or a ZipInfo object.  The archive must be open for
read or append. pwd is the password used for encrypted  files and, if specified,
it will override the default password set with setpassword().  Calling
read() on a ZipFile that uses a compression method other than
ZIP_STORED, ZIP_DEFLATED, ZIP_BZIP2 or
ZIP_LZMA will raise a NotImplementedError. An error will also
be raised if the corresponding compression module is not available.

Changed in version 3.6: Calling read() on a closed ZipFile will raise a ValueError.
Previously, a RuntimeError was raised.




ZipFile.testzip()¶
Read all the files in the archive and check their CRC’s and file headers.
Return the name of the first bad file, or else return None.

Changed in version 3.6: Calling testzip() on a closed ZipFile will raise a
ValueError.  Previously, a RuntimeError was raised.




ZipFile.write(filename, arcname=None, compress_type=None, compresslevel=None)¶
Write the file named filename to the archive, giving it the archive name
arcname (by default, this will be the same as filename, but without a drive
letter and with leading path separators removed).  If given, compress_type
overrides the value given for the compression parameter to the constructor for
the new entry. Similarly, compresslevel will override the constructor if
given.
The archive must be open with mode 'w', 'x' or 'a'.

Note
Archive names should be relative to the archive root, that is, they should not
start with a path separator.


Note
If arcname (or filename, if arcname is  not given) contains a null
byte, the name of the file in the archive will be truncated at the null byte.


Changed in version 3.6: Calling write() on a ZipFile created with mode 'r' or
a closed ZipFile will raise a ValueError.  Previously,
a RuntimeError was raised.




ZipFile.writestr(zinfo_or_arcname, data, compress_type=None, compresslevel=None)¶
Write a file into the archive.  The contents is data, which may be either
a str or a bytes instance; if it is a str,
it is encoded as UTF-8 first.  zinfo_or_arcname is either the file
name it will be given in the archive, or a ZipInfo instance.  If it’s
an instance, at least the filename, date, and time must be given.  If it’s a
name, the date and time is set to the current date and time.
The archive must be opened with mode 'w', 'x' or 'a'.
If given, compress_type overrides the value given for the compression
parameter to the constructor for the new entry, or in the zinfo_or_arcname
(if that is a ZipInfo instance). Similarly, compresslevel will
override the constructor if given.

Note
When passing a ZipInfo instance as the zinfo_or_arcname parameter,
the compression method used will be that specified in the compress_type
member of the given ZipInfo instance.  By default, the
ZipInfo constructor sets this member to ZIP_STORED.


Changed in version 3.2: The compress_type argument.


Changed in version 3.6: Calling writestr() on a ZipFile created with mode 'r' or
a closed ZipFile will raise a ValueError.  Previously,
a RuntimeError was raised.


The following data attributes are also available:


ZipFile.filename¶
Name of the ZIP file.



ZipFile.debug¶
The level of debug output to use.  This may be set from 0 (the default, no
output) to 3 (the most output).  Debugging information is written to
sys.stdout.



ZipFile.comment¶
The comment associated with the ZIP file as a bytes object.
If assigning a comment to a
ZipFile instance created with mode 'w', 'x' or 'a',
it should be no longer than 65535 bytes.  Comments longer than this will be
truncated.

