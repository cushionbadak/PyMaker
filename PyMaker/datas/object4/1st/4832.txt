link:
library/asyncio-eventloop.html#asyncio.loop.subprocess_exec

docs:


coroutine loop.subprocess_exec(protocol_factory, *args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs)¶
Create a subprocess from one or more string arguments specified by
args.
args must be a list of strings represented by:

str;
or bytes, encoded to the
filesystem encoding.

The first string specifies the program executable,
and the remaining strings specify the arguments.  Together, string
arguments form the argv of the program.
This is similar to the standard library subprocess.Popen
class called with shell=False and the list of strings passed as
the first argument; however, where Popen takes
a single argument which is list of strings, subprocess_exec
takes multiple string arguments.
The protocol_factory must be a callable returning a subclass of the
asyncio.SubprocessProtocol class.
Other parameters:

stdin: either a file-like object representing a pipe to be
connected to the subprocess’s standard input stream using
connect_write_pipe(), or the
subprocess.PIPE  constant (default). By default a new
pipe will be created and connected.

stdout: either a file-like object representing the pipe to be
connected to the subprocess’s standard output stream using
connect_read_pipe(), or the
subprocess.PIPE constant (default). By default a new pipe
will be created and connected.

stderr: either a file-like object representing the pipe to be
connected to the subprocess’s standard error stream using
connect_read_pipe(), or one of
subprocess.PIPE (default) or subprocess.STDOUT
constants.
By default a new pipe will be created and connected. When
subprocess.STDOUT is specified, the subprocess’ standard
error stream will be connected to the same pipe as the standard
output stream.

All other keyword arguments are passed to subprocess.Popen
without interpretation, except for bufsize, universal_newlines
and shell, which should not be specified at all.


See the constructor of the subprocess.Popen class
for documentation on other arguments.
Returns a pair of (transport, protocol), where transport
conforms to the asyncio.SubprocessTransport base class and
protocol is an object instantiated by the protocol_factory.
