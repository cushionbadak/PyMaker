link:
library/contextvars.html#contextvars.ContextVar

docs:

<dt id="contextvars.ContextVar">
<em class="property">class </em><code class="descclassname">contextvars.</code><code class="descname">ContextVar</code><span class="sig-paren">(</span><em>name</em><span class="optional">[</span>, <em>*</em>, <em>default</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#contextvars.ContextVar" title="Permalink to this definition">¶</a></dt>
<dd><p>This class is used to declare a new Context Variable, e.g.:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">var</span><span class="p">:</span> <span class="n">ContextVar</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="n">ContextVar</span><span class="p">(</span><span class="s1">'var'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
</pre></div>
</div>
<p>The required <em>name</em> parameter is used for introspection and debug
purposes.</p>
<p>The optional keyword-only <em>default</em> parameter is returned by
<a class="reference internal" href="#contextvars.ContextVar.get" title="contextvars.ContextVar.get"><code class="xref py py-meth docutils literal notranslate"><span class="pre">ContextVar.get()</span></code></a> when no value for the variable is found
in the current context.</p>
<p><strong>Important:</strong> Context Variables should be created at the top module
level and never in closures.  <a class="reference internal" href="#contextvars.Context" title="contextvars.Context"><code class="xref py py-class docutils literal notranslate"><span class="pre">Context</span></code></a> objects hold strong
references to context variables which prevents context variables
from being properly garbage collected.</p>
<dl class="attribute">
<dt id="contextvars.ContextVar.name">
<code class="descname">name</code><a class="headerlink" href="#contextvars.ContextVar.name" title="Permalink to this definition">¶</a></dt>
<dd><p>The name of the variable.  This is a read-only property.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7.1.</span></p>
</div>
</dd></dl>
<dl class="method">
<dt id="contextvars.ContextVar.get">
<code class="descname">get</code><span class="sig-paren">(</span><span class="optional">[</span><em>default</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#contextvars.ContextVar.get" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a value for the context variable for the current context.</p>
<p>If there is no value for the variable in the current context,
the method will:</p>
<ul class="simple">
<li>return the value of the <em>default</em> argument of the method,
if provided; or</li>
<li>return the default value for the context variable,
if it was created with one; or</li>
<li>raise a <a class="reference internal" href="exceptions.html#LookupError" title="LookupError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">LookupError</span></code></a>.</li>
</ul>
</dd></dl>
<dl class="method">
<dt id="contextvars.ContextVar.set">
<code class="descname">set</code><span class="sig-paren">(</span><em>value</em><span class="sig-paren">)</span><a class="headerlink" href="#contextvars.ContextVar.set" title="Permalink to this definition">¶</a></dt>
<dd><p>Call to set a new value for the context variable in the current
context.</p>
<p>The required <em>value</em> argument is the new value for the context
variable.</p>
<p>Returns a <a class="reference internal" href="#contextvars.contextvars.Token" title="contextvars.contextvars.Token"><code class="xref py py-class docutils literal notranslate"><span class="pre">Token</span></code></a> object that can be used
to restore the variable to its previous value via the
<a class="reference internal" href="#contextvars.ContextVar.reset" title="contextvars.ContextVar.reset"><code class="xref py py-meth docutils literal notranslate"><span class="pre">ContextVar.reset()</span></code></a> method.</p>
</dd></dl>
<dl class="method">
<dt id="contextvars.ContextVar.reset">
<code class="descname">reset</code><span class="sig-paren">(</span><em>token</em><span class="sig-paren">)</span><a class="headerlink" href="#contextvars.ContextVar.reset" title="Permalink to this definition">¶</a></dt>
<dd><p>Reset the context variable to the value it had before the
<a class="reference internal" href="#contextvars.ContextVar.set" title="contextvars.ContextVar.set"><code class="xref py py-meth docutils literal notranslate"><span class="pre">ContextVar.set()</span></code></a> that created the <em>token</em> was used.</p>
<p>For example:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">var</span> <span class="o">=</span> <span class="n">ContextVar</span><span class="p">(</span><span class="s1">'var'</span><span class="p">)</span>

<span class="n">token</span> <span class="o">=</span> <span class="n">var</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">'new value'</span><span class="p">)</span>
<span class="c1"># code that uses 'var'; var.get() returns 'new value'.</span>
<span class="n">var</span><span class="o">.</span><span class="n">reset</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>

<span class="c1"># After the reset call the var has no value again, so</span>
<span class="c1"># var.get() would raise a LookupError.</span>
</pre></div>
</div>
</dd></dl>
</dd>