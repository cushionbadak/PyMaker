link:
library/enum.html#restricted-enum-subclassing

docs:

Restricted Enum subclassingÂ¶
A new Enum class must have one base Enum class, up to one concrete
data type, and as many object-based mixin classes as needed.  The
order of these base classes is:
class EnumName([mix-in, ...,] [data-type,] base-enum):
    pass


Also, subclassing an enumeration is allowed only if the enumeration does not define
any members.  So this is forbidden:
>>> class MoreColor(Color):
...     PINK = 17
...
Traceback (most recent call last):
...
TypeError: Cannot extend enumerations


But this is allowed:
>>> class Foo(Enum):
...     def some_behavior(self):
...         pass
...
>>> class Bar(Foo):
...     HAPPY = 1
...     SAD = 2
...


Allowing subclassing of enums that define members would lead to a violation of
some important invariants of types and instances.  On the other hand, it makes
sense to allow sharing some common behavior between a group of enumerations.
(See OrderedEnum for an example.)
