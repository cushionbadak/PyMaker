link:
library/email.headerregistry.html#email.headerregistry.BaseHeader

docs:

<dt id="email.headerregistry.BaseHeader">
<em class="property">class </em><code class="descclassname">email.headerregistry.</code><code class="descname">BaseHeader</code><span class="sig-paren">(</span><em>name</em>, <em>value</em><span class="sig-paren">)</span><a class="headerlink" href="#email.headerregistry.BaseHeader" title="Permalink to this definition">¶</a></dt>
<dd><p><em>name</em> and <em>value</em> are passed to <code class="docutils literal notranslate"><span class="pre">BaseHeader</span></code> from the
<a class="reference internal" href="email.policy.html#email.policy.EmailPolicy.header_factory" title="email.policy.EmailPolicy.header_factory"><code class="xref py py-attr docutils literal notranslate"><span class="pre">header_factory</span></code></a> call.  The string value of
any header object is the <em>value</em> fully decoded to unicode.</p>
<p>This base class defines the following read-only properties:</p>
<dl class="attribute">
<dt id="email.headerregistry.BaseHeader.name">
<code class="descname">name</code><a class="headerlink" href="#email.headerregistry.BaseHeader.name" title="Permalink to this definition">¶</a></dt>
<dd><p>The name of the header (the portion of the field before the ‘:’).  This
is exactly the value passed in the
<a class="reference internal" href="email.policy.html#email.policy.EmailPolicy.header_factory" title="email.policy.EmailPolicy.header_factory"><code class="xref py py-attr docutils literal notranslate"><span class="pre">header_factory</span></code></a> call for <em>name</em>; that
is, case is preserved.</p>
</dd></dl>
<dl class="attribute">
<dt id="email.headerregistry.BaseHeader.defects">
<code class="descname">defects</code><a class="headerlink" href="#email.headerregistry.BaseHeader.defects" title="Permalink to this definition">¶</a></dt>
<dd><p>A tuple of <code class="xref py py-exc docutils literal notranslate"><span class="pre">HeaderDefect</span></code> instances reporting any
RFC compliance problems found during parsing.  The email package tries to
be complete about detecting compliance issues.  See the <a class="reference internal" href="email.errors.html#module-email.errors" title="email.errors: The exception classes used by the email package."><code class="xref py py-mod docutils literal notranslate"><span class="pre">errors</span></code></a>
module for a discussion of the types of defects that may be reported.</p>
</dd></dl>
<dl class="attribute">
<dt id="email.headerregistry.BaseHeader.max_count">
<code class="descname">max_count</code><a class="headerlink" href="#email.headerregistry.BaseHeader.max_count" title="Permalink to this definition">¶</a></dt>
<dd><p>The maximum number of headers of this type that can have the same
<code class="docutils literal notranslate"><span class="pre">name</span></code>.  A value of <code class="docutils literal notranslate"><span class="pre">None</span></code> means unlimited.  The <code class="docutils literal notranslate"><span class="pre">BaseHeader</span></code> value
for this attribute is <code class="docutils literal notranslate"><span class="pre">None</span></code>; it is expected that specialized header
classes will override this value as needed.</p>
</dd></dl>
<p><code class="docutils literal notranslate"><span class="pre">BaseHeader</span></code> also provides the following method, which is called by the
email library code and should not in general be called by application
programs:</p>
<dl class="method">
<dt id="email.headerregistry.BaseHeader.fold">
<code class="descname">fold</code><span class="sig-paren">(</span><em>*</em>, <em>policy</em><span class="sig-paren">)</span><a class="headerlink" href="#email.headerregistry.BaseHeader.fold" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a string containing <a class="reference internal" href="email.policy.html#email.policy.Policy.linesep" title="email.policy.Policy.linesep"><code class="xref py py-attr docutils literal notranslate"><span class="pre">linesep</span></code></a>
characters as required to correctly fold the header according to
<em>policy</em>.  A <a class="reference internal" href="email.policy.html#email.policy.Policy.cte_type" title="email.policy.Policy.cte_type"><code class="xref py py-attr docutils literal notranslate"><span class="pre">cte_type</span></code></a> of <code class="docutils literal notranslate"><span class="pre">8bit</span></code> will be
treated as if it were <code class="docutils literal notranslate"><span class="pre">7bit</span></code>, since headers may not contain arbitrary
binary data.  If <a class="reference internal" href="email.policy.html#email.policy.EmailPolicy.utf8" title="email.policy.EmailPolicy.utf8"><code class="xref py py-attr docutils literal notranslate"><span class="pre">utf8</span></code></a> is <code class="docutils literal notranslate"><span class="pre">False</span></code>,
non-ASCII data will be <span class="target" id="index-1"></span><a class="rfc reference external" href="https://tools.ietf.org/html/rfc2047.html"><strong>RFC 2047</strong></a> encoded.</p>
</dd></dl>
<p><code class="docutils literal notranslate"><span class="pre">BaseHeader</span></code> by itself cannot be used to create a header object.  It
defines a protocol that each specialized header cooperates with in order to
produce the header object.  Specifically, <code class="docutils literal notranslate"><span class="pre">BaseHeader</span></code> requires that
the specialized class provide a <a class="reference internal" href="functions.html#classmethod" title="classmethod"><code class="xref py py-func docutils literal notranslate"><span class="pre">classmethod()</span></code></a> named <code class="docutils literal notranslate"><span class="pre">parse</span></code>.  This
method is called as follows:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">parse</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">kwds</span><span class="p">)</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">kwds</span></code> is a dictionary containing one pre-initialized key, <code class="docutils literal notranslate"><span class="pre">defects</span></code>.
<code class="docutils literal notranslate"><span class="pre">defects</span></code> is an empty list.  The parse method should append any detected
defects to this list.  On return, the <code class="docutils literal notranslate"><span class="pre">kwds</span></code> dictionary <em>must</em> contain
values for at least the keys <code class="docutils literal notranslate"><span class="pre">decoded</span></code> and <code class="docutils literal notranslate"><span class="pre">defects</span></code>.  <code class="docutils literal notranslate"><span class="pre">decoded</span></code>
should be the string value for the header (that is, the header value fully
decoded to unicode).  The parse method should assume that <em>string</em> may
contain content-transfer-encoded parts, but should correctly handle all valid
unicode characters as well so that it can parse un-encoded header values.</p>
<p><code class="docutils literal notranslate"><span class="pre">BaseHeader</span></code>’s <code class="docutils literal notranslate"><span class="pre">__new__</span></code> then creates the header instance, and calls its
<code class="docutils literal notranslate"><span class="pre">init</span></code> method.  The specialized class only needs to provide an <code class="docutils literal notranslate"><span class="pre">init</span></code>
method if it wishes to set additional attributes beyond those provided by
<code class="docutils literal notranslate"><span class="pre">BaseHeader</span></code> itself.  Such an <code class="docutils literal notranslate"><span class="pre">init</span></code> method should look like this:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">init</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">_myattr</span> <span class="o">=</span> <span class="n">kw</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">'myattr'</span><span class="p">)</span>
    <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</pre></div>
</div>
<p>That is, anything extra that the specialized class puts in to the <code class="docutils literal notranslate"><span class="pre">kwds</span></code>
dictionary should be removed and handled, and the remaining contents of
<code class="docutils literal notranslate"><span class="pre">kw</span></code> (and <code class="docutils literal notranslate"><span class="pre">args</span></code>) passed to the <code class="docutils literal notranslate"><span class="pre">BaseHeader</span></code> <code class="docutils literal notranslate"><span class="pre">init</span></code> method.</p>
</dd>