link:
library/functions.html#float

docs:

<dt id="float">
<em class="property">class </em><code class="descname">float</code><span class="sig-paren">(</span><span class="optional">[</span><em>x</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#float" title="Permalink to this definition">¶</a></dt>
<dd><p id="index-2">Return a floating point number constructed from a number or string <em>x</em>.</p>
<p>If the argument is a string, it should contain a decimal number, optionally
preceded by a sign, and optionally embedded in whitespace.  The optional
sign may be <code class="docutils literal notranslate"><span class="pre">'+'</span></code> or <code class="docutils literal notranslate"><span class="pre">'-'</span></code>; a <code class="docutils literal notranslate"><span class="pre">'+'</span></code> sign has no effect on the value
produced.  The argument may also be a string representing a NaN
(not-a-number), or a positive or negative infinity.  More precisely, the
input must conform to the following grammar after leading and trailing
whitespace characters are removed:</p>
<pre>
<strong id="grammar-token-sign">sign          </strong> ::=  "+" | "-"
<strong id="grammar-token-infinity">infinity      </strong> ::=  "Infinity" | "inf"
<strong id="grammar-token-nan">nan           </strong> ::=  "nan"
<strong id="grammar-token-numeric-value">numeric_value </strong> ::=  <a class="reference internal" href="../reference/lexical_analysis.html#grammar-token-floatnumber"><code class="xref docutils literal notranslate"><span class="pre">floatnumber</span></code></a> | <a class="reference internal" href="#grammar-token-infinity"><code class="xref docutils literal notranslate"><span class="pre">infinity</span></code></a> | <a class="reference internal" href="#grammar-token-nan"><code class="xref docutils literal notranslate"><span class="pre">nan</span></code></a>
<strong id="grammar-token-numeric-string">numeric_string</strong> ::=  [<a class="reference internal" href="#grammar-token-sign"><code class="xref docutils literal notranslate"><span class="pre">sign</span></code></a>] <a class="reference internal" href="#grammar-token-numeric-value"><code class="xref docutils literal notranslate"><span class="pre">numeric_value</span></code></a>
</pre>
<p>Here <code class="docutils literal notranslate"><span class="pre">floatnumber</span></code> is the form of a Python floating-point literal,
described in <a class="reference internal" href="../reference/lexical_analysis.html#floating"><span class="std std-ref">Floating point literals</span></a>.  Case is not significant, so, for example,
“inf”, “Inf”, “INFINITY” and “iNfINity” are all acceptable spellings for
positive infinity.</p>
<p>Otherwise, if the argument is an integer or a floating point number, a
floating point number with the same value (within Python’s floating point
precision) is returned.  If the argument is outside the range of a Python
float, an <a class="reference internal" href="exceptions.html#OverflowError" title="OverflowError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">OverflowError</span></code></a> will be raised.</p>
<p>For a general Python object <code class="docutils literal notranslate"><span class="pre">x</span></code>, <code class="docutils literal notranslate"><span class="pre">float(x)</span></code> delegates to
<code class="docutils literal notranslate"><span class="pre">x.__float__()</span></code>.</p>
<p>If no argument is given, <code class="docutils literal notranslate"><span class="pre">0.0</span></code> is returned.</p>
<p>Examples:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">float</span><span class="p">(</span><span class="s1">'+1.23'</span><span class="p">)</span>
<span class="go">1.23</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">float</span><span class="p">(</span><span class="s1">'   -12345</span><span class="se">\n</span><span class="s1">'</span><span class="p">)</span>
<span class="go">-12345.0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">float</span><span class="p">(</span><span class="s1">'1e-003'</span><span class="p">)</span>
<span class="go">0.001</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">float</span><span class="p">(</span><span class="s1">'+1E6'</span><span class="p">)</span>
<span class="go">1000000.0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">float</span><span class="p">(</span><span class="s1">'-Infinity'</span><span class="p">)</span>
<span class="go">-inf</span>
</pre></div>
</div>
<p>The float type is described in <a class="reference internal" href="stdtypes.html#typesnumeric"><span class="std std-ref">Numeric Types — int, float, complex</span></a>.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6: </span>Grouping digits with underscores as in code literals is allowed.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span><em>x</em> is now a positional-only parameter.</p>
</div>
</dd>