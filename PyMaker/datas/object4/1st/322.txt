link:
library/functions.html#float

docs:


class float([x])¶
Return a floating point number constructed from a number or string x.
If the argument is a string, it should contain a decimal number, optionally
preceded by a sign, and optionally embedded in whitespace.  The optional
sign may be '+' or '-'; a '+' sign has no effect on the value
produced.  The argument may also be a string representing a NaN
(not-a-number), or a positive or negative infinity.  More precisely, the
input must conform to the following grammar after leading and trailing
whitespace characters are removed:

sign           ::=  "+" | "-"
infinity       ::=  "Infinity" | "inf"
nan            ::=  "nan"
numeric_value  ::=  floatnumber | infinity | nan
numeric_string ::=  [sign] numeric_value

Here floatnumber is the form of a Python floating-point literal,
described in Floating point literals.  Case is not significant, so, for example,
“inf”, “Inf”, “INFINITY” and “iNfINity” are all acceptable spellings for
positive infinity.
Otherwise, if the argument is an integer or a floating point number, a
floating point number with the same value (within Python’s floating point
precision) is returned.  If the argument is outside the range of a Python
float, an OverflowError will be raised.
For a general Python object x, float(x) delegates to
x.__float__().
If no argument is given, 0.0 is returned.
Examples:
>>> float('+1.23')
1.23
>>> float('   -12345\n')
-12345.0
>>> float('1e-003')
0.001
>>> float('+1E6')
1000000.0
>>> float('-Infinity')
-inf


The float type is described in Numeric Types — int, float, complex.

Changed in version 3.6: Grouping digits with underscores as in code literals is allowed.


Changed in version 3.7: x is now a positional-only parameter.

