link:
library/typing.html#typing.Match

docs:

<dt id="typing.Pattern">
<em class="property">class </em><code class="descclassname">typing.</code><code class="descname">Pattern</code><a class="headerlink" href="#typing.Pattern" title="Permalink to this definition">¶</a></dt>
<dt id="typing.Match">
<em class="property">class </em><code class="descclassname">typing.</code><code class="descname">Match</code><a class="headerlink" href="#typing.Match" title="Permalink to this definition">¶</a></dt>
<dd><p>These type aliases
correspond to the return types from <a class="reference internal" href="re.html#re.compile" title="re.compile"><code class="xref py py-func docutils literal notranslate"><span class="pre">re.compile()</span></code></a> and
<a class="reference internal" href="re.html#re.match" title="re.match"><code class="xref py py-func docutils literal notranslate"><span class="pre">re.match()</span></code></a>.  These types (and the corresponding functions)
are generic in <code class="docutils literal notranslate"><span class="pre">AnyStr</span></code> and can be made specific by writing
<code class="docutils literal notranslate"><span class="pre">Pattern[str]</span></code>, <code class="docutils literal notranslate"><span class="pre">Pattern[bytes]</span></code>, <code class="docutils literal notranslate"><span class="pre">Match[str]</span></code>, or
<code class="docutils literal notranslate"><span class="pre">Match[bytes]</span></code>.</p>
</dd>