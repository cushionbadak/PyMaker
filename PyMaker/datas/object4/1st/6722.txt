link:
library/urllib.request.html#urllib.request.urlretrieve

docs:


urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)¶
Copy a network object denoted by a URL to a local file. If the URL
points to a local file, the object will not be copied unless filename is supplied.
Return a tuple (filename, headers) where filename is the
local file name under which the object can be found, and headers is whatever
the info() method of the object returned by urlopen() returned (for
a remote object). Exceptions are the same as for urlopen().
The second argument, if present, specifies the file location to copy to (if
absent, the location will be a tempfile with a generated name). The third
argument, if present, is a callable that will be called once on
establishment of the network connection and once after each block read
thereafter.  The callable will be passed three arguments; a count of blocks
transferred so far, a block size in bytes, and the total size of the file.  The
third argument may be -1 on older FTP servers which do not return a file
size in response to a retrieval request.
The following example illustrates the most common usage scenario:
>>> import urllib.request
>>> local_filename, headers = urllib.request.urlretrieve('http://python.org/')
>>> html = open(local_filename)
>>> html.close()


If the url uses the http: scheme identifier, the optional data
argument may be given to specify a POST request (normally the request
type is GET).  The data argument must be a bytes object in standard
application/x-www-form-urlencoded format; see the
urllib.parse.urlencode() function.
urlretrieve() will raise ContentTooShortError when it detects that
the amount of data available  was less than the expected amount (which is the
size reported by a  Content-Length header). This can occur, for example, when
the  download is interrupted.
The Content-Length is treated as a lower bound: if there’s more data  to read,
urlretrieve reads more data, but if less data is available,  it raises the
exception.
You can still retrieve the downloaded data in this case, it is stored  in the
content attribute of the exception instance.
If no Content-Length header was supplied, urlretrieve can not check the size
of the data it has downloaded, and just returns it.  In this case you just have
to assume that the download was successful.
