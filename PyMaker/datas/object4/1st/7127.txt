link:
library/socketserver.html#socketserver.ForkingMixIn

docs:

<dt id="socketserver.ForkingMixIn">
<em class="property">class </em><code class="descclassname">socketserver.</code><code class="descname">ForkingMixIn</code><a class="headerlink" href="#socketserver.ForkingMixIn" title="Permalink to this definition">¶</a></dt>
<dt id="socketserver.ThreadingMixIn">
<em class="property">class </em><code class="descclassname">socketserver.</code><code class="descname">ThreadingMixIn</code><a class="headerlink" href="#socketserver.ThreadingMixIn" title="Permalink to this definition">¶</a></dt>
<dd><p>Forking and threading versions of each type of server can be created
using these mix-in classes.  For instance, <a class="reference internal" href="#socketserver.ThreadingUDPServer" title="socketserver.ThreadingUDPServer"><code class="xref py py-class docutils literal notranslate"><span class="pre">ThreadingUDPServer</span></code></a>
is created as follows:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">ThreadingUDPServer</span><span class="p">(</span><span class="n">ThreadingMixIn</span><span class="p">,</span> <span class="n">UDPServer</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>
</div>
<p>The mix-in class comes first, since it overrides a method defined in
<a class="reference internal" href="#socketserver.UDPServer" title="socketserver.UDPServer"><code class="xref py py-class docutils literal notranslate"><span class="pre">UDPServer</span></code></a>.  Setting the various attributes also changes the
behavior of the underlying server mechanism.</p>
<p><a class="reference internal" href="#socketserver.ForkingMixIn" title="socketserver.ForkingMixIn"><code class="xref py py-class docutils literal notranslate"><span class="pre">ForkingMixIn</span></code></a> and the Forking classes mentioned below are
only available on POSIX platforms that support <a class="reference internal" href="os.html#os.fork" title="os.fork"><code class="xref py py-func docutils literal notranslate"><span class="pre">fork()</span></code></a>.</p>
<p><code class="xref py py-meth docutils literal notranslate"><span class="pre">socketserver.ForkingMixIn.server_close()</span></code> waits until all child
processes complete, except if
<code class="xref py py-attr docutils literal notranslate"><span class="pre">socketserver.ForkingMixIn.block_on_close</span></code> attribute is false.</p>
<p><code class="xref py py-meth docutils literal notranslate"><span class="pre">socketserver.ThreadingMixIn.server_close()</span></code> waits until all non-daemon
threads complete, except if
<code class="xref py py-attr docutils literal notranslate"><span class="pre">socketserver.ThreadingMixIn.block_on_close</span></code> attribute is false. Use
daemonic threads by setting
<code class="xref py py-data docutils literal notranslate"><span class="pre">ThreadingMixIn.daemon_threads</span></code> to <code class="docutils literal notranslate"><span class="pre">True</span></code> to not wait until threads
complete.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span><code class="xref py py-meth docutils literal notranslate"><span class="pre">socketserver.ForkingMixIn.server_close()</span></code> and
<code class="xref py py-meth docutils literal notranslate"><span class="pre">socketserver.ThreadingMixIn.server_close()</span></code> now waits until all
child processes and non-daemonic threads complete.
Add a new <code class="xref py py-attr docutils literal notranslate"><span class="pre">socketserver.ForkingMixIn.block_on_close</span></code> class
attribute to opt-in for the pre-3.7 behaviour.</p>
</div>
</dd>