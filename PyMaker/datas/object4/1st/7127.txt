link:
library/socketserver.html#socketserver.ForkingMixIn

docs:


class socketserver.ForkingMixIn¶

class socketserver.ThreadingMixIn¶
Forking and threading versions of each type of server can be created
using these mix-in classes.  For instance, ThreadingUDPServer
is created as follows:
class ThreadingUDPServer(ThreadingMixIn, UDPServer):
    pass


The mix-in class comes first, since it overrides a method defined in
UDPServer.  Setting the various attributes also changes the
behavior of the underlying server mechanism.
ForkingMixIn and the Forking classes mentioned below are
only available on POSIX platforms that support fork().
socketserver.ForkingMixIn.server_close() waits until all child
processes complete, except if
socketserver.ForkingMixIn.block_on_close attribute is false.
socketserver.ThreadingMixIn.server_close() waits until all non-daemon
threads complete, except if
socketserver.ThreadingMixIn.block_on_close attribute is false. Use
daemonic threads by setting
ThreadingMixIn.daemon_threads to True to not wait until threads
complete.

Changed in version 3.7: socketserver.ForkingMixIn.server_close() and
socketserver.ThreadingMixIn.server_close() now waits until all
child processes and non-daemonic threads complete.
Add a new socketserver.ForkingMixIn.block_on_close class
attribute to opt-in for the pre-3.7 behaviour.

