link:
library/dataclasses.html#post-init-processing

docs:

Post-init processingÂ¶
The generated __init__() code will call a method named
__post_init__(), if __post_init__() is defined on the
class.  It will normally be called as self.__post_init__().
However, if any InitVar fields are defined, they will also be
passed to __post_init__() in the order they were defined in the
class.  If no __init__() method is generated, then
__post_init__() will not automatically be called.
Among other uses, this allows for initializing field values that
depend on one or more other fields.  For example:
@dataclass
class C:
    a: float
    b: float
    c: float = field(init=False)

    def __post_init__(self):
        self.c = self.a + self.b


See the section below on init-only variables for ways to pass
parameters to __post_init__().  Also see the warning about how
replace() handles init=False fields.
