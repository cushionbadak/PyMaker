link:
reference/import.html#module-path

docs:

5.4.5. module.__path__¶
By definition, if a module has a __path__ attribute, it is a package.
A package’s __path__ attribute is used during imports of its subpackages.
Within the import machinery, it functions much the same as sys.path,
i.e. providing a list of locations to search for modules during import.
However, __path__ is typically much more constrained than
sys.path.
__path__ must be an iterable of strings, but it may be empty.
The same rules used for sys.path also apply to a package’s
__path__, and sys.path_hooks (described below) are
consulted when traversing a package’s __path__.
A package’s __init__.py file may set or alter the package’s __path__
attribute, and this was typically the way namespace packages were implemented
prior to PEP 420.  With the adoption of PEP 420, namespace packages no
longer need to supply __init__.py files containing only __path__
manipulation code; the import machinery automatically sets __path__
correctly for the namespace package.
