link:
library/contextvars.html#manual-context-management

docs:

Manual Context Management¶


contextvars.copy_context()¶
Returns a copy of the current Context object.
The following snippet gets a copy of the current context and prints
all variables and their values that are set in it:
ctx: Context = copy_context()
print(list(ctx.items()))


The function has an O(1) complexity, i.e. works equally fast for
contexts with a few context variables and for contexts that have
a lot of them.



class contextvars.Context¶
A mapping of ContextVars to their values.
Context() creates an empty context with no values in it.
To get a copy of the current context use the
copy_context() function.
Context implements the collections.abc.Mapping interface.


run(callable, *args, **kwargs)¶
Execute callable(*args, **kwargs) code in the context object
the run method is called on.  Return the result of the execution
or propagate an exception if one occurred.
Any changes to any context variables that callable makes will
be contained in the context object:
var = ContextVar('var')
var.set('spam')

def main():
    # 'var' was set to 'spam' before
    # calling 'copy_context()' and 'ctx.run(main)', so:
    # var.get() == ctx[var] == 'spam'

    var.set('ham')

    # Now, after setting 'var' to 'ham':
    # var.get() == ctx[var] == 'ham'

ctx = copy_context()

# Any changes that the 'main' function makes to 'var'
# will be contained in 'ctx'.
ctx.run(main)

# The 'main()' function was run in the 'ctx' context,
# so changes to 'var' are contained in it:
# ctx[var] == 'ham'

# However, outside of 'ctx', 'var' is still set to 'spam':
# var.get() == 'spam'


The method raises a RuntimeError when called on the same
context object from more than one OS thread, or when called
recursively.



copy()¶
Return a shallow copy of the context object.



var in context
Return True if the context has a value for var set;
return False otherwise.



context[var]
Return the value of the var ContextVar variable.
If the variable is not set in the context object, a
KeyError is raised.



get(var[, default])¶
Return the value for var if var has the value in the context
object.  Return default otherwise.  If default is not given,
return None.



iter(context)
Return an iterator over the variables stored in the context
object.



len(proxy)
Return the number of variables set in the context object.



keys()¶
Return a list of all variables in the context object.



values()¶
Return a list of all variables’ values in the context object.



items()¶
Return a list of 2-tuples containing all variables and their
values in the context object.


