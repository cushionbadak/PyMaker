link:
reference/import.html#path-entry-finder-protocol

docs:

5.5.2. Path entry finder protocol¶
In order to support imports of modules and initialized packages and also to
contribute portions to namespace packages, path entry finders must implement
the find_spec() method.
find_spec() takes two argument, the
fully qualified name of the module being imported, and the (optional) target
module.  find_spec() returns a fully populated spec for the module.
This spec will always have “loader” set (with one exception).
To indicate to the import machinery that the spec represents a namespace
portion. the path entry finder sets “loader” on the spec to
None and “submodule_search_locations” to a list containing the
portion.

Changed in version 3.4: find_spec() replaced
find_loader() and
find_module(), both of which
are now deprecated, but will be used if find_spec() is not defined.
Older path entry finders may implement one of these two deprecated methods
instead of find_spec().  The methods are still respected for the
sake of backward compatibility.  However, if find_spec() is
implemented on the path entry finder, the legacy methods are ignored.
find_loader() takes one argument, the
fully qualified name of the module being imported.  find_loader()
returns a 2-tuple where the first item is the loader and the second item
is a namespace portion.  When the first item (i.e. the loader) is
None, this means that while the path entry finder does not have a
loader for the named module, it knows that the path entry contributes to
a namespace portion for the named module.  This will almost always be the
case where Python is asked to import a namespace package that has no
physical presence on the file system.  When a path entry finder returns
None for the loader, the second item of the 2-tuple return value must
be a sequence, although it can be empty.
If find_loader() returns a non-None loader value, the portion is
ignored and the loader is returned from the path based finder, terminating
the search through the path entries.
For backwards compatibility with other implementations of the import
protocol, many path entry finders also support the same,
traditional find_module() method that meta path finders support.
However path entry finder find_module() methods are never called
with a path argument (they are expected to record the appropriate
path information from the initial call to the path hook).
The find_module() method on path entry finders is deprecated,
as it does not allow the path entry finder to contribute portions to
namespace packages.  If both find_loader() and find_module()
exist on a path entry finder, the import system will always call
find_loader() in preference to find_module().

