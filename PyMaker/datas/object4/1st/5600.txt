link:
library/email.policy.html#email.policy.Compat32

docs:

<dt id="email.policy.Compat32">
<em class="property">class </em><code class="descclassname">email.policy.</code><code class="descname">Compat32</code><span class="sig-paren">(</span><em>**kw</em><span class="sig-paren">)</span><a class="headerlink" href="#email.policy.Compat32" title="Permalink to this definition">¶</a></dt>
<dd><p>This concrete <a class="reference internal" href="#email.policy.Policy" title="email.policy.Policy"><code class="xref py py-class docutils literal notranslate"><span class="pre">Policy</span></code></a> is the backward compatibility policy.  It
replicates the behavior of the email package in Python 3.2.  The
<a class="reference internal" href="#module-email.policy" title="email.policy: Controlling the parsing and generating of messages"><code class="xref py py-mod docutils literal notranslate"><span class="pre">policy</span></code></a> module also defines an instance of this class,
<a class="reference internal" href="#email.policy.compat32" title="email.policy.compat32"><code class="xref py py-const docutils literal notranslate"><span class="pre">compat32</span></code></a>, that is used as the default policy.  Thus the default
behavior of the email package is to maintain compatibility with Python 3.2.</p>
<p>The following attributes have values that are different from the
<a class="reference internal" href="#email.policy.Policy" title="email.policy.Policy"><code class="xref py py-class docutils literal notranslate"><span class="pre">Policy</span></code></a> default:</p>
<dl class="attribute">
<dt id="email.policy.Compat32.mangle_from_">
<code class="descname">mangle_from_</code><a class="headerlink" href="#email.policy.Compat32.mangle_from_" title="Permalink to this definition">¶</a></dt>
<dd><p>The default is <code class="docutils literal notranslate"><span class="pre">True</span></code>.</p>
</dd></dl>
<p>The class provides the following concrete implementations of the
abstract methods of <a class="reference internal" href="#email.policy.Policy" title="email.policy.Policy"><code class="xref py py-class docutils literal notranslate"><span class="pre">Policy</span></code></a>:</p>
<dl class="method">
<dt id="email.policy.Compat32.header_source_parse">
<code class="descname">header_source_parse</code><span class="sig-paren">(</span><em>sourcelines</em><span class="sig-paren">)</span><a class="headerlink" href="#email.policy.Compat32.header_source_parse" title="Permalink to this definition">¶</a></dt>
<dd><p>The name is parsed as everything up to the ‘<code class="docutils literal notranslate"><span class="pre">:</span></code>’ and returned
unmodified.  The value is determined by stripping leading whitespace off
the remainder of the first line, joining all subsequent lines together,
and stripping any trailing carriage return or linefeed characters.</p>
</dd></dl>
<dl class="method">
<dt id="email.policy.Compat32.header_store_parse">
<code class="descname">header_store_parse</code><span class="sig-paren">(</span><em>name</em>, <em>value</em><span class="sig-paren">)</span><a class="headerlink" href="#email.policy.Compat32.header_store_parse" title="Permalink to this definition">¶</a></dt>
<dd><p>The name and value are returned unmodified.</p>
</dd></dl>
<dl class="method">
<dt id="email.policy.Compat32.header_fetch_parse">
<code class="descname">header_fetch_parse</code><span class="sig-paren">(</span><em>name</em>, <em>value</em><span class="sig-paren">)</span><a class="headerlink" href="#email.policy.Compat32.header_fetch_parse" title="Permalink to this definition">¶</a></dt>
<dd><p>If the value contains binary data, it is converted into a
<a class="reference internal" href="email.header.html#email.header.Header" title="email.header.Header"><code class="xref py py-class docutils literal notranslate"><span class="pre">Header</span></code></a> object using the <code class="docutils literal notranslate"><span class="pre">unknown-8bit</span></code> charset.
Otherwise it is returned unmodified.</p>
</dd></dl>
<dl class="method">
<dt id="email.policy.Compat32.fold">
<code class="descname">fold</code><span class="sig-paren">(</span><em>name</em>, <em>value</em><span class="sig-paren">)</span><a class="headerlink" href="#email.policy.Compat32.fold" title="Permalink to this definition">¶</a></dt>
<dd><p>Headers are folded using the <a class="reference internal" href="email.header.html#email.header.Header" title="email.header.Header"><code class="xref py py-class docutils literal notranslate"><span class="pre">Header</span></code></a> folding
algorithm, which preserves existing line breaks in the value, and wraps
each resulting line to the <code class="docutils literal notranslate"><span class="pre">max_line_length</span></code>.  Non-ASCII binary data are
CTE encoded using the <code class="docutils literal notranslate"><span class="pre">unknown-8bit</span></code> charset.</p>
</dd></dl>
<dl class="method">
<dt id="email.policy.Compat32.fold_binary">
<code class="descname">fold_binary</code><span class="sig-paren">(</span><em>name</em>, <em>value</em><span class="sig-paren">)</span><a class="headerlink" href="#email.policy.Compat32.fold_binary" title="Permalink to this definition">¶</a></dt>
<dd><p>Headers are folded using the <a class="reference internal" href="email.header.html#email.header.Header" title="email.header.Header"><code class="xref py py-class docutils literal notranslate"><span class="pre">Header</span></code></a> folding
algorithm, which preserves existing line breaks in the value, and wraps
each resulting line to the <code class="docutils literal notranslate"><span class="pre">max_line_length</span></code>.  If <code class="docutils literal notranslate"><span class="pre">cte_type</span></code> is
<code class="docutils literal notranslate"><span class="pre">7bit</span></code>, non-ascii binary data is CTE encoded using the <code class="docutils literal notranslate"><span class="pre">unknown-8bit</span></code>
charset.  Otherwise the original source header is used, with its existing
line breaks and any (RFC invalid) binary data it may contain.</p>
</dd></dl>
</dd>