link:
library/typing.html#classes-functions-and-decorators

docs:

Classes, functions, and decorators¶
The module defines the following classes, functions and decorators:


class typing.TypeVar¶
Type variable.
Usage:
T = TypeVar('T')  # Can be anything
A = TypeVar('A', str, bytes)  # Must be str or bytes


Type variables exist primarily for the benefit of static type
checkers.  They serve as the parameters for generic types as well
as for generic function definitions.  See class Generic for more
information on generic types.  Generic functions work as follows:
def repeat(x: T, n: int) -> Sequence[T]:
    """Return a list containing n references to x."""
    return [x]*n

def longest(x: A, y: A) -> A:
    """Return the longest of two strings."""
    return x if len(x) >= len(y) else y


The latter example’s signature is essentially the overloading
of (str, str) -> str and (bytes, bytes) -> bytes.  Also note
that if the arguments are instances of some subclass of str,
the return type is still plain str.
At runtime, isinstance(x, T) will raise TypeError.  In general,
isinstance() and issubclass() should not be used with types.
Type variables may be marked covariant or contravariant by passing
covariant=True or contravariant=True.  See PEP 484 for more
details.  By default type variables are invariant.  Alternatively,
a type variable may specify an upper bound using bound=<type>.
This means that an actual type substituted (explicitly or implicitly)
for the type variable must be a subclass of the boundary type,
see PEP 484.



class typing.Generic¶
Abstract base class for generic types.
A generic type is typically declared by inheriting from an
instantiation of this class with one or more type variables.
For example, a generic mapping type might be defined as:
class Mapping(Generic[KT, VT]):
    def __getitem__(self, key: KT) -> VT:
        ...
        # Etc.


This class can then be used as follows:
X = TypeVar('X')
Y = TypeVar('Y')

def lookup_name(mapping: Mapping[X, Y], key: X, default: Y) -> Y:
    try:
        return mapping[key]
    except KeyError:
        return default





class typing.Type(Generic[CT_co])¶
A variable annotated with C may accept a value of type C. In
contrast, a variable annotated with Type[C] may accept values that are
classes themselves – specifically, it will accept the class object of
C. For example:
a = 3         # Has type 'int'
b = int       # Has type 'Type[int]'
c = type(a)   # Also has type 'Type[int]'


Note that Type[C] is covariant:
class User: ...
class BasicUser(User): ...
class ProUser(User): ...
class TeamUser(User): ...

# Accepts User, BasicUser, ProUser, TeamUser, ...
def make_new_user(user_class: Type[User]) -> User:
    # ...
    return user_class()


The fact that Type[C] is covariant implies that all subclasses of
C should implement the same constructor signature and class method
signatures as C. The type checker should flag violations of this,
but should also allow constructor calls in subclasses that match the
constructor calls in the indicated base class. How the type checker is
required to handle this particular case may change in future revisions of
PEP 484.
The only legal parameters for Type are classes, Any,
type variables, and unions of any of these types.
For example:
def new_non_team_user(user_class: Type[Union[BaseUser, ProUser]]): ...


Type[Any] is equivalent to Type which in turn is equivalent
to type, which is the root of Python’s metaclass hierarchy.

New in version 3.5.2.




class typing.Iterable(Generic[T_co])¶
A generic version of collections.abc.Iterable.



class typing.Iterator(Iterable[T_co])¶
A generic version of collections.abc.Iterator.



class typing.Reversible(Iterable[T_co])¶
A generic version of collections.abc.Reversible.



class typing.SupportsInt¶
An ABC with one abstract method __int__.



class typing.SupportsFloat¶
An ABC with one abstract method __float__.



class typing.SupportsComplex¶
An ABC with one abstract method __complex__.



class typing.SupportsBytes¶
An ABC with one abstract method __bytes__.



class typing.SupportsAbs¶
An ABC with one abstract method __abs__ that is covariant
in its return type.



class typing.SupportsRound¶
An ABC with one abstract method __round__
that is covariant in its return type.



class typing.Container(Generic[T_co])¶
A generic version of collections.abc.Container.



class typing.Hashable¶
An alias to collections.abc.Hashable



class typing.Sized¶
An alias to collections.abc.Sized



class typing.Collection(Sized, Iterable[T_co], Container[T_co])¶
A generic version of collections.abc.Collection

New in version 3.6.




class typing.AbstractSet(Sized, Collection[T_co])¶
A generic version of collections.abc.Set.



class typing.MutableSet(AbstractSet[T])¶
A generic version of collections.abc.MutableSet.



class typing.Mapping(Sized, Collection[KT], Generic[VT_co])¶
A generic version of collections.abc.Mapping.
This type can be used as follows:
def get_position_in_index(word_list: Mapping[str, int], word: str) -> int:
    return word_list[word]





class typing.MutableMapping(Mapping[KT, VT])¶
A generic version of collections.abc.MutableMapping.



class typing.Sequence(Reversible[T_co], Collection[T_co])¶
A generic version of collections.abc.Sequence.



class typing.MutableSequence(Sequence[T])¶
A generic version of collections.abc.MutableSequence.



class typing.ByteString(Sequence[int])¶
A generic version of collections.abc.ByteString.
This type represents the types bytes, bytearray,
and memoryview.
As a shorthand for this type, bytes can be used to
annotate arguments of any of the types mentioned above.



class typing.Deque(deque, MutableSequence[T])¶
A generic version of collections.deque.

New in version 3.6.1.




class typing.List(list, MutableSequence[T])¶
Generic version of list.
Useful for annotating return types. To annotate arguments it is preferred
to use an abstract collection type such as Sequence or
Iterable.
This type may be used as follows:
T = TypeVar('T', int, float)

def vec2(x: T, y: T) -> List[T]:
    return [x, y]

def keep_positives(vector: Sequence[T]) -> List[T]:
    return [item for item in vector if item > 0]





class typing.Set(set, MutableSet[T])¶
A generic version of builtins.set.
Useful for annotating return types. To annotate arguments it is preferred
to use an abstract collection type such as AbstractSet.



class typing.FrozenSet(frozenset, AbstractSet[T_co])¶
A generic version of builtins.frozenset.



class typing.MappingView(Sized, Iterable[T_co])¶
A generic version of collections.abc.MappingView.



class typing.KeysView(MappingView[KT_co], AbstractSet[KT_co])¶
A generic version of collections.abc.KeysView.



class typing.ItemsView(MappingView, Generic[KT_co, VT_co])¶
A generic version of collections.abc.ItemsView.



class typing.ValuesView(MappingView[VT_co])¶
A generic version of collections.abc.ValuesView.



class typing.Awaitable(Generic[T_co])¶
A generic version of collections.abc.Awaitable.



class typing.Coroutine(Awaitable[V_co], Generic[T_co T_contra, V_co])¶
A generic version of collections.abc.Coroutine.
The variance and order of type variables
correspond to those of Generator, for example:
from typing import List, Coroutine
c = None # type: Coroutine[List[str], str, int]
...
x = c.send('hi') # type: List[str]
async def bar() -> None:
    x = await c # type: int





class typing.AsyncIterable(Generic[T_co])¶
A generic version of collections.abc.AsyncIterable.



class typing.AsyncIterator(AsyncIterable[T_co])¶
A generic version of collections.abc.AsyncIterator.



class typing.ContextManager(Generic[T_co])¶
A generic version of contextlib.AbstractContextManager.

New in version 3.6.




class typing.AsyncContextManager(Generic[T_co])¶
A generic version of contextlib.AbstractAsyncContextManager.

New in version 3.6.




class typing.Dict(dict, MutableMapping[KT, VT])¶
A generic version of dict.
Useful for annotating return types. To annotate arguments it is preferred
to use an abstract collection type such as Mapping.
This type can be used as follows:
def count_words(text: str) -> Dict[str, int]:
    ...





class typing.DefaultDict(collections.defaultdict, MutableMapping[KT, VT])¶
A generic version of collections.defaultdict.

New in version 3.5.2.




class typing.OrderedDict(collections.OrderedDict, MutableMapping[KT, VT])¶
A generic version of collections.OrderedDict.

New in version 3.7.2.




class typing.Counter(collections.Counter, Dict[T, int])¶
A generic version of collections.Counter.

New in version 3.6.1.




class typing.ChainMap(collections.ChainMap, MutableMapping[KT, VT])¶
A generic version of collections.ChainMap.

New in version 3.6.1.




class typing.Generator(Iterator[T_co], Generic[T_co, T_contra, V_co])¶
A generator can be annotated by the generic type
Generator[YieldType, SendType, ReturnType]. For example:
def echo_round() -> Generator[int, float, str]:
    sent = yield 0
    while sent >= 0:
        sent = yield round(sent)
    return 'Done'


Note that unlike many other generics in the typing module, the SendType
of Generator behaves contravariantly, not covariantly or
invariantly.
If your generator will only yield values, set the SendType and
ReturnType to None:
def infinite_stream(start: int) -> Generator[int, None, None]:
    while True:
        yield start
        start += 1


Alternatively, annotate your generator as having a return type of
either Iterable[YieldType] or Iterator[YieldType]:
def infinite_stream(start: int) -> Iterator[int]:
    while True:
        yield start
        start += 1





class typing.AsyncGenerator(AsyncIterator[T_co], Generic[T_co, T_contra])¶
An async generator can be annotated by the generic type
AsyncGenerator[YieldType, SendType]. For example:
async def echo_round() -> AsyncGenerator[int, float]:
    sent = yield 0
    while sent >= 0.0:
        rounded = await round(sent)
        sent = yield rounded


Unlike normal generators, async generators cannot return a value, so there
is no ReturnType type parameter. As with Generator, the
SendType behaves contravariantly.
If your generator will only yield values, set the SendType to
None:
async def infinite_stream(start: int) -> AsyncGenerator[int, None]:
    while True:
        yield start
        start = await increment(start)


Alternatively, annotate your generator as having a return type of
either AsyncIterable[YieldType] or AsyncIterator[YieldType]:
async def infinite_stream(start: int) -> AsyncIterator[int]:
    while True:
        yield start
        start = await increment(start)



New in version 3.5.4.




class typing.Text¶
Text is an alias for str. It is provided to supply a forward
compatible path for Python 2 code: in Python 2, Text is an alias for
unicode.
Use Text to indicate that a value must contain a unicode string in
a manner that is compatible with both Python 2 and Python 3:
def add_unicode_checkmark(text: Text) -> Text:
    return text + u' \u2713'



New in version 3.5.2.




class typing.IO¶

class typing.TextIO¶

class typing.BinaryIO¶
Generic type IO[AnyStr] and its subclasses TextIO(IO[str])
and BinaryIO(IO[bytes])
represent the types of I/O streams such as returned by
open().



class typing.Pattern¶

class typing.Match¶
These type aliases
correspond to the return types from re.compile() and
re.match().  These types (and the corresponding functions)
are generic in AnyStr and can be made specific by writing
Pattern[str], Pattern[bytes], Match[str], or
Match[bytes].



class typing.NamedTuple¶
Typed version of collections.namedtuple().
Usage:
class Employee(NamedTuple):
    name: str
    id: int


This is equivalent to:
Employee = collections.namedtuple('Employee', ['name', 'id'])


To give a field a default value, you can assign to it in the class body:
class Employee(NamedTuple):
    name: str
    id: int = 3

employee = Employee('Guido')
assert employee.id == 3


Fields with a default value must come after any fields without a default.
The resulting class has two extra attributes: _field_types,
giving a dict mapping field names to types, and _field_defaults, a dict
mapping field names to default values.  (The field names are in the
_fields attribute, which is part of the namedtuple API.)
NamedTuple subclasses can also have docstrings and methods:
class Employee(NamedTuple):
    """Represents an employee."""
    name: str
    id: int = 3

    def __repr__(self) -> str:
        return f'<Employee {self.name}, id={self.id}>'


Backward-compatible usage:
Employee = NamedTuple('Employee', [('name', str), ('id', int)])



Changed in version 3.6: Added support for PEP 526 variable annotation syntax.


Changed in version 3.6.1: Added support for default values, methods, and docstrings.




typing.NewType(typ)¶
A helper function to indicate a distinct types to a typechecker,
see NewType. At runtime it returns a function that returns
its argument. Usage:
UserId = NewType('UserId', int)
first_user = UserId(1)



New in version 3.5.2.




typing.cast(typ, val)¶
Cast a value to a type.
This returns the value unchanged.  To the type checker this
signals that the return value has the designated type, but at
runtime we intentionally don’t check anything (we want this
to be as fast as possible).



typing.get_type_hints(obj[, globals[, locals]])¶
Return a dictionary containing type hints for a function, method, module
or class object.
This is often the same as obj.__annotations__. In addition,
forward references encoded as string literals are handled by evaluating
them in globals and locals namespaces. If necessary,
Optional[t] is added for function and method annotations if a default
value equal to None is set. For a class C, return
a dictionary constructed by merging all the __annotations__ along
C.__mro__ in reverse order.



@typing.overload¶
The @overload decorator allows describing functions and methods
that support multiple different combinations of argument types. A series
of @overload-decorated definitions must be followed by exactly one
non-@overload-decorated definition (for the same function/method).
The @overload-decorated definitions are for the benefit of the
type checker only, since they will be overwritten by the
non-@overload-decorated definition, while the latter is used at
runtime but should be ignored by a type checker.  At runtime, calling
a @overload-decorated function directly will raise
NotImplementedError. An example of overload that gives a more
precise type than can be expressed using a union or a type variable:
@overload
def process(response: None) -> None:
    ...
@overload
def process(response: int) -> Tuple[int, str]:
    ...
@overload
def process(response: bytes) -> str:
    ...
def process(response):
    <actual implementation>


See PEP 484 for details and comparison with other typing semantics.



@typing.no_type_check¶
Decorator to indicate that annotations are not type hints.
This works as class or function decorator.  With a class, it
applies recursively to all methods defined in that class (but not
to methods defined in its superclasses or subclasses).
This mutates the function(s) in place.



@typing.no_type_check_decorator¶
Decorator to give another decorator the no_type_check() effect.
This wraps the decorator with something that wraps the decorated
function in no_type_check().



@typing.type_check_only¶
Decorator to mark a class or function to be unavailable at runtime.
This decorator is itself not available at runtime. It is mainly
intended to mark classes that are defined in type stub files if
an implementation returns an instance of a private class:
@type_check_only
class Response:  # private or not available at runtime
    code: int
    def get_header(self, name: str) -> str: ...

def fetch_response() -> Response: ...


Note that returning instances of private classes is not recommended.
It is usually preferable to make such classes public.



typing.Any¶
Special type indicating an unconstrained type.

Every type is compatible with Any.
Any is compatible with every type.




typing.NoReturn¶
Special type indicating that a function never returns.
For example:
from typing import NoReturn

def stop() -> NoReturn:
    raise RuntimeError('no way')



New in version 3.5.4.




typing.Union¶
Union type; Union[X, Y] means either X or Y.
To define a union, use e.g. Union[int, str].  Details:

The arguments must be types and there must be at least one.

Unions of unions are flattened, e.g.:
Union[Union[int, str], float] == Union[int, str, float]



Unions of a single argument vanish, e.g.:
Union[int] == int  # The constructor actually returns int



Redundant arguments are skipped, e.g.:
Union[int, str, int] == Union[int, str]



When comparing unions, the argument order is ignored, e.g.:
Union[int, str] == Union[str, int]



You cannot subclass or instantiate a union.

You cannot write Union[X][Y].

You can use Optional[X] as a shorthand for Union[X, None].



Changed in version 3.7: Don’t remove explicit subclasses from unions at runtime.




typing.Optional¶
Optional type.
Optional[X] is equivalent to Union[X, None].
Note that this is not the same concept as an optional argument,
which is one that has a default.  An optional argument with a
default does not require the Optional qualifier on its type
annotation just because it is optional. For example:
def foo(arg: int = 0) -> None:
    ...


On the other hand, if an explicit value of None is allowed, the
use of Optional is appropriate, whether the argument is optional
or not. For example:
def foo(arg: Optional[int] = None) -> None:
    ...





typing.Tuple¶
Tuple type; Tuple[X, Y] is the type of a tuple of two items
with the first item of type X and the second of type Y.
Example: Tuple[T1, T2] is a tuple of two elements corresponding
to type variables T1 and T2.  Tuple[int, float, str] is a tuple
of an int, a float and a string.
To specify a variable-length tuple of homogeneous type,
use literal ellipsis, e.g. Tuple[int, ...]. A plain Tuple
is equivalent to Tuple[Any, ...], and in turn to tuple.



typing.Callable¶
Callable type; Callable[[int], str] is a function of (int) -> str.
The subscription syntax must always be used with exactly two
values: the argument list and the return type.  The argument list
must be a list of types or an ellipsis; the return type must be
a single type.
There is no syntax to indicate optional or keyword arguments;
such function types are rarely used as callback types.
Callable[..., ReturnType] (literal ellipsis) can be used to
type hint a callable taking any number of arguments and returning
ReturnType.  A plain Callable is equivalent to
Callable[..., Any], and in turn to
collections.abc.Callable.



typing.ClassVar¶
Special type construct to mark class variables.
As introduced in PEP 526, a variable annotation wrapped in ClassVar
indicates that a given attribute is intended to be used as a class variable
and should not be set on instances of that class. Usage:
class Starship:
    stats: ClassVar[Dict[str, int]] = {} # class variable
    damage: int = 10                     # instance variable


ClassVar accepts only types and cannot be further subscribed.
ClassVar is not a class itself, and should not
be used with isinstance() or issubclass().
ClassVar does not change Python runtime behavior, but
it can be used by third-party type checkers. For example, a type checker
might flag the following code as an error:
enterprise_d = Starship(3000)
enterprise_d.stats = {} # Error, setting class variable on instance
Starship.stats = {}     # This is OK



New in version 3.5.3.




typing.AnyStr¶
AnyStr is a type variable defined as
AnyStr = TypeVar('AnyStr', str, bytes).
It is meant to be used for functions that may accept any kind of string
without allowing different kinds of strings to mix. For example:
def concat(a: AnyStr, b: AnyStr) -> AnyStr:
    return a + b

concat(u"foo", u"bar")  # Ok, output has type 'unicode'
concat(b"foo", b"bar")  # Ok, output has type 'bytes'
concat(u"foo", b"bar")  # Error, cannot mix unicode and bytes





typing.TYPE_CHECKING¶
A special constant that is assumed to be True by 3rd party static
type checkers. It is False at runtime. Usage:
if TYPE_CHECKING:
    import expensive_mod

def fun(arg: 'expensive_mod.SomeType') -> None:
    local_var: expensive_mod.AnotherType = other_fun()


Note that the first type annotation must be enclosed in quotes, making it a
“forward reference”, to hide the expensive_mod reference from the
interpreter runtime.  Type annotations for local variables are not
evaluated, so the second annotation does not need to be enclosed in quotes.

New in version 3.5.2.


