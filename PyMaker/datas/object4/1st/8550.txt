link:
library/unittest.html#load-tests-protocol

docs:

load_tests Protocol¶

New in version 3.2.

Modules or packages can customize how tests are loaded from them during normal
test runs or test discovery by implementing a function called load_tests.
If a test module defines load_tests it will be called by
TestLoader.loadTestsFromModule() with the following arguments:
load_tests(loader, standard_tests, pattern)


where pattern is passed straight through from loadTestsFromModule.  It
defaults to None.
It should return a TestSuite.
loader is the instance of TestLoader doing the loading.
standard_tests are the tests that would be loaded by default from the
module. It is common for test modules to only want to add or remove tests
from the standard set of tests.
The third argument is used when loading packages as part of test discovery.
A typical load_tests function that loads tests from a specific set of
TestCase classes may look like:
test_cases = (TestCase1, TestCase2, TestCase3)

def load_tests(loader, tests, pattern):
    suite = TestSuite()
    for test_class in test_cases:
        tests = loader.loadTestsFromTestCase(test_class)
        suite.addTests(tests)
    return suite


If discovery is started in a directory containing a package, either from the
command line or by calling TestLoader.discover(), then the package
__init__.py will be checked for load_tests.  If that function does
not exist, discovery will recurse into the package as though it were just
another directory.  Otherwise, discovery of the package’s tests will be left up
to load_tests which is called with the following arguments:
load_tests(loader, standard_tests, pattern)


This should return a TestSuite representing all the tests
from the package. (standard_tests will only contain tests
collected from __init__.py.)
Because the pattern is passed into load_tests the package is free to
continue (and potentially modify) test discovery. A ‘do nothing’
load_tests function for a test package would look like:
def load_tests(loader, standard_tests, pattern):
    # top level directory cached on loader instance
    this_dir = os.path.dirname(__file__)
    package_tests = loader.discover(start_dir=this_dir, pattern=pattern)
    standard_tests.addTests(package_tests)
    return standard_tests



Changed in version 3.5: Discovery no longer checks package names for matching pattern due to the
impossibility of package names matching the default pattern.

