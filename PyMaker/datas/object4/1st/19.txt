link:
reference/lexical_analysis.html#identifiers

docs:

2.3. Identifiers and keywords¶
Identifiers (also referred to as names) are described by the following lexical
definitions.
The syntax of identifiers in Python is based on the Unicode standard annex
UAX-31, with elaboration and changes as defined below; see also PEP 3131 for
further details.
Within the ASCII range (U+0001..U+007F), the valid characters for identifiers
are the same as in Python 2.x: the uppercase and lowercase letters A through
Z, the underscore _ and, except for the first character, the digits
0 through 9.
Python 3.0 introduces additional characters from outside the ASCII range (see
PEP 3131).  For these characters, the classification uses the version of the
Unicode Character Database as included in the unicodedata module.
Identifiers are unlimited in length.  Case is significant.

identifier   ::=  xid_start xid_continue*
id_start     ::=  <all characters in general categories Lu, Ll, Lt, Lm, Lo, Nl, the underscore, and characters with the Other_ID_Start property>
id_continue  ::=  <all characters in id_start, plus characters in the categories Mn, Mc, Nd, Pc and others with the Other_ID_Continue property>
xid_start    ::=  <all characters in id_start whose NFKC normalization is in "id_start xid_continue*">
xid_continue ::=  <all characters in id_continue whose NFKC normalization is in "id_continue*">

The Unicode category codes mentioned above stand for:

Lu - uppercase letters
Ll - lowercase letters
Lt - titlecase letters
Lm - modifier letters
Lo - other letters
Nl - letter numbers
Mn - nonspacing marks
Mc - spacing combining marks
Nd - decimal numbers
Pc - connector punctuations
Other_ID_Start - explicit list of characters in PropList.txt to support backwards
compatibility
Other_ID_Continue - likewise

All identifiers are converted into the normal form NFKC while parsing; comparison
of identifiers is based on NFKC.
A non-normative HTML file listing all valid identifier characters for Unicode
4.1 can be found at
https://www.dcl.hpi.uni-potsdam.de/home/loewis/table-3131.html.

2.3.1. Keywords¶
The following identifiers are used as reserved words, or keywords of the
language, and cannot be used as ordinary identifiers.  They must be spelled
exactly as written here:
False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield




2.3.2. Reserved classes of identifiers¶
Certain classes of identifiers (besides keywords) have special meanings.  These
classes are identified by the patterns of leading and trailing underscore
characters:

_*
Not imported by from module import *.  The special identifier _ is used
in the interactive interpreter to store the result of the last evaluation; it is
stored in the builtins module.  When not in interactive mode, _
has no special meaning and is not defined. See section The import statement.

Note
The name _ is often used in conjunction with internationalization;
refer to the documentation for the gettext module for more
information on this convention.


__*__
System-defined names. These names are defined by the interpreter and its
implementation (including the standard library).  Current system names are
discussed in the Special method names section and elsewhere.  More will likely
be defined in future versions of Python.  Any use of __*__ names, in
any context, that does not follow explicitly documented use, is subject to
breakage without warning.
__*
Class-private names.  Names in this category, when used within the context of a
class definition, are re-written to use a mangled form to help avoid name
clashes between “private” attributes of base and derived classes. See section
Identifiers (Names).


