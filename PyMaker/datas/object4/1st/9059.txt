link:
library/trace.html#programmatic-interface

docs:

Programmatic Interface¶


class trace.Trace(count=1, trace=1, countfuncs=0, countcallers=0, ignoremods=(), ignoredirs=(), infile=None, outfile=None, timing=False)¶
Create an object to trace execution of a single statement or expression.  All
parameters are optional.  count enables counting of line numbers.  trace
enables line execution tracing.  countfuncs enables listing of the
functions called during the run.  countcallers enables call relationship
tracking.  ignoremods is a list of modules or packages to ignore.
ignoredirs is a list of directories whose modules or packages should be
ignored.  infile is the name of the file from which to read stored count
information.  outfile is the name of the file in which to write updated
count information.  timing enables a timestamp relative to when tracing was
started to be displayed.



run(cmd)¶
Execute the command and gather statistics from the execution with
the current tracing parameters.  cmd must be a string or code object,
suitable for passing into exec().



runctx(cmd, globals=None, locals=None)¶
Execute the command and gather statistics from the execution with the
current tracing parameters, in the defined global and local
environments.  If not defined, globals and locals default to empty
dictionaries.



runfunc(func, *args, **kwds)¶
Call func with the given arguments under control of the Trace
object with the current tracing parameters.



results()¶
Return a CoverageResults object that contains the cumulative
results of all previous calls to run, runctx and runfunc
for the given Trace instance.  Does not reset the accumulated
trace results.





class trace.CoverageResults¶
A container for coverage results, created by Trace.results().  Should
not be created directly by the user.



update(other)¶
Merge in data from another CoverageResults object.



write_results(show_missing=True, summary=False, coverdir=None)¶
Write coverage results.  Set show_missing to show lines that had no
hits.  Set summary to include in the output the coverage summary per
module.  coverdir specifies the directory into which the coverage
result files will be output.  If None, the results for each source
file are placed in its directory.



A simple example demonstrating the use of the programmatic interface:
import sys
import trace

# create a Trace object, telling it what to ignore, and whether to
# do tracing or line-counting or both.
tracer = trace.Trace(
    ignoredirs=[sys.prefix, sys.exec_prefix],
    trace=0,
    count=1)

# run the new command using the given tracer
tracer.run('main()')

# make a report, placing output in the current directory
r = tracer.results()
r.write_results(show_missing=True, coverdir=".")


