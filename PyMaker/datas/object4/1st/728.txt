link:
library/string.html#custom-string-formatting

docs:

Custom String Formatting¶
The built-in string class provides the ability to do complex variable
substitutions and value formatting via the format() method described in
PEP 3101.  The Formatter class in the string module allows
you to create and customize your own string formatting behaviors using the same
implementation as the built-in format() method.


class string.Formatter¶
The Formatter class has the following public methods:


format(format_string, *args, **kwargs)¶
The primary API method.  It takes a format string and
an arbitrary set of positional and keyword arguments.
It is just a wrapper that calls vformat().

Changed in version 3.7: A format string argument is now positional-only.




vformat(format_string, args, kwargs)¶
This function does the actual work of formatting.  It is exposed as a
separate function for cases where you want to pass in a predefined
dictionary of arguments, rather than unpacking and repacking the
dictionary as individual arguments using the *args and **kwargs
syntax.  vformat() does the work of breaking up the format string
into character data and replacement fields.  It calls the various
methods described below.

In addition, the Formatter defines a number of methods that are
intended to be replaced by subclasses:


parse(format_string)¶
Loop over the format_string and return an iterable of tuples
(literal_text, field_name, format_spec, conversion).  This is used
by vformat() to break the string into either literal text, or
replacement fields.
The values in the tuple conceptually represent a span of literal text
followed by a single replacement field.  If there is no literal text
(which can happen if two replacement fields occur consecutively), then
literal_text will be a zero-length string.  If there is no replacement
field, then the values of field_name, format_spec and conversion
will be None.



get_field(field_name, args, kwargs)¶
Given field_name as returned by parse() (see above), convert it to
an object to be formatted.  Returns a tuple (obj, used_key).  The default
version takes strings of the form defined in PEP 3101, such as
“0[name]” or “label.title”.  args and kwargs are as passed in to
vformat().  The return value used_key has the same meaning as the
key parameter to get_value().



get_value(key, args, kwargs)¶
Retrieve a given field value.  The key argument will be either an
integer or a string.  If it is an integer, it represents the index of the
positional argument in args; if it is a string, then it represents a
named argument in kwargs.
The args parameter is set to the list of positional arguments to
vformat(), and the kwargs parameter is set to the dictionary of
keyword arguments.
For compound field names, these functions are only called for the first
component of the field name; Subsequent components are handled through
normal attribute and indexing operations.
So for example, the field expression ‘0.name’ would cause
get_value() to be called with a key argument of 0.  The name
attribute will be looked up after get_value() returns by calling the
built-in getattr() function.
If the index or keyword refers to an item that does not exist, then an
IndexError or KeyError should be raised.



check_unused_args(used_args, args, kwargs)¶
Implement checking for unused arguments if desired.  The arguments to this
function is the set of all argument keys that were actually referred to in
the format string (integers for positional arguments, and strings for
named arguments), and a reference to the args and kwargs that was
passed to vformat.  The set of unused args can be calculated from these
parameters.  check_unused_args() is assumed to raise an exception if
the check fails.



format_field(value, format_spec)¶
format_field() simply calls the global format() built-in.  The
method is provided so that subclasses can override it.



convert_field(value, conversion)¶
Converts the value (returned by get_field()) given a conversion type
(as in the tuple returned by the parse() method).  The default
version understands ‘s’ (str), ‘r’ (repr) and ‘a’ (ascii) conversion
types.


