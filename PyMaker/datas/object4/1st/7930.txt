link:
library/turtle.html#settings-and-special-methods

docs:

Settings and special methods¶


turtle.mode(mode=None)¶




Parameters:mode – one of the strings “standard”, “logo” or “world”



Set turtle mode (“standard”, “logo” or “world”) and perform reset.  If mode
is not given, current mode is returned.
Mode “standard” is compatible with old turtle.  Mode “logo” is
compatible with most Logo turtle graphics.  Mode “world” uses user-defined
“world coordinates”. Attention: in this mode angles appear distorted if
x/y unit-ratio doesn’t equal 1.







Mode
Initial turtle heading
positive angles



“standard”
to the right (east)
counterclockwise

“logo”
upward    (north)
clockwise



>>> mode("logo")   # resets turtle heading to north
>>> mode()
'logo'





turtle.colormode(cmode=None)¶




Parameters:cmode – one of the values 1.0 or 255



Return the colormode or set it to 1.0 or 255.  Subsequently r, g, b
values of color triples have to be in the range 0..cmode.
>>> screen.colormode(1)
>>> turtle.pencolor(240, 160, 80)
Traceback (most recent call last):
     ...
TurtleGraphicsError: bad color sequence: (240, 160, 80)
>>> screen.colormode()
1.0
>>> screen.colormode(255)
>>> screen.colormode()
255
>>> turtle.pencolor(240,160,80)





turtle.getcanvas()¶
Return the Canvas of this TurtleScreen.  Useful for insiders who know what to
do with a Tkinter Canvas.
>>> cv = screen.getcanvas()
>>> cv
<turtle.ScrolledCanvas object ...>





turtle.getshapes()¶
Return a list of names of all currently available turtle shapes.
>>> screen.getshapes()
['arrow', 'blank', 'circle', ..., 'turtle']





turtle.register_shape(name, shape=None)¶

turtle.addshape(name, shape=None)¶
There are three different ways to call this function:

name is the name of a gif-file and shape is None: Install the
corresponding image shape.
>>> screen.register_shape("turtle.gif")



Note
Image shapes do not rotate when turning the turtle, so they do not
display the heading of the turtle!


name is an arbitrary string and shape is a tuple of pairs of
coordinates: Install the corresponding polygon shape.
>>> screen.register_shape("triangle", ((5,-3), (0,5), (-5,-3)))



name is an arbitrary string and shape is a (compound) Shape
object: Install the corresponding compound shape.


Add a turtle shape to TurtleScreen’s shapelist.  Only thusly registered
shapes can be used by issuing the command shape(shapename).



turtle.turtles()¶
Return the list of turtles on the screen.
>>> for turtle in screen.turtles():
...     turtle.color("red")





turtle.window_height()¶
Return the height of the turtle window.
>>> screen.window_height()
480





turtle.window_width()¶
Return the width of the turtle window.
>>> screen.window_width()
640



