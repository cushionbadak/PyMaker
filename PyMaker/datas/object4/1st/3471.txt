link:
library/argparse.html#intermixed-parsing

docs:

Intermixed parsing¶


ArgumentParser.parse_intermixed_args(args=None, namespace=None)¶



ArgumentParser.parse_known_intermixed_args(args=None, namespace=None)¶

A number of Unix commands allow the user to intermix optional arguments with
positional arguments.  The parse_intermixed_args()
and parse_known_intermixed_args() methods
support this parsing style.
These parsers do not support all the argparse features, and will raise
exceptions if unsupported features are used.  In particular, subparsers,
argparse.REMAINDER, and mutually exclusive groups that include both
optionals and positionals are not supported.
The following example shows the difference between
parse_known_args() and
parse_intermixed_args(): the former returns ['2',
'3'] as unparsed arguments, while the latter collects all the positionals
into rest.
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo')
>>> parser.add_argument('cmd')
>>> parser.add_argument('rest', nargs='*', type=int)
>>> parser.parse_known_args('doit 1 --foo bar 2 3'.split())
(Namespace(cmd='doit', foo='bar', rest=[1]), ['2', '3'])
>>> parser.parse_intermixed_args('doit 1 --foo bar 2 3'.split())
Namespace(cmd='doit', foo='bar', rest=[1, 2, 3])


parse_known_intermixed_args() returns a two item tuple
containing the populated namespace and the list of remaining argument strings.
parse_intermixed_args() raises an error if there are any
remaining unparsed argument strings.

New in version 3.7.

