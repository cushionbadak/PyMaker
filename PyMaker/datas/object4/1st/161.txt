link:
reference/datamodel.html#coroutine.close

docs:

<dt id="coroutine.close">
<code class="descclassname">coroutine.</code><code class="descname">close</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#coroutine.close" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Causes the coroutine to clean itself up and exit.  If the coroutine
is suspended, this method first delegates to the <a class="reference internal" href="expressions.html#generator.close" title="generator.close"><code class="xref py py-meth docutils literal notranslate"><span class="pre">close()</span></code></a>
method of the iterator that caused the coroutine to suspend, if it
has such a method.  Then it raises <a class="reference internal" href="../library/exceptions.html#GeneratorExit" title="GeneratorExit"><code class="xref py py-exc docutils literal notranslate"><span class="pre">GeneratorExit</span></code></a> at the
suspension point, causing the coroutine to immediately clean itself up.
Finally, the coroutine is marked as having finished executing, even if
it was never started.</p>
<p>Coroutine objects are automatically closed using the above process when
they are about to be destroyed.</p>
</dd>