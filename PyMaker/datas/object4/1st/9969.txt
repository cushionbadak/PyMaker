link:
library/py_compile.html#py_compile.PycInvalidationMode

docs:

<dt id="py_compile.PycInvalidationMode">
<em class="property">class </em><code class="descclassname">py_compile.</code><code class="descname">PycInvalidationMode</code><a class="headerlink" href="#py_compile.PycInvalidationMode" title="Permalink to this definition">¶</a></dt>
<dd><p>A enumeration of possible methods the interpreter can use to determine
whether a bytecode file is up to date with a source file. The <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> file
indicates the desired invalidation mode in its header. See
<a class="reference internal" href="../reference/import.html#pyc-invalidation"><span class="std std-ref">Cached bytecode invalidation</span></a> for more information on how Python invalidates
<code class="docutils literal notranslate"><span class="pre">.pyc</span></code> files at runtime.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7.</span></p>
</div>
<dl class="attribute">
<dt id="py_compile.PycInvalidationMode.TIMESTAMP">
<code class="descname">TIMESTAMP</code><a class="headerlink" href="#py_compile.PycInvalidationMode.TIMESTAMP" title="Permalink to this definition">¶</a></dt>
<dd><p>The <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> file includes the timestamp and size of the source file,
which Python will compare against the metadata of the source file at
runtime to determine if the <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> file needs to be regenerated.</p>
</dd></dl>
<dl class="attribute">
<dt id="py_compile.PycInvalidationMode.CHECKED_HASH">
<code class="descname">CHECKED_HASH</code><a class="headerlink" href="#py_compile.PycInvalidationMode.CHECKED_HASH" title="Permalink to this definition">¶</a></dt>
<dd><p>The <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> file includes a hash of the source file content, which Python
will compare against the source at runtime to determine if the <code class="docutils literal notranslate"><span class="pre">.pyc</span></code>
file needs to be regenerated.</p>
</dd></dl>
<dl class="attribute">
<dt id="py_compile.PycInvalidationMode.UNCHECKED_HASH">
<code class="descname">UNCHECKED_HASH</code><a class="headerlink" href="#py_compile.PycInvalidationMode.UNCHECKED_HASH" title="Permalink to this definition">¶</a></dt>
<dd><p>Like <a class="reference internal" href="#py_compile.PycInvalidationMode.CHECKED_HASH" title="py_compile.PycInvalidationMode.CHECKED_HASH"><code class="xref py py-attr docutils literal notranslate"><span class="pre">CHECKED_HASH</span></code></a>, the <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> file includes a hash of the source
file content. However, Python will at runtime assume the <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> file is
up to date and not validate the <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> against the source file at all.</p>
<p>This option is useful when the <code class="docutils literal notranslate"><span class="pre">.pycs</span></code> are kept up to date by some
system external to Python like a build system.</p>
</dd></dl>
</dd>