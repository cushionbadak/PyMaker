link:
library/contextlib.html#reentrant-context-managers

docs:

Reentrant context managers¶
More sophisticated context managers may be “reentrant”. These context
managers can not only be used in multiple with statements,
but may also be used inside a with statement that is already
using the same context manager.
threading.RLock is an example of a reentrant context manager, as are
suppress() and redirect_stdout(). Here’s a very simple example of
reentrant use:
>>> from contextlib import redirect_stdout
>>> from io import StringIO
>>> stream = StringIO()
>>> write_to_stream = redirect_stdout(stream)
>>> with write_to_stream:
...     print("This is written to the stream rather than stdout")
...     with write_to_stream:
...         print("This is also written to the stream")
...
>>> print("This is written directly to stdout")
This is written directly to stdout
>>> print(stream.getvalue())
This is written to the stream rather than stdout
This is also written to the stream


Real world examples of reentrancy are more likely to involve multiple
functions calling each other and hence be far more complicated than this
example.
Note also that being reentrant is not the same thing as being thread safe.
redirect_stdout(), for example, is definitely not thread safe, as it
makes a global modification to the system state by binding sys.stdout
to a different stream.
