link:
library/asyncio-stream.html#asyncio.StreamWriter

docs:

<dt id="asyncio.StreamWriter">
<em class="property">class </em><code class="descclassname">asyncio.</code><code class="descname">StreamWriter</code><a class="headerlink" href="#asyncio.StreamWriter" title="Permalink to this definition">¶</a></dt>
<dd><p>Represents a writer object that provides APIs to write data
to the IO stream.</p>
<p>It is not recommended to instantiate <em>StreamWriter</em> objects
directly; use <a class="reference internal" href="#asyncio.open_connection" title="asyncio.open_connection"><code class="xref py py-func docutils literal notranslate"><span class="pre">open_connection()</span></code></a> and <a class="reference internal" href="#asyncio.start_server" title="asyncio.start_server"><code class="xref py py-func docutils literal notranslate"><span class="pre">start_server()</span></code></a>
instead.</p>
<dl class="method">
<dt id="asyncio.StreamWriter.can_write_eof">
<code class="descname">can_write_eof</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.StreamWriter.can_write_eof" title="Permalink to this definition">¶</a></dt>
<dd><p>Return <em>True</em> if the underlying transport supports
the <a class="reference internal" href="#asyncio.StreamWriter.write_eof" title="asyncio.StreamWriter.write_eof"><code class="xref py py-meth docutils literal notranslate"><span class="pre">write_eof()</span></code></a> method, <em>False</em> otherwise.</p>
</dd></dl>
<dl class="method">
<dt id="asyncio.StreamWriter.write_eof">
<code class="descname">write_eof</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.StreamWriter.write_eof" title="Permalink to this definition">¶</a></dt>
<dd><p>Close the write end of the stream after the buffered write
data is flushed.</p>
</dd></dl>
<dl class="attribute">
<dt id="asyncio.StreamWriter.transport">
<code class="descname">transport</code><a class="headerlink" href="#asyncio.StreamWriter.transport" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the underlying asyncio transport.</p>
</dd></dl>
<dl class="method">
<dt id="asyncio.StreamWriter.get_extra_info">
<code class="descname">get_extra_info</code><span class="sig-paren">(</span><em>name</em>, <em>default=None</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.StreamWriter.get_extra_info" title="Permalink to this definition">¶</a></dt>
<dd><p>Access optional transport information; see
<a class="reference internal" href="asyncio-protocol.html#asyncio.BaseTransport.get_extra_info" title="asyncio.BaseTransport.get_extra_info"><code class="xref py py-meth docutils literal notranslate"><span class="pre">BaseTransport.get_extra_info()</span></code></a> for details.</p>
</dd></dl>
<dl class="method">
<dt id="asyncio.StreamWriter.write">
<code class="descname">write</code><span class="sig-paren">(</span><em>data</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.StreamWriter.write" title="Permalink to this definition">¶</a></dt>
<dd><p>Write <em>data</em> to the stream.</p>
<p>This method is not subject to flow control.  Calls to <code class="docutils literal notranslate"><span class="pre">write()</span></code> should
be followed by <a class="reference internal" href="#asyncio.StreamWriter.drain" title="asyncio.StreamWriter.drain"><code class="xref py py-meth docutils literal notranslate"><span class="pre">drain()</span></code></a>.</p>
</dd></dl>
<dl class="method">
<dt id="asyncio.StreamWriter.writelines">
<code class="descname">writelines</code><span class="sig-paren">(</span><em>data</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.StreamWriter.writelines" title="Permalink to this definition">¶</a></dt>
<dd><p>Write a list (or any iterable) of bytes to the stream.</p>
<p>This method is not subject to flow control. Calls to <code class="docutils literal notranslate"><span class="pre">writelines()</span></code>
should be followed by <a class="reference internal" href="#asyncio.StreamWriter.drain" title="asyncio.StreamWriter.drain"><code class="xref py py-meth docutils literal notranslate"><span class="pre">drain()</span></code></a>.</p>
</dd></dl>
<dl class="method">
<dt id="asyncio.StreamWriter.drain">
<em class="property">coroutine </em><code class="descname">drain</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.StreamWriter.drain" title="Permalink to this definition">¶</a></dt>
<dd><p>Wait until it is appropriate to resume writing to the stream.
Example:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="k">await</span> <span class="n">writer</span><span class="o">.</span><span class="n">drain</span><span class="p">()</span>
</pre></div>
</div>
<p>This is a flow control method that interacts with the underlying
IO write buffer.  When the size of the buffer reaches
the high watermark, <em>drain()</em> blocks until the size of the
buffer is drained down to the low watermark and writing can
be resumed.  When there is nothing to wait for, the <a class="reference internal" href="#asyncio.StreamWriter.drain" title="asyncio.StreamWriter.drain"><code class="xref py py-meth docutils literal notranslate"><span class="pre">drain()</span></code></a>
returns immediately.</p>
</dd></dl>
<dl class="method">
<dt id="asyncio.StreamWriter.close">
<code class="descname">close</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.StreamWriter.close" title="Permalink to this definition">¶</a></dt>
<dd><p>Close the stream.</p>
</dd></dl>
<dl class="method">
<dt id="asyncio.StreamWriter.is_closing">
<code class="descname">is_closing</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.StreamWriter.is_closing" title="Permalink to this definition">¶</a></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if the stream is closed or in the process of
being closed.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7.</span></p>
</div>
</dd></dl>
<dl class="method">
<dt id="asyncio.StreamWriter.wait_closed">
<em class="property">coroutine </em><code class="descname">wait_closed</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.StreamWriter.wait_closed" title="Permalink to this definition">¶</a></dt>
<dd><p>Wait until the stream is closed.</p>
<p>Should be called after <a class="reference internal" href="#asyncio.StreamWriter.close" title="asyncio.StreamWriter.close"><code class="xref py py-meth docutils literal notranslate"><span class="pre">close()</span></code></a> to wait until the underlying
connection is closed.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7.</span></p>
</div>
</dd></dl>
</dd>