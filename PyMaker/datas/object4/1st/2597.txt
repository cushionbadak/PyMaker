link:
library/tarfile.html#tarfile.open

docs:

<dt id="tarfile.open">
<code class="descclassname">tarfile.</code><code class="descname">open</code><span class="sig-paren">(</span><em>name=None</em>, <em>mode='r'</em>, <em>fileobj=None</em>, <em>bufsize=10240</em>, <em>**kwargs</em><span class="sig-paren">)</span><a class="headerlink" href="#tarfile.open" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Return a <a class="reference internal" href="#tarfile.TarFile" title="tarfile.TarFile"><code class="xref py py-class docutils literal notranslate"><span class="pre">TarFile</span></code></a> object for the pathname <em>name</em>. For detailed
information on <a class="reference internal" href="#tarfile.TarFile" title="tarfile.TarFile"><code class="xref py py-class docutils literal notranslate"><span class="pre">TarFile</span></code></a> objects and the keyword arguments that are
allowed, see <a class="reference internal" href="#tarfile-objects"><span class="std std-ref">TarFile Objects</span></a>.</p>
<p><em>mode</em> has to be a string of the form <code class="docutils literal notranslate"><span class="pre">'filemode[:compression]'</span></code>, it defaults
to <code class="docutils literal notranslate"><span class="pre">'r'</span></code>. Here is a full list of mode combinations:</p>
<table border="1" class="docutils">
<colgroup>
<col width="29%"/>
<col width="71%"/>
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">mode</th>
<th class="head">action</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'r'</span> <span class="pre">or</span> <span class="pre">'r:*'</span></code></td>
<td>Open for reading with transparent
compression (recommended).</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'r:'</span></code></td>
<td>Open for reading exclusively without
compression.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'r:gz'</span></code></td>
<td>Open for reading with gzip compression.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'r:bz2'</span></code></td>
<td>Open for reading with bzip2 compression.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'r:xz'</span></code></td>
<td>Open for reading with lzma compression.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'x'</span></code> or
<code class="docutils literal notranslate"><span class="pre">'x:'</span></code></td>
<td>Create a tarfile exclusively without
compression.
Raise an <a class="reference internal" href="exceptions.html#FileExistsError" title="FileExistsError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FileExistsError</span></code></a> exception
if it already exists.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'x:gz'</span></code></td>
<td>Create a tarfile with gzip compression.
Raise an <a class="reference internal" href="exceptions.html#FileExistsError" title="FileExistsError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FileExistsError</span></code></a> exception
if it already exists.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'x:bz2'</span></code></td>
<td>Create a tarfile with bzip2 compression.
Raise an <a class="reference internal" href="exceptions.html#FileExistsError" title="FileExistsError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FileExistsError</span></code></a> exception
if it already exists.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'x:xz'</span></code></td>
<td>Create a tarfile with lzma compression.
Raise an <a class="reference internal" href="exceptions.html#FileExistsError" title="FileExistsError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FileExistsError</span></code></a> exception
if it already exists.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'a'</span> <span class="pre">or</span> <span class="pre">'a:'</span></code></td>
<td>Open for appending with no compression. The
file is created if it does not exist.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'w'</span> <span class="pre">or</span> <span class="pre">'w:'</span></code></td>
<td>Open for uncompressed writing.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'w:gz'</span></code></td>
<td>Open for gzip compressed writing.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'w:bz2'</span></code></td>
<td>Open for bzip2 compressed writing.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'w:xz'</span></code></td>
<td>Open for lzma compressed writing.</td>
</tr>
</tbody>
</table>
<p>Note that <code class="docutils literal notranslate"><span class="pre">'a:gz'</span></code>, <code class="docutils literal notranslate"><span class="pre">'a:bz2'</span></code> or <code class="docutils literal notranslate"><span class="pre">'a:xz'</span></code> is not possible. If <em>mode</em>
is not suitable to open a certain (compressed) file for reading,
<a class="reference internal" href="#tarfile.ReadError" title="tarfile.ReadError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ReadError</span></code></a> is raised. Use <em>mode</em> <code class="docutils literal notranslate"><span class="pre">'r'</span></code> to avoid this.  If a
compression method is not supported, <a class="reference internal" href="#tarfile.CompressionError" title="tarfile.CompressionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">CompressionError</span></code></a> is raised.</p>
<p>If <em>fileobj</em> is specified, it is used as an alternative to a <a class="reference internal" href="../glossary.html#term-file-object"><span class="xref std std-term">file object</span></a>
opened in binary mode for <em>name</em>. It is supposed to be at position 0.</p>
<p>For modes <code class="docutils literal notranslate"><span class="pre">'w:gz'</span></code>, <code class="docutils literal notranslate"><span class="pre">'r:gz'</span></code>, <code class="docutils literal notranslate"><span class="pre">'w:bz2'</span></code>, <code class="docutils literal notranslate"><span class="pre">'r:bz2'</span></code>, <code class="docutils literal notranslate"><span class="pre">'x:gz'</span></code>,
<code class="docutils literal notranslate"><span class="pre">'x:bz2'</span></code>, <a class="reference internal" href="#tarfile.open" title="tarfile.open"><code class="xref py py-func docutils literal notranslate"><span class="pre">tarfile.open()</span></code></a> accepts the keyword argument
<em>compresslevel</em> (default <code class="docutils literal notranslate"><span class="pre">9</span></code>) to specify the compression level of the file.</p>
<p>For special purposes, there is a second format for <em>mode</em>:
<code class="docutils literal notranslate"><span class="pre">'filemode|[compression]'</span></code>.  <a class="reference internal" href="#tarfile.open" title="tarfile.open"><code class="xref py py-func docutils literal notranslate"><span class="pre">tarfile.open()</span></code></a> will return a <a class="reference internal" href="#tarfile.TarFile" title="tarfile.TarFile"><code class="xref py py-class docutils literal notranslate"><span class="pre">TarFile</span></code></a>
object that processes its data as a stream of blocks.  No random seeking will
be done on the file. If given, <em>fileobj</em> may be any object that has a
<code class="xref py py-meth docutils literal notranslate"><span class="pre">read()</span></code> or <code class="xref py py-meth docutils literal notranslate"><span class="pre">write()</span></code> method (depending on the <em>mode</em>). <em>bufsize</em>
specifies the blocksize and defaults to <code class="docutils literal notranslate"><span class="pre">20</span> <span class="pre">*</span> <span class="pre">512</span></code> bytes. Use this variant
in combination with e.g. <code class="docutils literal notranslate"><span class="pre">sys.stdin</span></code>, a socket <a class="reference internal" href="../glossary.html#term-file-object"><span class="xref std std-term">file object</span></a> or a tape
device. However, such a <a class="reference internal" href="#tarfile.TarFile" title="tarfile.TarFile"><code class="xref py py-class docutils literal notranslate"><span class="pre">TarFile</span></code></a> object is limited in that it does
not allow random access, see <a class="reference internal" href="#tar-examples"><span class="std std-ref">Examples</span></a>.  The currently
possible modes:</p>
<table border="1" class="docutils">
<colgroup>
<col width="23%"/>
<col width="77%"/>
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Mode</th>
<th class="head">Action</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'r|*'</span></code></td>
<td>Open a <em>stream</em> of tar blocks for reading
with transparent compression.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'r|'</span></code></td>
<td>Open a <em>stream</em> of uncompressed tar blocks
for reading.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'r|gz'</span></code></td>
<td>Open a gzip compressed <em>stream</em> for
reading.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'r|bz2'</span></code></td>
<td>Open a bzip2 compressed <em>stream</em> for
reading.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'r|xz'</span></code></td>
<td>Open an lzma compressed <em>stream</em> for
reading.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'w|'</span></code></td>
<td>Open an uncompressed <em>stream</em> for writing.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'w|gz'</span></code></td>
<td>Open a gzip compressed <em>stream</em> for
writing.</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'w|bz2'</span></code></td>
<td>Open a bzip2 compressed <em>stream</em> for
writing.</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'w|xz'</span></code></td>
<td>Open an lzma compressed <em>stream</em> for
writing.</td>
</tr>
</tbody>
</table>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>The <code class="docutils literal notranslate"><span class="pre">'x'</span></code> (exclusive creation) mode was added.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6: </span>The <em>name</em> parameter accepts a <a class="reference internal" href="../glossary.html#term-path-like-object"><span class="xref std std-term">path-like object</span></a>.</p>
</div>
</dd>