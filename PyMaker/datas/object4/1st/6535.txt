link:
library/cgi.html#cgi.parse_multipart

docs:

<dt id="cgi.parse_multipart">
<code class="descclassname">cgi.</code><code class="descname">parse_multipart</code><span class="sig-paren">(</span><em>fp</em>, <em>pdict</em>, <em>encoding="utf-8"</em>, <em>errors="replace"</em><span class="sig-paren">)</span><a class="headerlink" href="#cgi.parse_multipart" title="Permalink to this definition">¶</a></dt>
<dd><p>Parse input of type <em class="mimetype">multipart/form-data</em> (for  file uploads).
Arguments are <em>fp</em> for the input file, <em>pdict</em> for a dictionary containing
other parameters in the <em class="mailheader">Content-Type</em> header, and <em>encoding</em>,
the request encoding.</p>
<p>Returns a dictionary just like <a class="reference internal" href="urllib.parse.html#urllib.parse.parse_qs" title="urllib.parse.parse_qs"><code class="xref py py-func docutils literal notranslate"><span class="pre">urllib.parse.parse_qs()</span></code></a>: keys are the
field names, each value is a list of values for that field. For non-file
fields, the value is a list of strings.</p>
<p>This is easy to use but not much good if you are expecting megabytes to be
uploaded — in that case, use the <code class="xref py py-class docutils literal notranslate"><span class="pre">FieldStorage</span></code> class instead
which is much more flexible.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span>Added the <em>encoding</em> and <em>errors</em> parameters.  For non-file fields, the
value is now a list of strings, not bytes.</p>
</div>
</dd>