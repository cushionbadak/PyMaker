link:
library/shutil.html#shutil.copytree

docs:

<dt id="shutil.copytree">
<code class="descclassname">shutil.</code><code class="descname">copytree</code><span class="sig-paren">(</span><em>src</em>, <em>dst</em>, <em>symlinks=False</em>, <em>ignore=None</em>, <em>copy_function=copy2</em>, <em>ignore_dangling_symlinks=False</em><span class="sig-paren">)</span><a class="headerlink" href="#shutil.copytree" title="Permalink to this definition">¶</a></dt>
<dd><p>Recursively copy an entire directory tree rooted at <em>src</em>, returning the
destination directory.  The destination
directory, named by <em>dst</em>, must not already exist; it will be created as
well as missing parent directories.  Permissions and times of directories
are copied with <a class="reference internal" href="#shutil.copystat" title="shutil.copystat"><code class="xref py py-func docutils literal notranslate"><span class="pre">copystat()</span></code></a>, individual files are copied using
<a class="reference internal" href="#shutil.copy2" title="shutil.copy2"><code class="xref py py-func docutils literal notranslate"><span class="pre">shutil.copy2()</span></code></a>.</p>
<p>If <em>symlinks</em> is true, symbolic links in the source tree are represented as
symbolic links in the new tree and the metadata of the original links will
be copied as far as the platform allows; if false or omitted, the contents
and metadata of the linked files are copied to the new tree.</p>
<p>When <em>symlinks</em> is false, if the file pointed by the symlink doesn’t
exist, an exception will be added in the list of errors raised in
an <a class="reference internal" href="#shutil.Error" title="shutil.Error"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Error</span></code></a> exception at the end of the copy process.
You can set the optional <em>ignore_dangling_symlinks</em> flag to true if you
want to silence this exception. Notice that this option has no effect
on platforms that don’t support <a class="reference internal" href="os.html#os.symlink" title="os.symlink"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.symlink()</span></code></a>.</p>
<p>If <em>ignore</em> is given, it must be a callable that will receive as its
arguments the directory being visited by <a class="reference internal" href="#shutil.copytree" title="shutil.copytree"><code class="xref py py-func docutils literal notranslate"><span class="pre">copytree()</span></code></a>, and a list of its
contents, as returned by <a class="reference internal" href="os.html#os.listdir" title="os.listdir"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.listdir()</span></code></a>.  Since <a class="reference internal" href="#shutil.copytree" title="shutil.copytree"><code class="xref py py-func docutils literal notranslate"><span class="pre">copytree()</span></code></a> is
called recursively, the <em>ignore</em> callable will be called once for each
directory that is copied.  The callable must return a sequence of directory
and file names relative to the current directory (i.e. a subset of the items
in its second argument); these names will then be ignored in the copy
process.  <a class="reference internal" href="#shutil.ignore_patterns" title="shutil.ignore_patterns"><code class="xref py py-func docutils literal notranslate"><span class="pre">ignore_patterns()</span></code></a> can be used to create such a callable that
ignores names based on glob-style patterns.</p>
<p>If exception(s) occur, an <a class="reference internal" href="#shutil.Error" title="shutil.Error"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Error</span></code></a> is raised with a list of reasons.</p>
<p>If <em>copy_function</em> is given, it must be a callable that will be used to copy
each file. It will be called with the source path and the destination path
as arguments. By default, <a class="reference internal" href="#shutil.copy2" title="shutil.copy2"><code class="xref py py-func docutils literal notranslate"><span class="pre">shutil.copy2()</span></code></a> is used, but any function
that supports the same signature (like <a class="reference internal" href="#shutil.copy" title="shutil.copy"><code class="xref py py-func docutils literal notranslate"><span class="pre">shutil.copy()</span></code></a>) can be used.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.3: </span>Copy metadata when <em>symlinks</em> is false.
Now returns <em>dst</em>.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>Added the <em>copy_function</em> argument to be able to provide a custom copy
function.
Added the <em>ignore_dangling_symlinks</em> argument to silent dangling symlinks
errors when <em>symlinks</em> is false.</p>
</div>
</dd>