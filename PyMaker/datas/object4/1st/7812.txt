link:
library/turtle.html#methods-of-rawturtle-turtle-and-corresponding-functions

docs:

Methods of RawTurtle/Turtle and corresponding functions¶
Most of the examples in this section refer to a Turtle instance called
turtle.

Turtle motion¶


turtle.forward(distance)¶

turtle.fd(distance)¶




Parameters:distance – a number (integer or float)



Move the turtle forward by the specified distance, in the direction the
turtle is headed.
>>> turtle.position()
(0.00,0.00)
>>> turtle.forward(25)
>>> turtle.position()
(25.00,0.00)
>>> turtle.forward(-75)
>>> turtle.position()
(-50.00,0.00)





turtle.back(distance)¶

turtle.bk(distance)¶

turtle.backward(distance)¶




Parameters:distance – a number



Move the turtle backward by distance, opposite to the direction the
turtle is headed.  Do not change the turtle’s heading.
>>> turtle.position()
(0.00,0.00)
>>> turtle.backward(30)
>>> turtle.position()
(-30.00,0.00)





turtle.right(angle)¶

turtle.rt(angle)¶




Parameters:angle – a number (integer or float)



Turn turtle right by angle units.  (Units are by default degrees, but
can be set via the degrees() and radians() functions.)  Angle
orientation depends on the turtle mode, see mode().
>>> turtle.heading()
22.0
>>> turtle.right(45)
>>> turtle.heading()
337.0





turtle.left(angle)¶

turtle.lt(angle)¶




Parameters:angle – a number (integer or float)



Turn turtle left by angle units.  (Units are by default degrees, but
can be set via the degrees() and radians() functions.)  Angle
orientation depends on the turtle mode, see mode().
>>> turtle.heading()
22.0
>>> turtle.left(45)
>>> turtle.heading()
67.0





turtle.goto(x, y=None)¶

turtle.setpos(x, y=None)¶

turtle.setposition(x, y=None)¶




Parameters:
x – a number or a pair/vector of numbers
y – a number or None





If y is None, x must be a pair of coordinates or a Vec2D
(e.g. as returned by pos()).
Move turtle to an absolute position.  If the pen is down, draw line.  Do
not change the turtle’s orientation.
>>> tp = turtle.pos()
>>> tp
(0.00,0.00)
>>> turtle.setpos(60,30)
>>> turtle.pos()
(60.00,30.00)
>>> turtle.setpos((20,80))
>>> turtle.pos()
(20.00,80.00)
>>> turtle.setpos(tp)
>>> turtle.pos()
(0.00,0.00)





turtle.setx(x)¶




Parameters:x – a number (integer or float)



Set the turtle’s first coordinate to x, leave second coordinate
unchanged.
>>> turtle.position()
(0.00,240.00)
>>> turtle.setx(10)
>>> turtle.position()
(10.00,240.00)





turtle.sety(y)¶




Parameters:y – a number (integer or float)



Set the turtle’s second coordinate to y, leave first coordinate unchanged.
>>> turtle.position()
(0.00,40.00)
>>> turtle.sety(-10)
>>> turtle.position()
(0.00,-10.00)





turtle.setheading(to_angle)¶

turtle.seth(to_angle)¶




Parameters:to_angle – a number (integer or float)



Set the orientation of the turtle to to_angle.  Here are some common
directions in degrees:






standard mode
logo mode



0 - east
0 - north

90 - north
90 - east

180 - west
180 - south

270 - south
270 - west



>>> turtle.setheading(90)
>>> turtle.heading()
90.0





turtle.home()¶
Move turtle to the origin – coordinates (0,0) – and set its heading to
its start-orientation (which depends on the mode, see mode()).
>>> turtle.heading()
90.0
>>> turtle.position()
(0.00,-10.00)
>>> turtle.home()
>>> turtle.position()
(0.00,0.00)
>>> turtle.heading()
0.0





turtle.circle(radius, extent=None, steps=None)¶




Parameters:
radius – a number
extent – a number (or None)
steps – an integer (or None)





Draw a circle with given radius.  The center is radius units left of
the turtle; extent – an angle – determines which part of the circle
is drawn.  If extent is not given, draw the entire circle.  If extent
is not a full circle, one endpoint of the arc is the current pen
position.  Draw the arc in counterclockwise direction if radius is
positive, otherwise in clockwise direction.  Finally the direction of the
turtle is changed by the amount of extent.
As the circle is approximated by an inscribed regular polygon, steps
determines the number of steps to use.  If not given, it will be
calculated automatically.  May be used to draw regular polygons.
>>> turtle.home()
>>> turtle.position()
(0.00,0.00)
>>> turtle.heading()
0.0
>>> turtle.circle(50)
>>> turtle.position()
(-0.00,0.00)
>>> turtle.heading()
0.0
>>> turtle.circle(120, 180)  # draw a semicircle
>>> turtle.position()
(0.00,240.00)
>>> turtle.heading()
180.0





turtle.dot(size=None, *color)¶




Parameters:
size – an integer >= 1 (if given)
color – a colorstring or a numeric color tuple





Draw a circular dot with diameter size, using color.  If size is
not given, the maximum of pensize+4 and 2*pensize is used.
>>> turtle.home()
>>> turtle.dot()
>>> turtle.fd(50); turtle.dot(20, "blue"); turtle.fd(50)
>>> turtle.position()
(100.00,-0.00)
>>> turtle.heading()
0.0





turtle.stamp()¶
Stamp a copy of the turtle shape onto the canvas at the current turtle
position.  Return a stamp_id for that stamp, which can be used to delete
it by calling clearstamp(stamp_id).
>>> turtle.color("blue")
>>> turtle.stamp()
11
>>> turtle.fd(50)





turtle.clearstamp(stampid)¶




Parameters:stampid – an integer, must be return value of previous
stamp() call



Delete stamp with given stampid.
>>> turtle.position()
(150.00,-0.00)
>>> turtle.color("blue")
>>> astamp = turtle.stamp()
>>> turtle.fd(50)
>>> turtle.position()
(200.00,-0.00)
>>> turtle.clearstamp(astamp)
>>> turtle.position()
(200.00,-0.00)





turtle.clearstamps(n=None)¶




Parameters:n – an integer (or None)



Delete all or first/last n of turtle’s stamps.  If n is None, delete
all stamps, if n > 0 delete first n stamps, else if n < 0 delete
last n stamps.
>>> for i in range(8):
...     turtle.stamp(); turtle.fd(30)
13
14
15
16
17
18
19
20
>>> turtle.clearstamps(2)
>>> turtle.clearstamps(-2)
>>> turtle.clearstamps()





turtle.undo()¶
Undo (repeatedly) the last turtle action(s).  Number of available
undo actions is determined by the size of the undobuffer.
>>> for i in range(4):
...     turtle.fd(50); turtle.lt(80)
...
>>> for i in range(8):
...     turtle.undo()





turtle.speed(speed=None)¶




Parameters:speed – an integer in the range 0..10 or a speedstring (see below)



Set the turtle’s speed to an integer value in the range 0..10.  If no
argument is given, return current speed.
If input is a number greater than 10 or smaller than 0.5, speed is set
to 0.  Speedstrings are mapped to speedvalues as follows:

“fastest”:  0
“fast”:  10
“normal”:  6
“slow”:  3
“slowest”:  1

Speeds from 1 to 10 enforce increasingly faster animation of line drawing
and turtle turning.
Attention: speed = 0 means that no animation takes
place. forward/back makes turtle jump and likewise left/right make the
turtle turn instantly.
>>> turtle.speed()
3
>>> turtle.speed('normal')
>>> turtle.speed()
6
>>> turtle.speed(9)
>>> turtle.speed()
9





Tell Turtle’s state¶


turtle.position()¶

turtle.pos()¶
Return the turtle’s current location (x,y) (as a Vec2D vector).
>>> turtle.pos()
(440.00,-0.00)





turtle.towards(x, y=None)¶




Parameters:
x – a number or a pair/vector of numbers or a turtle instance
y – a number if x is a number, else None





Return the angle between the line from turtle position to position specified
by (x,y), the vector or the other turtle.  This depends on the turtle’s start
orientation which depends on the mode - “standard”/”world” or “logo”).
>>> turtle.goto(10, 10)
>>> turtle.towards(0,0)
225.0





turtle.xcor()¶
Return the turtle’s x coordinate.
>>> turtle.home()
>>> turtle.left(50)
>>> turtle.forward(100)
>>> turtle.pos()
(64.28,76.60)
>>> print(round(turtle.xcor(), 5))
64.27876





turtle.ycor()¶
Return the turtle’s y coordinate.
>>> turtle.home()
>>> turtle.left(60)
>>> turtle.forward(100)
>>> print(turtle.pos())
(50.00,86.60)
>>> print(round(turtle.ycor(), 5))
86.60254





turtle.heading()¶
Return the turtle’s current heading (value depends on the turtle mode, see
mode()).
>>> turtle.home()
>>> turtle.left(67)
>>> turtle.heading()
67.0





turtle.distance(x, y=None)¶




Parameters:
x – a number or a pair/vector of numbers or a turtle instance
y – a number if x is a number, else None





Return the distance from the turtle to (x,y), the given vector, or the given
other turtle, in turtle step units.
>>> turtle.home()
>>> turtle.distance(30,40)
50.0
>>> turtle.distance((30,40))
50.0
>>> joe = Turtle()
>>> joe.forward(77)
>>> turtle.distance(joe)
77.0





Settings for measurement¶


turtle.degrees(fullcircle=360.0)¶




Parameters:fullcircle – a number



Set angle measurement units, i.e. set number of “degrees” for a full circle.
Default value is 360 degrees.
>>> turtle.home()
>>> turtle.left(90)
>>> turtle.heading()
90.0

Change angle measurement unit to grad (also known as gon,
grade, or gradian and equals 1/100-th of the right angle.)
>>> turtle.degrees(400.0)
>>> turtle.heading()
100.0
>>> turtle.degrees(360)
>>> turtle.heading()
90.0





turtle.radians()¶
Set the angle measurement units to radians.  Equivalent to
degrees(2*math.pi).
>>> turtle.home()
>>> turtle.left(90)
>>> turtle.heading()
90.0
>>> turtle.radians()
>>> turtle.heading()
1.5707963267948966





Pen control¶

Drawing state¶


turtle.pendown()¶

turtle.pd()¶

turtle.down()¶
Pull the pen down – drawing when moving.



turtle.penup()¶

turtle.pu()¶

turtle.up()¶
Pull the pen up – no drawing when moving.



turtle.pensize(width=None)¶

turtle.width(width=None)¶




Parameters:width – a positive number



Set the line thickness to width or return it.  If resizemode is set to
“auto” and turtleshape is a polygon, that polygon is drawn with the same line
thickness.  If no argument is given, the current pensize is returned.
>>> turtle.pensize()
1
>>> turtle.pensize(10)   # from here on lines of width 10 are drawn





turtle.pen(pen=None, **pendict)¶




Parameters:
pen – a dictionary with some or all of the below listed keys
pendict – one or more keyword-arguments with the below listed keys as keywords





Return or set the pen’s attributes in a “pen-dictionary” with the following
key/value pairs:

“shown”: True/False
“pendown”: True/False
“pencolor”: color-string or color-tuple
“fillcolor”: color-string or color-tuple
“pensize”: positive number
“speed”: number in range 0..10
“resizemode”: “auto” or “user” or “noresize”
“stretchfactor”: (positive number, positive number)
“outline”: positive number
“tilt”: number

This dictionary can be used as argument for a subsequent call to pen()
to restore the former pen-state.  Moreover one or more of these attributes
can be provided as keyword-arguments.  This can be used to set several pen
attributes in one statement.
>>> turtle.pen(fillcolor="black", pencolor="red", pensize=10)
>>> sorted(turtle.pen().items())
[('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),
 ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),
 ('shearfactor', 0.0), ('shown', True), ('speed', 9),
 ('stretchfactor', (1.0, 1.0)), ('tilt', 0.0)]
>>> penstate=turtle.pen()
>>> turtle.color("yellow", "")
>>> turtle.penup()
>>> sorted(turtle.pen().items())[:3]
[('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow')]
>>> turtle.pen(penstate, fillcolor="green")
>>> sorted(turtle.pen().items())[:3]
[('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red')]





turtle.isdown()¶
Return True if pen is down, False if it’s up.
>>> turtle.penup()
>>> turtle.isdown()
False
>>> turtle.pendown()
>>> turtle.isdown()
True





Color control¶


turtle.pencolor(*args)¶
Return or set the pencolor.
Four input formats are allowed:

pencolor()
Return the current pencolor as color specification string or
as a tuple (see example).  May be used as input to another
color/pencolor/fillcolor call.
pencolor(colorstring)
Set pencolor to colorstring, which is a Tk color specification string,
such as "red", "yellow", or "#33cc8c".
pencolor((r, g, b))
Set pencolor to the RGB color represented by the tuple of r, g, and
b.  Each of r, g, and b must be in the range 0..colormode, where
colormode is either 1.0 or 255 (see colormode()).
pencolor(r, g, b)

Set pencolor to the RGB color represented by r, g, and b.  Each of
r, g, and b must be in the range 0..colormode.
If turtleshape is a polygon, the outline of that polygon is drawn with the
newly set pencolor.


>>> colormode()
1.0
>>> turtle.pencolor()
'red'
>>> turtle.pencolor("brown")
>>> turtle.pencolor()
'brown'
>>> tup = (0.2, 0.8, 0.55)
>>> turtle.pencolor(tup)
>>> turtle.pencolor()
(0.2, 0.8, 0.5490196078431373)
>>> colormode(255)
>>> turtle.pencolor()
(51.0, 204.0, 140.0)
>>> turtle.pencolor('#32c18f')
>>> turtle.pencolor()
(50.0, 193.0, 143.0)





turtle.fillcolor(*args)¶
Return or set the fillcolor.
Four input formats are allowed:

fillcolor()
Return the current fillcolor as color specification string, possibly
in tuple format (see example).  May be used as input to another
color/pencolor/fillcolor call.
fillcolor(colorstring)
Set fillcolor to colorstring, which is a Tk color specification string,
such as "red", "yellow", or "#33cc8c".
fillcolor((r, g, b))
Set fillcolor to the RGB color represented by the tuple of r, g, and
b.  Each of r, g, and b must be in the range 0..colormode, where
colormode is either 1.0 or 255 (see colormode()).
fillcolor(r, g, b)

Set fillcolor to the RGB color represented by r, g, and b.  Each of
r, g, and b must be in the range 0..colormode.
If turtleshape is a polygon, the interior of that polygon is drawn
with the newly set fillcolor.


>>> turtle.fillcolor("violet")
>>> turtle.fillcolor()
'violet'
>>> turtle.pencolor()
(50.0, 193.0, 143.0)
>>> turtle.fillcolor((50, 193, 143))  # Integers, not floats
>>> turtle.fillcolor()
(50.0, 193.0, 143.0)
>>> turtle.fillcolor('#ffffff')
>>> turtle.fillcolor()
(255.0, 255.0, 255.0)





turtle.color(*args)¶
Return or set pencolor and fillcolor.
Several input formats are allowed.  They use 0 to 3 arguments as
follows:

color()
Return the current pencolor and the current fillcolor as a pair of color
specification strings or tuples as returned by pencolor() and
fillcolor().
color(colorstring), color((r,g,b)), color(r,g,b)
Inputs as in pencolor(), set both, fillcolor and pencolor, to the
given value.
color(colorstring1, colorstring2), color((r1,g1,b1), (r2,g2,b2))

Equivalent to pencolor(colorstring1) and fillcolor(colorstring2)
and analogously if the other input format is used.
If turtleshape is a polygon, outline and interior of that polygon is drawn
with the newly set colors.


>>> turtle.color("red", "green")
>>> turtle.color()
('red', 'green')
>>> color("#285078", "#a0c8f0")
>>> color()
((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))



See also: Screen method colormode().


Filling¶


turtle.filling()¶
Return fillstate (True if filling, False else).
>>> turtle.begin_fill()
>>> if turtle.filling():
...    turtle.pensize(5)
... else:
...    turtle.pensize(3)





turtle.begin_fill()¶
To be called just before drawing a shape to be filled.



turtle.end_fill()¶
Fill the shape drawn after the last call to begin_fill().
>>> turtle.color("black", "red")
>>> turtle.begin_fill()
>>> turtle.circle(80)
>>> turtle.end_fill()





More drawing control¶


turtle.reset()¶
Delete the turtle’s drawings from the screen, re-center the turtle and set
variables to the default values.
>>> turtle.goto(0,-22)
>>> turtle.left(100)
>>> turtle.position()
(0.00,-22.00)
>>> turtle.heading()
100.0
>>> turtle.reset()
>>> turtle.position()
(0.00,0.00)
>>> turtle.heading()
0.0





turtle.clear()¶
Delete the turtle’s drawings from the screen.  Do not move turtle.  State and
position of the turtle as well as drawings of other turtles are not affected.



turtle.write(arg, move=False, align="left", font=("Arial", 8, "normal"))¶




Parameters:
arg – object to be written to the TurtleScreen
move – True/False
align – one of the strings “left”, “center” or right”
font – a triple (fontname, fontsize, fonttype)





Write text - the string representation of arg - at the current turtle
position according to align (“left”, “center” or right”) and with the given
font.  If move is true, the pen is moved to the bottom-right corner of the
text.  By default, move is False.
>>> turtle.write("Home = ", True, align="center")
>>> turtle.write((0,0), True)






Turtle state¶

Visibility¶


turtle.hideturtle()¶

turtle.ht()¶
Make the turtle invisible.  It’s a good idea to do this while you’re in the
middle of doing some complex drawing, because hiding the turtle speeds up the
drawing observably.
>>> turtle.hideturtle()





turtle.showturtle()¶

turtle.st()¶
Make the turtle visible.
>>> turtle.showturtle()





turtle.isvisible()¶
Return True if the Turtle is shown, False if it’s hidden.
>>> turtle.hideturtle()
>>> turtle.isvisible()
False
>>> turtle.showturtle()
>>> turtle.isvisible()
True





Appearance¶


turtle.shape(name=None)¶




Parameters:name – a string which is a valid shapename



Set turtle shape to shape with given name or, if name is not given, return
name of current shape.  Shape with name must exist in the TurtleScreen’s
shape dictionary.  Initially there are the following polygon shapes: “arrow”,
“turtle”, “circle”, “square”, “triangle”, “classic”.  To learn about how to
deal with shapes see Screen method register_shape().
>>> turtle.shape()
'classic'
>>> turtle.shape("turtle")
>>> turtle.shape()
'turtle'





turtle.resizemode(rmode=None)¶




Parameters:rmode – one of the strings “auto”, “user”, “noresize”



Set resizemode to one of the values: “auto”, “user”, “noresize”.  If rmode
is not given, return current resizemode.  Different resizemodes have the
following effects:

“auto”: adapts the appearance of the turtle corresponding to the value of pensize.
“user”: adapts the appearance of the turtle according to the values of
stretchfactor and outlinewidth (outline), which are set by
shapesize().
“noresize”: no adaption of the turtle’s appearance takes place.

resizemode(“user”) is called by shapesize() when used with arguments.
>>> turtle.resizemode()
'noresize'
>>> turtle.resizemode("auto")
>>> turtle.resizemode()
'auto'





turtle.shapesize(stretch_wid=None, stretch_len=None, outline=None)¶

turtle.turtlesize(stretch_wid=None, stretch_len=None, outline=None)¶




Parameters:
stretch_wid – positive number
stretch_len – positive number
outline – positive number





Return or set the pen’s attributes x/y-stretchfactors and/or outline.  Set
resizemode to “user”.  If and only if resizemode is set to “user”, the turtle
will be displayed stretched according to its stretchfactors: stretch_wid is
stretchfactor perpendicular to its orientation, stretch_len is
stretchfactor in direction of its orientation, outline determines the width
of the shapes’s outline.
>>> turtle.shapesize()
(1.0, 1.0, 1)
>>> turtle.resizemode("user")
>>> turtle.shapesize(5, 5, 12)
>>> turtle.shapesize()
(5, 5, 12)
>>> turtle.shapesize(outline=8)
>>> turtle.shapesize()
(5, 5, 8)





turtle.shearfactor(shear=None)¶




Parameters:shear – number (optional)



Set or return the current shearfactor. Shear the turtleshape according to
the given shearfactor shear, which is the tangent of the shear angle.
Do not change the turtle’s heading (direction of movement).
If shear is not given: return the current shearfactor, i. e. the
tangent of the shear angle, by which lines parallel to the
heading of the turtle are sheared.
>>> turtle.shape("circle")
>>> turtle.shapesize(5,2)
>>> turtle.shearfactor(0.5)
>>> turtle.shearfactor()
0.5





turtle.tilt(angle)¶




Parameters:angle – a number



Rotate the turtleshape by angle from its current tilt-angle, but do not
change the turtle’s heading (direction of movement).
>>> turtle.reset()
>>> turtle.shape("circle")
>>> turtle.shapesize(5,2)
>>> turtle.tilt(30)
>>> turtle.fd(50)
>>> turtle.tilt(30)
>>> turtle.fd(50)





turtle.settiltangle(angle)¶




Parameters:angle – a number



Rotate the turtleshape to point in the direction specified by angle,
regardless of its current tilt-angle.  Do not change the turtle’s heading
(direction of movement).
>>> turtle.reset()
>>> turtle.shape("circle")
>>> turtle.shapesize(5,2)
>>> turtle.settiltangle(45)
>>> turtle.fd(50)
>>> turtle.settiltangle(-45)
>>> turtle.fd(50)



Deprecated since version 3.1.




turtle.tiltangle(angle=None)¶




Parameters:angle – a number (optional)



Set or return the current tilt-angle. If angle is given, rotate the
turtleshape to point in the direction specified by angle,
regardless of its current tilt-angle. Do not change the turtle’s
heading (direction of movement).
If angle is not given: return the current tilt-angle, i. e. the angle
between the orientation of the turtleshape and the heading of the
turtle (its direction of movement).
>>> turtle.reset()
>>> turtle.shape("circle")
>>> turtle.shapesize(5,2)
>>> turtle.tilt(45)
>>> turtle.tiltangle()
45.0





turtle.shapetransform(t11=None, t12=None, t21=None, t22=None)¶




Parameters:
t11 – a number (optional)
t12 – a number (optional)
t21 – a number (optional)
t12 – a number (optional)





Set or return the current transformation matrix of the turtle shape.
If none of the matrix elements are given, return the transformation
matrix as a tuple of 4 elements.
Otherwise set the given elements and transform the turtleshape
according to the matrix consisting of first row t11, t12 and
second row t21, 22. The determinant t11 * t22 - t12 * t21 must not be
zero, otherwise an error is raised.
Modify stretchfactor, shearfactor and tiltangle according to the
given matrix.
>>> turtle = Turtle()
>>> turtle.shape("square")
>>> turtle.shapesize(4,2)
>>> turtle.shearfactor(-0.5)
>>> turtle.shapetransform()
(4.0, -1.0, -0.0, 2.0)





turtle.get_shapepoly()¶
Return the current shape polygon as tuple of coordinate pairs. This
can be used to define a new shape or components of a compound shape.
>>> turtle.shape("square")
>>> turtle.shapetransform(4, -1, 0, 2)
>>> turtle.get_shapepoly()
((50, -20), (30, 20), (-50, 20), (-30, -20))






Using events¶


turtle.onclick(fun, btn=1, add=None)¶




Parameters:
fun – a function with two arguments which will be called with the
coordinates of the clicked point on the canvas
btn – number of the mouse-button, defaults to 1 (left mouse button)
add – True or False – if True, a new binding will be
added, otherwise it will replace a former binding





Bind fun to mouse-click events on this turtle.  If fun is None,
existing bindings are removed.  Example for the anonymous turtle, i.e. the
procedural way:
>>> def turn(x, y):
...     left(180)
...
>>> onclick(turn)  # Now clicking into the turtle will turn it.
>>> onclick(None)  # event-binding will be removed





turtle.onrelease(fun, btn=1, add=None)¶




Parameters:
fun – a function with two arguments which will be called with the
coordinates of the clicked point on the canvas
btn – number of the mouse-button, defaults to 1 (left mouse button)
add – True or False – if True, a new binding will be
added, otherwise it will replace a former binding





Bind fun to mouse-button-release events on this turtle.  If fun is
None, existing bindings are removed.
>>> class MyTurtle(Turtle):
...     def glow(self,x,y):
...         self.fillcolor("red")
...     def unglow(self,x,y):
...         self.fillcolor("")
...
>>> turtle = MyTurtle()
>>> turtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor red,
>>> turtle.onrelease(turtle.unglow) # releasing turns it to transparent.





turtle.ondrag(fun, btn=1, add=None)¶




Parameters:
fun – a function with two arguments which will be called with the
coordinates of the clicked point on the canvas
btn – number of the mouse-button, defaults to 1 (left mouse button)
add – True or False – if True, a new binding will be
added, otherwise it will replace a former binding





Bind fun to mouse-move events on this turtle.  If fun is None,
existing bindings are removed.
Remark: Every sequence of mouse-move-events on a turtle is preceded by a
mouse-click event on that turtle.
>>> turtle.ondrag(turtle.goto)


Subsequently, clicking and dragging the Turtle will move it across
the screen thereby producing handdrawings (if pen is down).



Special Turtle methods¶


turtle.begin_poly()¶
Start recording the vertices of a polygon.  Current turtle position is first
vertex of polygon.



turtle.end_poly()¶
Stop recording the vertices of a polygon.  Current turtle position is last
vertex of polygon.  This will be connected with the first vertex.



turtle.get_poly()¶
Return the last recorded polygon.
>>> turtle.home()
>>> turtle.begin_poly()
>>> turtle.fd(100)
>>> turtle.left(20)
>>> turtle.fd(30)
>>> turtle.left(60)
>>> turtle.fd(50)
>>> turtle.end_poly()
>>> p = turtle.get_poly()
>>> register_shape("myFavouriteShape", p)





turtle.clone()¶
Create and return a clone of the turtle with same position, heading and
turtle properties.
>>> mick = Turtle()
>>> joe = mick.clone()





turtle.getturtle()¶

turtle.getpen()¶
Return the Turtle object itself.  Only reasonable use: as a function to
return the “anonymous turtle”:
>>> pet = getturtle()
>>> pet.fd(50)
>>> pet
<turtle.Turtle object at 0x...>





turtle.getscreen()¶
Return the TurtleScreen object the turtle is drawing on.
TurtleScreen methods can then be called for that object.
>>> ts = turtle.getscreen()
>>> ts
<turtle._Screen object at 0x...>
>>> ts.bgcolor("pink")





turtle.setundobuffer(size)¶




Parameters:size – an integer or None



Set or disable undobuffer.  If size is an integer an empty undobuffer of
given size is installed.  size gives the maximum number of turtle actions
that can be undone by the undo() method/function.  If size is
None, the undobuffer is disabled.
>>> turtle.setundobuffer(42)





turtle.undobufferentries()¶
Return number of entries in the undobuffer.
>>> while undobufferentries():
...     undo()





Compound shapes¶
To use compound turtle shapes, which consist of several polygons of different
color, you must use the helper class Shape explicitly as described
below:

Create an empty Shape object of type “compound”.

Add as many components to this object as desired, using the
addcomponent() method.
For example:
>>> s = Shape("compound")
>>> poly1 = ((0,0),(10,-5),(0,10),(-10,-5))
>>> s.addcomponent(poly1, "red", "blue")
>>> poly2 = ((0,0),(10,-5),(-10,-5))
>>> s.addcomponent(poly2, "blue", "red")



Now add the Shape to the Screen’s shapelist and use it:
>>> register_shape("myshape", s)
>>> shape("myshape")





Note
The Shape class is used internally by the register_shape()
method in different ways.  The application programmer has to deal with the
Shape class only when using compound shapes like shown above!


