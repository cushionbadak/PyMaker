link:
library/enum.html#intflag

docs:

IntFlagÂ¶
The next variation of Enum provided, IntFlag, is also based
on int.  The difference being IntFlag members can be combined
using the bitwise operators (&, |, ^, ~) and the result is still an
IntFlag member.  However, as the name implies, IntFlag
members also subclass int and can be used wherever an int is
used.  Any operation on an IntFlag member besides the bit-wise
operations will lose the IntFlag membership.

New in version 3.6.

Sample IntFlag class:
>>> from enum import IntFlag
>>> class Perm(IntFlag):
...     R = 4
...     W = 2
...     X = 1
...
>>> Perm.R | Perm.W
<Perm.R|W: 6>
>>> Perm.R + Perm.W
6
>>> RW = Perm.R | Perm.W
>>> Perm.R in RW
True


It is also possible to name the combinations:
>>> class Perm(IntFlag):
...     R = 4
...     W = 2
...     X = 1
...     RWX = 7
>>> Perm.RWX
<Perm.RWX: 7>
>>> ~Perm.RWX
<Perm.-8: -8>


Another important difference between IntFlag and Enum is that
if no flags are set (the value is 0), its boolean evaluation is False:
>>> Perm.R & Perm.X
<Perm.0: 0>
>>> bool(Perm.R & Perm.X)
False


Because IntFlag members are also subclasses of int they can
be combined with them:
>>> Perm.X | 8
<Perm.8|X: 9>


