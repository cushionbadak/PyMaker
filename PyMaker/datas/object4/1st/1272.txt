link:
library/collections.html#ordereddict-objects

docs:

OrderedDict objects¶
Ordered dictionaries are just like regular dictionaries but have some extra
capabilities relating to ordering operations.  They have become less
important now that the built-in dict class gained the ability
to remember insertion order (this new behavior became guaranteed in
Python 3.7).
Some differences from dict still remain:

The regular dict was designed to be very good at mapping
operations.  Tracking insertion order was secondary.
The OrderedDict was designed to be good at reordering operations.
Space efficiency, iteration speed, and the performance of update
operations were secondary.
Algorithmically, OrderedDict can handle frequent reordering
operations better than dict.  This makes it suitable for tracking
recent accesses (for example in an LRU cache).
The equality operation for OrderedDict checks for matching order.
The popitem() method of OrderedDict has a different
signature.  It accepts an optional argument to specify which item is popped.
OrderedDict has a move_to_end() method to
efficiently reposition an element to an endpoint.
Until Python 3.8, dict lacked a __reversed__() method.



class collections.OrderedDict([items])¶
Return an instance of a dict subclass that has methods
specialized for rearranging dictionary order.

New in version 3.1.



popitem(last=True)¶
The popitem() method for ordered dictionaries returns and removes a
(key, value) pair.  The pairs are returned in
LIFO order if last is true
or FIFO order if false.



move_to_end(key, last=True)¶
Move an existing key to either end of an ordered dictionary.  The item
is moved to the right end if last is true (the default) or to the
beginning if last is false.  Raises KeyError if the key does
not exist:
>>> d = OrderedDict.fromkeys('abcde')
>>> d.move_to_end('b')
>>> ''.join(d.keys())
'acdeb'
>>> d.move_to_end('b', last=False)
>>> ''.join(d.keys())
'bacde'



New in version 3.2.



In addition to the usual mapping methods, ordered dictionaries also support
reverse iteration using reversed().
Equality tests between OrderedDict objects are order-sensitive
and are implemented as list(od1.items())==list(od2.items()).
Equality tests between OrderedDict objects and other
Mapping objects are order-insensitive like regular
dictionaries.  This allows OrderedDict objects to be substituted
anywhere a regular dictionary is used.

Changed in version 3.5: The items, keys, and values views
of OrderedDict now support reverse iteration using reversed().


Changed in version 3.6: With the acceptance of PEP 468, order is retained for keyword arguments
passed to the OrderedDict constructor and its update()
method.


OrderedDict Examples and Recipes¶
It is straightforward to create an ordered dictionary variant
that remembers the order the keys were last inserted.
If a new entry overwrites an existing entry, the
original insertion position is changed and moved to the end:
class LastUpdatedOrderedDict(OrderedDict):
    'Store items in the order the keys were last added'

    def __setitem__(self, key, value):
        super().__setitem__(key, value)
        super().move_to_end(key)


An OrderedDict would also be useful for implementing
variants of functools.lru_cache():
class LRU(OrderedDict):
    'Limit size, evicting the least recently looked-up key when full'

    def __init__(self, maxsize=128, *args, **kwds):
        self.maxsize = maxsize
        super().__init__(*args, **kwds)

    def __getitem__(self, key):
        value = super().__getitem__(key)
        self.move_to_end(key)
        return value

    def __setitem__(self, key, value):
        super().__setitem__(key, value)
        if len(self) > self.maxsize:
            oldest = next(iter(self))
            del self[oldest]



