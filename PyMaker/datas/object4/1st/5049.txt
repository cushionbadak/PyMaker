link:
library/socket.html#creating-sockets

docs:

Creating sockets¶
The following functions all create socket objects.


socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)¶
Create a new socket using the given address family, socket type and protocol
number.  The address family should be AF_INET (the default),
AF_INET6, AF_UNIX, AF_CAN, AF_PACKET,
or AF_RDS. The socket type should be SOCK_STREAM (the
default), SOCK_DGRAM, SOCK_RAW or perhaps one of the other
SOCK_ constants. The protocol number is usually zero and may be omitted
or in the case where the address family is AF_CAN the protocol
should be one of CAN_RAW, CAN_BCM or CAN_ISOTP.
If fileno is specified, the values for family, type, and proto are
auto-detected from the specified file descriptor.  Auto-detection can be
overruled by calling the function with explicit family, type, or proto
arguments.  This only affects how Python represents e.g. the return value
of socket.getpeername() but not the actual OS resource.  Unlike
socket.fromfd(), fileno will return the same socket and not a
duplicate. This may help close a detached socket using
socket.close().
The newly created socket is non-inheritable.

Changed in version 3.3: The AF_CAN family was added.
The AF_RDS family was added.


Changed in version 3.4: The CAN_BCM protocol was added.


Changed in version 3.4: The returned socket is now non-inheritable.


Changed in version 3.7: The CAN_ISOTP protocol was added.


Changed in version 3.7: When SOCK_NONBLOCK or SOCK_CLOEXEC
bit flags are applied to type they are cleared, and
socket.type will not reflect them.  They are still passed
to the underlying system socket() call.  Therefore::


sock = socket.socket(
socket.AF_INET,
socket.SOCK_STREAM | socket.SOCK_NONBLOCK)


will still create a non-blocking socket on OSes that support
SOCK_NONBLOCK, but sock.type will be set to
socket.SOCK_STREAM.




socket.socketpair([family[, type[, proto]]])¶
Build a pair of connected socket objects using the given address family, socket
type, and protocol number.  Address family, socket type, and protocol number are
as for the socket() function above. The default family is AF_UNIX
if defined on the platform; otherwise, the default is AF_INET.
The newly created sockets are non-inheritable.

Changed in version 3.2: The returned socket objects now support the whole socket API, rather
than a subset.


Changed in version 3.4: The returned sockets are now non-inheritable.


Changed in version 3.5: Windows support added.




socket.create_connection(address[, timeout[, source_address]])¶
Connect to a TCP service listening on the Internet address (a 2-tuple
(host, port)), and return the socket object.  This is a higher-level
function than socket.connect(): if host is a non-numeric hostname,
it will try to resolve it for both AF_INET and AF_INET6,
and then try to connect to all possible addresses in turn until a
connection succeeds.  This makes it easy to write clients that are
compatible to both IPv4 and IPv6.
Passing the optional timeout parameter will set the timeout on the
socket instance before attempting to connect.  If no timeout is
supplied, the global default timeout setting returned by
getdefaulttimeout() is used.
If supplied, source_address must be a 2-tuple (host, port) for the
socket to bind to as its source address before connecting.  If host or port
are ‘’ or 0 respectively the OS default behavior will be used.

Changed in version 3.2: source_address was added.




socket.fromfd(fd, family, type, proto=0)¶
Duplicate the file descriptor fd (an integer as returned by a file object’s
fileno() method) and build a socket object from the result.  Address
family, socket type and protocol number are as for the socket() function
above. The file descriptor should refer to a socket, but this is not checked —
subsequent operations on the object may fail if the file descriptor is invalid.
This function is rarely needed, but can be used to get or set socket options on
a socket passed to a program as standard input or output (such as a server
started by the Unix inet daemon).  The socket is assumed to be in blocking mode.
The newly created socket is non-inheritable.

Changed in version 3.4: The returned socket is now non-inheritable.




socket.fromshare(data)¶
Instantiate a socket from data obtained from the socket.share()
method.  The socket is assumed to be in blocking mode.
Availability: Windows.

New in version 3.3.




socket.SocketType¶
This is a Python type object that represents the socket object type. It is the
same as type(socket(...)).

