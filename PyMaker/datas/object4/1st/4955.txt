link:
library/asyncio-policy.html#asyncio.AbstractEventLoopPolicy

docs:

<dt id="asyncio.AbstractEventLoopPolicy">
<em class="property">class </em><code class="descclassname">asyncio.</code><code class="descname">AbstractEventLoopPolicy</code><a class="headerlink" href="#asyncio.AbstractEventLoopPolicy" title="Permalink to this definition">¶</a></dt>
<dd><p>An abstract base class for asyncio policies.</p>
<dl class="method">
<dt id="asyncio.AbstractEventLoopPolicy.get_event_loop">
<code class="descname">get_event_loop</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.AbstractEventLoopPolicy.get_event_loop" title="Permalink to this definition">¶</a></dt>
<dd><p>Get the event loop for the current context.</p>
<p>Return an event loop object implementing the
<a class="reference internal" href="asyncio-eventloop.html#asyncio.AbstractEventLoop" title="asyncio.AbstractEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">AbstractEventLoop</span></code></a> interface.</p>
<p>This method should never return <code class="docutils literal notranslate"><span class="pre">None</span></code>.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6.</span></p>
</div>
</dd></dl>
<dl class="method">
<dt id="asyncio.AbstractEventLoopPolicy.set_event_loop">
<code class="descname">set_event_loop</code><span class="sig-paren">(</span><em>loop</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.AbstractEventLoopPolicy.set_event_loop" title="Permalink to this definition">¶</a></dt>
<dd><p>Set the event loop for the current context to <em>loop</em>.</p>
</dd></dl>
<dl class="method">
<dt id="asyncio.AbstractEventLoopPolicy.new_event_loop">
<code class="descname">new_event_loop</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.AbstractEventLoopPolicy.new_event_loop" title="Permalink to this definition">¶</a></dt>
<dd><p>Create and return a new event loop object.</p>
<p>This method should never return <code class="docutils literal notranslate"><span class="pre">None</span></code>.</p>
</dd></dl>
<dl class="method">
<dt id="asyncio.AbstractEventLoopPolicy.get_child_watcher">
<code class="descname">get_child_watcher</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.AbstractEventLoopPolicy.get_child_watcher" title="Permalink to this definition">¶</a></dt>
<dd><p>Get a child process watcher object.</p>
<p>Return a watcher object implementing the
<a class="reference internal" href="#asyncio.AbstractChildWatcher" title="asyncio.AbstractChildWatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">AbstractChildWatcher</span></code></a> interface.</p>
<p>This function is Unix specific.</p>
</dd></dl>
<dl class="method">
<dt id="asyncio.AbstractEventLoopPolicy.set_child_watcher">
<code class="descname">set_child_watcher</code><span class="sig-paren">(</span><em>watcher</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.AbstractEventLoopPolicy.set_child_watcher" title="Permalink to this definition">¶</a></dt>
<dd><p>Set the current child process watcher to <em>watcher</em>.</p>
<p>This function is Unix specific.</p>
</dd></dl>
</dd>