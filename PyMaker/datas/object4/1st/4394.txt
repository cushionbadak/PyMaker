link:
library/multiprocessing.html#logging

docs:

Logging¶
Some support for logging is available.  Note, however, that the logging
package does not use process shared locks so it is possible (depending on the
handler type) for messages from different processes to get mixed up.


multiprocessing.get_logger()¶
Returns the logger used by multiprocessing.  If necessary, a new one
will be created.
When first created the logger has level logging.NOTSET and no
default handler. Messages sent to this logger will not by default propagate
to the root logger.
Note that on Windows child processes will only inherit the level of the
parent process’s logger – any other customization of the logger will not be
inherited.



multiprocessing.log_to_stderr()¶
This function performs a call to get_logger() but in addition to
returning the logger created by get_logger, it adds a handler which sends
output to sys.stderr using format
'[%(levelname)s/%(processName)s] %(message)s'.

Below is an example session with logging turned on:
>>> import multiprocessing, logging
>>> logger = multiprocessing.log_to_stderr()
>>> logger.setLevel(logging.INFO)
>>> logger.warning('doomed')
[WARNING/MainProcess] doomed
>>> m = multiprocessing.Manager()
[INFO/SyncManager-...] child process calling self.run()
[INFO/SyncManager-...] created temp directory /.../pymp-...
[INFO/SyncManager-...] manager serving at '/.../listener-...'
>>> del m
[INFO/MainProcess] sending shutdown message to manager
[INFO/SyncManager-...] manager exiting with exitcode 0


For a full table of logging levels, see the logging module.
