link:
library/asyncio-sync.html#asyncio.Event

docs:


class asyncio.Event(*, loop=None)¶
An event object.  Not thread-safe.
An asyncio event can be used to notify multiple asyncio tasks
that some event has happened.
An Event object manages an internal flag that can be set to true
with the set() method and reset to false with the
clear() method.  The wait() method blocks until the
flag is set to true.  The flag is set to false initially.
Example:
async def waiter(event):
    print('waiting for it ...')
    await event.wait()
    print('... got it!')

async def main():
    # Create an Event object.
    event = asyncio.Event()

    # Spawn a Task to wait until 'event' is set.
    waiter_task = asyncio.create_task(waiter(event))

    # Sleep for 1 second and set the event.
    await asyncio.sleep(1)
    event.set()

    # Wait until the waiter task is finished.
    await waiter_task

asyncio.run(main())




coroutine wait()¶
Wait until the event is set.
If the event is set, return True immediately.
Otherwise block until another task calls set().



set()¶
Set the event.
All tasks waiting for event to be set will be immediately
awakened.



clear()¶
Clear (unset) the event.
Tasks awaiting on wait() will now block until the
set() method is called again.



is_set()¶
Return True if the event is set.

