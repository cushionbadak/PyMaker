link:
library/tracemalloc.html#api

docs:

API¶

Functions¶


tracemalloc.clear_traces()¶
Clear traces of memory blocks allocated by Python.
See also stop().



tracemalloc.get_object_traceback(obj)¶
Get the traceback where the Python object obj was allocated.
Return a Traceback instance, or None if the tracemalloc
module is not tracing memory allocations or did not trace the allocation of
the object.
See also gc.get_referrers() and sys.getsizeof() functions.



tracemalloc.get_traceback_limit()¶
Get the maximum number of frames stored in the traceback of a trace.
The tracemalloc module must be tracing memory allocations to
get the limit, otherwise an exception is raised.
The limit is set by the start() function.



tracemalloc.get_traced_memory()¶
Get the current size and peak size of memory blocks traced by the
tracemalloc module as a tuple: (current: int, peak: int).



tracemalloc.get_tracemalloc_memory()¶
Get the memory usage in bytes of the tracemalloc module used to store
traces of memory blocks.
Return an int.



tracemalloc.is_tracing()¶
True if the tracemalloc module is tracing Python memory
allocations, False otherwise.
See also start() and stop() functions.



tracemalloc.start(nframe: int=1)¶
Start tracing Python memory allocations: install hooks on Python memory
allocators. Collected tracebacks of traces will be limited to nframe
frames. By default, a trace of a memory block only stores the most recent
frame: the limit is 1. nframe must be greater or equal to 1.
Storing more than 1 frame is only useful to compute statistics grouped
by 'traceback' or to compute cumulative statistics: see the
Snapshot.compare_to() and Snapshot.statistics() methods.
Storing more frames increases the memory and CPU overhead of the
tracemalloc module. Use the get_tracemalloc_memory() function
to measure how much memory is used by the tracemalloc module.
The PYTHONTRACEMALLOC environment variable
(PYTHONTRACEMALLOC=NFRAME) and the -X tracemalloc=NFRAME
command line option can be used to start tracing at startup.
See also stop(), is_tracing() and get_traceback_limit()
functions.



tracemalloc.stop()¶
Stop tracing Python memory allocations: uninstall hooks on Python memory
allocators. Also clears all previously collected traces of memory blocks
allocated by Python.
Call take_snapshot() function to take a snapshot of traces before
clearing them.
See also start(), is_tracing() and clear_traces()
functions.



tracemalloc.take_snapshot()¶
Take a snapshot of traces of memory blocks allocated by Python. Return a new
Snapshot instance.
The snapshot does not include memory blocks allocated before the
tracemalloc module started to trace memory allocations.
Tracebacks of traces are limited to get_traceback_limit() frames. Use
the nframe parameter of the start() function to store more frames.
The tracemalloc module must be tracing memory allocations to take a
snapshot, see the start() function.
See also the get_object_traceback() function.



DomainFilter¶


class tracemalloc.DomainFilter(inclusive: bool, domain: int)¶
Filter traces of memory blocks by their address space (domain).

New in version 3.6.



inclusive¶
If inclusive is True (include), match memory blocks allocated
in the address space domain.
If inclusive is False (exclude), match memory blocks not allocated
in the address space domain.



domain¶
Address space of a memory block (int). Read-only property.




Filter¶


class tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, all_frames: bool=False, domain: int=None)¶
Filter on traces of memory blocks.
See the fnmatch.fnmatch() function for the syntax of
filename_pattern. The '.pyc' file extension is
replaced with '.py'.
Examples:

Filter(True, subprocess.__file__) only includes traces of the
subprocess module
Filter(False, tracemalloc.__file__) excludes traces of the
tracemalloc module
Filter(False, "<unknown>") excludes empty tracebacks


Changed in version 3.5: The '.pyo' file extension is no longer replaced with '.py'.


Changed in version 3.6: Added the domain attribute.



domain¶
Address space of a memory block (int or None).
tracemalloc uses the domain 0 to trace memory allocations made by
Python. C extensions can use other domains to trace other resources.



inclusive¶
If inclusive is True (include), only match memory blocks allocated
in a file with a name matching filename_pattern at line number
lineno.
If inclusive is False (exclude), ignore memory blocks allocated in
a file with a name matching filename_pattern at line number
lineno.



lineno¶
Line number (int) of the filter. If lineno is None, the filter
matches any line number.



filename_pattern¶
Filename pattern of the filter (str). Read-only property.



all_frames¶
If all_frames is True, all frames of the traceback are checked. If
all_frames is False, only the most recent frame is checked.
This attribute has no effect if the traceback limit is 1.  See the
get_traceback_limit() function and Snapshot.traceback_limit
attribute.




Frame¶


class tracemalloc.Frame¶
Frame of a traceback.
The Traceback class is a sequence of Frame instances.


filename¶
Filename (str).



lineno¶
Line number (int).




Snapshot¶


class tracemalloc.Snapshot¶
Snapshot of traces of memory blocks allocated by Python.
The take_snapshot() function creates a snapshot instance.


compare_to(old_snapshot: Snapshot, key_type: str, cumulative: bool=False)¶
Compute the differences with an old snapshot. Get statistics as a sorted
list of StatisticDiff instances grouped by key_type.
See the Snapshot.statistics() method for key_type and cumulative
parameters.
The result is sorted from the biggest to the smallest by: absolute value
of StatisticDiff.size_diff, StatisticDiff.size, absolute
value of StatisticDiff.count_diff, Statistic.count and
then by StatisticDiff.traceback.



dump(filename)¶
Write the snapshot into a file.
Use load() to reload the snapshot.



filter_traces(filters)¶
Create a new Snapshot instance with a filtered traces
sequence, filters is a list of DomainFilter and
Filter instances.  If filters is an empty list, return a new
Snapshot instance with a copy of the traces.
All inclusive filters are applied at once, a trace is ignored if no
inclusive filters match it. A trace is ignored if at least one exclusive
filter matches it.

Changed in version 3.6: DomainFilter instances are now also accepted in filters.




classmethod load(filename)¶
Load a snapshot from a file.
See also dump().



statistics(key_type: str, cumulative: bool=False)¶
Get statistics as a sorted list of Statistic instances grouped
by key_type:






key_type
description



'filename'
filename

'lineno'
filename and line number

'traceback'
traceback



If cumulative is True, cumulate size and count of memory blocks of
all frames of the traceback of a trace, not only the most recent frame.
The cumulative mode can only be used with key_type equals to
'filename' and 'lineno'.
The result is sorted from the biggest to the smallest by:
Statistic.size, Statistic.count and then by
Statistic.traceback.



traceback_limit¶
Maximum number of frames stored in the traceback of traces:
result of the get_traceback_limit() when the snapshot was taken.



traces¶
Traces of all memory blocks allocated by Python: sequence of
Trace instances.
The sequence has an undefined order. Use the Snapshot.statistics()
method to get a sorted list of statistics.




Statistic¶


class tracemalloc.Statistic¶
Statistic on memory allocations.
Snapshot.statistics() returns a list of Statistic instances.
See also the StatisticDiff class.


count¶
Number of memory blocks (int).



size¶
Total size of memory blocks in bytes (int).



traceback¶
Traceback where the memory block was allocated, Traceback
instance.




StatisticDiff¶


class tracemalloc.StatisticDiff¶
Statistic difference on memory allocations between an old and a new
Snapshot instance.
Snapshot.compare_to() returns a list of StatisticDiff
instances. See also the Statistic class.


count¶
Number of memory blocks in the new snapshot (int): 0 if
the memory blocks have been released in the new snapshot.



count_diff¶
Difference of number of memory blocks between the old and the new
snapshots (int): 0 if the memory blocks have been allocated in
the new snapshot.



size¶
Total size of memory blocks in bytes in the new snapshot (int):
0 if the memory blocks have been released in the new snapshot.



size_diff¶
Difference of total size of memory blocks in bytes between the old and
the new snapshots (int): 0 if the memory blocks have been
allocated in the new snapshot.



traceback¶
Traceback where the memory blocks were allocated, Traceback
instance.




Trace¶


class tracemalloc.Trace¶
Trace of a memory block.
The Snapshot.traces attribute is a sequence of Trace
instances.

Changed in version 3.6: Added the domain attribute.



domain¶
Address space of a memory block (int). Read-only property.
tracemalloc uses the domain 0 to trace memory allocations made by
Python. C extensions can use other domains to trace other resources.



size¶
Size of the memory block in bytes (int).



traceback¶
Traceback where the memory block was allocated, Traceback
instance.




Traceback¶


class tracemalloc.Traceback¶
Sequence of Frame instances sorted from the oldest frame to the
most recent frame.
A traceback contains at least 1 frame. If the tracemalloc module
failed to get a frame, the filename "<unknown>" at line number 0 is
used.
When a snapshot is taken, tracebacks of traces are limited to
get_traceback_limit() frames. See the take_snapshot() function.
The Trace.traceback attribute is an instance of Traceback
instance.

Changed in version 3.7: Frames are now sorted from the oldest to the most recent, instead of most recent to oldest.



format(limit=None, most_recent_first=False)¶
Format the traceback as a list of lines with newlines. Use the
linecache module to retrieve lines from the source code.
If limit is set, format the limit most recent frames if limit
is positive. Otherwise, format the abs(limit) oldest frames.
If most_recent_first is True, the order of the formatted frames
is reversed, returning the most recent frame first instead of last.
Similar to the traceback.format_tb() function, except that
format() does not include newlines.
Example:
print("Traceback (most recent call first):")
for line in traceback:
    print(line)


Output:
Traceback (most recent call first):
  File "test.py", line 9
    obj = Object()
  File "test.py", line 12
    tb = tracemalloc.get_object_traceback(f())





