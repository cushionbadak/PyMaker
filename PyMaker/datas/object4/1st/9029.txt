link:
library/timeit.html#command-line-interface

docs:

Command-Line Interface¶
When called as a program from the command line, the following form is used:
python -m timeit [-n N] [-r N] [-u U] [-s S] [-h] [statement ...]


Where the following options are understood:


-n N, --number=N¶
how many times to execute ‘statement’



-r N, --repeat=N¶
how many times to repeat the timer (default 5)



-s S, --setup=S¶
statement to be executed once initially (default pass)



-p, --process¶
measure process time, not wallclock time, using time.process_time()
instead of time.perf_counter(), which is the default

New in version 3.3.




-u, --unit=U¶

specify a time unit for timer output; can select nsec, usec, msec, or sec

New in version 3.5.




-v, --verbose¶
print raw timing results; repeat for more digits precision



-h, --help¶
print a short usage message and exit

A multi-line statement may be given by specifying each line as a separate
statement argument; indented lines are possible by enclosing an argument in
quotes and using leading spaces.  Multiple -s options are treated
similarly.
If -n is not given, a suitable number of loops is calculated by trying
successive powers of 10 until the total time is at least 0.2 seconds.
default_timer() measurements can be affected by other programs running on
the same machine, so the best thing to do when accurate timing is necessary is
to repeat the timing a few times and use the best time.  The -r
option is good for this; the default of 5 repetitions is probably enough in
most cases.  You can use time.process_time() to measure CPU time.

Note
There is a certain baseline overhead associated with executing a pass statement.
The code here doesn’t try to hide it, but you should be aware of it.  The
baseline overhead can be measured by invoking the program without arguments,
and it might differ between Python versions.

