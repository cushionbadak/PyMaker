link:
library/inspect.html#inspect.Signature

docs:

<dt id="inspect.Signature">
<em class="property">class </em><code class="descclassname">inspect.</code><code class="descname">Signature</code><span class="sig-paren">(</span><em>parameters=None</em>, <em>*</em>, <em>return_annotation=Signature.empty</em><span class="sig-paren">)</span><a class="headerlink" href="#inspect.Signature" title="Permalink to this definition">¶</a></dt>
<dd><p>A Signature object represents the call signature of a function and its return
annotation.  For each parameter accepted by the function it stores a
<a class="reference internal" href="#inspect.Parameter" title="inspect.Parameter"><code class="xref py py-class docutils literal notranslate"><span class="pre">Parameter</span></code></a> object in its <a class="reference internal" href="#inspect.Signature.parameters" title="inspect.Signature.parameters"><code class="xref py py-attr docutils literal notranslate"><span class="pre">parameters</span></code></a> collection.</p>
<p>The optional <em>parameters</em> argument is a sequence of <a class="reference internal" href="#inspect.Parameter" title="inspect.Parameter"><code class="xref py py-class docutils literal notranslate"><span class="pre">Parameter</span></code></a>
objects, which is validated to check that there are no parameters with
duplicate names, and that the parameters are in the right order, i.e.
positional-only first, then positional-or-keyword, and that parameters with
defaults follow parameters without defaults.</p>
<p>The optional <em>return_annotation</em> argument, can be an arbitrary Python object,
is the “return” annotation of the callable.</p>
<p>Signature objects are <em>immutable</em>.  Use <a class="reference internal" href="#inspect.Signature.replace" title="inspect.Signature.replace"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Signature.replace()</span></code></a> to make a
modified copy.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>Signature objects are picklable and hashable.</p>
</div>
<dl class="attribute">
<dt id="inspect.Signature.empty">
<code class="descname">empty</code><a class="headerlink" href="#inspect.Signature.empty" title="Permalink to this definition">¶</a></dt>
<dd><p>A special class-level marker to specify absence of a return annotation.</p>
</dd></dl>
<dl class="attribute">
<dt id="inspect.Signature.parameters">
<code class="descname">parameters</code><a class="headerlink" href="#inspect.Signature.parameters" title="Permalink to this definition">¶</a></dt>
<dd><p>An ordered mapping of parameters’ names to the corresponding
<a class="reference internal" href="#inspect.Parameter" title="inspect.Parameter"><code class="xref py py-class docutils literal notranslate"><span class="pre">Parameter</span></code></a> objects.  Parameters appear in strict definition
order, including keyword-only parameters.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span>Python only explicitly guaranteed that it preserved the declaration
order of keyword-only parameters as of version 3.7, although in practice
this order had always been preserved in Python 3.</p>
</div>
</dd></dl>
<dl class="attribute">
<dt id="inspect.Signature.return_annotation">
<code class="descname">return_annotation</code><a class="headerlink" href="#inspect.Signature.return_annotation" title="Permalink to this definition">¶</a></dt>
<dd><p>The “return” annotation for the callable.  If the callable has no “return”
annotation, this attribute is set to <a class="reference internal" href="#inspect.Signature.empty" title="inspect.Signature.empty"><code class="xref py py-attr docutils literal notranslate"><span class="pre">Signature.empty</span></code></a>.</p>
</dd></dl>
<dl class="method">
<dt id="inspect.Signature.bind">
<code class="descname">bind</code><span class="sig-paren">(</span><em>*args</em>, <em>**kwargs</em><span class="sig-paren">)</span><a class="headerlink" href="#inspect.Signature.bind" title="Permalink to this definition">¶</a></dt>
<dd><p>Create a mapping from positional and keyword arguments to parameters.
Returns <a class="reference internal" href="#inspect.BoundArguments" title="inspect.BoundArguments"><code class="xref py py-class docutils literal notranslate"><span class="pre">BoundArguments</span></code></a> if <code class="docutils literal notranslate"><span class="pre">*args</span></code> and <code class="docutils literal notranslate"><span class="pre">**kwargs</span></code> match the
signature, or raises a <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>.</p>
</dd></dl>
<dl class="method">
<dt id="inspect.Signature.bind_partial">
<code class="descname">bind_partial</code><span class="sig-paren">(</span><em>*args</em>, <em>**kwargs</em><span class="sig-paren">)</span><a class="headerlink" href="#inspect.Signature.bind_partial" title="Permalink to this definition">¶</a></dt>
<dd><p>Works the same way as <a class="reference internal" href="#inspect.Signature.bind" title="inspect.Signature.bind"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Signature.bind()</span></code></a>, but allows the omission of
some required arguments (mimics <a class="reference internal" href="functools.html#functools.partial" title="functools.partial"><code class="xref py py-func docutils literal notranslate"><span class="pre">functools.partial()</span></code></a> behavior.)
Returns <a class="reference internal" href="#inspect.BoundArguments" title="inspect.BoundArguments"><code class="xref py py-class docutils literal notranslate"><span class="pre">BoundArguments</span></code></a>, or raises a <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> if the
passed arguments do not match the signature.</p>
</dd></dl>
<dl class="method">
<dt id="inspect.Signature.replace">
<code class="descname">replace</code><span class="sig-paren">(</span><em>*[, parameters][, return_annotation]</em><span class="sig-paren">)</span><a class="headerlink" href="#inspect.Signature.replace" title="Permalink to this definition">¶</a></dt>
<dd><p>Create a new Signature instance based on the instance replace was invoked
on.  It is possible to pass different <code class="docutils literal notranslate"><span class="pre">parameters</span></code> and/or
<code class="docutils literal notranslate"><span class="pre">return_annotation</span></code> to override the corresponding properties of the base
signature.  To remove return_annotation from the copied Signature, pass in
<a class="reference internal" href="#inspect.Signature.empty" title="inspect.Signature.empty"><code class="xref py py-attr docutils literal notranslate"><span class="pre">Signature.empty</span></code></a>.</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">pass</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">sig</span> <span class="o">=</span> <span class="n">signature</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">new_sig</span> <span class="o">=</span> <span class="n">sig</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">return_annotation</span><span class="o">=</span><span class="s2">"new return anno"</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="n">new_sig</span><span class="p">)</span>
<span class="go">"(a, b) -&gt; 'new return anno'"</span>
</pre></div>
</div>
</dd></dl>
<dl class="classmethod">
<dt id="inspect.Signature.from_callable">
<em class="property">classmethod </em><code class="descname">from_callable</code><span class="sig-paren">(</span><em>obj</em>, <em>*</em>, <em>follow_wrapped=True</em><span class="sig-paren">)</span><a class="headerlink" href="#inspect.Signature.from_callable" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a <a class="reference internal" href="#inspect.Signature" title="inspect.Signature"><code class="xref py py-class docutils literal notranslate"><span class="pre">Signature</span></code></a> (or its subclass) object for a given callable
<code class="docutils literal notranslate"><span class="pre">obj</span></code>.  Pass <code class="docutils literal notranslate"><span class="pre">follow_wrapped=False</span></code> to get a signature of <code class="docutils literal notranslate"><span class="pre">obj</span></code>
without unwrapping its <code class="docutils literal notranslate"><span class="pre">__wrapped__</span></code> chain.</p>
<p>This method simplifies subclassing of <a class="reference internal" href="#inspect.Signature" title="inspect.Signature"><code class="xref py py-class docutils literal notranslate"><span class="pre">Signature</span></code></a>:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">MySignature</span><span class="p">(</span><span class="n">Signature</span><span class="p">):</span>
    <span class="k">pass</span>
<span class="n">sig</span> <span class="o">=</span> <span class="n">MySignature</span><span class="o">.</span><span class="n">from_callable</span><span class="p">(</span><span class="nb">min</span><span class="p">)</span>
<span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="n">MySignature</span><span class="p">)</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.5.</span></p>
</div>
</dd></dl>
</dd>