link:
library/curses.html#functions

docs:

Functions¶
The module curses defines the following exception:


exception curses.error¶
Exception raised when a curses library function returns an error.


Note
Whenever x or y arguments to a function or a method are optional, they
default to the current cursor location. Whenever attr is optional, it defaults
to A_NORMAL.

The module curses defines the following functions:


curses.baudrate()¶
Return the output speed of the terminal in bits per second.  On software
terminal emulators it will have a fixed high value. Included for historical
reasons; in former times, it was used to  write output loops for time delays and
occasionally to change interfaces depending on the line speed.



curses.beep()¶
Emit a short attention sound.



curses.can_change_color()¶
Return True or False, depending on whether the programmer can change the colors
displayed by the terminal.



curses.cbreak()¶
Enter cbreak mode.  In cbreak mode (sometimes called “rare” mode) normal tty
line buffering is turned off and characters are available to be read one by one.
However, unlike raw mode, special characters (interrupt, quit, suspend, and flow
control) retain their effects on the tty driver and calling program.  Calling
first raw() then cbreak() leaves the terminal in cbreak mode.



curses.color_content(color_number)¶
Return the intensity of the red, green, and blue (RGB) components in the color
color_number, which must be between 0 and COLORS.  Return a 3-tuple,
containing the R,G,B values for the given color, which will be between
0 (no component) and 1000 (maximum amount of component).



curses.color_pair(color_number)¶
Return the attribute value for displaying text in the specified color.  This
attribute value can be combined with A_STANDOUT, A_REVERSE,
and the other A_* attributes.  pair_number() is the counterpart
to this function.



curses.curs_set(visibility)¶
Set the cursor state.  visibility can be set to 0, 1, or 2, for invisible,
normal, or very visible.  If the terminal supports the visibility requested, return the
previous cursor state; otherwise raise an exception.  On many
terminals, the “visible” mode is an underline cursor and the “very visible” mode
is a block cursor.



curses.def_prog_mode()¶
Save the current terminal mode as the “program” mode, the mode when the running
program is using curses.  (Its counterpart is the “shell” mode, for when the
program is not in curses.)  Subsequent calls to reset_prog_mode() will
restore this mode.



curses.def_shell_mode()¶
Save the current terminal mode as the “shell” mode, the mode when the running
program is not using curses.  (Its counterpart is the “program” mode, when the
program is using curses capabilities.) Subsequent calls to
reset_shell_mode() will restore this mode.



curses.delay_output(ms)¶
Insert an ms millisecond pause in output.



curses.doupdate()¶
Update the physical screen.  The curses library keeps two data structures, one
representing the current physical screen contents and a virtual screen
representing the desired next state.  The doupdate() ground updates the
physical screen to match the virtual screen.
The virtual screen may be updated by a noutrefresh() call after write
operations such as addstr() have been performed on a window.  The normal
refresh() call is simply noutrefresh() followed by doupdate();
if you have to update multiple windows, you can speed performance and perhaps
reduce screen flicker by issuing noutrefresh() calls on all windows,
followed by a single doupdate().



curses.echo()¶
Enter echo mode.  In echo mode, each character input is echoed to the screen as
it is entered.



curses.endwin()¶
De-initialize the library, and return terminal to normal status.



curses.erasechar()¶
Return the user’s current erase character as a one-byte bytes object.  Under Unix operating systems this
is a property of the controlling tty of the curses program, and is not set by
the curses library itself.



curses.filter()¶
The filter() routine, if used, must be called before initscr() is
called.  The effect is that, during those calls, LINES is set to 1; the
capabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and the home
string is set to the value of cr. The effect is that the cursor is confined to
the current line, and so are screen updates.  This may be used for enabling
character-at-a-time  line editing without touching the rest of the screen.



curses.flash()¶
Flash the screen.  That is, change it to reverse-video and then change it back
in a short interval.  Some people prefer such as ‘visible bell’ to the audible
attention signal produced by beep().



curses.flushinp()¶
Flush all input buffers.  This throws away any  typeahead  that  has been typed
by the user and has not yet been processed by the program.



curses.getmouse()¶
After getch() returns KEY_MOUSE to signal a mouse event, this
method should be call to retrieve the queued mouse event, represented as a
5-tuple (id, x, y, z, bstate). id is an ID value used to distinguish
multiple devices, and x, y, z are the event’s coordinates.  (z is
currently unused.)  bstate is an integer value whose bits will be set to
indicate the type of event, and will be the bitwise OR of one or more of the
following constants, where n is the button number from 1 to 4:
BUTTONn_PRESSED, BUTTONn_RELEASED, BUTTONn_CLICKED,
BUTTONn_DOUBLE_CLICKED, BUTTONn_TRIPLE_CLICKED,
BUTTON_SHIFT, BUTTON_CTRL, BUTTON_ALT.



curses.getsyx()¶
Return the current coordinates of the virtual screen cursor as a tuple
(y, x).  If leaveok is currently True, then return (-1, -1).



curses.getwin(file)¶
Read window related data stored in the file by an earlier putwin() call.
The routine then creates and initializes a new window using that data, returning
the new window object.



curses.has_colors()¶
Return True if the terminal can display colors; otherwise, return False.



curses.has_ic()¶
Return True if the terminal has insert- and delete-character capabilities.
This function is included for historical reasons only, as all modern software
terminal emulators have such capabilities.



curses.has_il()¶
Return True if the terminal has insert- and delete-line capabilities, or can
simulate  them  using scrolling regions. This function is included for
historical reasons only, as all modern software terminal emulators have such
capabilities.



curses.has_key(ch)¶
Take a key value ch, and return True if the current terminal type recognizes
a key with that value.



curses.halfdelay(tenths)¶
Used for half-delay mode, which is similar to cbreak mode in that characters
typed by the user are immediately available to the program. However, after
blocking for tenths tenths of seconds, raise an exception if nothing has
been typed.  The value of tenths must be a number between 1 and 255.  Use
nocbreak() to leave half-delay mode.



curses.init_color(color_number, r, g, b)¶
Change the definition of a color, taking the number of the color to be changed
followed by three RGB values (for the amounts of red, green, and blue
components).  The value of color_number must be between 0 and
COLORS.  Each of r, g, b, must be a value between 0 and
1000.  When init_color() is used, all occurrences of that color on the
screen immediately change to the new definition.  This function is a no-op on
most terminals; it is active only if can_change_color() returns True.



curses.init_pair(pair_number, fg, bg)¶
Change the definition of a color-pair.  It takes three arguments: the number of
the color-pair to be changed, the foreground color number, and the background
color number.  The value of pair_number must be between 1 and
COLOR_PAIRS - 1 (the 0 color pair is wired to white on black and cannot
be changed).  The value of fg and bg arguments must be between 0 and
COLORS.  If the color-pair was previously initialized, the screen is
refreshed and all occurrences of that color-pair are changed to the new
definition.



curses.initscr()¶
Initialize the library. Return a window object
which represents the whole screen.

Note
If there is an error opening the terminal, the underlying curses library may
cause the interpreter to exit.




curses.is_term_resized(nlines, ncols)¶
Return True if resize_term() would modify the window structure,
False otherwise.



curses.isendwin()¶
Return True if endwin() has been called (that is, the  curses library has
been deinitialized).



curses.keyname(k)¶
Return the name of the key numbered k as a bytes object.  The name of a key generating printable
ASCII character is the key’s character.  The name of a control-key combination
is a two-byte bytes object consisting of a caret (b'^') followed by the corresponding
printable ASCII character.  The name of an alt-key combination (128–255) is a
bytes object consisting of the prefix b'M-' followed by the name of the corresponding
ASCII character.



curses.killchar()¶
Return the user’s current line kill character as a one-byte bytes object. Under Unix operating systems
this is a property of the controlling tty of the curses program, and is not set
by the curses library itself.



curses.longname()¶
Return a bytes object containing the terminfo long name field describing the current
terminal.  The maximum length of a verbose description is 128 characters.  It is
defined only after the call to initscr().



curses.meta(flag)¶
If flag is True, allow 8-bit characters to be input.  If
flag is False,  allow only 7-bit chars.



curses.mouseinterval(interval)¶
Set the maximum time in milliseconds that can elapse between press and release
events in order for them to be recognized as a click, and return the previous
interval value.  The default value is 200 msec, or one fifth of a second.



curses.mousemask(mousemask)¶
Set the mouse events to be reported, and return a tuple (availmask,
oldmask).   availmask indicates which of the specified mouse events can be
reported; on complete failure it returns 0.  oldmask is the previous value of
the given window’s mouse event mask.  If this function is never called, no mouse
events are ever reported.



curses.napms(ms)¶
Sleep for ms milliseconds.



curses.newpad(nlines, ncols)¶
Create and return a pointer to a new pad data structure with the given number
of lines and columns.  Return a pad as a window object.
A pad is like a window, except that it is not restricted by the screen size, and
is not necessarily associated with a particular part of the screen.  Pads can be
used when a large window is needed, and only a part of the window will be on the
screen at one time.  Automatic refreshes of pads (such as from scrolling or
echoing of input) do not occur.  The refresh() and noutrefresh()
methods of a pad require 6 arguments to specify the part of the pad to be
displayed and the location on the screen to be used for the display. The
arguments are pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol; the p
arguments refer to the upper left corner of the pad region to be displayed and
the s arguments define a clipping box on the screen within which the pad region
is to be displayed.



curses.newwin(nlines, ncols)¶

curses.newwin(nlines, ncols, begin_y, begin_x)
Return a new window, whose left-upper corner
is at  (begin_y, begin_x), and whose height/width is  nlines/ncols.
By default, the window will extend from the  specified position to the lower
right corner of the screen.



curses.nl()¶
Enter newline mode.  This mode translates the return key into newline on input,
and translates newline into return and line-feed on output. Newline mode is
initially on.



curses.nocbreak()¶
Leave cbreak mode.  Return to normal “cooked” mode with line buffering.



curses.noecho()¶
Leave echo mode.  Echoing of input characters is turned off.



curses.nonl()¶
Leave newline mode.  Disable translation of return into newline on input, and
disable low-level translation of newline into newline/return on output (but this
does not change the behavior of addch('\n'), which always does the
equivalent of return and line feed on the virtual screen).  With translation
off, curses can sometimes speed up vertical motion a little; also, it will be
able to detect the return key on input.



curses.noqiflush()¶
When the noqiflush() routine is used, normal flush of input and output queues
associated with the INTR, QUIT and SUSP characters will not be done.  You may
want to call noqiflush() in a signal handler if you want output to
continue as though the interrupt had not occurred, after the handler exits.



curses.noraw()¶
Leave raw mode. Return to normal “cooked” mode with line buffering.



curses.pair_content(pair_number)¶
Return a tuple (fg, bg) containing the colors for the requested color pair.
The value of pair_number must be between 1 and COLOR_PAIRS - 1.



curses.pair_number(attr)¶
Return the number of the color-pair set by the attribute value attr.
color_pair() is the counterpart to this function.



curses.putp(str)¶
Equivalent to tputs(str, 1, putchar); emit the value of a specified
terminfo capability for the current terminal.  Note that the output of putp()
always goes to standard output.



curses.qiflush([flag])¶
If flag is False, the effect is the same as calling noqiflush(). If
flag is True, or no argument is provided, the queues will be flushed when
these control characters are read.



curses.raw()¶
Enter raw mode.  In raw mode, normal line buffering and  processing of
interrupt, quit, suspend, and flow control keys are turned off; characters are
presented to curses input functions one by one.



curses.reset_prog_mode()¶
Restore the  terminal  to “program” mode, as previously saved  by
def_prog_mode().



curses.reset_shell_mode()¶
Restore the  terminal  to “shell” mode, as previously saved  by
def_shell_mode().



curses.resetty()¶
Restore the state of the terminal modes to what it was at the last call to
savetty().



curses.resize_term(nlines, ncols)¶
Backend function used by resizeterm(), performing most of the work;
when resizing the windows, resize_term() blank-fills the areas that are
extended.  The calling application should fill in these areas with
appropriate data.  The resize_term() function attempts to resize all
windows.  However, due to the calling convention of pads, it is not possible
to resize these without additional interaction with the application.



curses.resizeterm(nlines, ncols)¶
Resize the standard and current windows to the specified dimensions, and
adjusts other bookkeeping data used by the curses library that record the
window dimensions (in particular the SIGWINCH handler).



curses.savetty()¶
Save the current state of the terminal modes in a buffer, usable by
resetty().



curses.setsyx(y, x)¶
Set the virtual screen cursor to y, x. If y and x are both -1, then
leaveok is set True.



curses.setupterm(term=None, fd=-1)¶
Initialize the terminal.  term is a string giving
the terminal name, or None; if omitted or None, the value of the
TERM environment variable will be used.  fd is the
file descriptor to which any initialization sequences will be sent; if not
supplied or -1, the file descriptor for sys.stdout will be used.



curses.start_color()¶
Must be called if the programmer wants to use colors, and before any other color
manipulation routine is called.  It is good practice to call this routine right
after initscr().
start_color() initializes eight basic colors (black, red,  green, yellow,
blue, magenta, cyan, and white), and two global variables in the curses
module, COLORS and COLOR_PAIRS, containing the maximum number
of colors and color-pairs the terminal can support.  It also restores the colors
on the terminal to the values they had when the terminal was just turned on.



curses.termattrs()¶
Return a logical OR of all video attributes supported by the terminal.  This
information is useful when a curses program needs complete control over the
appearance of the screen.



curses.termname()¶
Return the value of the environment variable TERM, as a bytes object,
truncated to 14 characters.



curses.tigetflag(capname)¶
Return the value of the Boolean capability corresponding to the terminfo
capability name capname as an integer.  Return the value -1 if capname is not a
Boolean capability, or 0 if it is canceled or absent from the terminal
description.



curses.tigetnum(capname)¶
Return the value of the numeric capability corresponding to the terminfo
capability name capname as an integer.  Return the value -2 if capname is not a
numeric capability, or -1 if it is canceled or absent from the terminal
description.



curses.tigetstr(capname)¶
Return the value of the string capability corresponding to the terminfo
capability name capname as a bytes object.  Return None if capname
is not a terminfo “string capability”, or is canceled or absent from the
terminal description.



curses.tparm(str[, ...])¶
Instantiate the bytes object str with the supplied parameters, where str should
be a parameterized string obtained from the terminfo database.  E.g.
tparm(tigetstr("cup"), 5, 3) could result in b'\033[6;4H', the exact
result depending on terminal type.



curses.typeahead(fd)¶
Specify that the file descriptor fd be used for typeahead checking.  If fd
is -1, then no typeahead checking is done.
The curses library does “line-breakout optimization” by looking for typeahead
periodically while updating the screen.  If input is found, and it is coming
from a tty, the current update is postponed until refresh or doupdate is called
again, allowing faster response to commands typed in advance. This function
allows specifying a different file descriptor for typeahead checking.



curses.unctrl(ch)¶
Return a bytes object which is a printable representation of the character ch.
Control characters are represented as a caret followed by the character, for
example as b'^C'. Printing characters are left as they are.



curses.ungetch(ch)¶
Push ch so the next getch() will return it.

Note
Only one ch can be pushed before getch() is called.




curses.update_lines_cols()¶
Update LINES and COLS. Useful for detecting manual screen resize.

New in version 3.5.




curses.unget_wch(ch)¶
Push ch so the next get_wch() will return it.

Note
Only one ch can be pushed before get_wch() is called.


New in version 3.3.




curses.ungetmouse(id, x, y, z, bstate)¶
Push a KEY_MOUSE event onto the input queue, associating the given
state data with it.



curses.use_env(flag)¶
If used, this function should be called before initscr() or newterm are
called.  When flag is False, the values of lines and columns specified in the
terminfo database will be used, even if environment variables LINES
and COLUMNS (used by default) are set, or if curses is running in a
window (in which case default behavior would be to use the window size if
LINES and COLUMNS are not set).



curses.use_default_colors()¶
Allow use of default values for colors on terminals supporting this feature. Use
this to support transparency in your application.  The default color is assigned
to the color number -1. After calling this function,  init_pair(x,
curses.COLOR_RED, -1) initializes, for instance, color pair x to a red
foreground color on the default background.



curses.wrapper(func, ...)¶
Initialize curses and call another callable object, func, which should be the
rest of your curses-using application.  If the application raises an exception,
this function will restore the terminal to a sane state before re-raising the
exception and generating a traceback.  The callable object func is then passed
the main window ‘stdscr’ as its first argument, followed by any other arguments
passed to wrapper().  Before calling func, wrapper() turns on
cbreak mode, turns off echo, enables the terminal keypad, and initializes colors
if the terminal has color support.  On exit (whether normally or by exception)
it restores cooked mode, turns on echo, and disables the terminal keypad.

