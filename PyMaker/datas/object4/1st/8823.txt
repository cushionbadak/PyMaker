link:
library/test.html#test.support.import_module

docs:

<dt id="test.support.import_module">
<code class="descclassname">test.support.</code><code class="descname">import_module</code><span class="sig-paren">(</span><em>name</em>, <em>deprecated=False</em>, <em>*</em>, <em>required_on()</em><span class="sig-paren">)</span><a class="headerlink" href="#test.support.import_module" title="Permalink to this definition">Â¶</a></dt>
<dd><p>This function imports and returns the named module. Unlike a normal
import, this function raises <a class="reference internal" href="unittest.html#unittest.SkipTest" title="unittest.SkipTest"><code class="xref py py-exc docutils literal notranslate"><span class="pre">unittest.SkipTest</span></code></a> if the module
cannot be imported.</p>
<p>Module and package deprecation messages are suppressed during this import
if <em>deprecated</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code>.  If a module is required on a platform but
optional for others, set <em>required_on</em> to an iterable of platform prefixes
which will be compared against <a class="reference internal" href="sys.html#sys.platform" title="sys.platform"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.platform</span></code></a>.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.1.</span></p>
</div>
</dd>