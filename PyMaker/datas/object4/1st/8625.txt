link:
library/unittest.mock.html#filter-dir

docs:

FILTER_DIR¶


unittest.mock.FILTER_DIR¶

FILTER_DIR is a module level variable that controls the way mock objects
respond to dir() (only for Python 2.6 or more recent). The default is True,
which uses the filtering described below, to only show useful members. If you
dislike this filtering, or need to switch it off for diagnostic purposes, then
set mock.FILTER_DIR = False.
With filtering on, dir(some_mock) shows only useful attributes and will
include any dynamically created attributes that wouldn’t normally be shown.
If the mock was created with a spec (or autospec of course) then all the
attributes from the original are shown, even if they haven’t been accessed
yet:
>>> dir(Mock())
['assert_any_call',
 'assert_called_once_with',
 'assert_called_with',
 'assert_has_calls',
 'attach_mock',
 ...
>>> from urllib import request
>>> dir(Mock(spec=request))
['AbstractBasicAuthHandler',
 'AbstractDigestAuthHandler',
 'AbstractHTTPHandler',
 'BaseHandler',
 ...


Many of the not-very-useful (private to Mock rather than the thing being
mocked) underscore and double underscore prefixed attributes have been
filtered from the result of calling dir() on a Mock. If you dislike this
behaviour you can switch it off by setting the module level switch
FILTER_DIR:
>>> from unittest import mock
>>> mock.FILTER_DIR = False
>>> dir(mock.Mock())
['_NonCallableMock__get_return_value',
 '_NonCallableMock__get_side_effect',
 '_NonCallableMock__return_value_doc',
 '_NonCallableMock__set_return_value',
 '_NonCallableMock__set_side_effect',
 '__call__',
 '__class__',
 ...


Alternatively you can just use vars(my_mock) (instance members) and
dir(type(my_mock)) (type members) to bypass the filtering irrespective of
mock.FILTER_DIR.
