link:
library/ctypes.html#return-types

docs:

Return typesÂ¶
By default functions are assumed to return the C int type.  Other
return types can be specified by setting the restype attribute of the
function object.
Here is a more advanced example, it uses the strchr function, which expects
a string pointer and a char, and returns a pointer to a string:
>>> strchr = libc.strchr
>>> strchr(b"abcdef", ord("d"))  
8059983
>>> strchr.restype = c_char_p    # c_char_p is a pointer to a string
>>> strchr(b"abcdef", ord("d"))
b'def'
>>> print(strchr(b"abcdef", ord("x")))
None
>>>


If you want to avoid the ord("x") calls above, you can set the
argtypes attribute, and the second argument will be converted from a
single character Python bytes object into a C char:
>>> strchr.restype = c_char_p
>>> strchr.argtypes = [c_char_p, c_char]
>>> strchr(b"abcdef", b"d")
'def'
>>> strchr(b"abcdef", b"def")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ArgumentError: argument 2: exceptions.TypeError: one character string expected
>>> print(strchr(b"abcdef", b"x"))
None
>>> strchr(b"abcdef", b"d")
'def'
>>>


You can also use a callable Python object (a function or a class for example) as
the restype attribute, if the foreign function returns an integer.  The
callable will be called with the integer the C function returns, and the
result of this call will be used as the result of your function call. This is
useful to check for error return values and automatically raise an exception:
>>> GetModuleHandle = windll.kernel32.GetModuleHandleA  
>>> def ValidHandle(value):
...     if value == 0:
...         raise WinError()
...     return value
...
>>>
>>> GetModuleHandle.restype = ValidHandle  
>>> GetModuleHandle(None)  
486539264
>>> GetModuleHandle("something silly")  
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in ValidHandle
OSError: [Errno 126] The specified module could not be found.
>>>


WinError is a function which will call Windows FormatMessage() api to
get the string representation of an error code, and returns an exception.
WinError takes an optional error code parameter, if no one is used, it calls
GetLastError() to retrieve it.
Please note that a much more powerful error checking mechanism is available
through the errcheck attribute; see the reference manual for details.
