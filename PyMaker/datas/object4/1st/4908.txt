link:
library/asyncio-protocol.html#subprocess-transports

docs:

Subprocess Transports¶


SubprocessTransport.get_pid()¶
Return the subprocess process id as an integer.



SubprocessTransport.get_pipe_transport(fd)¶
Return the transport for the communication pipe corresponding to the
integer file descriptor fd:

0: readable streaming transport of the standard input (stdin),
or None if the subprocess was not created with stdin=PIPE
1: writable streaming transport of the standard output (stdout),
or None if the subprocess was not created with stdout=PIPE
2: writable streaming transport of the standard error (stderr),
or None if the subprocess was not created with stderr=PIPE
other fd: None




SubprocessTransport.get_returncode()¶
Return the subprocess return code as an integer or None
if it hasn’t returned, which is similar to the
subprocess.Popen.returncode attribute.



SubprocessTransport.kill()¶
Kill the subprocess.
On POSIX systems, the function sends SIGKILL to the subprocess.
On Windows, this method is an alias for terminate().
See also subprocess.Popen.kill().



SubprocessTransport.send_signal(signal)¶
Send the signal number to the subprocess, as in
subprocess.Popen.send_signal().



SubprocessTransport.terminate()¶
Stop the subprocess.
On POSIX systems, this method sends SIGTERM to the subprocess.
On Windows, the Windows API function TerminateProcess() is called to
stop the subprocess.
See also subprocess.Popen.terminate().



SubprocessTransport.close()¶
Kill the subprocess by calling the kill() method.
If the subprocess hasn’t returned yet, and close transports of
stdin, stdout, and stderr pipes.

