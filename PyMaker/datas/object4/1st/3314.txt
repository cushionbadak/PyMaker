link:
library/io.html#buffered-streams

docs:

Buffered Streams¶
Buffered I/O streams provide a higher-level interface to an I/O device
than raw I/O does.


class io.BytesIO([initial_bytes])¶
A stream implementation using an in-memory bytes buffer.  It inherits
BufferedIOBase.  The buffer is discarded when the
close() method is called.
The optional argument initial_bytes is a bytes-like object that
contains initial data.
BytesIO provides or overrides these methods in addition to those
from BufferedIOBase and IOBase:


getbuffer()¶
Return a readable and writable view over the contents of the buffer
without copying them.  Also, mutating the view will transparently
update the contents of the buffer:
>>> b = io.BytesIO(b"abcdef")
>>> view = b.getbuffer()
>>> view[2:4] = b"56"
>>> b.getvalue()
b'ab56ef'



Note
As long as the view exists, the BytesIO object cannot be
resized or closed.


New in version 3.2.




getvalue()¶
Return bytes containing the entire contents of the buffer.



read1([size])¶
In BytesIO, this is the same as read().

Changed in version 3.7: The size argument is now optional.




readinto1(b)¶
In BytesIO, this is the same as readinto().

New in version 3.5.





class io.BufferedReader(raw, buffer_size=DEFAULT_BUFFER_SIZE)¶
A buffer providing higher-level access to a readable, sequential
RawIOBase object.  It inherits BufferedIOBase.
When reading data from this object, a larger amount of data may be
requested from the underlying raw stream, and kept in an internal buffer.
The buffered data can then be returned directly on subsequent reads.
The constructor creates a BufferedReader for the given readable
raw stream and buffer_size.  If buffer_size is omitted,
DEFAULT_BUFFER_SIZE is used.
BufferedReader provides or overrides these methods in addition to
those from BufferedIOBase and IOBase:


peek([size])¶
Return bytes from the stream without advancing the position.  At most one
single read on the raw stream is done to satisfy the call. The number of
bytes returned may be less or more than requested.



read([size])¶
Read and return size bytes, or if size is not given or negative, until
EOF or if the read call would block in non-blocking mode.



read1([size])¶
Read and return up to size bytes with only one call on the raw stream.
If at least one byte is buffered, only buffered bytes are returned.
Otherwise, one raw stream read call is made.

Changed in version 3.7: The size argument is now optional.





class io.BufferedWriter(raw, buffer_size=DEFAULT_BUFFER_SIZE)¶
A buffer providing higher-level access to a writeable, sequential
RawIOBase object.  It inherits BufferedIOBase.
When writing to this object, data is normally placed into an internal
buffer.  The buffer will be written out to the underlying RawIOBase
object under various conditions, including:

when the buffer gets too small for all pending data;
when flush() is called;
when a seek() is requested (for BufferedRandom objects);
when the BufferedWriter object is closed or destroyed.

The constructor creates a BufferedWriter for the given writeable
raw stream.  If the buffer_size is not given, it defaults to
DEFAULT_BUFFER_SIZE.
BufferedWriter provides or overrides these methods in addition to
those from BufferedIOBase and IOBase:


flush()¶
Force bytes held in the buffer into the raw stream.  A
BlockingIOError should be raised if the raw stream blocks.



write(b)¶
Write the bytes-like object, b, and return the
number of bytes written.  When in non-blocking mode, a
BlockingIOError is raised if the buffer needs to be written out but
the raw stream blocks.




class io.BufferedRandom(raw, buffer_size=DEFAULT_BUFFER_SIZE)¶
A buffered interface to random access streams.  It inherits
BufferedReader and BufferedWriter, and further supports
seek() and tell() functionality.
The constructor creates a reader and writer for a seekable raw stream, given
in the first argument.  If the buffer_size is omitted it defaults to
DEFAULT_BUFFER_SIZE.
BufferedRandom is capable of anything BufferedReader or
BufferedWriter can do.



class io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)¶
A buffered I/O object combining two unidirectional RawIOBase
objects – one readable, the other writeable – into a single bidirectional
endpoint.  It inherits BufferedIOBase.
reader and writer are RawIOBase objects that are readable and
writeable respectively.  If the buffer_size is omitted it defaults to
DEFAULT_BUFFER_SIZE.
BufferedRWPair implements all of BufferedIOBase’s methods
except for detach(), which raises
UnsupportedOperation.

Warning
BufferedRWPair does not attempt to synchronize accesses to
its underlying raw streams.  You should not pass it the same object
as reader and writer; use BufferedRandom instead.


