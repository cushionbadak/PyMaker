link:
library/inspect.html#inspect.getfullargspec

docs:


inspect.getfullargspec(func)¶
Get the names and default values of a Python function’s parameters.  A
named tuple is returned:
FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults,
annotations)
args is a list of the positional parameter names.
varargs is the name of the * parameter or None if arbitrary
positional arguments are not accepted.
varkw is the name of the ** parameter or None if arbitrary
keyword arguments are not accepted.
defaults is an n-tuple of default argument values corresponding to the
last n positional parameters, or None if there are no such defaults
defined.
kwonlyargs is a list of keyword-only parameter names in declaration order.
kwonlydefaults is a dictionary mapping parameter names from kwonlyargs
to the default values used if no argument is supplied.
annotations is a dictionary mapping parameter names to annotations.
The special key "return" is used to report the function return value
annotation (if any).
Note that signature() and
Signature Object provide the recommended
API for callable introspection, and support additional behaviours (like
positional-only arguments) that are sometimes encountered in extension module
APIs. This function is retained primarily for use in code that needs to
maintain compatibility with the Python 2 inspect module API.

Changed in version 3.4: This function is now based on signature(), but still ignores
__wrapped__ attributes and includes the already bound first
parameter in the signature output for bound methods.


Changed in version 3.6: This method was previously documented as deprecated in favour of
signature() in Python 3.5, but that decision has been reversed
in order to restore a clearly supported standard interface for
single-source Python 2/3 code migrating away from the legacy
getargspec() API.


Changed in version 3.7: Python only explicitly guaranteed that it preserved the declaration
order of keyword-only parameters as of version 3.7, although in practice
this order had always been preserved in Python 3.

