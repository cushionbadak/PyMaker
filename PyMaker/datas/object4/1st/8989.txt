link:
library/profile.html#introduction-to-the-profilers

docs:

Introduction to the profilers¶
cProfile and profile provide deterministic profiling of
Python programs. A profile is a set of statistics that describes how
often and for how long various parts of the program executed. These statistics
can be formatted into reports via the pstats module.
The Python standard library provides two different implementations of the same
profiling interface:

cProfile is recommended for most users; it’s a C extension with
reasonable overhead that makes it suitable for profiling long-running
programs.  Based on lsprof, contributed by Brett Rosen and Ted
Czotter.
profile, a pure Python module whose interface is imitated by
cProfile, but which adds significant overhead to profiled programs.
If you’re trying to extend the profiler in some way, the task might be easier
with this module.  Originally designed and written by Jim Roskind.


Note
The profiler modules are designed to provide an execution profile for a given
program, not for benchmarking purposes (for that, there is timeit for
reasonably accurate results).  This particularly applies to benchmarking
Python code against C code: the profilers introduce overhead for Python code,
but not for C-level functions, and so the C code would seem faster than any
Python one.

