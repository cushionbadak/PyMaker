link:
library/string.html#template-strings

docs:

Template strings¶
Template strings provide simpler string substitutions as described in
PEP 292.  A primary use case for template strings is for
internationalization (i18n) since in that context, the simpler syntax and
functionality makes it easier to translate than other built-in string
formatting facilities in Python.  As an example of a library built on template
strings for i18n, see the
flufl.i18n package.
Template strings support $-based substitutions, using the following rules:

$$ is an escape; it is replaced with a single $.
$identifier names a substitution placeholder matching a mapping key of
"identifier".  By default, "identifier" is restricted to any
case-insensitive ASCII alphanumeric string (including underscores) that
starts with an underscore or ASCII letter.  The first non-identifier
character after the $ character terminates this placeholder
specification.
${identifier} is equivalent to $identifier.  It is required when
valid identifier characters follow the placeholder but are not part of the
placeholder, such as "${noun}ification".

Any other appearance of $ in the string will result in a ValueError
being raised.
The string module provides a Template class that implements
these rules.  The methods of Template are:


class string.Template(template)¶
The constructor takes a single argument which is the template string.


substitute(mapping, **kwds)¶
Performs the template substitution, returning a new string.  mapping is
any dictionary-like object with keys that match the placeholders in the
template.  Alternatively, you can provide keyword arguments, where the
keywords are the placeholders.  When both mapping and kwds are given
and there are duplicates, the placeholders from kwds take precedence.



safe_substitute(mapping, **kwds)¶
Like substitute(), except that if placeholders are missing from
mapping and kwds, instead of raising a KeyError exception, the
original placeholder will appear in the resulting string intact.  Also,
unlike with substitute(), any other appearances of the $ will
simply return $ instead of raising ValueError.
While other exceptions may still occur, this method is called “safe”
because it always tries to return a usable string instead of
raising an exception.  In another sense, safe_substitute() may be
anything other than safe, since it will silently ignore malformed
templates containing dangling delimiters, unmatched braces, or
placeholders that are not valid Python identifiers.

Template instances also provide one public data attribute:


template¶
This is the object passed to the constructor’s template argument.  In
general, you shouldn’t change it, but read-only access is not enforced.


Here is an example of how to use a Template:
>>> from string import Template
>>> s = Template('$who likes $what')
>>> s.substitute(who='tim', what='kung pao')
'tim likes kung pao'
>>> d = dict(who='tim')
>>> Template('Give $who $100').substitute(d)
Traceback (most recent call last):
...
ValueError: Invalid placeholder in string: line 1, col 11
>>> Template('$who likes $what').substitute(d)
Traceback (most recent call last):
...
KeyError: 'what'
>>> Template('$who likes $what').safe_substitute(d)
'tim likes $what'


Advanced usage: you can derive subclasses of Template to customize
the placeholder syntax, delimiter character, or the entire regular expression
used to parse template strings.  To do this, you can override these class
attributes:

delimiter – This is the literal string describing a placeholder
introducing delimiter.  The default value is $.  Note that this should
not be a regular expression, as the implementation will call
re.escape() on this string as needed.  Note further that you cannot
change the delimiter after class creation (i.e. a different delimiter must
be set in the subclass’s class namespace).

idpattern – This is the regular expression describing the pattern for
non-braced placeholders.  The default value is the regular expression
(?a:[_a-z][_a-z0-9]*).  If this is given and braceidpattern is
None this pattern will also apply to braced placeholders.

Note
Since default flags is re.IGNORECASE, pattern [a-z] can match
with some non-ASCII characters. That’s why we use the local a flag
here.


Changed in version 3.7: braceidpattern can be used to define separate patterns used inside and
outside the braces.


braceidpattern – This is like idpattern but describes the pattern for
braced placeholders.  Defaults to None which means to fall back to
idpattern (i.e. the same pattern is used both inside and outside braces).
If given, this allows you to define different patterns for braced and
unbraced placeholders.

New in version 3.7.


flags – The regular expression flags that will be applied when compiling
the regular expression used for recognizing substitutions.  The default value
is re.IGNORECASE.  Note that re.VERBOSE will always be added to the
flags, so custom idpatterns must follow conventions for verbose regular
expressions.

New in version 3.2.



Alternatively, you can provide the entire regular expression pattern by
overriding the class attribute pattern.  If you do this, the value must be a
regular expression object with four named capturing groups.  The capturing
groups correspond to the rules given above, along with the invalid placeholder
rule:

escaped – This group matches the escape sequence, e.g. $$, in the
default pattern.
named – This group matches the unbraced placeholder name; it should not
include the delimiter in capturing group.
braced – This group matches the brace enclosed placeholder name; it should
not include either the delimiter or braces in the capturing group.
invalid – This group matches any other delimiter pattern (usually a single
delimiter), and it should appear last in the regular expression.

