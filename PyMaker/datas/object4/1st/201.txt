link:
reference/import.html#module-reprs

docs:

5.4.6. Module reprs¶
By default, all modules have a usable repr, however depending on the
attributes set above, and in the module’s spec, you can more explicitly
control the repr of module objects.
If the module has a spec (__spec__), the import machinery will try
to generate a repr from it.  If that fails or there is no spec, the import
system will craft a default repr using whatever information is available
on the module.  It will try to use the module.__name__,
module.__file__, and module.__loader__ as input into the repr,
with defaults for whatever information is missing.
Here are the exact rules used:


If the module has a __spec__ attribute, the information in the spec
is used to generate the repr.  The “name”, “loader”, “origin”, and
“has_location” attributes are consulted.
If the module has a __file__ attribute, this is used as part of the
module’s repr.
If the module has no __file__ but does have a __loader__ that is not
None, then the loader’s repr is used as part of the module’s repr.
Otherwise, just use the module’s __name__ in the repr.



Changed in version 3.4: Use of loader.module_repr()
has been deprecated and the module spec is now used by the import
machinery to generate a module repr.
For backward compatibility with Python 3.3, the module repr will be
generated by calling the loader’s
module_repr() method, if defined, before
trying either approach described above.  However, the method is deprecated.

