link:
library/datetime.html#date-objects

docs:

date Objects¶
A date object represents a date (year, month and day) in an idealized
calendar, the current Gregorian calendar indefinitely extended in both
directions.  January 1 of year 1 is called day number 1, January 2 of year 1 is
called day number 2, and so on.  This matches the definition of the “proleptic
Gregorian” calendar in Dershowitz and Reingold’s book Calendrical Calculations,
where it’s the base calendar for all computations.  See the book for algorithms
for converting between proleptic Gregorian ordinals and many other calendar
systems.


class datetime.date(year, month, day)¶
All arguments are required.  Arguments may be integers, in the following
ranges:

MINYEAR <= year <= MAXYEAR
1 <= month <= 12
1 <= day <= number of days in the given month and year

If an argument outside those ranges is given, ValueError is raised.

Other constructors, all class methods:


classmethod date.today()¶
Return the current local date.  This is equivalent to
date.fromtimestamp(time.time()).



classmethod date.fromtimestamp(timestamp)¶
Return the local date corresponding to the POSIX timestamp, such as is returned
by time.time().  This may raise OverflowError, if the timestamp is out
of the range of values supported by the platform C localtime() function,
and OSError on localtime() failure.
It’s common for this to be restricted to years from 1970 through 2038.  Note
that on non-POSIX systems that include leap seconds in their notion of a
timestamp, leap seconds are ignored by fromtimestamp().

Changed in version 3.3: Raise OverflowError instead of ValueError if the timestamp
is out of the range of values supported by the platform C
localtime() function. Raise OSError instead of
ValueError on localtime() failure.




classmethod date.fromordinal(ordinal)¶
Return the date corresponding to the proleptic Gregorian ordinal, where January
1 of year 1 has ordinal 1.  ValueError is raised unless 1 <= ordinal <=
date.max.toordinal(). For any date d, date.fromordinal(d.toordinal()) ==
d.



classmethod date.fromisoformat(date_string)¶
Return a date corresponding to a date_string in the format emitted
by date.isoformat(). Specifically, this function supports strings in
the format(s) YYYY-MM-DD.

Caution
This does not support parsing arbitrary ISO 8601 strings - it is only intended
as the inverse operation of date.isoformat().


New in version 3.7.


Class attributes:


date.min¶
The earliest representable date, date(MINYEAR, 1, 1).



date.max¶
The latest representable date, date(MAXYEAR, 12, 31).



date.resolution¶
The smallest possible difference between non-equal date objects,
timedelta(days=1).

Instance attributes (read-only):


date.year¶
Between MINYEAR and MAXYEAR inclusive.



date.month¶
Between 1 and 12 inclusive.



date.day¶
Between 1 and the number of days in the given month of the given year.

Supported operations:






Operation
Result



date2 = date1 + timedelta
date2 is timedelta.days days removed
from date1.  (1)

date2 = date1 - timedelta
Computes date2 such that date2 +
timedelta == date1. (2)

timedelta = date1 - date2
(3)

date1 < date2
date1 is considered less than date2 when
date1 precedes date2 in time. (4)



Notes:

date2 is moved forward in time if timedelta.days > 0, or backward if
timedelta.days < 0.  Afterward date2 - date1 == timedelta.days.
timedelta.seconds and timedelta.microseconds are ignored.
OverflowError is raised if date2.year would be smaller than
MINYEAR or larger than MAXYEAR.
timedelta.seconds and timedelta.microseconds are ignored.
This is exact, and cannot overflow.  timedelta.seconds and
timedelta.microseconds are 0, and date2 + timedelta == date1 after.
In other words, date1 < date2 if and only if date1.toordinal() <
date2.toordinal(). Date comparison raises TypeError if
the other comparand isn’t also a date object. However,
NotImplemented is returned instead if the other comparand has a
timetuple() attribute.  This hook gives other kinds of date objects a
chance at implementing mixed-type comparison. If not, when a date
object is compared to an object of a different type, TypeError is raised
unless the comparison is == or !=.  The latter cases return
False or True, respectively.

Dates can be used as dictionary keys. In Boolean contexts, all date
objects are considered to be true.
Instance methods:


date.replace(year=self.year, month=self.month, day=self.day)¶
Return a date with the same value, except for those parameters given new
values by whichever keyword arguments are specified.  For example, if d ==
date(2002, 12, 31), then d.replace(day=26) == date(2002, 12, 26).



date.timetuple()¶
Return a time.struct_time such as returned by time.localtime().
The hours, minutes and seconds are 0, and the DST flag is -1. d.timetuple()
is equivalent to time.struct_time((d.year, d.month, d.day, 0, 0, 0,
d.weekday(), yday, -1)), where yday = d.toordinal() - date(d.year, 1,
1).toordinal() + 1 is the day number within the current year starting with
1 for January 1st.



date.toordinal()¶
Return the proleptic Gregorian ordinal of the date, where January 1 of year 1
has ordinal 1.  For any date object d,
date.fromordinal(d.toordinal()) == d.



date.weekday()¶
Return the day of the week as an integer, where Monday is 0 and Sunday is 6.
For example, date(2002, 12, 4).weekday() == 2, a Wednesday. See also
isoweekday().



date.isoweekday()¶
Return the day of the week as an integer, where Monday is 1 and Sunday is 7.
For example, date(2002, 12, 4).isoweekday() == 3, a Wednesday. See also
weekday(), isocalendar().



date.isocalendar()¶
Return a 3-tuple, (ISO year, ISO week number, ISO weekday).
The ISO calendar is a widely used variant of the Gregorian calendar. See
https://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm for a good
explanation.
The ISO year consists of 52 or 53 full weeks, and where a week starts on a
Monday and ends on a Sunday.  The first week of an ISO year is the first
(Gregorian) calendar week of a year containing a Thursday. This is called week
number 1, and the ISO year of that Thursday is the same as its Gregorian year.
For example, 2004 begins on a Thursday, so the first week of ISO year 2004
begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that
date(2003, 12, 29).isocalendar() == (2004, 1, 1) and date(2004, 1,
4).isocalendar() == (2004, 1, 7).



date.isoformat()¶
Return a string representing the date in ISO 8601 format, ‘YYYY-MM-DD’.  For
example, date(2002, 12, 4).isoformat() == '2002-12-04'.



date.__str__()¶
For a date d, str(d) is equivalent to d.isoformat().



date.ctime()¶
Return a string representing the date, for example date(2002, 12,
4).ctime() == 'Wed Dec 4 00:00:00 2002'. d.ctime() is equivalent to
time.ctime(time.mktime(d.timetuple())) on platforms where the native C
ctime() function (which time.ctime() invokes, but which
date.ctime() does not invoke) conforms to the C standard.



date.strftime(format)¶
Return a string representing the date, controlled by an explicit format string.
Format codes referring to hours, minutes or seconds will see 0 values. For a
complete list of formatting directives, see
strftime() and strptime() Behavior.



date.__format__(format)¶
Same as date.strftime(). This makes it possible to specify a format
string for a date object in formatted string
literals and when using str.format(). For a
complete list of formatting directives, see
strftime() and strptime() Behavior.

Example of counting days to an event:
>>> import time
>>> from datetime import date
>>> today = date.today()
>>> today
datetime.date(2007, 12, 5)
>>> today == date.fromtimestamp(time.time())
True
>>> my_birthday = date(today.year, 6, 24)
>>> if my_birthday < today:
...     my_birthday = my_birthday.replace(year=today.year + 1)
>>> my_birthday
datetime.date(2008, 6, 24)
>>> time_to_birthday = abs(my_birthday - today)
>>> time_to_birthday.days
202


Example of working with date:
>>> from datetime import date
>>> d = date.fromordinal(730920) # 730920th day after 1. 1. 0001
>>> d
datetime.date(2002, 3, 11)
>>> t = d.timetuple()
>>> for i in t:     
...     print(i)
2002                # year
3                   # month
11                  # day
0
0
0
0                   # weekday (0 = Monday)
70                  # 70th day in the year
-1
>>> ic = d.isocalendar()
>>> for i in ic:    
...     print(i)
2002                # ISO year
11                  # ISO week number
1                   # ISO day number ( 1 = Monday )
>>> d.isoformat()
'2002-03-11'
>>> d.strftime("%d/%m/%y")
'11/03/02'
>>> d.strftime("%A %d. %B %Y")
'Monday 11. March 2002'
>>> 'The {1} is {0:%d}, the {2} is {0:%B}.'.format(d, "day", "month")
'The day is 11, the month is March.'


