link:
library/zipapp.html#caveats

docs:

Caveats¶
There are some limitations to the process of bundling your application into
a single file.  In most, if not all, cases they can be addressed without
needing major changes to your application.

If your application depends on a package that includes a C extension, that
package cannot be run from a zip file (this is an OS limitation, as executable
code must be present in the filesystem for the OS loader to load it). In this
case, you can exclude that dependency from the zipfile, and either require
your users to have it installed, or ship it alongside your zipfile and add code
to your __main__.py to include the directory containing the unzipped
module in sys.path. In this case, you will need to make sure to ship
appropriate binaries for your target architecture(s) (and potentially pick the
correct version to add to sys.path at runtime, based on the user’s machine).
If you are shipping a Windows executable as described above, you either need to
ensure that your users have python3.dll on their PATH (which is not the
default behaviour of the installer) or you should bundle your application with
the embedded distribution.
The suggested launcher above uses the Python embedding API.  This means that in
your application, sys.executable will be your application, and not a
conventional Python interpreter.  Your code and its dependencies need to be
prepared for this possibility.  For example, if your application uses the
multiprocessing module, it will need to call
multiprocessing.set_executable() to let the module know where to find the
standard Python interpreter.

