link:
library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor

docs:

<dt id="concurrent.futures.ThreadPoolExecutor">
<em class="property">class </em><code class="descclassname">concurrent.futures.</code><code class="descname">ThreadPoolExecutor</code><span class="sig-paren">(</span><em>max_workers=None</em>, <em>thread_name_prefix=''</em>, <em>initializer=None</em>, <em>initargs=()</em><span class="sig-paren">)</span><a class="headerlink" href="#concurrent.futures.ThreadPoolExecutor" title="Permalink to this definition">Â¶</a></dt>
<dd><p>An <a class="reference internal" href="#concurrent.futures.Executor" title="concurrent.futures.Executor"><code class="xref py py-class docutils literal notranslate"><span class="pre">Executor</span></code></a> subclass that uses a pool of at most <em>max_workers</em>
threads to execute calls asynchronously.</p>
<p><em>initializer</em> is an optional callable that is called at the start of
each worker thread; <em>initargs</em> is a tuple of arguments passed to the
initializer.  Should <em>initializer</em> raise an exception, all currently
pending jobs will raise a <a class="reference internal" href="#concurrent.futures.thread.BrokenThreadPool" title="concurrent.futures.thread.BrokenThreadPool"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BrokenThreadPool</span></code></a>,
as well as any attempt to submit more jobs to the pool.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>If <em>max_workers</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code> or
not given, it will default to the number of processors on the machine,
multiplied by <code class="docutils literal notranslate"><span class="pre">5</span></code>, assuming that <a class="reference internal" href="#concurrent.futures.ThreadPoolExecutor" title="concurrent.futures.ThreadPoolExecutor"><code class="xref py py-class docutils literal notranslate"><span class="pre">ThreadPoolExecutor</span></code></a> is often
used to overlap I/O instead of CPU work and the number of workers
should be higher than the number of workers
for <a class="reference internal" href="#concurrent.futures.ProcessPoolExecutor" title="concurrent.futures.ProcessPoolExecutor"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProcessPoolExecutor</span></code></a>.</p>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.6: </span>The <em>thread_name_prefix</em> argument was added to allow users to
control the <a class="reference internal" href="threading.html#threading.Thread" title="threading.Thread"><code class="xref py py-class docutils literal notranslate"><span class="pre">threading.Thread</span></code></a> names for worker threads created by
the pool for easier debugging.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span>Added the <em>initializer</em> and <em>initargs</em> arguments.</p>
</div>
</dd>