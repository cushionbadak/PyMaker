link:
library/asyncio-task.html#asyncio.run

docs:

<dt id="asyncio.run">
<code class="descclassname">asyncio.</code><code class="descname">run</code><span class="sig-paren">(</span><em>coro</em>, <em>*</em>, <em>debug=False</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.run" title="Permalink to this definition">Â¶</a></dt>
<dd><p>This function runs the passed coroutine, taking care of
managing the asyncio event loop and <em>finalizing asynchronous
generators</em>.</p>
<p>This function cannot be called when another asyncio event loop is
running in the same thread.</p>
<p>If <em>debug</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code>, the event loop will be run in debug mode.</p>
<p>This function always creates a new event loop and closes it at
the end.  It should be used as a main entry point for asyncio
programs, and should ideally only be called once.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7: </span><strong>Important:</strong> this function has been added to asyncio in
Python 3.7 on a <a class="reference internal" href="../glossary.html#term-provisional-api"><span class="xref std std-term">provisional basis</span></a>.</p>
</div>
</dd>