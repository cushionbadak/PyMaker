link:
library/xmlrpc.server.html#simplexmlrpcserver-objects

docs:

SimpleXMLRPCServer Objects¶
The SimpleXMLRPCServer class is based on
socketserver.TCPServer and provides a means of creating simple, stand
alone XML-RPC servers.


SimpleXMLRPCServer.register_function(function=None, name=None)¶
Register a function that can respond to XML-RPC requests.  If name is given,
it will be the method name associated with function, otherwise
function.__name__ will be used.  name is a string, and may contain
characters not legal in Python identifiers, including the period character.
This method can also be used as a decorator.  When used as a decorator,
name can only be given as a keyword argument to register function under
name.  If no name is given, function.__name__ will be used.

Changed in version 3.7: register_function() can be used as a decorator.




SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)¶
Register an object which is used to expose method names which have not been
registered using register_function().  If instance contains a
_dispatch() method, it is called with the requested method name and the
parameters from the request.  Its API is def _dispatch(self, method, params)
(note that params does not represent a variable argument list).  If it calls
an underlying function to perform its task, that function is called as
func(*params), expanding the parameter list. The return value from
_dispatch() is returned to the client as the result.  If instance does
not have a _dispatch() method, it is searched for an attribute matching
the name of the requested method.
If the optional allow_dotted_names argument is true and the instance does not
have a _dispatch() method, then if the requested method name contains
periods, each component of the method name is searched for individually, with
the effect that a simple hierarchical search is performed.  The value found from
this search is then called with the parameters from the request, and the return
value is passed back to the client.

Warning
Enabling the allow_dotted_names option allows intruders to access your
module’s global variables and may allow intruders to execute arbitrary code on
your machine.  Only use this option on a secure, closed network.




SimpleXMLRPCServer.register_introspection_functions()¶
Registers the XML-RPC introspection functions system.listMethods,
system.methodHelp and system.methodSignature.



SimpleXMLRPCServer.register_multicall_functions()¶
Registers the XML-RPC multicall function system.multicall.



SimpleXMLRPCRequestHandler.rpc_paths¶
An attribute value that must be a tuple listing valid path portions of the URL
for receiving XML-RPC requests.  Requests posted to other paths will result in a
404 “no such page” HTTP error.  If this tuple is empty, all paths will be
considered valid. The default value is ('/', '/RPC2').


SimpleXMLRPCServer Example¶
Server code:
from xmlrpc.server import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCRequestHandler

# Restrict to a particular path.
class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

# Create server
with SimpleXMLRPCServer(('localhost', 8000),
                        requestHandler=RequestHandler) as server:
    server.register_introspection_functions()

    # Register pow() function; this will use the value of
    # pow.__name__ as the name, which is just 'pow'.
    server.register_function(pow)

    # Register a function under a different name
    def adder_function(x, y):
        return x + y
    server.register_function(adder_function, 'add')

    # Register an instance; all the methods of the instance are
    # published as XML-RPC methods (in this case, just 'mul').
    class MyFuncs:
        def mul(self, x, y):
            return x * y

    server.register_instance(MyFuncs())

    # Run the server's main loop
    server.serve_forever()


The following client code will call the methods made available by the preceding
server:
import xmlrpc.client

s = xmlrpc.client.ServerProxy('http://localhost:8000')
print(s.pow(2,3))  # Returns 2**3 = 8
print(s.add(2,3))  # Returns 5
print(s.mul(5,2))  # Returns 5*2 = 10

# Print list of available methods
print(s.system.listMethods())


register_function() can also be used as a decorator. The previous server
example can register functions in a decorator way:
from xmlrpc.server import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCRequestHandler

class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

with SimpleXMLRPCServer(('localhost', 8000),
                        requestHandler=RequestHandler) as server:
    server.register_introspection_functions()

    # Register pow() function; this will use the value of
    # pow.__name__ as the name, which is just 'pow'.
    server.register_function(pow)

    # Register a function under a different name, using
    # register_function as a decorator. *name* can only be given
    # as a keyword argument.
    @server.register_function(name='add')
    def adder_function(x, y):
        return x + y

    # Register a function under function.__name__.
    @server.register_function
    def mul(x, y):
        return x * y

    server.serve_forever()


The following example included in the Lib/xmlrpc/server.py module shows
a server allowing dotted names and registering a multicall function.

Warning
Enabling the allow_dotted_names option allows intruders to access your
module’s global variables and may allow intruders to execute arbitrary code on
your machine.  Only use this example only within a secure, closed network.

import datetime

class ExampleService:
    def getData(self):
        return '42'

    class currentTime:
        @staticmethod
        def getCurrentTime():
            return datetime.datetime.now()

with SimpleXMLRPCServer(("localhost", 8000)) as server:
    server.register_function(pow)
    server.register_function(lambda x,y: x+y, 'add')
    server.register_instance(ExampleService(), allow_dotted_names=True)
    server.register_multicall_functions()
    print('Serving XML-RPC on localhost port 8000')
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nKeyboard interrupt received, exiting.")
        sys.exit(0)


This ExampleService demo can be invoked from the command line:
python -m xmlrpc.server


The client that interacts with the above server is included in
Lib/xmlrpc/client.py:
server = ServerProxy("http://localhost:8000")

try:
    print(server.currentTime.getCurrentTime())
except Error as v:
    print("ERROR", v)

multi = MultiCall(server)
multi.getData()
multi.pow(2,9)
multi.add(1,2)
try:
    for response in multi():
        print(response)
except Error as v:
    print("ERROR", v)


This client which interacts with the demo XMLRPC server can be invoked as:
python -m xmlrpc.client



