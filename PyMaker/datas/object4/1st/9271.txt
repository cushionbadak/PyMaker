link:
library/sysconfig.html#installation-paths

docs:

Installation paths¶
Python uses an installation scheme that differs depending on the platform and on
the installation options.  These schemes are stored in sysconfig under
unique identifiers based on the value returned by os.name.
Every new component that is installed using distutils or a
Distutils-based system will follow the same scheme to copy its file in the right
places.
Python currently supports seven schemes:

posix_prefix: scheme for Posix platforms like Linux or Mac OS X.  This is
the default scheme used when Python or a component is installed.
posix_home: scheme for Posix platforms used when a home option is used
upon installation.  This scheme is used when a component is installed through
Distutils with a specific home prefix.
posix_user: scheme for Posix platforms used when a component is installed
through Distutils and the user option is used.  This scheme defines paths
located under the user home directory.
nt: scheme for NT platforms like Windows.
nt_user: scheme for NT platforms, when the user option is used.

Each scheme is itself composed of a series of paths and each path has a unique
identifier.  Python currently uses eight paths:

stdlib: directory containing the standard Python library files that are not
platform-specific.
platstdlib: directory containing the standard Python library files that are
platform-specific.
platlib: directory for site-specific, platform-specific files.
purelib: directory for site-specific, non-platform-specific files.
include: directory for non-platform-specific header files.
platinclude: directory for platform-specific header files.
scripts: directory for script files.
data: directory for data files.

sysconfig provides some functions to determine these paths.


sysconfig.get_scheme_names()¶
Return a tuple containing all schemes currently supported in
sysconfig.



sysconfig.get_path_names()¶
Return a tuple containing all path names currently supported in
sysconfig.



sysconfig.get_path(name[, scheme[, vars[, expand]]])¶
Return an installation path corresponding to the path name, from the
install scheme named scheme.
name has to be a value from the list returned by get_path_names().
sysconfig stores installation paths corresponding to each path name,
for each platform, with variables to be expanded.  For instance the stdlib
path for the nt scheme is: {base}/Lib.
get_path() will use the variables returned by get_config_vars()
to expand the path.  All variables have default values for each platform so
one may call this function and get the default value.
If scheme is provided, it must be a value from the list returned by
get_scheme_names().  Otherwise, the default scheme for the current
platform is used.
If vars is provided, it must be a dictionary of variables that will update
the dictionary return by get_config_vars().
If expand is set to False, the path will not be expanded using the
variables.
If name is not found, return None.



sysconfig.get_paths([scheme[, vars[, expand]]])¶
Return a dictionary containing all installation paths corresponding to an
installation scheme. See get_path() for more information.
If scheme is not provided, will use the default scheme for the current
platform.
If vars is provided, it must be a dictionary of variables that will
update the dictionary used to expand the paths.
If expand is set to false, the paths will not be expanded.
If scheme is not an existing scheme, get_paths() will raise a
KeyError.

