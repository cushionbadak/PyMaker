link:
library/tkinter.ttk.html#tkinter.ttk.Style

docs:

<dt id="tkinter.ttk.Style">
<em class="property">class </em><code class="descclassname">tkinter.ttk.</code><code class="descname">Style</code><a class="headerlink" href="#tkinter.ttk.Style" title="Permalink to this definition">¶</a></dt>
<dd><p>This class is used to manipulate the style database.</p>
<dl class="method">
<dt id="tkinter.ttk.Style.configure">
<code class="descname">configure</code><span class="sig-paren">(</span><em>style</em>, <em>query_opt=None</em>, <em>**kw</em><span class="sig-paren">)</span><a class="headerlink" href="#tkinter.ttk.Style.configure" title="Permalink to this definition">¶</a></dt>
<dd><p>Query or set the default value of the specified option(s) in <em>style</em>.</p>
<p>Each key in <em>kw</em> is an option and each value is a string identifying
the value for that option.</p>
<p>For example, to change every default button to be a flat button with
some padding and a different background color:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">tkinter</span> <span class="k">import</span> <span class="n">ttk</span>
<span class="kn">import</span> <span class="nn">tkinter</span>

<span class="n">root</span> <span class="o">=</span> <span class="n">tkinter</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>

<span class="n">ttk</span><span class="o">.</span><span class="n">Style</span><span class="p">()</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">"TButton"</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">relief</span><span class="o">=</span><span class="s2">"flat"</span><span class="p">,</span>
   <span class="n">background</span><span class="o">=</span><span class="s2">"#ccc"</span><span class="p">)</span>

<span class="n">btn</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s2">"Sample"</span><span class="p">)</span>
<span class="n">btn</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">root</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
</dd></dl>
<dl class="method">
<dt id="tkinter.ttk.Style.map">
<code class="descname">map</code><span class="sig-paren">(</span><em>style</em>, <em>query_opt=None</em>, <em>**kw</em><span class="sig-paren">)</span><a class="headerlink" href="#tkinter.ttk.Style.map" title="Permalink to this definition">¶</a></dt>
<dd><p>Query or sets dynamic values of the specified option(s) in <em>style</em>.</p>
<p>Each key in <em>kw</em> is an option and each value should be a list or a
tuple (usually) containing statespecs grouped in tuples, lists, or
some other preference. A statespec is a compound of one
or more states and then a value.</p>
<p>An example may make it more understandable:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span>
<span class="kn">from</span> <span class="nn">tkinter</span> <span class="k">import</span> <span class="n">ttk</span>

<span class="n">root</span> <span class="o">=</span> <span class="n">tkinter</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>

<span class="n">style</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Style</span><span class="p">()</span>
<span class="n">style</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="s2">"C.TButton"</span><span class="p">,</span>
    <span class="n">foreground</span><span class="o">=</span><span class="p">[(</span><span class="s1">'pressed'</span><span class="p">,</span> <span class="s1">'red'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'active'</span><span class="p">,</span> <span class="s1">'blue'</span><span class="p">)],</span>
    <span class="n">background</span><span class="o">=</span><span class="p">[(</span><span class="s1">'pressed'</span><span class="p">,</span> <span class="s1">'!disabled'</span><span class="p">,</span> <span class="s1">'black'</span><span class="p">),</span> <span class="p">(</span><span class="s1">'active'</span><span class="p">,</span> <span class="s1">'white'</span><span class="p">)]</span>
    <span class="p">)</span>

<span class="n">colored_btn</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s2">"Test"</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s2">"C.TButton"</span><span class="p">)</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">root</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>Note that the order of the (states, value) sequences for an option does
matter, if the order is changed to <code class="docutils literal notranslate"><span class="pre">[('active',</span> <span class="pre">'blue'),</span> <span class="pre">('pressed',</span>
<span class="pre">'red')]</span></code> in the foreground option, for example, the result would be a
blue foreground when the widget were in active or pressed states.</p>
</dd></dl>
<dl class="method">
<dt id="tkinter.ttk.Style.lookup">
<code class="descname">lookup</code><span class="sig-paren">(</span><em>style</em>, <em>option</em>, <em>state=None</em>, <em>default=None</em><span class="sig-paren">)</span><a class="headerlink" href="#tkinter.ttk.Style.lookup" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns the value specified for <em>option</em> in <em>style</em>.</p>
<p>If <em>state</em> is specified, it is expected to be a sequence of one or more
states. If the <em>default</em> argument is set, it is used as a fallback value
in case no specification for option is found.</p>
<p>To check what font a Button uses by default:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">tkinter</span> <span class="k">import</span> <span class="n">ttk</span>

<span class="nb">print</span><span class="p">(</span><span class="n">ttk</span><span class="o">.</span><span class="n">Style</span><span class="p">()</span><span class="o">.</span><span class="n">lookup</span><span class="p">(</span><span class="s2">"TButton"</span><span class="p">,</span> <span class="s2">"font"</span><span class="p">))</span>
</pre></div>
</div>
</dd></dl>
<dl class="method">
<dt id="tkinter.ttk.Style.layout">
<code class="descname">layout</code><span class="sig-paren">(</span><em>style</em>, <em>layoutspec=None</em><span class="sig-paren">)</span><a class="headerlink" href="#tkinter.ttk.Style.layout" title="Permalink to this definition">¶</a></dt>
<dd><p>Define the widget layout for given <em>style</em>. If <em>layoutspec</em> is omitted,
return the layout specification for given style.</p>
<p><em>layoutspec</em>, if specified, is expected to be a list or some other
sequence type (excluding strings), where each item should be a tuple and
the first item is the layout name and the second item should have the
format described in <a class="reference internal" href="#layouts">Layouts</a>.</p>
<p>To understand the format, see the following example (it is not
intended to do anything useful):</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">tkinter</span> <span class="k">import</span> <span class="n">ttk</span>
<span class="kn">import</span> <span class="nn">tkinter</span>

<span class="n">root</span> <span class="o">=</span> <span class="n">tkinter</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>

<span class="n">style</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Style</span><span class="p">()</span>
<span class="n">style</span><span class="o">.</span><span class="n">layout</span><span class="p">(</span><span class="s2">"TMenubutton"</span><span class="p">,</span> <span class="p">[</span>
   <span class="p">(</span><span class="s2">"Menubutton.background"</span><span class="p">,</span> <span class="kc">None</span><span class="p">),</span>
   <span class="p">(</span><span class="s2">"Menubutton.button"</span><span class="p">,</span> <span class="p">{</span><span class="s2">"children"</span><span class="p">:</span>
       <span class="p">[(</span><span class="s2">"Menubutton.focus"</span><span class="p">,</span> <span class="p">{</span><span class="s2">"children"</span><span class="p">:</span>
           <span class="p">[(</span><span class="s2">"Menubutton.padding"</span><span class="p">,</span> <span class="p">{</span><span class="s2">"children"</span><span class="p">:</span>
               <span class="p">[(</span><span class="s2">"Menubutton.label"</span><span class="p">,</span> <span class="p">{</span><span class="s2">"side"</span><span class="p">:</span> <span class="s2">"left"</span><span class="p">,</span> <span class="s2">"expand"</span><span class="p">:</span> <span class="mi">1</span><span class="p">})]</span>
           <span class="p">})]</span>
       <span class="p">})]</span>
   <span class="p">}),</span>
<span class="p">])</span>

<span class="n">mbtn</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Menubutton</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">'Text'</span><span class="p">)</span>
<span class="n">mbtn</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>
<span class="n">root</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
</dd></dl>
<dl class="method">
<dt id="tkinter.ttk.Style.element_create">
<code class="descname">element_create</code><span class="sig-paren">(</span><em>elementname</em>, <em>etype</em>, <em>*args</em>, <em>**kw</em><span class="sig-paren">)</span><a class="headerlink" href="#tkinter.ttk.Style.element_create" title="Permalink to this definition">¶</a></dt>
<dd><p>Create a new element in the current theme, of the given <em>etype</em> which is
expected to be either “image”, “from” or “vsapi”. The latter is only
available in Tk 8.6a for Windows XP and Vista and is not described here.</p>
<p>If “image” is used, <em>args</em> should contain the default image name followed
by statespec/value pairs (this is the imagespec), and <em>kw</em> may have the
following options:</p>
<blockquote>
<div><ul class="simple">
<li><dl class="first docutils">
<dt>border=padding</dt>
<dd>padding is a list of up to four integers, specifying the left, top,
right, and bottom borders, respectively.</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt>height=height</dt>
<dd>Specifies a minimum height for the element. If less than zero, the
base image’s height is used as a default.</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt>padding=padding</dt>
<dd>Specifies the element’s interior padding. Defaults to border’s value
if not specified.</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt>sticky=spec</dt>
<dd>Specifies how the image is placed within the final parcel. spec
contains zero or more characters “n”, “s”, “w”, or “e”.</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt>width=width</dt>
<dd>Specifies a minimum width for the element. If less than zero, the
base image’s width is used as a default.</dd>
</dl>
</li>
</ul>
</div></blockquote>
<p>If “from” is used as the value of <em>etype</em>,
<a class="reference internal" href="#tkinter.ttk.Style.element_create" title="tkinter.ttk.Style.element_create"><code class="xref py py-meth docutils literal notranslate"><span class="pre">element_create()</span></code></a> will clone an existing
element. <em>args</em> is expected to contain a themename, from which
the element will be cloned, and optionally an element to clone from.
If this element to clone from is not specified, an empty element will
be used. <em>kw</em> is discarded.</p>
</dd></dl>
<dl class="method">
<dt id="tkinter.ttk.Style.element_names">
<code class="descname">element_names</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#tkinter.ttk.Style.element_names" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns the list of elements defined in the current theme.</p>
</dd></dl>
<dl class="method">
<dt id="tkinter.ttk.Style.element_options">
<code class="descname">element_options</code><span class="sig-paren">(</span><em>elementname</em><span class="sig-paren">)</span><a class="headerlink" href="#tkinter.ttk.Style.element_options" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns the list of <em>elementname</em>’s options.</p>
</dd></dl>
<dl class="method">
<dt id="tkinter.ttk.Style.theme_create">
<code class="descname">theme_create</code><span class="sig-paren">(</span><em>themename</em>, <em>parent=None</em>, <em>settings=None</em><span class="sig-paren">)</span><a class="headerlink" href="#tkinter.ttk.Style.theme_create" title="Permalink to this definition">¶</a></dt>
<dd><p>Create a new theme.</p>
<p>It is an error if <em>themename</em> already exists. If <em>parent</em> is specified,
the new theme will inherit styles, elements and layouts from the parent
theme. If <em>settings</em> are present they are expected to have the same
syntax used for <a class="reference internal" href="#tkinter.ttk.Style.theme_settings" title="tkinter.ttk.Style.theme_settings"><code class="xref py py-meth docutils literal notranslate"><span class="pre">theme_settings()</span></code></a>.</p>
</dd></dl>
<dl class="method">
<dt id="tkinter.ttk.Style.theme_settings">
<code class="descname">theme_settings</code><span class="sig-paren">(</span><em>themename</em>, <em>settings</em><span class="sig-paren">)</span><a class="headerlink" href="#tkinter.ttk.Style.theme_settings" title="Permalink to this definition">¶</a></dt>
<dd><p>Temporarily sets the current theme to <em>themename</em>, apply specified
<em>settings</em> and then restore the previous theme.</p>
<p>Each key in <em>settings</em> is a style and each value may contain the keys
‘configure’, ‘map’, ‘layout’ and ‘element create’ and they are expected
to have the same format as specified by the methods
<a class="reference internal" href="#tkinter.ttk.Style.configure" title="tkinter.ttk.Style.configure"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Style.configure()</span></code></a>, <a class="reference internal" href="#tkinter.ttk.Style.map" title="tkinter.ttk.Style.map"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Style.map()</span></code></a>, <a class="reference internal" href="#tkinter.ttk.Style.layout" title="tkinter.ttk.Style.layout"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Style.layout()</span></code></a> and
<a class="reference internal" href="#tkinter.ttk.Style.element_create" title="tkinter.ttk.Style.element_create"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Style.element_create()</span></code></a> respectively.</p>
<p>As an example, let’s change the Combobox for the default theme a bit:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">tkinter</span> <span class="k">import</span> <span class="n">ttk</span>
<span class="kn">import</span> <span class="nn">tkinter</span>

<span class="n">root</span> <span class="o">=</span> <span class="n">tkinter</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>

<span class="n">style</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Style</span><span class="p">()</span>
<span class="n">style</span><span class="o">.</span><span class="n">theme_settings</span><span class="p">(</span><span class="s2">"default"</span><span class="p">,</span> <span class="p">{</span>
   <span class="s2">"TCombobox"</span><span class="p">:</span> <span class="p">{</span>
       <span class="s2">"configure"</span><span class="p">:</span> <span class="p">{</span><span class="s2">"padding"</span><span class="p">:</span> <span class="mi">5</span><span class="p">},</span>
       <span class="s2">"map"</span><span class="p">:</span> <span class="p">{</span>
           <span class="s2">"background"</span><span class="p">:</span> <span class="p">[(</span><span class="s2">"active"</span><span class="p">,</span> <span class="s2">"green2"</span><span class="p">),</span>
                          <span class="p">(</span><span class="s2">"!disabled"</span><span class="p">,</span> <span class="s2">"green4"</span><span class="p">)],</span>
           <span class="s2">"fieldbackground"</span><span class="p">:</span> <span class="p">[(</span><span class="s2">"!disabled"</span><span class="p">,</span> <span class="s2">"green3"</span><span class="p">)],</span>
           <span class="s2">"foreground"</span><span class="p">:</span> <span class="p">[(</span><span class="s2">"focus"</span><span class="p">,</span> <span class="s2">"OliveDrab1"</span><span class="p">),</span>
                          <span class="p">(</span><span class="s2">"!disabled"</span><span class="p">,</span> <span class="s2">"OliveDrab2"</span><span class="p">)]</span>
       <span class="p">}</span>
   <span class="p">}</span>
<span class="p">})</span>

<span class="n">combo</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Combobox</span><span class="p">()</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">root</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
</dd></dl>
<dl class="method">
<dt id="tkinter.ttk.Style.theme_names">
<code class="descname">theme_names</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#tkinter.ttk.Style.theme_names" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns a list of all known themes.</p>
</dd></dl>
<dl class="method">
<dt id="tkinter.ttk.Style.theme_use">
<code class="descname">theme_use</code><span class="sig-paren">(</span><em>themename=None</em><span class="sig-paren">)</span><a class="headerlink" href="#tkinter.ttk.Style.theme_use" title="Permalink to this definition">¶</a></dt>
<dd><p>If <em>themename</em> is not given, returns the theme in use.  Otherwise, sets
the current theme to <em>themename</em>, refreshes all widgets and emits a
&lt;&lt;ThemeChanged&gt;&gt; event.</p>
</dd></dl>
</dd>