link:
library/asyncio-task.html#asyncio.run_coroutine_threadsafe

docs:


asyncio.run_coroutine_threadsafe(coro, loop)Â¶
Submit a coroutine to the given event loop.  Thread-safe.
Return a concurrent.futures.Future to wait for the result
from another OS thread.
This function is meant to be called from a different OS thread
than the one where the event loop is running.  Example:
# Create a coroutine
coro = asyncio.sleep(1, result=3)

# Submit the coroutine to a given loop
future = asyncio.run_coroutine_threadsafe(coro, loop)

# Wait for the result with an optional timeout argument
assert future.result(timeout) == 3


If an exception is raised in the coroutine, the returned Future
will be notified.  It can also be used to cancel the task in
the event loop:
try:
    result = future.result(timeout)
except asyncio.TimeoutError:
    print('The coroutine took too long, cancelling the task...')
    future.cancel()
except Exception as exc:
    print(f'The coroutine raised an exception: {exc!r}')
else:
    print(f'The coroutine returned: {result!r}')


See the concurrency and multithreading
section of the documentation.
Unlike other asyncio functions this function requires the loop
argument to be passed explicitly.

New in version 3.5.1.

