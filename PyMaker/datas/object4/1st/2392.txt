link:
library/sqlite3.html#sqlite3.connect

docs:


sqlite3.connect(database[, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri])Â¶
Opens a connection to the SQLite database file database. By default returns a
Connection object, unless a custom factory is given.
database is a path-like object giving the pathname (absolute or
relative to the current  working directory) of the database file to be opened.
You can use ":memory:" to open a database connection to a database that
resides in RAM instead of on disk.
When a database is accessed by multiple connections, and one of the processes
modifies the database, the SQLite database is locked until that transaction is
committed. The timeout parameter specifies how long the connection should wait
for the lock to go away until raising an exception. The default for the timeout
parameter is 5.0 (five seconds).
For the isolation_level parameter, please see the
isolation_level property of Connection objects.
SQLite natively supports only the types TEXT, INTEGER, REAL, BLOB and NULL. If
you want to use other types you must add support for them yourself. The
detect_types parameter and the using custom converters registered with the
module-level register_converter() function allow you to easily do that.
detect_types defaults to 0 (i. e. off, no type detection), you can set it to
any combination of PARSE_DECLTYPES and PARSE_COLNAMES to turn
type detection on.
By default, check_same_thread is True and only the creating thread may
use the connection. If set False, the returned connection may be shared
across multiple threads. When using multiple threads with the same connection
writing operations should be serialized by the user to avoid data corruption.
By default, the sqlite3 module uses its Connection class for the
connect call.  You can, however, subclass the Connection class and make
connect() use your class instead by providing your class for the factory
parameter.
Consult the section SQLite and Python types of this manual for details.
The sqlite3 module internally uses a statement cache to avoid SQL parsing
overhead. If you want to explicitly set the number of statements that are cached
for the connection, you can set the cached_statements parameter. The currently
implemented default is to cache 100 statements.
If uri is true, database is interpreted as a URI. This allows you
to specify options. For example, to open a database in read-only mode
you can use:
db = sqlite3.connect('file:path/to/database?mode=ro', uri=True)


More information about this feature, including a list of recognized options, can
be found in the SQLite URI documentation.

Changed in version 3.4: Added the uri parameter.


Changed in version 3.7: database can now also be a path-like object, not only a string.

