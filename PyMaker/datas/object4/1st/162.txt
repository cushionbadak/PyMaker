link:
reference/datamodel.html#asynchronous-iterators

docs:

3.4.3. Asynchronous Iterators¶
An asynchronous iterator can call asynchronous code in
its __anext__ method.
Asynchronous iterators can be used in an async for statement.


object.__aiter__(self)¶
Must return an asynchronous iterator object.



object.__anext__(self)¶
Must return an awaitable resulting in a next value of the iterator.  Should
raise a StopAsyncIteration error when the iteration is over.

An example of an asynchronous iterable object:
class Reader:
    async def readline(self):
        ...

    def __aiter__(self):
        return self

    async def __anext__(self):
        val = await self.readline()
        if val == b'':
            raise StopAsyncIteration
        return val



New in version 3.5.


Changed in version 3.7: Prior to Python 3.7, __aiter__ could return an awaitable
that would resolve to an
asynchronous iterator.
Starting with Python 3.7, __aiter__ must return an
asynchronous iterator object.  Returning anything else
will result in a TypeError error.

