link:
library/ipaddress.html#convenience-factory-functions

docs:

Convenience factory functions¶
The ipaddress module provides factory functions to conveniently create
IP addresses, networks and interfaces:


ipaddress.ip_address(address)¶
Return an IPv4Address or IPv6Address object depending on
the IP address passed as argument.  Either IPv4 or IPv6 addresses may be
supplied; integers less than 2**32 will be considered to be IPv4 by default.
A ValueError is raised if address does not represent a valid IPv4
or IPv6 address.
>>> ipaddress.ip_address('192.168.0.1')
IPv4Address('192.168.0.1')
>>> ipaddress.ip_address('2001:db8::')
IPv6Address('2001:db8::')





ipaddress.ip_network(address, strict=True)¶
Return an IPv4Network or IPv6Network object depending on
the IP address passed as argument.  address is a string or integer
representing the IP network.  Either IPv4 or IPv6 networks may be supplied;
integers less than 2**32 will be considered to be IPv4 by default.  strict
is passed to IPv4Network or IPv6Network constructor.  A
ValueError is raised if address does not represent a valid IPv4 or
IPv6 address, or if the network has host bits set.
>>> ipaddress.ip_network('192.168.0.0/28')
IPv4Network('192.168.0.0/28')





ipaddress.ip_interface(address)¶
Return an IPv4Interface or IPv6Interface object depending
on the IP address passed as argument.  address is a string or integer
representing the IP address.  Either IPv4 or IPv6 addresses may be supplied;
integers less than 2**32 will be considered to be IPv4 by default.  A
ValueError is raised if address does not represent a valid IPv4 or
IPv6 address.

One downside of these convenience functions is that the need to handle both
IPv4 and IPv6 formats means that error messages provide minimal
information on the precise error, as the functions don’t know whether the
IPv4 or IPv6 format was intended. More detailed error reporting can be
obtained by calling the appropriate version specific class constructors
directly.
