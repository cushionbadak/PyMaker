link:
library/asyncio-dev.html#debug-mode

docs:

Debug Mode¶
By default asyncio runs in production mode.  In order to ease
the development asyncio has a debug mode.
There are several ways to enable asyncio debug mode:

Setting the PYTHONASYNCIODEBUG environment variable to 1.
Using the -X dev Python command line option.
Passing debug=True to asyncio.run().
Calling loop.set_debug().

In addition to enabling the debug mode, consider also:

setting the log level of the asyncio logger to
logging.DEBUG, for example the following snippet of code
can be run at startup of the application:
logging.basicConfig(level=logging.DEBUG)



configuring the warnings module to display
ResourceWarning warnings.  One way of doing that is by
using the -W default command line option.


When the debug mode is enabled:

asyncio checks for coroutines that were not awaited and logs them; this mitigates
the “forgotten await” pitfall.
Many non-threadsafe asyncio APIs (such as loop.call_soon() and
loop.call_at() methods) raise an exception if they are called
from a wrong thread.
The execution time of the I/O selector is logged if it takes too long to
perform an I/O operation.
Callbacks taking longer than 100ms are logged.  The
loop.slow_callback_duration attribute can be used to set the
minimum execution duration in seconds that is considered “slow”.

