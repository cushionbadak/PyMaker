link:
library/sqlite3.html#registering-an-adapter-callable

docs:

Registering an adapter callable¶
The other possibility is to create a function that converts the type to the
string representation and register the function with register_adapter().
import sqlite3

class Point:
    def __init__(self, x, y):
        self.x, self.y = x, y

def adapt_point(point):
    return "%f;%f" % (point.x, point.y)

sqlite3.register_adapter(Point, adapt_point)

con = sqlite3.connect(":memory:")
cur = con.cursor()

p = Point(4.0, -3.2)
cur.execute("select ?", (p,))
print(cur.fetchone()[0])

con.close()


The sqlite3 module has two default adapters for Python’s built-in
datetime.date and datetime.datetime types.  Now let’s suppose
we want to store datetime.datetime objects not in ISO representation,
but as a Unix timestamp.
import sqlite3
import datetime
import time

def adapt_datetime(ts):
    return time.mktime(ts.timetuple())

sqlite3.register_adapter(datetime.datetime, adapt_datetime)

con = sqlite3.connect(":memory:")
cur = con.cursor()

now = datetime.datetime.now()
cur.execute("select ?", (now,))
print(cur.fetchone()[0])

con.close()


