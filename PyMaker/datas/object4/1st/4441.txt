link:
library/subprocess.html#subprocess.run

docs:

<dt id="subprocess.run">
<code class="descclassname">subprocess.</code><code class="descname">run</code><span class="sig-paren">(</span><em>args</em>, <em>*</em>, <em>stdin=None</em>, <em>input=None</em>, <em>stdout=None</em>, <em>stderr=None</em>, <em>capture_output=False</em>, <em>shell=False</em>, <em>cwd=None</em>, <em>timeout=None</em>, <em>check=False</em>, <em>encoding=None</em>, <em>errors=None</em>, <em>text=None</em>, <em>env=None</em>, <em>universal_newlines=None</em><span class="sig-paren">)</span><a class="headerlink" href="#subprocess.run" title="Permalink to this definition">¶</a></dt>
<dd><p>Run the command described by <em>args</em>.  Wait for command to complete, then
return a <a class="reference internal" href="#subprocess.CompletedProcess" title="subprocess.CompletedProcess"><code class="xref py py-class docutils literal notranslate"><span class="pre">CompletedProcess</span></code></a> instance.</p>
<p>The arguments shown above are merely the most common ones, described below
in <a class="reference internal" href="#frequently-used-arguments"><span class="std std-ref">Frequently Used Arguments</span></a> (hence the use of keyword-only notation
in the abbreviated signature). The full function signature is largely the
same as that of the <a class="reference internal" href="#subprocess.Popen" title="subprocess.Popen"><code class="xref py py-class docutils literal notranslate"><span class="pre">Popen</span></code></a> constructor - most of the arguments to
this function are passed through to that interface. (<em>timeout</em>,  <em>input</em>,
<em>check</em>, and <em>capture_output</em> are not.)</p>
<p>If <em>capture_output</em> is true, stdout and stderr will be captured.
When used, the internal <a class="reference internal" href="#subprocess.Popen" title="subprocess.Popen"><code class="xref py py-class docutils literal notranslate"><span class="pre">Popen</span></code></a> object is automatically created with
<code class="docutils literal notranslate"><span class="pre">stdout=PIPE</span></code> and <code class="docutils literal notranslate"><span class="pre">stderr=PIPE</span></code>. The <em>stdout</em> and <em>stderr</em> arguments may
not be supplied at the same time as <em>capture_output</em>.</p>
<p>The <em>timeout</em> argument is passed to <a class="reference internal" href="#subprocess.Popen.communicate" title="subprocess.Popen.communicate"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Popen.communicate()</span></code></a>. If the timeout
expires, the child process will be killed and waited for.  The
<a class="reference internal" href="#subprocess.TimeoutExpired" title="subprocess.TimeoutExpired"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TimeoutExpired</span></code></a> exception will be re-raised after the child process
has terminated.</p>
<p>The <em>input</em> argument is passed to <a class="reference internal" href="#subprocess.Popen.communicate" title="subprocess.Popen.communicate"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Popen.communicate()</span></code></a> and thus to the
subprocess’s stdin.  If used it must be a byte sequence, or a string if
<em>encoding</em> or <em>errors</em> is specified or <em>text</em> is true.  When
used, the internal <a class="reference internal" href="#subprocess.Popen" title="subprocess.Popen"><code class="xref py py-class docutils literal notranslate"><span class="pre">Popen</span></code></a> object is automatically created with
<code class="docutils literal notranslate"><span class="pre">stdin=PIPE</span></code>, and the <em>stdin</em> argument may not be used as well.</p>
<p>If <em>check</em> is true, and the process exits with a non-zero exit code, a
<a class="reference internal" href="#subprocess.CalledProcessError" title="subprocess.CalledProcessError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">CalledProcessError</span></code></a> exception will be raised. Attributes of that
exception hold the arguments, the exit code, and stdout and stderr if they
were captured.</p>
<p>If <em>encoding</em> or <em>errors</em> are specified, or <em>text</em> is true,
file objects for stdin, stdout and stderr are opened in text mode using the
specified <em>encoding</em> and <em>errors</em> or the <a class="reference internal" href="io.html#io.TextIOWrapper" title="io.TextIOWrapper"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.TextIOWrapper</span></code></a> default.
The <em>universal_newlines</em> argument is equivalent  to <em>text</em> and is provided
for backwards compatibility. By default, file objects are opened in binary mode.</p>
<p>If <em>env</em> is not <code class="docutils literal notranslate"><span class="pre">None</span></code>, it must be a mapping that defines the environment
variables for the new process; these are used instead of the default
behavior of inheriting the current process’ environment. It is passed directly
to <a class="reference internal" href="#subprocess.Popen" title="subprocess.Popen"><code class="xref py py-class docutils literal notranslate"><span class="pre">Popen</span></code></a>.</p>
<p>Examples:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s2">"ls"</span><span class="p">,</span> <span class="s2">"-l"</span><span class="p">])</span>  <span class="c1"># doesn't capture output</span>
<span class="go">CompletedProcess(args=['ls', '-l'], returncode=0)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="s2">"exit 1"</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">check</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
  <span class="c">...</span>
<span class="gr">subprocess.CalledProcessError</span>: <span class="n">Command 'exit 1' returned non-zero exit status 1</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s2">"ls"</span><span class="p">,</span> <span class="s2">"-l"</span><span class="p">,</span> <span class="s2">"/dev/null"</span><span class="p">],</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="go">CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,</span>
<span class="go">stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\n', stderr=b'')</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.5.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6: </span>Added <em>encoding</em> and <em>errors</em> parameters</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span>Added the <em>text</em> parameter, as a more understandable alias of <em>universal_newlines</em>.
Added the <em>capture_output</em> parameter.</p>
</div>
</dd>