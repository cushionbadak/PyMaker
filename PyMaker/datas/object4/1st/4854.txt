link:
library/asyncio-eventloop.html#hello-world-with-call-soon

docs:

Hello World with call_soon()Â¶
An example using the loop.call_soon() method to schedule a
callback. The callback displays "Hello World" and then stops the
event loop:
import asyncio

def hello_world(loop):
    """A callback to print 'Hello World' and stop the event loop"""
    print('Hello World')
    loop.stop()

loop = asyncio.get_event_loop()

# Schedule a call to hello_world()
loop.call_soon(hello_world, loop)

# Blocking call interrupted by loop.stop()
try:
    loop.run_forever()
finally:
    loop.close()



See also
A similar Hello World
example created with a coroutine and the run() function.

