link:
library/stdtypes.html#str

docs:

<dt id="str">
<em class="property">class </em><code class="descname">str</code><span class="sig-paren">(</span><em>object=''</em><span class="sig-paren">)</span><a class="headerlink" href="#str" title="Permalink to this definition">¶</a></dt>
<dt>
<em class="property">class </em><code class="descname">str</code><span class="sig-paren">(</span><em>object=b''</em>, <em>encoding='utf-8'</em>, <em>errors='strict'</em><span class="sig-paren">)</span></dt>
<dd><p>Return a <a class="reference internal" href="#textseq"><span class="std std-ref">string</span></a> version of <em>object</em>.  If <em>object</em> is not
provided, returns the empty string.  Otherwise, the behavior of <code class="docutils literal notranslate"><span class="pre">str()</span></code>
depends on whether <em>encoding</em> or <em>errors</em> is given, as follows.</p>
<p>If neither <em>encoding</em> nor <em>errors</em> is given, <code class="docutils literal notranslate"><span class="pre">str(object)</span></code> returns
<a class="reference internal" href="../reference/datamodel.html#object.__str__" title="object.__str__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">object.__str__()</span></code></a>, which is the “informal” or nicely
printable string representation of <em>object</em>.  For string objects, this is
the string itself.  If <em>object</em> does not have a <a class="reference internal" href="../reference/datamodel.html#object.__str__" title="object.__str__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__str__()</span></code></a>
method, then <a class="reference internal" href="#str" title="str"><code class="xref py py-func docutils literal notranslate"><span class="pre">str()</span></code></a> falls back to returning
<a class="reference internal" href="functions.html#repr" title="repr"><code class="xref py py-meth docutils literal notranslate"><span class="pre">repr(object)</span></code></a>.</p>
<p id="index-29">If at least one of <em>encoding</em> or <em>errors</em> is given, <em>object</em> should be a
<a class="reference internal" href="../glossary.html#term-bytes-like-object"><span class="xref std std-term">bytes-like object</span></a> (e.g. <a class="reference internal" href="#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> or <a class="reference internal" href="#bytearray" title="bytearray"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytearray</span></code></a>).  In
this case, if <em>object</em> is a <a class="reference internal" href="#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> (or <a class="reference internal" href="#bytearray" title="bytearray"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytearray</span></code></a>) object,
then <code class="docutils literal notranslate"><span class="pre">str(bytes,</span> <span class="pre">encoding,</span> <span class="pre">errors)</span></code> is equivalent to
<a class="reference internal" href="#bytes.decode" title="bytes.decode"><code class="xref py py-meth docutils literal notranslate"><span class="pre">bytes.decode(encoding,</span> <span class="pre">errors)</span></code></a>.  Otherwise, the bytes
object underlying the buffer object is obtained before calling
<a class="reference internal" href="#bytes.decode" title="bytes.decode"><code class="xref py py-meth docutils literal notranslate"><span class="pre">bytes.decode()</span></code></a>.  See <a class="reference internal" href="#binaryseq"><span class="std std-ref">Binary Sequence Types — bytes, bytearray, memoryview</span></a> and
<a class="reference internal" href="../c-api/buffer.html#bufferobjects"><span class="std std-ref">Buffer Protocol</span></a> for information on buffer objects.</p>
<p>Passing a <a class="reference internal" href="#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> object to <a class="reference internal" href="#str" title="str"><code class="xref py py-func docutils literal notranslate"><span class="pre">str()</span></code></a> without the <em>encoding</em>
or <em>errors</em> arguments falls under the first case of returning the informal
string representation (see also the <a class="reference internal" href="../using/cmdline.html#cmdoption-b"><code class="xref std std-option docutils literal notranslate"><span class="pre">-b</span></code></a> command-line option to
Python).  For example:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="sa">b</span><span class="s1">'Zoot!'</span><span class="p">)</span>
<span class="go">"b'Zoot!'"</span>
</pre></div>
</div>
<p>For more information on the <code class="docutils literal notranslate"><span class="pre">str</span></code> class and its methods, see
<a class="reference internal" href="#textseq"><span class="std std-ref">Text Sequence Type — str</span></a> and the <a class="reference internal" href="#string-methods"><span class="std std-ref">String Methods</span></a> section below.  To output
formatted strings, see the <a class="reference internal" href="../reference/lexical_analysis.html#f-strings"><span class="std std-ref">Formatted string literals</span></a> and <a class="reference internal" href="string.html#formatstrings"><span class="std std-ref">Format String Syntax</span></a>
sections.  In addition, see the <a class="reference internal" href="text.html#stringservices"><span class="std std-ref">Text Processing Services</span></a> section.</p>
</dd>