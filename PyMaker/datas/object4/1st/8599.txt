link:
library/unittest.mock.html#patch-multiple

docs:

patch.multiple¶


patch.multiple(target, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)¶
Perform multiple patches in a single call. It takes the object to be
patched (either as an object or a string to fetch the object by importing)
and keyword arguments for the patches:
with patch.multiple(settings, FIRST_PATCH='one', SECOND_PATCH='two'):
    ...


Use DEFAULT as the value if you want patch.multiple() to create
mocks for you. In this case the created mocks are passed into a decorated
function by keyword, and a dictionary is returned when patch.multiple() is
used as a context manager.
patch.multiple() can be used as a decorator, class decorator or a context
manager. The arguments spec, spec_set, create, autospec and
new_callable have the same meaning as for patch(). These arguments will
be applied to all patches done by patch.multiple().
When used as a class decorator patch.multiple() honours patch.TEST_PREFIX
for choosing which methods to wrap.

If you want patch.multiple() to create mocks for you, then you can use
DEFAULT as the value. If you use patch.multiple() as a decorator
then the created mocks are passed into the decorated function by keyword.
>>> thing = object()
>>> other = object()


>>> @patch.multiple('__main__', thing=DEFAULT, other=DEFAULT)
... def test_function(thing, other):
...     assert isinstance(thing, MagicMock)
...     assert isinstance(other, MagicMock)
...
>>> test_function()


patch.multiple() can be nested with other patch decorators, but put arguments
passed by keyword after any of the standard arguments created by patch():
>>> @patch('sys.exit')
... @patch.multiple('__main__', thing=DEFAULT, other=DEFAULT)
... def test_function(mock_exit, other, thing):
...     assert 'other' in repr(other)
...     assert 'thing' in repr(thing)
...     assert 'exit' in repr(mock_exit)
...
>>> test_function()


If patch.multiple() is used as a context manager, the value returned by the
context manager is a dictionary where created mocks are keyed by name:
>>> with patch.multiple('__main__', thing=DEFAULT, other=DEFAULT) as values:
...     assert 'other' in repr(values['other'])
...     assert 'thing' in repr(values['thing'])
...     assert values['thing'] is thing
...     assert values['other'] is other
...


