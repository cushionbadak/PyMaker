link:
library/threading.html#timer-objects

docs:

Timer Objects¶
This class represents an action that should be run only after a certain amount
of time has passed — a timer.  Timer is a subclass of Thread
and as such also functions as an example of creating custom threads.
Timers are started, as with threads, by calling their start()
method.  The timer can be stopped (before its action has begun) by calling the
cancel() method.  The interval the timer will wait before
executing its action may not be exactly the same as the interval specified by
the user.
For example:
def hello():
    print("hello, world")

t = Timer(30.0, hello)
t.start()  # after 30 seconds, "hello, world" will be printed




class threading.Timer(interval, function, args=None, kwargs=None)¶
Create a timer that will run function with arguments args and  keyword
arguments kwargs, after interval seconds have passed.
If args is None (the default) then an empty list will be used.
If kwargs is None (the default) then an empty dict will be used.

Changed in version 3.3: changed from a factory function to a class.



cancel()¶
Stop the timer, and cancel the execution of the timer’s action.  This will
only work if the timer is still in its waiting stage.


