link:
library/pkgutil.html#pkgutil.find_loader

docs:

<dt id="pkgutil.find_loader">
<code class="descclassname">pkgutil.</code><code class="descname">find_loader</code><span class="sig-paren">(</span><em>fullname</em><span class="sig-paren">)</span><a class="headerlink" href="#pkgutil.find_loader" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Retrieve a module <a class="reference internal" href="../glossary.html#term-loader"><span class="xref std std-term">loader</span></a> for the given <em>fullname</em>.</p>
<p>This is a backwards compatibility wrapper around
<a class="reference internal" href="importlib.html#importlib.util.find_spec" title="importlib.util.find_spec"><code class="xref py py-func docutils literal notranslate"><span class="pre">importlib.util.find_spec()</span></code></a> that converts most failures to
<a class="reference internal" href="exceptions.html#ImportError" title="ImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImportError</span></code></a> and only returns the loader rather than the full
<code class="xref py py-class docutils literal notranslate"><span class="pre">ModuleSpec</span></code>.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.3: </span>Updated to be based directly on <a class="reference internal" href="importlib.html#module-importlib" title="importlib: The implementation of the import machinery."><code class="xref py py-mod docutils literal notranslate"><span class="pre">importlib</span></code></a> rather than relying
on the package internal PEP 302 import emulation.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.4: </span>Updated to be based on <span class="target" id="index-3"></span><a class="pep reference external" href="https://www.python.org/dev/peps/pep-0451"><strong>PEP 451</strong></a></p>
</div>
</dd>