link:
library/subprocess.html#subprocess.Popen

docs:

<dt id="subprocess.Popen">
<em class="property">class </em><code class="descclassname">subprocess.</code><code class="descname">Popen</code><span class="sig-paren">(</span><em>args</em>, <em>bufsize=-1</em>, <em>executable=None</em>, <em>stdin=None</em>, <em>stdout=None</em>, <em>stderr=None</em>, <em>preexec_fn=None</em>, <em>close_fds=True</em>, <em>shell=False</em>, <em>cwd=None</em>, <em>env=None</em>, <em>universal_newlines=None</em>, <em>startupinfo=None</em>, <em>creationflags=0</em>, <em>restore_signals=True</em>, <em>start_new_session=False</em>, <em>pass_fds=()</em>, <em>*</em>, <em>encoding=None</em>, <em>errors=None</em>, <em>text=None</em><span class="sig-paren">)</span><a class="headerlink" href="#subprocess.Popen" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Execute a child program in a new process.  On POSIX, the class uses
<a class="reference internal" href="os.html#os.execvp" title="os.execvp"><code class="xref py py-meth docutils literal notranslate"><span class="pre">os.execvp()</span></code></a>-like behavior to execute the child program.  On Windows,
the class uses the Windows <code class="docutils literal notranslate"><span class="pre">CreateProcess()</span></code> function.  The arguments to
<a class="reference internal" href="#subprocess.Popen" title="subprocess.Popen"><code class="xref py py-class docutils literal notranslate"><span class="pre">Popen</span></code></a> are as follows.</p>
<p><em>args</em> should be a sequence of program arguments or else a single string.
By default, the program to execute is the first item in <em>args</em> if <em>args</em> is
a sequence.  If <em>args</em> is a string, the interpretation is
platform-dependent and described below.  See the <em>shell</em> and <em>executable</em>
arguments for additional differences from the default behavior.  Unless
otherwise stated, it is recommended to pass <em>args</em> as a sequence.</p>
<p>On POSIX, if <em>args</em> is a string, the string is interpreted as the name or
path of the program to execute.  However, this can only be done if not
passing arguments to the program.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p><a class="reference internal" href="shlex.html#shlex.split" title="shlex.split"><code class="xref py py-meth docutils literal notranslate"><span class="pre">shlex.split()</span></code></a> can be useful when determining the correct
tokenization for <em>args</em>, especially in complex cases:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">shlex</span><span class="o">,</span> <span class="nn">subprocess</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">command_line</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
<span class="go">/bin/vikings -input eggs.txt -output "spam spam.txt" -cmd "echo '$MONEY'"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">args</span> <span class="o">=</span> <span class="n">shlex</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">command_line</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
<span class="go">['/bin/vikings', '-input', 'eggs.txt', '-output', 'spam spam.txt', '-cmd', "echo '$MONEY'"]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="c1"># Success!</span>
</pre></div>
</div>
<p class="last">Note in particular that options (such as <em>-input</em>) and arguments (such
as <em>eggs.txt</em>) that are separated by whitespace in the shell go in separate
list elements, while arguments that need quoting or backslash escaping when
used in the shell (such as filenames containing spaces or the <em>echo</em> command
shown above) are single list elements.</p>
</div>
<p>On Windows, if <em>args</em> is a sequence, it will be converted to a string in a
manner described in <a class="reference internal" href="#converting-argument-sequence"><span class="std std-ref">Converting an argument sequence to a string on Windows</span></a>.  This is because
the underlying <code class="docutils literal notranslate"><span class="pre">CreateProcess()</span></code> operates on strings.</p>
<p>The <em>shell</em> argument (which defaults to <code class="docutils literal notranslate"><span class="pre">False</span></code>) specifies whether to use
the shell as the program to execute.  If <em>shell</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code>, it is
recommended to pass <em>args</em> as a string rather than as a sequence.</p>
<p>On POSIX with <code class="docutils literal notranslate"><span class="pre">shell=True</span></code>, the shell defaults to <code class="file docutils literal notranslate"><span class="pre">/bin/sh</span></code>.  If
<em>args</em> is a string, the string specifies the command
to execute through the shell.  This means that the string must be
formatted exactly as it would be when typed at the shell prompt.  This
includes, for example, quoting or backslash escaping filenames with spaces in
them.  If <em>args</em> is a sequence, the first item specifies the command string, and
any additional items will be treated as additional arguments to the shell
itself.  That is to say, <a class="reference internal" href="#subprocess.Popen" title="subprocess.Popen"><code class="xref py py-class docutils literal notranslate"><span class="pre">Popen</span></code></a> does the equivalent of:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">Popen</span><span class="p">([</span><span class="s1">'/bin/sh'</span><span class="p">,</span> <span class="s1">'-c'</span><span class="p">,</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">...</span><span class="p">])</span>
</pre></div>
</div>
<p>On Windows with <code class="docutils literal notranslate"><span class="pre">shell=True</span></code>, the <span class="target" id="index-2"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">COMSPEC</span></code> environment variable
specifies the default shell.  The only time you need to specify
<code class="docutils literal notranslate"><span class="pre">shell=True</span></code> on Windows is when the command you wish to execute is built
into the shell (e.g. <strong class="command">dir</strong> or <strong class="command">copy</strong>).  You do not need
<code class="docutils literal notranslate"><span class="pre">shell=True</span></code> to run a batch file or console-based executable.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Read the <a class="reference internal" href="#security-considerations">Security Considerations</a> section before using <code class="docutils literal notranslate"><span class="pre">shell=True</span></code>.</p>
</div>
<p><em>bufsize</em> will be supplied as the corresponding argument to the
<a class="reference internal" href="functions.html#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> function when creating the stdin/stdout/stderr pipe
file objects:</p>
<ul class="simple">
<li><code class="xref py py-const docutils literal notranslate"><span class="pre">0</span></code> means unbuffered (read and write are one
system call and can return short)</li>
<li><code class="xref py py-const docutils literal notranslate"><span class="pre">1</span></code> means line buffered
(only usable if <code class="docutils literal notranslate"><span class="pre">universal_newlines=True</span></code> i.e., in a text mode)</li>
<li>any other positive value means use a buffer of approximately that
size</li>
<li>negative bufsize (the default) means the system default of
io.DEFAULT_BUFFER_SIZE will be used.</li>
</ul>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.3.1: </span><em>bufsize</em> now defaults to -1 to enable buffering by default to match the
behavior that most code expects.  In versions prior to Python 3.2.4 and
3.3.1 it incorrectly defaulted to <code class="xref py py-const docutils literal notranslate"><span class="pre">0</span></code> which was unbuffered
and allowed short reads.  This was unintentional and did not match the
behavior of Python 2 as most code expected.</p>
</div>
<p>The <em>executable</em> argument specifies a replacement program to execute.   It
is very seldom needed.  When <code class="docutils literal notranslate"><span class="pre">shell=False</span></code>, <em>executable</em> replaces the
program to execute specified by <em>args</em>.  However, the original <em>args</em> is
still passed to the program.  Most programs treat the program specified
by <em>args</em> as the command name, which can then be different from the program
actually executed.  On POSIX, the <em>args</em> name
becomes the display name for the executable in utilities such as
<strong class="program">ps</strong>.  If <code class="docutils literal notranslate"><span class="pre">shell=True</span></code>, on POSIX the <em>executable</em> argument
specifies a replacement shell for the default <code class="file docutils literal notranslate"><span class="pre">/bin/sh</span></code>.</p>
<p><em>stdin</em>, <em>stdout</em> and <em>stderr</em> specify the executed programâs standard input,
standard output and standard error file handles, respectively.  Valid values
are <a class="reference internal" href="#subprocess.PIPE" title="subprocess.PIPE"><code class="xref py py-data docutils literal notranslate"><span class="pre">PIPE</span></code></a>, <a class="reference internal" href="#subprocess.DEVNULL" title="subprocess.DEVNULL"><code class="xref py py-data docutils literal notranslate"><span class="pre">DEVNULL</span></code></a>, an existing file descriptor (a positive
integer), an existing <a class="reference internal" href="../glossary.html#term-file-object"><span class="xref std std-term">file object</span></a>, and <code class="docutils literal notranslate"><span class="pre">None</span></code>.  <a class="reference internal" href="#subprocess.PIPE" title="subprocess.PIPE"><code class="xref py py-data docutils literal notranslate"><span class="pre">PIPE</span></code></a>
indicates that a new pipe to the child should be created.  <a class="reference internal" href="#subprocess.DEVNULL" title="subprocess.DEVNULL"><code class="xref py py-data docutils literal notranslate"><span class="pre">DEVNULL</span></code></a>
indicates that the special file <a class="reference internal" href="os.html#os.devnull" title="os.devnull"><code class="xref py py-data docutils literal notranslate"><span class="pre">os.devnull</span></code></a> will be used. With the
default settings of <code class="docutils literal notranslate"><span class="pre">None</span></code>, no redirection will occur; the childâs file
handles will be inherited from the parent.  Additionally, <em>stderr</em> can be
<a class="reference internal" href="#subprocess.STDOUT" title="subprocess.STDOUT"><code class="xref py py-data docutils literal notranslate"><span class="pre">STDOUT</span></code></a>, which indicates that the stderr data from the applications
should be captured into the same file handle as for stdout.</p>
<p>If <em>preexec_fn</em> is set to a callable object, this object will be called in the
child process just before the child is executed.
(POSIX only)</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">The <em>preexec_fn</em> parameter is not safe to use in the presence of threads
in your application.  The child process could deadlock before exec is
called.
If you must use it, keep it trivial!  Minimize the number of libraries
you call into.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If you need to modify the environment for the child use the <em>env</em>
parameter rather than doing it in a <em>preexec_fn</em>.
The <em>start_new_session</em> parameter can take the place of a previously
common use of <em>preexec_fn</em> to call os.setsid() in the child.</p>
</div>
<p>If <em>close_fds</em> is true, all file descriptors except <code class="xref py py-const docutils literal notranslate"><span class="pre">0</span></code>, <code class="xref py py-const docutils literal notranslate"><span class="pre">1</span></code> and
<code class="xref py py-const docutils literal notranslate"><span class="pre">2</span></code> will be closed before the child process is executed.  Otherwise
when <em>close_fds</em> is false, file descriptors obey their inheritable flag
as described in <a class="reference internal" href="os.html#fd-inheritance"><span class="std std-ref">Inheritance of File Descriptors</span></a>.</p>
<p>On Windows, if <em>close_fds</em> is true then no handles will be inherited by the
child process unless explicitly passed in the <code class="docutils literal notranslate"><span class="pre">handle_list</span></code> element of
<a class="reference internal" href="#subprocess.STARTUPINFO.lpAttributeList" title="subprocess.STARTUPINFO.lpAttributeList"><code class="xref py py-attr docutils literal notranslate"><span class="pre">STARTUPINFO.lpAttributeList</span></code></a>, or by standard handle redirection.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>The default for <em>close_fds</em> was changed from <a class="reference internal" href="constants.html#False" title="False"><code class="xref py py-const docutils literal notranslate"><span class="pre">False</span></code></a> to
what is described above.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span>On Windows the default for <em>close_fds</em> was changed from <a class="reference internal" href="constants.html#False" title="False"><code class="xref py py-const docutils literal notranslate"><span class="pre">False</span></code></a> to
<a class="reference internal" href="constants.html#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a> when redirecting the standard handles. Itâs now possible to
set <em>close_fds</em> to <a class="reference internal" href="constants.html#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a> when redirecting the standard handles.</p>
</div>
<p><em>pass_fds</em> is an optional sequence of file descriptors to keep open
between the parent and child.  Providing any <em>pass_fds</em> forces
<em>close_fds</em> to be <a class="reference internal" href="constants.html#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a>.  (POSIX only)</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.2: </span>The <em>pass_fds</em> parameter was added.</p>
</div>
<p>If <em>cwd</em> is not <code class="docutils literal notranslate"><span class="pre">None</span></code>, the function changes the working directory to
<em>cwd</em> before executing the child.  <em>cwd</em> can be a <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> and
<a class="reference internal" href="../glossary.html#term-path-like-object"><span class="xref std std-term">path-like</span></a> object.  In particular, the function
looks for <em>executable</em> (or for the first item in <em>args</em>) relative to <em>cwd</em>
if the executable path is a relative path.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6: </span><em>cwd</em> parameter accepts a <a class="reference internal" href="../glossary.html#term-path-like-object"><span class="xref std std-term">path-like object</span></a>.</p>
</div>
<p>If <em>restore_signals</em> is true (the default) all signals that Python has set to
SIG_IGN are restored to SIG_DFL in the child process before the exec.
Currently this includes the SIGPIPE, SIGXFZ and SIGXFSZ signals.
(POSIX only)</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span><em>restore_signals</em> was added.</p>
</div>
<p>If <em>start_new_session</em> is true the setsid() system call will be made in the
child process prior to the execution of the subprocess.  (POSIX only)</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span><em>start_new_session</em> was added.</p>
</div>
<p>If <em>env</em> is not <code class="docutils literal notranslate"><span class="pre">None</span></code>, it must be a mapping that defines the environment
variables for the new process; these are used instead of the default
behavior of inheriting the current processâ environment.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If specified, <em>env</em> must provide any variables required for the program to
execute.  On Windows, in order to run a <a class="reference external" href="https://en.wikipedia.org/wiki/Side-by-Side_Assembly">side-by-side assembly</a> the
specified <em>env</em> <strong>must</strong> include a valid <span class="target" id="index-3"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">SystemRoot</span></code>.</p>
</div>
<p>If <em>encoding</em> or <em>errors</em> are specified, or <em>text</em> is true, the file objects
<em>stdin</em>, <em>stdout</em> and <em>stderr</em> are opened in text mode with the specified
encoding and <em>errors</em>, as described above in <a class="reference internal" href="#frequently-used-arguments"><span class="std std-ref">Frequently Used Arguments</span></a>.
The <em>universal_newlines</em> argument is equivalent  to <em>text</em> and is provided
for backwards compatibility. By default, file objects are opened in binary mode.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.6: </span><em>encoding</em> and <em>errors</em> were added.</p>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7: </span><em>text</em> was added as a more readable alias for <em>universal_newlines</em>.</p>
</div>
<p>If given, <em>startupinfo</em> will be a <a class="reference internal" href="#subprocess.STARTUPINFO" title="subprocess.STARTUPINFO"><code class="xref py py-class docutils literal notranslate"><span class="pre">STARTUPINFO</span></code></a> object, which is
passed to the underlying <code class="docutils literal notranslate"><span class="pre">CreateProcess</span></code> function.
<em>creationflags</em>, if given, can be one or more of the following flags:</p>
<blockquote>
<div><ul class="simple">
<li><a class="reference internal" href="#subprocess.CREATE_NEW_CONSOLE" title="subprocess.CREATE_NEW_CONSOLE"><code class="xref py py-data docutils literal notranslate"><span class="pre">CREATE_NEW_CONSOLE</span></code></a></li>
<li><a class="reference internal" href="#subprocess.CREATE_NEW_PROCESS_GROUP" title="subprocess.CREATE_NEW_PROCESS_GROUP"><code class="xref py py-data docutils literal notranslate"><span class="pre">CREATE_NEW_PROCESS_GROUP</span></code></a></li>
<li><a class="reference internal" href="#subprocess.ABOVE_NORMAL_PRIORITY_CLASS" title="subprocess.ABOVE_NORMAL_PRIORITY_CLASS"><code class="xref py py-data docutils literal notranslate"><span class="pre">ABOVE_NORMAL_PRIORITY_CLASS</span></code></a></li>
<li><a class="reference internal" href="#subprocess.BELOW_NORMAL_PRIORITY_CLASS" title="subprocess.BELOW_NORMAL_PRIORITY_CLASS"><code class="xref py py-data docutils literal notranslate"><span class="pre">BELOW_NORMAL_PRIORITY_CLASS</span></code></a></li>
<li><a class="reference internal" href="#subprocess.HIGH_PRIORITY_CLASS" title="subprocess.HIGH_PRIORITY_CLASS"><code class="xref py py-data docutils literal notranslate"><span class="pre">HIGH_PRIORITY_CLASS</span></code></a></li>
<li><a class="reference internal" href="#subprocess.IDLE_PRIORITY_CLASS" title="subprocess.IDLE_PRIORITY_CLASS"><code class="xref py py-data docutils literal notranslate"><span class="pre">IDLE_PRIORITY_CLASS</span></code></a></li>
<li><a class="reference internal" href="#subprocess.NORMAL_PRIORITY_CLASS" title="subprocess.NORMAL_PRIORITY_CLASS"><code class="xref py py-data docutils literal notranslate"><span class="pre">NORMAL_PRIORITY_CLASS</span></code></a></li>
<li><a class="reference internal" href="#subprocess.REALTIME_PRIORITY_CLASS" title="subprocess.REALTIME_PRIORITY_CLASS"><code class="xref py py-data docutils literal notranslate"><span class="pre">REALTIME_PRIORITY_CLASS</span></code></a></li>
<li><a class="reference internal" href="#subprocess.CREATE_NO_WINDOW" title="subprocess.CREATE_NO_WINDOW"><code class="xref py py-data docutils literal notranslate"><span class="pre">CREATE_NO_WINDOW</span></code></a></li>
<li><a class="reference internal" href="#subprocess.DETACHED_PROCESS" title="subprocess.DETACHED_PROCESS"><code class="xref py py-data docutils literal notranslate"><span class="pre">DETACHED_PROCESS</span></code></a></li>
<li><a class="reference internal" href="#subprocess.CREATE_DEFAULT_ERROR_MODE" title="subprocess.CREATE_DEFAULT_ERROR_MODE"><code class="xref py py-data docutils literal notranslate"><span class="pre">CREATE_DEFAULT_ERROR_MODE</span></code></a></li>
<li><a class="reference internal" href="#subprocess.CREATE_BREAKAWAY_FROM_JOB" title="subprocess.CREATE_BREAKAWAY_FROM_JOB"><code class="xref py py-data docutils literal notranslate"><span class="pre">CREATE_BREAKAWAY_FROM_JOB</span></code></a></li>
</ul>
</div></blockquote>
<p>Popen objects are supported as context managers via the <a class="reference internal" href="../reference/compound_stmts.html#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> statement:
on exit, standard file descriptors are closed, and the process is waited for.</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">with</span> <span class="n">Popen</span><span class="p">([</span><span class="s2">"ifconfig"</span><span class="p">],</span> <span class="n">stdout</span><span class="o">=</span><span class="n">PIPE</span><span class="p">)</span> <span class="k">as</span> <span class="n">proc</span><span class="p">:</span>
    <span class="n">log</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">proc</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</pre></div>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>Added context manager support.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6: </span>Popen destructor now emits a <a class="reference internal" href="exceptions.html#ResourceWarning" title="ResourceWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ResourceWarning</span></code></a> warning if the child
process is still running.</p>
</div>
</dd>