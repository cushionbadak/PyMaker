link:
library/sys.html#sys.stderr

docs:


sys.stdin¶

sys.stdout¶

sys.stderr¶
File objects used by the interpreter for standard
input, output and errors:

stdin is used for all interactive input (including calls to
input());
stdout is used for the output of print() and expression
statements and for the prompts of input();
The interpreter’s own prompts and its error messages go to stderr.

These streams are regular text files like those
returned by the open() function.  Their parameters are chosen as
follows:

The character encoding is platform-dependent.  Non-Windows
platforms use the locale encoding (see
locale.getpreferredencoding()).
On Windows, UTF-8 is used for the console device.  Non-character
devices such as disk files and pipes use the system locale
encoding (i.e. the ANSI codepage).  Non-console character
devices such as NUL (i.e. where isatty() returns True) use the
value of the console input and output codepages at startup,
respectively for stdin and stdout/stderr. This defaults to the
system locale encoding if the process is not initially attached
to a console.
The special behaviour of the console can be overridden
by setting the environment variable PYTHONLEGACYWINDOWSSTDIO
before starting Python. In that case, the console codepages are
used as for any other character device.
Under all platforms, you can override the character encoding by
setting the PYTHONIOENCODING environment variable before
starting Python or by using the new -X utf8 command
line option and PYTHONUTF8 environment variable.  However,
for the Windows console, this only applies when
PYTHONLEGACYWINDOWSSTDIO is also set.

When interactive, stdout and stderr streams are line-buffered.
Otherwise, they are block-buffered like regular text files.  You can
override this value with the -u command-line option.



Note
To write or read binary data from/to the standard streams, use the
underlying binary buffer object.  For example, to
write bytes to stdout, use sys.stdout.buffer.write(b'abc').
However, if you are writing a library (and do not control in which
context its code will be executed), be aware that the standard streams
may be replaced with file-like objects like io.StringIO which
do not support the buffer attribute.

