link:
library/asyncio-eventloop.html#executing-code-in-thread-or-process-pools

docs:

Executing code in thread or process pools¶


awaitable loop.run_in_executor(executor, func, *args)¶
Arrange for func to be called in the specified executor.
The executor argument should be an concurrent.futures.Executor
instance. The default executor is used if executor is None.
Example:
import asyncio
import concurrent.futures

def blocking_io():
    # File operations (such as logging) can block the
    # event loop: run them in a thread pool.
    with open('/dev/urandom', 'rb') as f:
        return f.read(100)

def cpu_bound():
    # CPU-bound operations will block the event loop:
    # in general it is preferable to run them in a
    # process pool.
    return sum(i * i for i in range(10 ** 7))

async def main():
    loop = asyncio.get_running_loop()

    ## Options:

    # 1. Run in the default loop's executor:
    result = await loop.run_in_executor(
        None, blocking_io)
    print('default thread pool', result)

    # 2. Run in a custom thread pool:
    with concurrent.futures.ThreadPoolExecutor() as pool:
        result = await loop.run_in_executor(
            pool, blocking_io)
        print('custom thread pool', result)

    # 3. Run in a custom process pool:
    with concurrent.futures.ProcessPoolExecutor() as pool:
        result = await loop.run_in_executor(
            pool, cpu_bound)
        print('custom process pool', result)

asyncio.run(main())


This method returns a asyncio.Future object.
Use functools.partial() to pass keyword arguments to func.

Changed in version 3.5.3: loop.run_in_executor() no longer configures the
max_workers of the thread pool executor it creates, instead
leaving it up to the thread pool executor
(ThreadPoolExecutor) to set the
default.




loop.set_default_executor(executor)¶
Set executor as the default executor used by run_in_executor().
executor should be an instance of
ThreadPoolExecutor.

Deprecated since version 3.7: Using an executor that is not an instance of
ThreadPoolExecutor is deprecated and
will trigger an error in Python 3.9.

executor must be an instance of
concurrent.futures.ThreadPoolExecutor.

