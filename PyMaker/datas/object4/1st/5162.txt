link:
library/ssl.html#constants

docs:

Constants¶

All constants are now enum.IntEnum or enum.IntFlag collections.

New in version 3.6.




ssl.CERT_NONE¶
Possible value for SSLContext.verify_mode, or the cert_reqs
parameter to wrap_socket().  Except for PROTOCOL_TLS_CLIENT,
it is the default mode.  With client-side sockets, just about any
cert is accepted.  Validation errors, such as untrusted or expired cert,
are ignored and do not abort the TLS/SSL handshake.
In server mode, no certificate is requested from the client, so the client
does not send any for client cert authentication.
See the discussion of Security considerations below.



ssl.CERT_OPTIONAL¶
Possible value for SSLContext.verify_mode, or the cert_reqs
parameter to wrap_socket().  In client mode, CERT_OPTIONAL
has the same meaning as CERT_REQUIRED. It is recommended to
use CERT_REQUIRED for client-side sockets instead.
In server mode, a client certificate request is sent to the client.  The
client may either ignore the request or send a certificate in order
perform TLS client cert authentication.  If the client chooses to send
a certificate, it is verified.  Any verification error immediately aborts
the TLS handshake.
Use of this setting requires a valid set of CA certificates to
be passed, either to SSLContext.load_verify_locations() or as a
value of the ca_certs parameter to wrap_socket().



ssl.CERT_REQUIRED¶
Possible value for SSLContext.verify_mode, or the cert_reqs
parameter to wrap_socket().  In this mode, certificates are
required from the other side of the socket connection; an SSLError
will be raised if no certificate is provided, or if its validation fails.
This mode is not sufficient to verify a certificate in client mode as
it does not match hostnames.  check_hostname must be
enabled as well to verify the authenticity of a cert.
PROTOCOL_TLS_CLIENT uses CERT_REQUIRED and
enables check_hostname by default.
With server socket, this mode provides mandatory TLS client cert
authentication.  A client certificate request is sent to the client and
the client must provide a valid and trusted certificate.
Use of this setting requires a valid set of CA certificates to
be passed, either to SSLContext.load_verify_locations() or as a
value of the ca_certs parameter to wrap_socket().



class ssl.VerifyMode¶
enum.IntEnum collection of CERT_* constants.

New in version 3.6.




ssl.VERIFY_DEFAULT¶
Possible value for SSLContext.verify_flags. In this mode, certificate
revocation lists (CRLs) are not checked. By default OpenSSL does neither
require nor verify CRLs.

New in version 3.4.




ssl.VERIFY_CRL_CHECK_LEAF¶
Possible value for SSLContext.verify_flags. In this mode, only the
peer cert is check but non of the intermediate CA certificates. The mode
requires a valid CRL that is signed by the peer cert’s issuer (its direct
ancestor CA). If no proper has been loaded
SSLContext.load_verify_locations, validation will fail.

New in version 3.4.




ssl.VERIFY_CRL_CHECK_CHAIN¶
Possible value for SSLContext.verify_flags. In this mode, CRLs of
all certificates in the peer cert chain are checked.

New in version 3.4.




ssl.VERIFY_X509_STRICT¶
Possible value for SSLContext.verify_flags to disable workarounds
for broken X.509 certificates.

New in version 3.4.




ssl.VERIFY_X509_TRUSTED_FIRST¶
Possible value for SSLContext.verify_flags. It instructs OpenSSL to
prefer trusted certificates when building the trust chain to validate a
certificate. This flag is enabled by default.

New in version 3.4.4.




class ssl.VerifyFlags¶
enum.IntFlag collection of VERIFY_* constants.

New in version 3.6.




ssl.PROTOCOL_TLS¶
Selects the highest protocol version that both the client and server support.
Despite the name, this option can select both “SSL” and “TLS” protocols.

New in version 3.6.




ssl.PROTOCOL_TLS_CLIENT¶
Auto-negotiate the highest protocol version like PROTOCOL_TLS,
but only support client-side SSLSocket connections. The protocol
enables CERT_REQUIRED and check_hostname by
default.

New in version 3.6.




ssl.PROTOCOL_TLS_SERVER¶
Auto-negotiate the highest protocol version like PROTOCOL_TLS,
but only support server-side SSLSocket connections.

New in version 3.6.




ssl.PROTOCOL_SSLv23¶
Alias for data:PROTOCOL_TLS.

Deprecated since version 3.6: Use PROTOCOL_TLS instead.




ssl.PROTOCOL_SSLv2¶
Selects SSL version 2 as the channel encryption protocol.
This protocol is not available if OpenSSL is compiled with the
OPENSSL_NO_SSL2 flag.

Warning
SSL version 2 is insecure.  Its use is highly discouraged.


Deprecated since version 3.6: OpenSSL has removed support for SSLv2.




ssl.PROTOCOL_SSLv3¶
Selects SSL version 3 as the channel encryption protocol.
This protocol is not be available if OpenSSL is compiled with the
OPENSSL_NO_SSLv3 flag.

Warning
SSL version 3 is insecure.  Its use is highly discouraged.


Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. Use the default
protocol PROTOCOL_TLS with flags like OP_NO_SSLv3 instead.




ssl.PROTOCOL_TLSv1¶
Selects TLS version 1.0 as the channel encryption protocol.

Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. Use the default
protocol PROTOCOL_TLS with flags like OP_NO_SSLv3 instead.




ssl.PROTOCOL_TLSv1_1¶
Selects TLS version 1.1 as the channel encryption protocol.
Available only with openssl version 1.0.1+.

New in version 3.4.


Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. Use the default
protocol PROTOCOL_TLS with flags like OP_NO_SSLv3 instead.




ssl.PROTOCOL_TLSv1_2¶
Selects TLS version 1.2 as the channel encryption protocol. This is the
most modern version, and probably the best choice for maximum protection,
if both sides can speak it.  Available only with openssl version 1.0.1+.

New in version 3.4.


Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. Use the default
protocol PROTOCOL_TLS with flags like OP_NO_SSLv3 instead.




ssl.OP_ALL¶
Enables workarounds for various bugs present in other SSL implementations.
This option is set by default.  It does not necessarily set the same
flags as OpenSSL’s SSL_OP_ALL constant.

New in version 3.2.




ssl.OP_NO_SSLv2¶
Prevents an SSLv2 connection.  This option is only applicable in
conjunction with PROTOCOL_TLS.  It prevents the peers from
choosing SSLv2 as the protocol version.

New in version 3.2.


Deprecated since version 3.6: SSLv2 is deprecated




ssl.OP_NO_SSLv3¶
Prevents an SSLv3 connection.  This option is only applicable in
conjunction with PROTOCOL_TLS.  It prevents the peers from
choosing SSLv3 as the protocol version.

New in version 3.2.


Deprecated since version 3.6: SSLv3 is deprecated




ssl.OP_NO_TLSv1¶
Prevents a TLSv1 connection.  This option is only applicable in
conjunction with PROTOCOL_TLS.  It prevents the peers from
choosing TLSv1 as the protocol version.

New in version 3.2.


Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0, use the new
SSLContext.minimum_version and
SSLContext.maximum_version instead.




ssl.OP_NO_TLSv1_1¶
Prevents a TLSv1.1 connection. This option is only applicable in conjunction
with PROTOCOL_TLS. It prevents the peers from choosing TLSv1.1 as
the protocol version. Available only with openssl version 1.0.1+.

New in version 3.4.


Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0.




ssl.OP_NO_TLSv1_2¶
Prevents a TLSv1.2 connection. This option is only applicable in conjunction
with PROTOCOL_TLS. It prevents the peers from choosing TLSv1.2 as
the protocol version. Available only with openssl version 1.0.1+.

New in version 3.4.


Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0.




ssl.OP_NO_TLSv1_3¶
Prevents a TLSv1.3 connection. This option is only applicable in conjunction
with PROTOCOL_TLS. It prevents the peers from choosing TLSv1.3 as
the protocol version. TLS 1.3 is available with OpenSSL 1.1.1 or later.
When Python has been compiled against an older version of OpenSSL, the
flag defaults to 0.

New in version 3.7.


Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0. It was added to 2.7.15,
3.6.3 and 3.7.0 for backwards compatibility with OpenSSL 1.0.2.




ssl.OP_NO_RENEGOTIATION¶
Disable all renegotiation in TLSv1.2 and earlier. Do not send
HelloRequest messages, and ignore renegotiation requests via ClientHello.
This option is only available with OpenSSL 1.1.0h and later.

New in version 3.7.




ssl.OP_CIPHER_SERVER_PREFERENCE¶
Use the server’s cipher ordering preference, rather than the client’s.
This option has no effect on client sockets and SSLv2 server sockets.

New in version 3.3.




ssl.OP_SINGLE_DH_USE¶
Prevents re-use of the same DH key for distinct SSL sessions.  This
improves forward secrecy but requires more computational resources.
This option only applies to server sockets.

New in version 3.3.




ssl.OP_SINGLE_ECDH_USE¶
Prevents re-use of the same ECDH key for distinct SSL sessions.  This
improves forward secrecy but requires more computational resources.
This option only applies to server sockets.

New in version 3.3.




ssl.OP_ENABLE_MIDDLEBOX_COMPAT¶
Send dummy Change Cipher Spec (CCS) messages in TLS 1.3 handshake to make
a TLS 1.3 connection look more like a TLS 1.2 connection.
This option is only available with OpenSSL 1.1.1 and later.

New in version 3.8.




ssl.OP_NO_COMPRESSION¶
Disable compression on the SSL channel.  This is useful if the application
protocol supports its own compression scheme.
This option is only available with OpenSSL 1.0.0 and later.

New in version 3.3.




class ssl.Options¶
enum.IntFlag collection of OP_* constants.



ssl.OP_NO_TICKET¶
Prevent client side from requesting a session ticket.

New in version 3.6.




ssl.HAS_ALPN¶
Whether the OpenSSL library has built-in support for the Application-Layer
Protocol Negotiation TLS extension as described in RFC 7301.

New in version 3.5.




ssl.HAS_NEVER_CHECK_COMMON_NAME¶
Whether the OpenSSL library has built-in support not checking subject
common name and SSLContext.hostname_checks_common_name is
writeable.

New in version 3.7.




ssl.HAS_ECDH¶
Whether the OpenSSL library has built-in support for the Elliptic Curve-based
Diffie-Hellman key exchange.  This should be true unless the feature was
explicitly disabled by the distributor.

New in version 3.3.




ssl.HAS_SNI¶
Whether the OpenSSL library has built-in support for the Server Name
Indication extension (as defined in RFC 6066).

New in version 3.2.




ssl.HAS_NPN¶
Whether the OpenSSL library has built-in support for the Next Protocol
Negotiation as described in the Application Layer Protocol
Negotiation.
When true, you can use the SSLContext.set_npn_protocols() method to advertise
which protocols you want to support.

New in version 3.3.




ssl.HAS_SSLv2¶
Whether the OpenSSL library has built-in support for the SSL 2.0 protocol.

New in version 3.7.




ssl.HAS_SSLv3¶
Whether the OpenSSL library has built-in support for the SSL 3.0 protocol.

New in version 3.7.




ssl.HAS_TLSv1¶
Whether the OpenSSL library has built-in support for the TLS 1.0 protocol.

New in version 3.7.




ssl.HAS_TLSv1_1¶
Whether the OpenSSL library has built-in support for the TLS 1.1 protocol.

New in version 3.7.




ssl.HAS_TLSv1_2¶
Whether the OpenSSL library has built-in support for the TLS 1.2 protocol.

New in version 3.7.




ssl.HAS_TLSv1_3¶
Whether the OpenSSL library has built-in support for the TLS 1.3 protocol.

New in version 3.7.




ssl.CHANNEL_BINDING_TYPES¶
List of supported TLS channel binding types.  Strings in this list
can be used as arguments to SSLSocket.get_channel_binding().

New in version 3.3.




ssl.OPENSSL_VERSION¶
The version string of the OpenSSL library loaded by the interpreter:
>>> ssl.OPENSSL_VERSION
'OpenSSL 1.0.2k  26 Jan 2017'



New in version 3.2.




ssl.OPENSSL_VERSION_INFO¶
A tuple of five integers representing version information about the
OpenSSL library:
>>> ssl.OPENSSL_VERSION_INFO
(1, 0, 2, 11, 15)



New in version 3.2.




ssl.OPENSSL_VERSION_NUMBER¶
The raw version number of the OpenSSL library, as a single integer:
>>> ssl.OPENSSL_VERSION_NUMBER
268443839
>>> hex(ssl.OPENSSL_VERSION_NUMBER)
'0x100020bf'



New in version 3.2.




ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE¶

ssl.ALERT_DESCRIPTION_INTERNAL_ERROR¶

ALERT_DESCRIPTION_*
Alert Descriptions from RFC 5246 and others. The IANA TLS Alert Registry
contains this list and references to the RFCs where their meaning is defined.
Used as the return value of the callback function in
SSLContext.set_servername_callback().

New in version 3.4.




class ssl.AlertDescription¶
enum.IntEnum collection of ALERT_DESCRIPTION_* constants.

New in version 3.6.




Purpose.SERVER_AUTH¶
Option for create_default_context() and
SSLContext.load_default_certs().  This value indicates that the
context may be used to authenticate Web servers (therefore, it will
be used to create client-side sockets).

New in version 3.4.




Purpose.CLIENT_AUTH¶
Option for create_default_context() and
SSLContext.load_default_certs().  This value indicates that the
context may be used to authenticate Web clients (therefore, it will
be used to create server-side sockets).

New in version 3.4.




class ssl.SSLErrorNumber¶
enum.IntEnum collection of SSL_ERROR_* constants.

New in version 3.6.




class ssl.TLSVersion¶
enum.IntEnum collection of SSL and TLS versions for
SSLContext.maximum_version and SSLContext.minimum_version.

New in version 3.7.




TLSVersion.MINIMUM_SUPPORTED¶



TLSVersion.MAXIMUM_SUPPORTED¶
The minimum or maximum supported SSL or TLS version. These are magic
constants. Their values don’t reflect the lowest and highest available
TLS/SSL versions.



TLSVersion.SSLv3¶



TLSVersion.TLSv1¶



TLSVersion.TLSv1_1¶



TLSVersion.TLSv1_2¶



TLSVersion.TLSv1_3¶
SSL 3.0 to TLS 1.3.

