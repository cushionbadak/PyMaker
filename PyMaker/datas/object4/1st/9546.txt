link:
library/site.html#module-contents

docs:

Module contents¶


site.PREFIXES¶
A list of prefixes for site-packages directories.



site.ENABLE_USER_SITE¶
Flag showing the status of the user site-packages directory.  True means
that it is enabled and was added to sys.path.  False means that it
was disabled by user request (with -s or
PYTHONNOUSERSITE).  None means it was disabled for security
reasons (mismatch between user or group id and effective id) or by an
administrator.



site.USER_SITE¶
Path to the user site-packages for the running Python.  Can be None if
getusersitepackages() hasn’t been called yet.  Default value is
~/.local/lib/pythonX.Y/site-packages for UNIX and non-framework Mac
OS X builds, ~/Library/Python/X.Y/lib/python/site-packages for Mac
framework builds, and %APPDATA%\Python\PythonXY\site-packages
on Windows.  This directory is a site directory, which means that
.pth files in it will be processed.



site.USER_BASE¶
Path to the base directory for the user site-packages.  Can be None if
getuserbase() hasn’t been called yet.  Default value is
~/.local for UNIX and Mac OS X non-framework builds,
~/Library/Python/X.Y for Mac framework builds, and
%APPDATA%\Python for Windows.  This value is used by Distutils to
compute the installation directories for scripts, data files, Python modules,
etc. for the user installation scheme.
See also PYTHONUSERBASE.



site.main()¶
Adds all the standard site-specific directories to the module search
path.  This function is called automatically when this module is imported,
unless the Python interpreter was started with the -S flag.

Changed in version 3.3: This function used to be called unconditionally.




site.addsitedir(sitedir, known_paths=None)¶
Add a directory to sys.path and process its .pth files.  Typically
used in sitecustomize or usercustomize (see above).



site.getsitepackages()¶
Return a list containing all global site-packages directories.

New in version 3.2.




site.getuserbase()¶
Return the path of the user base directory, USER_BASE.  If it is not
initialized yet, this function will also set it, respecting
PYTHONUSERBASE.

New in version 3.2.




site.getusersitepackages()¶
Return the path of the user-specific site-packages directory,
USER_SITE.  If it is not initialized yet, this function will also set
it, respecting PYTHONNOUSERSITE and USER_BASE.

New in version 3.2.


The site module also provides a way to get the user directories from the
command line:
$ python3 -m site --user-site
/home/user/.local/lib/python3.3/site-packages


If it is called without arguments, it will print the contents of
sys.path on the standard output, followed by the value of
USER_BASE and whether the directory exists, then the same thing for
USER_SITE, and finally the value of ENABLE_USER_SITE.


--user-base¶
Print the path to the user base directory.



--user-site¶
Print the path to the user site-packages directory.

If both options are given, user base and user site will be printed (always in
this order), separated by os.pathsep.
If any option is given, the script will exit with one of these values: 0 if
the user site-packages directory is enabled, 1 if it was disabled by the
user, 2 if it is disabled for security reasons or by an administrator, and a
value greater than 2 if there is an error.

See also
PEP 370 – Per user site-packages directory

