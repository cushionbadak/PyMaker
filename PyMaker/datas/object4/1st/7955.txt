link:
library/turtle.html#help-and-configuration

docs:

Help and configuration¶

How to use help¶
The public methods of the Screen and Turtle classes are documented extensively
via docstrings.  So these can be used as online-help via the Python help
facilities:

When using IDLE, tooltips show the signatures and first lines of the
docstrings of typed in function-/method calls.

Calling help() on methods or functions displays the docstrings:
>>> help(Screen.bgcolor)
Help on method bgcolor in module turtle:

bgcolor(self, *args) unbound turtle.Screen method
    Set or return backgroundcolor of the TurtleScreen.

    Arguments (if given): a color string or three numbers
    in the range 0..colormode or a 3-tuple of such numbers.


      >>> screen.bgcolor("orange")
      >>> screen.bgcolor()
      "orange"
      >>> screen.bgcolor(0.5,0,0.5)
      >>> screen.bgcolor()
      "#800080"

>>> help(Turtle.penup)
Help on method penup in module turtle:

penup(self) unbound turtle.Turtle method
    Pull the pen up -- no drawing when moving.

    Aliases: penup | pu | up

    No argument

    >>> turtle.penup()



The docstrings of the functions which are derived from methods have a modified
form:
>>> help(bgcolor)
Help on function bgcolor in module turtle:

bgcolor(*args)
    Set or return backgroundcolor of the TurtleScreen.

    Arguments (if given): a color string or three numbers
    in the range 0..colormode or a 3-tuple of such numbers.

    Example::

      >>> bgcolor("orange")
      >>> bgcolor()
      "orange"
      >>> bgcolor(0.5,0,0.5)
      >>> bgcolor()
      "#800080"

>>> help(penup)
Help on function penup in module turtle:

penup()
    Pull the pen up -- no drawing when moving.

    Aliases: penup | pu | up

    No argument

    Example:
    >>> penup()




These modified docstrings are created automatically together with the function
definitions that are derived from the methods at import time.


Translation of docstrings into different languages¶
There is a utility to create a dictionary the keys of which are the method names
and the values of which are the docstrings of the public methods of the classes
Screen and Turtle.


turtle.write_docstringdict(filename="turtle_docstringdict")¶




Parameters:filename – a string, used as filename



Create and write docstring-dictionary to a Python script with the given
filename.  This function has to be called explicitly (it is not used by the
turtle graphics classes).  The docstring dictionary will be written to the
Python script filename.py.  It is intended to serve as a template
for translation of the docstrings into different languages.

If you (or your students) want to use turtle with online help in your
native language, you have to translate the docstrings and save the resulting
file as e.g. turtle_docstringdict_german.py.
If you have an appropriate entry in your turtle.cfg file this dictionary
will be read in at import time and will replace the original English docstrings.
At the time of this writing there are docstring dictionaries in German and in
Italian.  (Requests please to glingl@aon.at.)


How to configure Screen and Turtles¶
The built-in default configuration mimics the appearance and behaviour of the
old turtle module in order to retain best possible compatibility with it.
If you want to use a different configuration which better reflects the features
of this module or which better fits to your needs, e.g. for use in a classroom,
you can prepare a configuration file turtle.cfg which will be read at import
time and modify the configuration according to its settings.
The built in configuration would correspond to the following turtle.cfg:
width = 0.5
height = 0.75
leftright = None
topbottom = None
canvwidth = 400
canvheight = 300
mode = standard
colormode = 1.0
delay = 10
undobuffersize = 1000
shape = classic
pencolor = black
fillcolor = black
resizemode = noresize
visible = True
language = english
exampleturtle = turtle
examplescreen = screen
title = Python Turtle Graphics
using_IDLE = False


Short explanation of selected entries:

The first four lines correspond to the arguments of the Screen.setup()
method.
Line 5 and 6 correspond to the arguments of the method
Screen.screensize().
shape can be any of the built-in shapes, e.g: arrow, turtle, etc.  For more
info try help(shape).
If you want to use no fillcolor (i.e. make the turtle transparent), you have
to write fillcolor = "" (but all nonempty strings must not have quotes in
the cfg-file).
If you want to reflect the turtle its state, you have to use resizemode =
auto.
If you set e.g. language = italian the docstringdict
turtle_docstringdict_italian.py will be loaded at import time (if
present on the import path, e.g. in the same directory as turtle.
The entries exampleturtle and examplescreen define the names of these
objects as they occur in the docstrings.  The transformation of
method-docstrings to function-docstrings will delete these names from the
docstrings.
using_IDLE: Set this to True if you regularly work with IDLE and its -n
switch (“no subprocess”).  This will prevent exitonclick() to enter the
mainloop.

There can be a turtle.cfg file in the directory where turtle is
stored and an additional one in the current working directory.  The latter will
override the settings of the first one.
The Lib/turtledemo directory contains a turtle.cfg file.  You can
study it as an example and see its effects when running the demos (preferably
not from within the demo-viewer).

