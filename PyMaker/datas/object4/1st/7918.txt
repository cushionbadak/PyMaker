link:
library/turtle.html#using-screen-events

docs:

Using screen events¶


turtle.listen(xdummy=None, ydummy=None)¶
Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments
are provided in order to be able to pass listen() to the onclick method.



turtle.onkey(fun, key)¶

turtle.onkeyrelease(fun, key)¶




Parameters:
fun – a function with no arguments or None
key – a string: key (e.g. “a”) or key-symbol (e.g. “space”)





Bind fun to key-release event of key.  If fun is None, event bindings
are removed. Remark: in order to be able to register key-events, TurtleScreen
must have the focus. (See method listen().)
>>> def f():
...     fd(50)
...     lt(60)
...
>>> screen.onkey(f, "Up")
>>> screen.listen()





turtle.onkeypress(fun, key=None)¶




Parameters:
fun – a function with no arguments or None
key – a string: key (e.g. “a”) or key-symbol (e.g. “space”)





Bind fun to key-press event of key if key is given,
or to any key-press-event if no key is given.
Remark: in order to be able to register key-events, TurtleScreen
must have focus. (See method listen().)
>>> def f():
...     fd(50)
...
>>> screen.onkey(f, "Up")
>>> screen.listen()





turtle.onclick(fun, btn=1, add=None)

turtle.onscreenclick(fun, btn=1, add=None)¶




Parameters:
fun – a function with two arguments which will be called with the
coordinates of the clicked point on the canvas
btn – number of the mouse-button, defaults to 1 (left mouse button)
add – True or False – if True, a new binding will be
added, otherwise it will replace a former binding





Bind fun to mouse-click events on this screen.  If fun is None,
existing bindings are removed.
Example for a TurtleScreen instance named screen and a Turtle instance
named turtle:
>>> screen.onclick(turtle.goto) # Subsequently clicking into the TurtleScreen will
>>>                             # make the turtle move to the clicked point.
>>> screen.onclick(None)        # remove event binding again



Note
This TurtleScreen method is available as a global function only under the
name onscreenclick.  The global function onclick is another one
derived from the Turtle method onclick.




turtle.ontimer(fun, t=0)¶




Parameters:
fun – a function with no arguments
t – a number >= 0





Install a timer that calls fun after t milliseconds.
>>> running = True
>>> def f():
...     if running:
...         fd(50)
...         lt(60)
...         screen.ontimer(f, 250)
>>> f()   ### makes the turtle march around
>>> running = False





turtle.mainloop()¶

turtle.done()¶
Starts event loop - calling Tkinter’s mainloop function.
Must be the last statement in a turtle graphics program.
Must not be used if a script is run from within IDLE in -n mode
(No subprocess) - for interactive use of turtle graphics.
>>> screen.mainloop()



