link:
library/parser.html#example-emulation-of-compile

docs:

Example: Emulation of compile()Â¶
While many useful operations may take place between parsing and bytecode
generation, the simplest operation is to do nothing.  For this purpose, using
the parser module to produce an intermediate data structure is equivalent
to the code
>>> code = compile('a + 5', 'file.py', 'eval')
>>> a = 5
>>> eval(code)
10


The equivalent operation using the parser module is somewhat longer, and
allows the intermediate internal parse tree to be retained as an ST object:
>>> import parser
>>> st = parser.expr('a + 5')
>>> code = st.compile('file.py')
>>> a = 5
>>> eval(code)
10


An application which needs both ST and code objects can package this code into
readily available functions:
import parser

def load_suite(source_string):
    st = parser.suite(source_string)
    return st, st.compile()

def load_expression(source_string):
    st = parser.expr(source_string)
    return st, st.compile()


