link:
library/asyncio-task.html#generator-based-coroutines

docs:

Generator-based Coroutines¶

Note
Support for generator-based coroutines is deprecated and
is scheduled for removal in Python 3.10.

Generator-based coroutines predate async/await syntax.  They are
Python generators that use yield from expressions to await
on Futures and other coroutines.
Generator-based coroutines should be decorated with
@asyncio.coroutine, although this is not
enforced.


@asyncio.coroutine¶
Decorator to mark generator-based coroutines.
This decorator enables legacy generator-based coroutines to be
compatible with async/await code:
@asyncio.coroutine
def old_style_coroutine():
    yield from asyncio.sleep(1)

async def main():
    await old_style_coroutine()


This decorator is deprecated and is scheduled for removal in
Python 3.10.
This decorator should not be used for async def
coroutines.



asyncio.iscoroutine(obj)¶
Return True if obj is a coroutine object.
This method is different from inspect.iscoroutine() because
it returns True for generator-based coroutines.



asyncio.iscoroutinefunction(func)¶
Return True if func is a coroutine function.
This method is different from inspect.iscoroutinefunction()
because it returns True for generator-based coroutine functions
decorated with @coroutine.

