link:
library/multiprocessing.html#module-multiprocessing.connection

docs:

Listeners and Clients¶
Usually message passing between processes is done using queues or by using
Connection objects returned by
Pipe().
However, the multiprocessing.connection module allows some extra
flexibility.  It basically gives a high level message oriented API for dealing
with sockets or Windows named pipes.  It also has support for digest
authentication using the hmac module, and for polling
multiple connections at the same time.


multiprocessing.connection.deliver_challenge(connection, authkey)¶
Send a randomly generated message to the other end of the connection and wait
for a reply.
If the reply matches the digest of the message using authkey as the key
then a welcome message is sent to the other end of the connection.  Otherwise
AuthenticationError is raised.



multiprocessing.connection.answer_challenge(connection, authkey)¶
Receive a message, calculate the digest of the message using authkey as the
key, and then send the digest back.
If a welcome message is not received, then
AuthenticationError is raised.



multiprocessing.connection.Client(address[, family[, authkey]])¶
Attempt to set up a connection to the listener which is using address
address, returning a Connection.
The type of the connection is determined by family argument, but this can
generally be omitted since it can usually be inferred from the format of
address. (See Address Formats)
If authkey is given and not None, it should be a byte string and will be
used as the secret key for an HMAC-based authentication challenge. No
authentication is done if authkey is None.
AuthenticationError is raised if authentication fails.
See Authentication keys.



class multiprocessing.connection.Listener([address[, family[, backlog[, authkey]]]])¶
A wrapper for a bound socket or Windows named pipe which is ‘listening’ for
connections.
address is the address to be used by the bound socket or named pipe of the
listener object.

Note
If an address of ‘0.0.0.0’ is used, the address will not be a connectable
end point on Windows. If you require a connectable end-point,
you should use ‘127.0.0.1’.

family is the type of socket (or named pipe) to use.  This can be one of
the strings 'AF_INET' (for a TCP socket), 'AF_UNIX' (for a Unix
domain socket) or 'AF_PIPE' (for a Windows named pipe).  Of these only
the first is guaranteed to be available.  If family is None then the
family is inferred from the format of address.  If address is also
None then a default is chosen.  This default is the family which is
assumed to be the fastest available.  See
Address Formats.  Note that if family is
'AF_UNIX' and address is None then the socket will be created in a
private temporary directory created using tempfile.mkstemp().
If the listener object uses a socket then backlog (1 by default) is passed
to the listen() method of the socket once it has been
bound.
If authkey is given and not None, it should be a byte string and will be
used as the secret key for an HMAC-based authentication challenge. No
authentication is done if authkey is None.
AuthenticationError is raised if authentication fails.
See Authentication keys.


accept()¶
Accept a connection on the bound socket or named pipe of the listener
object and return a Connection object.
If authentication is attempted and fails, then
AuthenticationError is raised.



close()¶
Close the bound socket or named pipe of the listener object.  This is
called automatically when the listener is garbage collected.  However it
is advisable to call it explicitly.

Listener objects have the following read-only properties:


address¶
The address which is being used by the Listener object.



last_accepted¶
The address from which the last accepted connection came.  If this is
unavailable then it is None.


New in version 3.3: Listener objects now support the context management protocol – see
Context Manager Types.  __enter__() returns the
listener object, and __exit__() calls close().




multiprocessing.connection.wait(object_list, timeout=None)¶
Wait till an object in object_list is ready.  Returns the list of
those objects in object_list which are ready.  If timeout is a
float then the call blocks for at most that many seconds.  If
timeout is None then it will block for an unlimited period.
A negative timeout is equivalent to a zero timeout.
For both Unix and Windows, an object can appear in object_list if
it is

a readable Connection object;
a connected and readable socket.socket object; or
the sentinel attribute of a
Process object.

A connection or socket object is ready when there is data available
to be read from it, or the other end has been closed.
Unix: wait(object_list, timeout) almost equivalent
select.select(object_list, [], [], timeout).  The difference is
that, if select.select() is interrupted by a signal, it can
raise OSError with an error number of EINTR, whereas
wait() will not.
Windows: An item in object_list must either be an integer
handle which is waitable (according to the definition used by the
documentation of the Win32 function WaitForMultipleObjects())
or it can be an object with a fileno() method which returns a
socket handle or pipe handle.  (Note that pipe handles and socket
handles are not waitable handles.)

New in version 3.3.


Examples
The following server code creates a listener which uses 'secret password' as
an authentication key.  It then waits for a connection and sends some data to
the client:
from multiprocessing.connection import Listener
from array import array

address = ('localhost', 6000)     # family is deduced to be 'AF_INET'

with Listener(address, authkey=b'secret password') as listener:
    with listener.accept() as conn:
        print('connection accepted from', listener.last_accepted)

        conn.send([2.25, None, 'junk', float])

        conn.send_bytes(b'hello')

        conn.send_bytes(array('i', [42, 1729]))


The following code connects to the server and receives some data from the
server:
from multiprocessing.connection import Client
from array import array

address = ('localhost', 6000)

with Client(address, authkey=b'secret password') as conn:
    print(conn.recv())                  # => [2.25, None, 'junk', float]

    print(conn.recv_bytes())            # => 'hello'

    arr = array('i', [0, 0, 0, 0, 0])
    print(conn.recv_bytes_into(arr))    # => 8
    print(arr)                          # => array('i', [42, 1729, 0, 0, 0])


The following code uses wait() to
wait for messages from multiple processes at once:
import time, random
from multiprocessing import Process, Pipe, current_process
from multiprocessing.connection import wait

def foo(w):
    for i in range(10):
        w.send((i, current_process().name))
    w.close()

if __name__ == '__main__':
    readers = []

    for i in range(4):
        r, w = Pipe(duplex=False)
        readers.append(r)
        p = Process(target=foo, args=(w,))
        p.start()
        # We close the writable end of the pipe now to be sure that
        # p is the only process which owns a handle for it.  This
        # ensures that when p closes its handle for the writable end,
        # wait() will promptly report the readable end as being ready.
        w.close()

    while readers:
        for r in wait(readers):
            try:
                msg = r.recv()
            except EOFError:
                readers.remove(r)
            else:
                print(msg)



Address Formats¶

An 'AF_INET' address is a tuple of the form (hostname, port) where
hostname is a string and port is an integer.
An 'AF_UNIX' address is a string representing a filename on the
filesystem.

An 'AF_PIPE' address is a string of the form
r'\\.\pipe{PipeName}'.  To use Client() to connect to a named
pipe on a remote computer called ServerName one should use an address of the
form r'\ServerName\pipe{PipeName}' instead.



Note that any string beginning with two backslashes is assumed by default to be
an 'AF_PIPE' address rather than an 'AF_UNIX' address.

