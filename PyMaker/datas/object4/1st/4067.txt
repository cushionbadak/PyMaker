link:
library/ctypes.html#loading-shared-libraries

docs:

Loading shared libraries¶
There are several ways to load shared libraries into the Python process.  One
way is to instantiate one of the following classes:


class ctypes.CDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)¶
Instances of this class represent loaded shared libraries. Functions in these
libraries use the standard C calling convention, and are assumed to return
int.



class ctypes.OleDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)¶
Windows only: Instances of this class represent loaded shared libraries,
functions in these libraries use the stdcall calling convention, and are
assumed to return the windows specific HRESULT code.  HRESULT
values contain information specifying whether the function call failed or
succeeded, together with additional error code.  If the return value signals a
failure, an OSError is automatically raised.

Changed in version 3.3: WindowsError used to be raised.




class ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)¶
Windows only: Instances of this class represent loaded shared libraries,
functions in these libraries use the stdcall calling convention, and are
assumed to return int by default.
On Windows CE only the standard calling convention is used, for convenience the
WinDLL and OleDLL use the standard calling convention on this
platform.

The Python global interpreter lock is released before calling any
function exported by these libraries, and reacquired afterwards.


class ctypes.PyDLL(name, mode=DEFAULT_MODE, handle=None)¶
Instances of this class behave like CDLL instances, except that the
Python GIL is not released during the function call, and after the function
execution the Python error flag is checked. If the error flag is set, a Python
exception is raised.
Thus, this is only useful to call Python C api functions directly.

All these classes can be instantiated by calling them with at least one
argument, the pathname of the shared library.  If you have an existing handle to
an already loaded shared library, it can be passed as the handle named
parameter, otherwise the underlying platforms dlopen or LoadLibrary
function is used to load the library into the process, and to get a handle to
it.
The mode parameter can be used to specify how the library is loaded.  For
details, consult the dlopen(3) manpage.  On Windows, mode is
ignored.  On posix systems, RTLD_NOW is always added, and is not
configurable.
The use_errno parameter, when set to true, enables a ctypes mechanism that
allows accessing the system errno error number in a safe way.
ctypes maintains a thread-local copy of the systems errno
variable; if you call foreign functions created with use_errno=True then the
errno value before the function call is swapped with the ctypes private
copy, the same happens immediately after the function call.
The function ctypes.get_errno() returns the value of the ctypes private
copy, and the function ctypes.set_errno() changes the ctypes private copy
to a new value and returns the former value.
The use_last_error parameter, when set to true, enables the same mechanism for
the Windows error code which is managed by the GetLastError() and
SetLastError() Windows API functions; ctypes.get_last_error() and
ctypes.set_last_error() are used to request and change the ctypes private
copy of the windows error code.


ctypes.RTLD_GLOBAL
Flag to use as mode parameter.  On platforms where this flag is not available,
it is defined as the integer zero.



ctypes.RTLD_LOCAL
Flag to use as mode parameter.  On platforms where this is not available, it
is the same as RTLD_GLOBAL.



ctypes.DEFAULT_MODE
The default mode which is used to load shared libraries.  On OSX 10.3, this is
RTLD_GLOBAL, otherwise it is the same as RTLD_LOCAL.

Instances of these classes have no public methods.  Functions exported by the
shared library can be accessed as attributes or by index.  Please note that
accessing the function through an attribute caches the result and therefore
accessing it repeatedly returns the same object each time.  On the other hand,
accessing it through an index returns a new object each time:
>>> from ctypes import CDLL
>>> libc = CDLL("libc.so.6")  # On Linux
>>> libc.time == libc.time
True
>>> libc['time'] == libc['time']
False


The following public attributes are available, their name starts with an
underscore to not clash with exported function names:


PyDLL._handle¶
The system handle used to access the library.



PyDLL._name¶
The name of the library passed in the constructor.

Shared libraries can also be loaded by using one of the prefabricated objects,
which are instances of the LibraryLoader class, either by calling the
LoadLibrary() method, or by retrieving the library as attribute of the
loader instance.


class ctypes.LibraryLoader(dlltype)¶
Class which loads shared libraries.  dlltype should be one of the
CDLL, PyDLL, WinDLL, or OleDLL types.
__getattr__() has special behavior: It allows loading a shared library by
accessing it as attribute of a library loader instance.  The result is cached,
so repeated attribute accesses return the same library each time.


LoadLibrary(name)¶
Load a shared library into the process and return it.  This method always
returns a new instance of the library.


These prefabricated library loaders are available:


ctypes.cdll
Creates CDLL instances.



ctypes.windll
Windows only: Creates WinDLL instances.



ctypes.oledll
Windows only: Creates OleDLL instances.



ctypes.pydll
Creates PyDLL instances.

For accessing the C Python api directly, a ready-to-use Python shared library
object is available:


ctypes.pythonapi
An instance of PyDLL that exposes Python C API functions as
attributes.  Note that all these functions are assumed to return C
int, which is of course not always the truth, so you have to assign
the correct restype attribute to use these functions.

