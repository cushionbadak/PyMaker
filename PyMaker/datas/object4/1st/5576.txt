link:
library/email.policy.html#email.policy.Policy.handle_defect

docs:

<dt id="email.policy.Policy.handle_defect">
<code class="descname">handle_defect</code><span class="sig-paren">(</span><em>obj</em>, <em>defect</em><span class="sig-paren">)</span><a class="headerlink" href="#email.policy.Policy.handle_defect" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Handle a <em>defect</em> found on <em>obj</em>.  When the email package calls this
method, <em>defect</em> will always be a subclass of
<code class="xref py py-class docutils literal notranslate"><span class="pre">Defect</span></code>.</p>
<p>The default implementation checks the <a class="reference internal" href="#email.policy.Policy.raise_on_defect" title="email.policy.Policy.raise_on_defect"><code class="xref py py-attr docutils literal notranslate"><span class="pre">raise_on_defect</span></code></a> flag.  If
it is <code class="docutils literal notranslate"><span class="pre">True</span></code>, <em>defect</em> is raised as an exception.  If it is <code class="docutils literal notranslate"><span class="pre">False</span></code>
(the default), <em>obj</em> and <em>defect</em> are passed to <a class="reference internal" href="#email.policy.Policy.register_defect" title="email.policy.Policy.register_defect"><code class="xref py py-meth docutils literal notranslate"><span class="pre">register_defect()</span></code></a>.</p>
</dd>