link:
library/signal.html#signal.pthread_sigmask

docs:

<dt id="signal.pthread_sigmask">
<code class="descclassname">signal.</code><code class="descname">pthread_sigmask</code><span class="sig-paren">(</span><em>how</em>, <em>mask</em><span class="sig-paren">)</span><a class="headerlink" href="#signal.pthread_sigmask" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Fetch and/or change the signal mask of the calling thread.  The signal mask
is the set of signals whose delivery is currently blocked for the caller.
Return the old signal mask as a set of signals.</p>
<p>The behavior of the call is dependent on the value of <em>how</em>, as follows.</p>
<ul class="simple">
<li><a class="reference internal" href="#signal.SIG_BLOCK" title="signal.SIG_BLOCK"><code class="xref py py-data docutils literal notranslate"><span class="pre">SIG_BLOCK</span></code></a>: The set of blocked signals is the union of the current
set and the <em>mask</em> argument.</li>
<li><a class="reference internal" href="#signal.SIG_UNBLOCK" title="signal.SIG_UNBLOCK"><code class="xref py py-data docutils literal notranslate"><span class="pre">SIG_UNBLOCK</span></code></a>: The signals in <em>mask</em> are removed from the current
set of blocked signals.  It is permissible to attempt to unblock a
signal which is not blocked.</li>
<li><a class="reference internal" href="#signal.SIG_SETMASK" title="signal.SIG_SETMASK"><code class="xref py py-data docutils literal notranslate"><span class="pre">SIG_SETMASK</span></code></a>: The set of blocked signals is set to the <em>mask</em>
argument.</li>
</ul>
<p><em>mask</em> is a set of signal numbers (e.g. {<code class="xref py py-const docutils literal notranslate"><span class="pre">signal.SIGINT</span></code>,
<code class="xref py py-const docutils literal notranslate"><span class="pre">signal.SIGTERM</span></code>}). Use <code class="docutils literal notranslate"><span class="pre">range(1,</span> <span class="pre">signal.NSIG)</span></code> for a full mask
including all signals.</p>
<p>For example, <code class="docutils literal notranslate"><span class="pre">signal.pthread_sigmask(signal.SIG_BLOCK,</span> <span class="pre">[])</span></code> reads the
signal mask of the calling thread.</p>
<p class="availability"><a class="reference internal" href="intro.html#availability"><span class="std std-ref">Availability</span></a>: Unix. See the man page <em class="manpage">sigprocmask(3)</em> and
<em class="manpage">pthread_sigmask(3)</em> for further information.</p>
<p>See also <a class="reference internal" href="#signal.pause" title="signal.pause"><code class="xref py py-func docutils literal notranslate"><span class="pre">pause()</span></code></a>, <a class="reference internal" href="#signal.sigpending" title="signal.sigpending"><code class="xref py py-func docutils literal notranslate"><span class="pre">sigpending()</span></code></a> and <a class="reference internal" href="#signal.sigwait" title="signal.sigwait"><code class="xref py py-func docutils literal notranslate"><span class="pre">sigwait()</span></code></a>.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.3.</span></p>
</div>
</dd>