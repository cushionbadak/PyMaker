link:
reference/import.html#regular-packages

docs:

5.2.1. Regular packages¶
Python defines two types of packages, regular packages and namespace packages.  Regular
packages are traditional packages as they existed in Python 3.2 and earlier.
A regular package is typically implemented as a directory containing an
__init__.py file.  When a regular package is imported, this
__init__.py file is implicitly executed, and the objects it defines are
bound to names in the package’s namespace.  The __init__.py file can
contain the same Python code that any other module can contain, and Python
will add some additional attributes to the module when it is imported.
For example, the following file system layout defines a top level parent
package with three subpackages:
parent/
    __init__.py
    one/
        __init__.py
    two/
        __init__.py
    three/
        __init__.py


Importing parent.one will implicitly execute parent/__init__.py and
parent/one/__init__.py.  Subsequent imports of parent.two or
parent.three will execute parent/two/__init__.py and
parent/three/__init__.py respectively.
