link:
library/ssl.html#ssl-contexts

docs:

SSL Contexts¶

New in version 3.2.

An SSL context holds various data longer-lived than single SSL connections,
such as SSL configuration options, certificate(s) and private key(s).
It also manages a cache of SSL sessions for server-side sockets, in order
to speed up repeated connections from the same clients.


class ssl.SSLContext(protocol=PROTOCOL_TLS)¶
Create a new SSL context.  You may pass protocol which must be one
of the PROTOCOL_* constants defined in this module.  The parameter
specifies which version of the SSL protocol to use.  Typically, the
server chooses a particular protocol version, and the client must adapt
to the server’s choice.  Most of the versions are not interoperable
with the other versions.  If not specified, the default is
PROTOCOL_TLS; it provides the most compatibility with other
versions.
Here’s a table showing which versions in a client (down the side) can connect
to which versions in a server (along the top):












client / server
SSLv2
SSLv3
TLS [3]
TLSv1
TLSv1.1
TLSv1.2

SSLv2
yes
no
no [1]
no
no
no

SSLv3
no
yes
no [2]
no
no
no

TLS (SSLv23) [3]
no [1]
no [2]
yes
yes
yes
yes

TLSv1
no
no
yes
yes
no
no

TLSv1.1
no
no
yes
no
yes
no

TLSv1.2
no
no
yes
no
no
yes




Footnotes



[1](1, 2) SSLContext disables SSLv2 with OP_NO_SSLv2 by default.





[2](1, 2) SSLContext disables SSLv3 with OP_NO_SSLv3 by default.





[3](1, 2) TLS 1.3 protocol will be available with PROTOCOL_TLS in
OpenSSL >= 1.1.1. There is no dedicated PROTOCOL constant for just
TLS 1.3.



See also
create_default_context() lets the ssl module choose
security settings for a given purpose.


Changed in version 3.6: The context is created with secure default values. The options
OP_NO_COMPRESSION, OP_CIPHER_SERVER_PREFERENCE,
OP_SINGLE_DH_USE, OP_SINGLE_ECDH_USE,
OP_NO_SSLv2 (except for PROTOCOL_SSLv2),
and OP_NO_SSLv3 (except for PROTOCOL_SSLv3) are
set by default. The initial cipher suite list contains only HIGH
ciphers, no NULL ciphers and no MD5 ciphers (except for
PROTOCOL_SSLv2).


SSLContext objects have the following methods and attributes:


SSLContext.cert_store_stats()¶
Get statistics about quantities of loaded X.509 certificates, count of
X.509 certificates flagged as CA certificates and certificate revocation
lists as dictionary.
Example for a context with one CA cert and one other cert:
>>> context.cert_store_stats()
{'crl': 0, 'x509_ca': 1, 'x509': 2}



New in version 3.4.




SSLContext.load_cert_chain(certfile, keyfile=None, password=None)¶
Load a private key and the corresponding certificate.  The certfile
string must be the path to a single file in PEM format containing the
certificate as well as any number of CA certificates needed to establish
the certificate’s authenticity.  The keyfile string, if present, must
point to a file containing the private key in.  Otherwise the private
key will be taken from certfile as well.  See the discussion of
Certificates for more information on how the certificate
is stored in the certfile.
The password argument may be a function to call to get the password for
decrypting the private key.  It will only be called if the private key is
encrypted and a password is necessary.  It will be called with no arguments,
and it should return a string, bytes, or bytearray.  If the return value is
a string it will be encoded as UTF-8 before using it to decrypt the key.
Alternatively a string, bytes, or bytearray value may be supplied directly
as the password argument.  It will be ignored if the private key is not
encrypted and no password is needed.
If the password argument is not specified and a password is required,
OpenSSL’s built-in password prompting mechanism will be used to
interactively prompt the user for a password.
An SSLError is raised if the private key doesn’t
match with the certificate.

Changed in version 3.3: New optional argument password.




SSLContext.load_default_certs(purpose=Purpose.SERVER_AUTH)¶
Load a set of default “certification authority” (CA) certificates from
default locations. On Windows it loads CA certs from the CA and
ROOT system stores. On other systems it calls
SSLContext.set_default_verify_paths(). In the future the method may
load CA certificates from other locations, too.
The purpose flag specifies what kind of CA certificates are loaded. The
default settings Purpose.SERVER_AUTH loads certificates, that are
flagged and trusted for TLS web server authentication (client side
sockets). Purpose.CLIENT_AUTH loads CA certificates for client
certificate verification on the server side.

New in version 3.4.




SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)¶
Load a set of “certification authority” (CA) certificates used to validate
other peers’ certificates when verify_mode is other than
CERT_NONE.  At least one of cafile or capath must be specified.
This method can also load certification revocation lists (CRLs) in PEM or
DER format. In order to make use of CRLs, SSLContext.verify_flags
must be configured properly.
The cafile string, if present, is the path to a file of concatenated
CA certificates in PEM format. See the discussion of
Certificates for more information about how to arrange the
certificates in this file.
The capath string, if present, is
the path to a directory containing several CA certificates in PEM format,
following an OpenSSL specific layout.
The cadata object, if present, is either an ASCII string of one or more
PEM-encoded certificates or a bytes-like object of DER-encoded
certificates. Like with capath extra lines around PEM-encoded
certificates are ignored but at least one certificate must be present.

Changed in version 3.4: New optional argument cadata




SSLContext.get_ca_certs(binary_form=False)¶
Get a list of loaded “certification authority” (CA) certificates. If the
binary_form parameter is False each list
entry is a dict like the output of SSLSocket.getpeercert(). Otherwise
the method returns a list of DER-encoded certificates. The returned list
does not contain certificates from capath unless a certificate was
requested and loaded by a SSL connection.

Note
Certificates in a capath directory aren’t loaded unless they have
been used at least once.


New in version 3.4.




SSLContext.get_ciphers()¶
Get a list of enabled ciphers. The list is in order of cipher priority.
See SSLContext.set_ciphers().
Example:
>>> ctx = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
>>> ctx.set_ciphers('ECDHE+AESGCM:!ECDSA')
>>> ctx.get_ciphers()  # OpenSSL 1.0.x
[{'alg_bits': 256,
  'description': 'ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  '
                 'Enc=AESGCM(256) Mac=AEAD',
  'id': 50380848,
  'name': 'ECDHE-RSA-AES256-GCM-SHA384',
  'protocol': 'TLSv1/SSLv3',
  'strength_bits': 256},
 {'alg_bits': 128,
  'description': 'ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  '
                 'Enc=AESGCM(128) Mac=AEAD',
  'id': 50380847,
  'name': 'ECDHE-RSA-AES128-GCM-SHA256',
  'protocol': 'TLSv1/SSLv3',
  'strength_bits': 128}]


On OpenSSL 1.1 and newer the cipher dict contains additional fields:
>>> ctx.get_ciphers()  # OpenSSL 1.1+
[{'aead': True,
  'alg_bits': 256,
  'auth': 'auth-rsa',
  'description': 'ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  '
                 'Enc=AESGCM(256) Mac=AEAD',
  'digest': None,
  'id': 50380848,
  'kea': 'kx-ecdhe',
  'name': 'ECDHE-RSA-AES256-GCM-SHA384',
  'protocol': 'TLSv1.2',
  'strength_bits': 256,
  'symmetric': 'aes-256-gcm'},
 {'aead': True,
  'alg_bits': 128,
  'auth': 'auth-rsa',
  'description': 'ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  '
                 'Enc=AESGCM(128) Mac=AEAD',
  'digest': None,
  'id': 50380847,
  'kea': 'kx-ecdhe',
  'name': 'ECDHE-RSA-AES128-GCM-SHA256',
  'protocol': 'TLSv1.2',
  'strength_bits': 128,
  'symmetric': 'aes-128-gcm'}]


Availability: OpenSSL 1.0.2+.

New in version 3.6.




SSLContext.set_default_verify_paths()¶
Load a set of default “certification authority” (CA) certificates from
a filesystem path defined when building the OpenSSL library.  Unfortunately,
there’s no easy way to know whether this method succeeds: no error is
returned if no certificates are to be found.  When the OpenSSL library is
provided as part of the operating system, though, it is likely to be
configured properly.



SSLContext.set_ciphers(ciphers)¶
Set the available ciphers for sockets created with this context.
It should be a string in the OpenSSL cipher list format.
If no cipher can be selected (because compile-time options or other
configuration forbids use of all the specified ciphers), an
SSLError will be raised.

Note
when connected, the SSLSocket.cipher() method of SSL sockets will
give the currently selected cipher.
OpenSSL 1.1.1 has TLS 1.3 cipher suites enabled by default. The suites
cannot be disabled with set_ciphers().




SSLContext.set_alpn_protocols(protocols)¶
Specify which protocols the socket should advertise during the SSL/TLS
handshake. It should be a list of ASCII strings, like ['http/1.1',
'spdy/2'], ordered by preference. The selection of a protocol will happen
during the handshake, and will play out according to RFC 7301. After a
successful handshake, the SSLSocket.selected_alpn_protocol() method will
return the agreed-upon protocol.
This method will raise NotImplementedError if HAS_ALPN is
False.
OpenSSL 1.1.0 to 1.1.0e will abort the handshake and raise SSLError
when both sides support ALPN but cannot agree on a protocol. 1.1.0f+
behaves like 1.0.2, SSLSocket.selected_alpn_protocol() returns None.

New in version 3.5.




SSLContext.set_npn_protocols(protocols)¶
Specify which protocols the socket should advertise during the SSL/TLS
handshake. It should be a list of strings, like ['http/1.1', 'spdy/2'],
ordered by preference. The selection of a protocol will happen during the
handshake, and will play out according to the Application Layer Protocol Negotiation. After a
successful handshake, the SSLSocket.selected_npn_protocol() method will
return the agreed-upon protocol.
This method will raise NotImplementedError if HAS_NPN is
False.

New in version 3.3.




SSLContext.sni_callback¶
Register a callback function that will be called after the TLS Client Hello
handshake message has been received by the SSL/TLS server when the TLS client
specifies a server name indication. The server name indication mechanism
is specified in RFC 6066 section 3 - Server Name Indication.
Only one callback can be set per SSLContext.  If sni_callback
is set to None then the callback is disabled. Calling this function a
subsequent time will disable the previously registered callback.
The callback function will be called with three
arguments; the first being the ssl.SSLSocket, the second is a string
that represents the server name that the client is intending to communicate
(or None if the TLS Client Hello does not contain a server name)
and the third argument is the original SSLContext. The server name
argument is text. For internationalized domain name, the server
name is an IDN A-label ("xn--pythn-mua.org").
A typical use of this callback is to change the ssl.SSLSocket’s
SSLSocket.context attribute to a new object of type
SSLContext representing a certificate chain that matches the server
name.
Due to the early negotiation phase of the TLS connection, only limited
methods and attributes are usable like
SSLSocket.selected_alpn_protocol() and SSLSocket.context.
SSLSocket.getpeercert(), SSLSocket.getpeercert(),
SSLSocket.cipher() and SSLSocket.compress() methods require that
the TLS connection has progressed beyond the TLS Client Hello and therefore
will not contain return meaningful values nor can they be called safely.
The sni_callback function must return None to allow the
TLS negotiation to continue.  If a TLS failure is required, a constant
ALERT_DESCRIPTION_* can be
returned.  Other return values will result in a TLS fatal error with
ALERT_DESCRIPTION_INTERNAL_ERROR.
If an exception is raised from the sni_callback function the TLS
connection will terminate with a fatal TLS alert message
ALERT_DESCRIPTION_HANDSHAKE_FAILURE.
This method will raise NotImplementedError if the OpenSSL library
had OPENSSL_NO_TLSEXT defined when it was built.

New in version 3.7.




SSLContext.set_servername_callback(server_name_callback)¶
This is a legacy API retained for backwards compatibility. When possible,
you should use sni_callback instead. The given server_name_callback
is similar to sni_callback, except that when the server hostname is an
IDN-encoded internationalized domain name, the server_name_callback
receives a decoded U-label ("pythön.org").
If there is an decoding error on the server name, the TLS connection will
terminate with an ALERT_DESCRIPTION_INTERNAL_ERROR fatal TLS
alert message to the client.

New in version 3.4.




SSLContext.load_dh_params(dhfile)¶
Load the key generation parameters for Diffie-Hellman (DH) key exchange.
Using DH key exchange improves forward secrecy at the expense of
computational resources (both on the server and on the client).
The dhfile parameter should be the path to a file containing DH
parameters in PEM format.
This setting doesn’t apply to client sockets.  You can also use the
OP_SINGLE_DH_USE option to further improve security.

New in version 3.3.




SSLContext.set_ecdh_curve(curve_name)¶
Set the curve name for Elliptic Curve-based Diffie-Hellman (ECDH) key
exchange.  ECDH is significantly faster than regular DH while arguably
as secure.  The curve_name parameter should be a string describing
a well-known elliptic curve, for example prime256v1 for a widely
supported curve.
This setting doesn’t apply to client sockets.  You can also use the
OP_SINGLE_ECDH_USE option to further improve security.
This method is not available if HAS_ECDH is False.

New in version 3.3.


See also

SSL/TLS & Perfect Forward Secrecy
Vincent Bernat.





SSLContext.wrap_socket(sock, server_side=False, do_handshake_on_connect=True, suppress_ragged_eofs=True, server_hostname=None, session=None)¶
Wrap an existing Python socket sock and return an instance of
SSLContext.sslsocket_class (default SSLSocket). The
returned SSL socket is tied to the context, its settings and certificates.
sock must be a SOCK_STREAM socket; other
socket types are unsupported.
The parameter server_side is a boolean which identifies whether
server-side or client-side behavior is desired from this socket.
For client-side sockets, the context construction is lazy; if the
underlying socket isn’t connected yet, the context construction will be
performed after connect() is called on the socket.  For
server-side sockets, if the socket has no remote peer, it is assumed
to be a listening socket, and the server-side SSL wrapping is
automatically performed on client connections accepted via the
accept() method. The method may raise SSLError.
On client connections, the optional parameter server_hostname specifies
the hostname of the service which we are connecting to.  This allows a
single server to host multiple SSL-based services with distinct certificates,
quite similarly to HTTP virtual hosts. Specifying server_hostname will
raise a ValueError if server_side is true.
The parameter do_handshake_on_connect specifies whether to do the SSL
handshake automatically after doing a socket.connect(), or whether the
application program will call it explicitly, by invoking the
SSLSocket.do_handshake() method.  Calling
SSLSocket.do_handshake() explicitly gives the program control over the
blocking behavior of the socket I/O involved in the handshake.
The parameter suppress_ragged_eofs specifies how the
SSLSocket.recv() method should signal unexpected EOF from the other end
of the connection.  If specified as True (the default), it returns a
normal EOF (an empty bytes object) in response to unexpected EOF errors
raised from the underlying socket; if False, it will raise the
exceptions back to the caller.
session, see session.

Changed in version 3.5: Always allow a server_hostname to be passed, even if OpenSSL does not
have SNI.


Changed in version 3.6: session argument was added.

Changed in version 3.7: The method returns on instance of SSLContext.sslsocket_class
instead of hard-coded SSLSocket.





SSLContext.sslsocket_class¶
The return type of SSLContext.wrap_sockets(), defaults to
SSLSocket. The attribute can be overridden on instance of class
in order to return a custom subclass of SSLSocket.

New in version 3.7.




SSLContext.wrap_bio(incoming, outgoing, server_side=False, server_hostname=None, session=None)¶
Wrap the BIO objects incoming and outgoing and return an instance of
attr:SSLContext.sslobject_class (default SSLObject). The SSL
routines will read input data from the incoming BIO and write data to the
outgoing BIO.
The server_side, server_hostname and session parameters have the
same meaning as in SSLContext.wrap_socket().

Changed in version 3.6: session argument was added.


Changed in version 3.7: The method returns on instance of SSLContext.sslobject_class
instead of hard-coded SSLObject.




SSLContext.sslobject_class¶
The return type of SSLContext.wrap_bio(), defaults to
SSLObject. The attribute can be overridden on instance of class
in order to return a custom subclass of SSLObject.

New in version 3.7.




SSLContext.session_stats()¶
Get statistics about the SSL sessions created or managed by this context.
A dictionary is returned which maps the names of each piece of information to their
numeric values.  For example, here is the total number of hits and misses
in the session cache since the context was created:
>>> stats = context.session_stats()
>>> stats['hits'], stats['misses']
(0, 0)





SSLContext.check_hostname¶
Whether to match the peer cert’s hostname with match_hostname() in
SSLSocket.do_handshake(). The context’s
verify_mode must be set to CERT_OPTIONAL or
CERT_REQUIRED, and you must pass server_hostname to
wrap_socket() in order to match the hostname.  Enabling
hostname checking automatically sets verify_mode from
CERT_NONE to CERT_REQUIRED.  It cannot be set back to
CERT_NONE as long as hostname checking is enabled.
Example:
import socket, ssl

context = ssl.SSLContext()
context.verify_mode = ssl.CERT_REQUIRED
context.check_hostname = True
context.load_default_certs()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ssl_sock = context.wrap_socket(s, server_hostname='www.verisign.com')
ssl_sock.connect(('www.verisign.com', 443))



New in version 3.4.


Changed in version 3.7: verify_mode is now automatically changed
to CERT_REQUIRED  when hostname checking is enabled and
verify_mode is CERT_NONE. Previously
the same operation would have failed with a ValueError.


Note
This features requires OpenSSL 0.9.8f or newer.




SSLContext.maximum_version¶
A TLSVersion enum member representing the highest supported
TLS version. The value defaults to TLSVersion.MAXIMUM_SUPPORTED.
The attribute is read-only for protocols other than PROTOCOL_TLS,
PROTOCOL_TLS_CLIENT, and PROTOCOL_TLS_SERVER.
The attributes maximum_version,
minimum_version and
SSLContext.options all affect the supported SSL
and TLS versions of the context. The implementation does not prevent
invalid combination. For example a context with
OP_NO_TLSv1_2 in options and
maximum_version set to TLSVersion.TLSv1_2
will not be able to establish a TLS 1.2 connection.

Note
This attribute is not available unless the ssl module is compiled
with OpenSSL 1.1.0g or newer.


New in version 3.7.




SSLContext.minimum_version¶
Like SSLContext.maximum_version except it is the lowest
supported version or TLSVersion.MINIMUM_SUPPORTED.

Note
This attribute is not available unless the ssl module is compiled
with OpenSSL 1.1.0g or newer.


New in version 3.7.




SSLContext.options¶
An integer representing the set of SSL options enabled on this context.
The default value is OP_ALL, but you can specify other options
such as OP_NO_SSLv2 by ORing them together.

Note
With versions of OpenSSL older than 0.9.8m, it is only possible
to set options, not to clear them.  Attempting to clear an option
(by resetting the corresponding bits) will raise a ValueError.


Changed in version 3.6: SSLContext.options returns Options flags:
>>> ssl.create_default_context().options  # doctest: +SKIP
<Options.OP_ALL|OP_NO_SSLv3|OP_NO_SSLv2|OP_NO_COMPRESSION: 2197947391>






SSLContext.post_handshake_auth¶
Enable TLS 1.3 post-handshake client authentication. Post-handshake auth
is disabled by default and a server can only request a TLS client
certificate during the initial handshake. When enabled, a server may
request a TLS client certificate at any time after the handshake.
When enabled on client-side sockets, the client signals the server that
it supports post-handshake authentication.
When enabled on server-side sockets, SSLContext.verify_mode must
be set to CERT_OPTIONAL or CERT_REQUIRED, too. The
actual client cert exchange is delayed until
SSLSocket.verify_client_post_handshake() is called and some I/O is
performed.

Note
Only available with OpenSSL 1.1.1 and TLS 1.3 enabled. Without TLS 1.3
support, the property value is None and can’t be modified


New in version 3.7.1.




SSLContext.protocol¶
The protocol version chosen when constructing the context.  This attribute
is read-only.



SSLContext.hostname_checks_common_name¶
Whether check_hostname falls back to verify the cert’s
subject common name in the absence of a subject alternative name
extension (default: true).

Note
Only writeable with OpenSSL 1.1.0 or higher.


New in version 3.7.




SSLContext.verify_flags¶
The flags for certificate verification operations. You can set flags like
VERIFY_CRL_CHECK_LEAF by ORing them together. By default OpenSSL
does neither require nor verify certificate revocation lists (CRLs).
Available only with openssl version 0.9.8+.

New in version 3.4.


Changed in version 3.6: SSLContext.verify_flags returns VerifyFlags flags:
>>> ssl.create_default_context().verify_flags  # doctest: +SKIP
<VerifyFlags.VERIFY_X509_TRUSTED_FIRST: 32768>






SSLContext.verify_mode¶
Whether to try to verify other peers’ certificates and how to behave
if verification fails.  This attribute must be one of
CERT_NONE, CERT_OPTIONAL or CERT_REQUIRED.

Changed in version 3.6: SSLContext.verify_mode returns VerifyMode enum:
>>> ssl.create_default_context().verify_mode
<VerifyMode.CERT_REQUIRED: 2>




