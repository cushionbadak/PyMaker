link:
library/unittest.mock.html#mocking-magic-methods

docs:

Mocking Magic Methods¶
Mock supports mocking the Python protocol methods, also known as
“magic methods”. This allows mock objects to replace containers or other
objects that implement Python protocols.
Because magic methods are looked up differently from normal methods [2], this
support has been specially implemented. This means that only specific magic
methods are supported. The supported list includes almost all of them. If
there are any missing that you need please let us know.
You mock magic methods by setting the method you are interested in to a function
or a mock instance. If you are using a function then it must take self as
the first argument [3].
>>> def __str__(self):
...     return 'fooble'
...
>>> mock = Mock()
>>> mock.__str__ = __str__
>>> str(mock)
'fooble'


>>> mock = Mock()
>>> mock.__str__ = Mock()
>>> mock.__str__.return_value = 'fooble'
>>> str(mock)
'fooble'


>>> mock = Mock()
>>> mock.__iter__ = Mock(return_value=iter([]))
>>> list(mock)
[]


One use case for this is for mocking objects used as context managers in a
with statement:
>>> mock = Mock()
>>> mock.__enter__ = Mock(return_value='foo')
>>> mock.__exit__ = Mock(return_value=False)
>>> with mock as m:
...     assert m == 'foo'
...
>>> mock.__enter__.assert_called_with()
>>> mock.__exit__.assert_called_with(None, None, None)


Calls to magic methods do not appear in method_calls, but they
are recorded in mock_calls.

Note
If you use the spec keyword argument to create a mock then attempting to
set a magic method that isn’t in the spec will raise an AttributeError.

The full list of supported magic methods is:

__hash__, __sizeof__, __repr__ and __str__
__dir__, __format__ and __subclasses__
__floor__, __trunc__ and __ceil__
Comparisons: __lt__, __gt__, __le__, __ge__,
__eq__ and __ne__
Container methods: __getitem__, __setitem__, __delitem__,
__contains__, __len__, __iter__, __reversed__
and __missing__
Context manager: __enter__ and __exit__
Unary numeric methods: __neg__, __pos__ and __invert__
The numeric methods (including right hand and in-place variants):
__add__, __sub__, __mul__, __matmul__, __div__, __truediv__,
__floordiv__, __mod__, __divmod__, __lshift__,
__rshift__, __and__, __xor__, __or__, and __pow__
Numeric conversion methods: __complex__, __int__, __float__
and __index__
Descriptor methods: __get__, __set__ and __delete__
Pickling: __reduce__, __reduce_ex__, __getinitargs__,
__getnewargs__, __getstate__ and __setstate__

The following methods exist but are not supported as they are either in use
by mock, can’t be set dynamically, or can cause problems:

__getattr__, __setattr__, __init__ and __new__
__prepare__, __instancecheck__, __subclasscheck__, __del__

