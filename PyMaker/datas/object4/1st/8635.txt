link:
library/unittest.mock-examples.html#mock-patching-methods

docs:

Mock Patching MethodsÂ¶
Common uses for Mock objects include:

Patching methods
Recording method calls on objects

You might want to replace a method on an object to check that
it is called with the correct arguments by another part of the system:
>>> real = SomeClass()
>>> real.method = MagicMock(name='method')
>>> real.method(3, 4, 5, key='value')
<MagicMock name='method()' id='...'>


Once our mock has been used (real.method in this example) it has methods
and attributes that allow you to make assertions about how it has been used.

Note
In most of these examples the Mock and MagicMock classes
are interchangeable. As the MagicMock is the more capable class it makes
a sensible one to use by default.

Once the mock has been called its called attribute is set to
True. More importantly we can use the assert_called_with() or
assert_called_once_with() method to check that it was called with
the correct arguments.
This example tests that calling ProductionClass().method results in a call to
the something method:
>>> class ProductionClass:
...     def method(self):
...         self.something(1, 2, 3)
...     def something(self, a, b, c):
...         pass
...
>>> real = ProductionClass()
>>> real.something = MagicMock()
>>> real.method()
>>> real.something.assert_called_once_with(1, 2, 3)


