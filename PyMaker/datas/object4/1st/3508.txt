link:
library/logging.html#logging.Handler

docs:

<dt id="logging.Handler">
<em class="property">class </em><code class="descclassname">logging.</code><code class="descname">Handler</code><a class="headerlink" href="#logging.Handler" title="Permalink to this definition">¶</a></dt>
<dd><dl class="method">
<dt id="logging.Handler.__init__">
<code class="descname">__init__</code><span class="sig-paren">(</span><em>level=NOTSET</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.__init__" title="Permalink to this definition">¶</a></dt>
<dd><p>Initializes the <a class="reference internal" href="#logging.Handler" title="logging.Handler"><code class="xref py py-class docutils literal notranslate"><span class="pre">Handler</span></code></a> instance by setting its level, setting the list
of filters to the empty list and creating a lock (using <a class="reference internal" href="#logging.Handler.createLock" title="logging.Handler.createLock"><code class="xref py py-meth docutils literal notranslate"><span class="pre">createLock()</span></code></a>) for
serializing access to an I/O mechanism.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.createLock">
<code class="descname">createLock</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.createLock" title="Permalink to this definition">¶</a></dt>
<dd><p>Initializes a thread lock which can be used to serialize access to underlying
I/O functionality which may not be threadsafe.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.acquire">
<code class="descname">acquire</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.acquire" title="Permalink to this definition">¶</a></dt>
<dd><p>Acquires the thread lock created with <a class="reference internal" href="#logging.Handler.createLock" title="logging.Handler.createLock"><code class="xref py py-meth docutils literal notranslate"><span class="pre">createLock()</span></code></a>.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.release">
<code class="descname">release</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.release" title="Permalink to this definition">¶</a></dt>
<dd><p>Releases the thread lock acquired with <a class="reference internal" href="#logging.Handler.acquire" title="logging.Handler.acquire"><code class="xref py py-meth docutils literal notranslate"><span class="pre">acquire()</span></code></a>.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.setLevel">
<code class="descname">setLevel</code><span class="sig-paren">(</span><em>level</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.setLevel" title="Permalink to this definition">¶</a></dt>
<dd><p>Sets the threshold for this handler to <em>level</em>. Logging messages which are
less severe than <em>level</em> will be ignored. When a handler is created, the
level is set to <code class="xref py py-const docutils literal notranslate"><span class="pre">NOTSET</span></code> (which causes all messages to be
processed).</p>
<p>See <a class="reference internal" href="#levels"><span class="std std-ref">Logging Levels</span></a> for a list of levels.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>The <em>level</em> parameter now accepts a string representation of the
level such as ‘INFO’ as an alternative to the integer constants
such as <code class="xref py py-const docutils literal notranslate"><span class="pre">INFO</span></code>.</p>
</div>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.setFormatter">
<code class="descname">setFormatter</code><span class="sig-paren">(</span><em>fmt</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.setFormatter" title="Permalink to this definition">¶</a></dt>
<dd><p>Sets the <a class="reference internal" href="#logging.Formatter" title="logging.Formatter"><code class="xref py py-class docutils literal notranslate"><span class="pre">Formatter</span></code></a> for this handler to <em>fmt</em>.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.addFilter">
<code class="descname">addFilter</code><span class="sig-paren">(</span><em>filter</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.addFilter" title="Permalink to this definition">¶</a></dt>
<dd><p>Adds the specified filter <em>filter</em> to this handler.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.removeFilter">
<code class="descname">removeFilter</code><span class="sig-paren">(</span><em>filter</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.removeFilter" title="Permalink to this definition">¶</a></dt>
<dd><p>Removes the specified filter <em>filter</em> from this handler.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.filter">
<code class="descname">filter</code><span class="sig-paren">(</span><em>record</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.filter" title="Permalink to this definition">¶</a></dt>
<dd><p>Applies this handler’s filters to the record and returns a true value if the
record is to be processed. The filters are consulted in turn, until one of
them returns a false value. If none of them return a false value, the record
will be emitted. If one returns a false value, the handler will not emit the
record.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.flush">
<code class="descname">flush</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.flush" title="Permalink to this definition">¶</a></dt>
<dd><p>Ensure all logging output has been flushed. This version does nothing and is
intended to be implemented by subclasses.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.close">
<code class="descname">close</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.close" title="Permalink to this definition">¶</a></dt>
<dd><p>Tidy up any resources used by the handler. This version does no output but
removes the handler from an internal list of handlers which is closed when
<a class="reference internal" href="#logging.shutdown" title="logging.shutdown"><code class="xref py py-func docutils literal notranslate"><span class="pre">shutdown()</span></code></a> is called. Subclasses should ensure that this gets called
from overridden <a class="reference internal" href="#logging.Handler.close" title="logging.Handler.close"><code class="xref py py-meth docutils literal notranslate"><span class="pre">close()</span></code></a> methods.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.handle">
<code class="descname">handle</code><span class="sig-paren">(</span><em>record</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.handle" title="Permalink to this definition">¶</a></dt>
<dd><p>Conditionally emits the specified logging record, depending on filters which may
have been added to the handler. Wraps the actual emission of the record with
acquisition/release of the I/O thread lock.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.handleError">
<code class="descname">handleError</code><span class="sig-paren">(</span><em>record</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.handleError" title="Permalink to this definition">¶</a></dt>
<dd><p>This method should be called from handlers when an exception is encountered
during an <a class="reference internal" href="#logging.Handler.emit" title="logging.Handler.emit"><code class="xref py py-meth docutils literal notranslate"><span class="pre">emit()</span></code></a> call. If the module-level attribute
<code class="docutils literal notranslate"><span class="pre">raiseExceptions</span></code> is <code class="docutils literal notranslate"><span class="pre">False</span></code>, exceptions get silently ignored. This is
what is mostly wanted for a logging system - most users will not care about
errors in the logging system, they are more interested in application
errors. You could, however, replace this with a custom handler if you wish.
The specified record is the one which was being processed when the exception
occurred. (The default value of <code class="docutils literal notranslate"><span class="pre">raiseExceptions</span></code> is <code class="docutils literal notranslate"><span class="pre">True</span></code>, as that is
more useful during development).</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.format">
<code class="descname">format</code><span class="sig-paren">(</span><em>record</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.format" title="Permalink to this definition">¶</a></dt>
<dd><p>Do formatting for a record - if a formatter is set, use it. Otherwise, use the
default formatter for the module.</p>
</dd></dl>
<dl class="method">
<dt id="logging.Handler.emit">
<code class="descname">emit</code><span class="sig-paren">(</span><em>record</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.Handler.emit" title="Permalink to this definition">¶</a></dt>
<dd><p>Do whatever it takes to actually log the specified logging record. This version
is intended to be implemented by subclasses and so raises a
<a class="reference internal" href="exceptions.html#NotImplementedError" title="NotImplementedError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">NotImplementedError</span></code></a>.</p>
</dd></dl>
</dd>