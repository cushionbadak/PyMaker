link:
library/logging.html#logging.Handler

docs:


class logging.Handler¶


__init__(level=NOTSET)¶
Initializes the Handler instance by setting its level, setting the list
of filters to the empty list and creating a lock (using createLock()) for
serializing access to an I/O mechanism.



createLock()¶
Initializes a thread lock which can be used to serialize access to underlying
I/O functionality which may not be threadsafe.



acquire()¶
Acquires the thread lock created with createLock().



release()¶
Releases the thread lock acquired with acquire().



setLevel(level)¶
Sets the threshold for this handler to level. Logging messages which are
less severe than level will be ignored. When a handler is created, the
level is set to NOTSET (which causes all messages to be
processed).
See Logging Levels for a list of levels.

Changed in version 3.2: The level parameter now accepts a string representation of the
level such as ‘INFO’ as an alternative to the integer constants
such as INFO.




setFormatter(fmt)¶
Sets the Formatter for this handler to fmt.



addFilter(filter)¶
Adds the specified filter filter to this handler.



removeFilter(filter)¶
Removes the specified filter filter from this handler.



filter(record)¶
Applies this handler’s filters to the record and returns a true value if the
record is to be processed. The filters are consulted in turn, until one of
them returns a false value. If none of them return a false value, the record
will be emitted. If one returns a false value, the handler will not emit the
record.



flush()¶
Ensure all logging output has been flushed. This version does nothing and is
intended to be implemented by subclasses.



close()¶
Tidy up any resources used by the handler. This version does no output but
removes the handler from an internal list of handlers which is closed when
shutdown() is called. Subclasses should ensure that this gets called
from overridden close() methods.



handle(record)¶
Conditionally emits the specified logging record, depending on filters which may
have been added to the handler. Wraps the actual emission of the record with
acquisition/release of the I/O thread lock.



handleError(record)¶
This method should be called from handlers when an exception is encountered
during an emit() call. If the module-level attribute
raiseExceptions is False, exceptions get silently ignored. This is
what is mostly wanted for a logging system - most users will not care about
errors in the logging system, they are more interested in application
errors. You could, however, replace this with a custom handler if you wish.
The specified record is the one which was being processed when the exception
occurred. (The default value of raiseExceptions is True, as that is
more useful during development).



format(record)¶
Do formatting for a record - if a formatter is set, use it. Otherwise, use the
default formatter for the module.



emit(record)¶
Do whatever it takes to actually log the specified logging record. This version
is intended to be implemented by subclasses and so raises a
NotImplementedError.

