link:
library/stdtypes.html#dictionary-view-objects

docs:

Dictionary view objects¶
The objects returned by dict.keys(), dict.values() and
dict.items() are view objects.  They provide a dynamic view on the
dictionary’s entries, which means that when the dictionary changes, the view
reflects these changes.
Dictionary views can be iterated over to yield their respective data, and
support membership tests:


len(dictview)
Return the number of entries in the dictionary.



iter(dictview)
Return an iterator over the keys, values or items (represented as tuples of
(key, value)) in the dictionary.
Keys and values are iterated over in insertion order.
This allows the creation of (value, key) pairs
using zip(): pairs = zip(d.values(), d.keys()).  Another way to
create the same list is pairs = [(v, k) for (k, v) in d.items()].
Iterating views while adding or deleting entries in the dictionary may raise
a RuntimeError or fail to iterate over all entries.

Changed in version 3.7: Dictionary order is guaranteed to be insertion order.




x in dictview
Return True if x is in the underlying dictionary’s keys, values or
items (in the latter case, x should be a (key, value) tuple).

Keys views are set-like since their entries are unique and hashable.  If all
values are hashable, so that (key, value) pairs are unique and hashable,
then the items view is also set-like.  (Values views are not treated as set-like
since the entries are generally not unique.)  For set-like views, all of the
operations defined for the abstract base class collections.abc.Set are
available (for example, ==, <, or ^).
An example of dictionary view usage:
>>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}
>>> keys = dishes.keys()
>>> values = dishes.values()

>>> # iteration
>>> n = 0
>>> for val in values:
...     n += val
>>> print(n)
504

>>> # keys and values are iterated over in the same order (insertion order)
>>> list(keys)
['eggs', 'sausage', 'bacon', 'spam']
>>> list(values)
[2, 1, 1, 500]

>>> # view objects are dynamic and reflect dict changes
>>> del dishes['eggs']
>>> del dishes['sausage']
>>> list(keys)
['bacon', 'spam']

>>> # set operations
>>> keys & {'eggs', 'bacon', 'salad'}
{'bacon'}
>>> keys ^ {'sausage', 'juice'}
{'juice', 'sausage', 'bacon', 'spam'}


