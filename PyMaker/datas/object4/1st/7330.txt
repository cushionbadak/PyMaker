link:
library/xmlrpc.client.html#fault-objects

docs:

Fault Objects¶


class xmlrpc.client.Fault¶
A Fault object encapsulates the content of an XML-RPC fault tag. Fault
objects have the following attributes:


faultCode¶
A string indicating the fault type.



faultString¶
A string containing a diagnostic message associated with the fault.


In the following example we’re going to intentionally cause a Fault by
returning a complex type object.  The server code:
from xmlrpc.server import SimpleXMLRPCServer

# A marshalling error is going to occur because we're returning a
# complex number
def add(x, y):
    return x+y+0j

server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_function(add, 'add')

server.serve_forever()


The client code for the preceding server:
import xmlrpc.client

proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")
try:
    proxy.add(2, 5)
except xmlrpc.client.Fault as err:
    print("A fault occurred")
    print("Fault code: %d" % err.faultCode)
    print("Fault string: %s" % err.faultString)


