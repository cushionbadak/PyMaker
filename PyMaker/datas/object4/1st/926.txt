link:
library/readline.html#history-list

docs:

History list¶
The following functions operate on a global history list:


readline.clear_history()¶
Clear the current history.  This calls clear_history() in the
underlying library.  The Python function only exists if Python was
compiled for a version of the library that supports it.



readline.get_current_history_length()¶
Return the number of items currently in the history.  (This is different from
get_history_length(), which returns the maximum number of lines that will
be written to a history file.)



readline.get_history_item(index)¶
Return the current contents of history item at index.  The item index
is one-based.  This calls history_get() in the underlying library.



readline.remove_history_item(pos)¶
Remove history item specified by its position from the history.
The position is zero-based.  This calls remove_history() in
the underlying library.



readline.replace_history_item(pos, line)¶
Replace history item specified by its position with line.
The position is zero-based.  This calls replace_history_entry()
in the underlying library.



readline.add_history(line)¶
Append line to the history buffer, as if it was the last line typed.
This calls add_history() in the underlying library.



readline.set_auto_history(enabled)¶
Enable or disable automatic calls to add_history() when reading
input via readline.  The enabled argument should be a Boolean value
that when true, enables auto history, and that when false, disables
auto history.

New in version 3.6.


CPython implementation detail: Auto history is enabled by default, and changes to this do not persist
across multiple sessions.


