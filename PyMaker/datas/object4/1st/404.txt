link:
library/stdtypes.html#list.sort

docs:

<dt id="list.sort">
<code class="descname">sort</code><span class="sig-paren">(</span><em>*</em>, <em>key=None</em>, <em>reverse=False</em><span class="sig-paren">)</span><a class="headerlink" href="#list.sort" title="Permalink to this definition">¶</a></dt>
<dd><p>This method sorts the list in place, using only <code class="docutils literal notranslate"><span class="pre">&lt;</span></code> comparisons
between items. Exceptions are not suppressed - if any comparison operations
fail, the entire sort operation will fail (and the list will likely be left
in a partially modified state).</p>
<p><a class="reference internal" href="#list.sort" title="list.sort"><code class="xref py py-meth docutils literal notranslate"><span class="pre">sort()</span></code></a> accepts two arguments that can only be passed by keyword
(<a class="reference internal" href="../glossary.html#keyword-only-parameter"><span class="std std-ref">keyword-only arguments</span></a>):</p>
<p><em>key</em> specifies a function of one argument that is used to extract a
comparison key from each list element (for example, <code class="docutils literal notranslate"><span class="pre">key=str.lower</span></code>).
The key corresponding to each item in the list is calculated once and
then used for the entire sorting process. The default value of <code class="docutils literal notranslate"><span class="pre">None</span></code>
means that list items are sorted directly without calculating a separate
key value.</p>
<p>The <a class="reference internal" href="functools.html#functools.cmp_to_key" title="functools.cmp_to_key"><code class="xref py py-func docutils literal notranslate"><span class="pre">functools.cmp_to_key()</span></code></a> utility is available to convert a 2.x
style <em>cmp</em> function to a <em>key</em> function.</p>
<p><em>reverse</em> is a boolean value.  If set to <code class="docutils literal notranslate"><span class="pre">True</span></code>, then the list elements
are sorted as if each comparison were reversed.</p>
<p>This method modifies the sequence in place for economy of space when
sorting a large sequence.  To remind users that it operates by side
effect, it does not return the sorted sequence (use <a class="reference internal" href="functions.html#sorted" title="sorted"><code class="xref py py-func docutils literal notranslate"><span class="pre">sorted()</span></code></a> to
explicitly request a new sorted list instance).</p>
<p>The <a class="reference internal" href="#list.sort" title="list.sort"><code class="xref py py-meth docutils literal notranslate"><span class="pre">sort()</span></code></a> method is guaranteed to be stable.  A sort is stable if it
guarantees not to change the relative order of elements that compare equal
— this is helpful for sorting in multiple passes (for example, sort by
department, then by salary grade).</p>
<div class="impl-detail compound">
<p><strong>CPython implementation detail:</strong> While a list is being sorted, the effect of attempting to mutate, or even
inspect, the list is undefined.  The C implementation of Python makes the
list appear empty for the duration, and raises <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> if it can
detect that the list has been mutated during a sort.</p>
</div>
</dd>