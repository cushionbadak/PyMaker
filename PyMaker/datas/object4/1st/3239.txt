link:
library/os.html#miscellaneous-system-information

docs:

Miscellaneous System Information¶


os.confstr(name)¶
Return string-valued system configuration values. name specifies the
configuration value to retrieve; it may be a string which is the name of a
defined system value; these names are specified in a number of standards (POSIX,
Unix 95, Unix 98, and others).  Some platforms define additional names as well.
The names known to the host operating system are given as the keys of the
confstr_names dictionary.  For configuration variables not included in that
mapping, passing an integer for name is also accepted.
If the configuration value specified by name isn’t defined, None is
returned.
If name is a string and is not known, ValueError is raised.  If a
specific value for name is not supported by the host system, even if it is
included in confstr_names, an OSError is raised with
errno.EINVAL for the error number.
Availability: Unix.



os.confstr_names¶
Dictionary mapping names accepted by confstr() to the integer values
defined for those names by the host operating system. This can be used to
determine the set of names known to the system.
Availability: Unix.



os.cpu_count()¶
Return the number of CPUs in the system. Returns None if undetermined.
This number is not equivalent to the number of CPUs the current process can
use.  The number of usable CPUs can be obtained with
len(os.sched_getaffinity(0))

New in version 3.4.




os.getloadavg()¶
Return the number of processes in the system run queue averaged over the last
1, 5, and 15 minutes or raises OSError if the load average was
unobtainable.
Availability: Unix.



os.sysconf(name)¶
Return integer-valued system configuration values. If the configuration value
specified by name isn’t defined, -1 is returned.  The comments regarding
the name parameter for confstr() apply here as well; the dictionary that
provides information on the known names is given by sysconf_names.
Availability: Unix.



os.sysconf_names¶
Dictionary mapping names accepted by sysconf() to the integer values
defined for those names by the host operating system. This can be used to
determine the set of names known to the system.
Availability: Unix.

The following data values are used to support path manipulation operations.  These
are defined for all platforms.
Higher-level operations on pathnames are defined in the os.path module.


os.curdir¶
The constant string used by the operating system to refer to the current
directory. This is '.' for Windows and POSIX. Also available via
os.path.



os.pardir¶
The constant string used by the operating system to refer to the parent
directory. This is '..' for Windows and POSIX. Also available via
os.path.



os.sep¶
The character used by the operating system to separate pathname components.
This is '/' for POSIX and '\\' for Windows.  Note that knowing this
is not sufficient to be able to parse or concatenate pathnames — use
os.path.split() and os.path.join() — but it is occasionally
useful. Also available via os.path.



os.altsep¶
An alternative character used by the operating system to separate pathname
components, or None if only one separator character exists.  This is set to
'/' on Windows systems where sep is a backslash. Also available via
os.path.



os.extsep¶
The character which separates the base filename from the extension; for example,
the '.' in os.py. Also available via os.path.



os.pathsep¶
The character conventionally used by the operating system to separate search
path components (as in PATH), such as ':' for POSIX or ';' for
Windows. Also available via os.path.



os.defpath¶
The default search path used by exec*p* and
spawn*p* if the environment doesn’t have a 'PATH'
key. Also available via os.path.



os.linesep¶
The string used to separate (or, rather, terminate) lines on the current
platform.  This may be a single character, such as '\n' for POSIX, or
multiple characters, for example, '\r\n' for Windows. Do not use
os.linesep as a line terminator when writing files opened in text mode (the
default); use a single '\n' instead, on all platforms.



os.devnull¶
The file path of the null device. For example: '/dev/null' for
POSIX, 'nul' for Windows.  Also available via os.path.



os.RTLD_LAZY¶

os.RTLD_NOW¶

os.RTLD_GLOBAL¶

os.RTLD_LOCAL¶

os.RTLD_NODELETE¶

os.RTLD_NOLOAD¶

os.RTLD_DEEPBIND¶
Flags for use with the setdlopenflags() and
getdlopenflags() functions.  See the Unix manual page
dlopen(3) for what the different flags mean.

New in version 3.3.


