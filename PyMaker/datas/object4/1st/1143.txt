link:
library/datetime.html#time-objects

docs:

time Objects¶
A time object represents a (local) time of day, independent of any particular
day, and subject to adjustment via a tzinfo object.


class datetime.time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)¶
All arguments are optional.  tzinfo may be None, or an instance of a
tzinfo subclass.  The remaining arguments may be integers, in the
following ranges:

0 <= hour < 24,
0 <= minute < 60,
0 <= second < 60,
0 <= microsecond < 1000000,
fold in [0, 1].

If an argument outside those ranges is given, ValueError is raised.  All
default to 0 except tzinfo, which defaults to None.

Class attributes:


time.min¶
The earliest representable time, time(0, 0, 0, 0).



time.max¶
The latest representable time, time(23, 59, 59, 999999).



time.resolution¶
The smallest possible difference between non-equal time objects,
timedelta(microseconds=1), although note that arithmetic on
time objects is not supported.

Instance attributes (read-only):


time.hour¶
In range(24).



time.minute¶
In range(60).



time.second¶
In range(60).



time.microsecond¶
In range(1000000).



time.tzinfo¶
The object passed as the tzinfo argument to the time constructor, or
None if none was passed.



time.fold¶
In [0, 1].  Used to disambiguate wall times during a repeated interval.  (A
repeated interval occurs when clocks are rolled back at the end of daylight saving
time or when the UTC offset for the current zone is decreased for political reasons.)
The value 0 (1) represents the earlier (later) of the two moments with the same wall
time representation.

New in version 3.6.


Supported operations:

comparison of time to time, where a is considered less
than b when a precedes b in time.  If one comparand is naive and the other
is aware, TypeError is raised if an order comparison is attempted. For equality
comparisons, naive instances are never equal to aware instances.
If both comparands are aware, and have
the same tzinfo attribute, the common tzinfo attribute is
ignored and the base times are compared.  If both comparands are aware and
have different tzinfo attributes, the comparands are first adjusted by
subtracting their UTC offsets (obtained from self.utcoffset()). In order
to stop mixed-type comparisons from falling back to the default comparison by
object address, when a time object is compared to an object of a
different type, TypeError is raised unless the comparison is == or
!=.  The latter cases return False or True, respectively.

Changed in version 3.3: Equality comparisons between naive and aware time instances
don’t raise TypeError.


hash, use as dict key

efficient pickling


In boolean contexts, a time object is always considered to be true.

Changed in version 3.5: Before Python 3.5, a time object was considered to be false if it
represented midnight in UTC.  This behavior was considered obscure and
error-prone and has been removed in Python 3.5.  See bpo-13936 for full
details.

Other constructor:


classmethod time.fromisoformat(time_string)¶
Return a time corresponding to a time_string in one of the
formats emitted by time.isoformat(). Specifically, this function supports
strings in the format(s) HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]].

Caution
This does not support parsing arbitrary ISO 8601 strings - it is only intended
as the inverse operation of time.isoformat().


New in version 3.7.


Instance methods:


time.replace(hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0)¶
Return a time with the same value, except for those attributes given
new values by whichever keyword arguments are specified.  Note that
tzinfo=None can be specified to create a naive time from an
aware time, without conversion of the time data.

New in version 3.6: Added the fold argument.




time.isoformat(timespec='auto')¶
Return a string representing the time in ISO 8601 format, HH:MM:SS.ffffff or, if
microsecond is 0, HH:MM:SS If utcoffset() does not return None, a
string is appended, giving the UTC offset: HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]
or, if self.microsecond is 0, HH:MM:SS+HH:MM[:SS[.ffffff]].
The optional argument timespec specifies the number of additional
components of the time to include (the default is 'auto').
It can be one of the following:

'auto': Same as 'seconds' if microsecond is 0,
same as 'microseconds' otherwise.
'hours': Include the hour in the two-digit HH format.
'minutes': Include hour and minute in HH:MM format.
'seconds': Include hour, minute, and second
in HH:MM:SS format.
'milliseconds': Include full time, but truncate fractional second
part to milliseconds. HH:MM:SS.sss format.
'microseconds': Include full time in HH:MM:SS.ffffff format.


Note
Excluded time components are truncated, not rounded.

ValueError will be raised on an invalid timespec argument.
>>> from datetime import time
>>> time(hour=12, minute=34, second=56, microsecond=123456).isoformat(timespec='minutes')
'12:34'
>>> dt = time(hour=12, minute=34, second=56, microsecond=0)
>>> dt.isoformat(timespec='microseconds')
'12:34:56.000000'
>>> dt.isoformat(timespec='auto')
'12:34:56'



New in version 3.6: Added the timespec argument.




time.__str__()¶
For a time t, str(t) is equivalent to t.isoformat().



time.strftime(format)¶
Return a string representing the time, controlled by an explicit format
string.  For a complete list of formatting directives, see
strftime() and strptime() Behavior.



time.__format__(format)¶
Same as time.strftime(). This makes it possible to specify a format string
for a time object in formatted string
literals and when using str.format().  For a
complete list of formatting directives, see
strftime() and strptime() Behavior.



time.utcoffset()¶
If tzinfo is None, returns None, else returns
self.tzinfo.utcoffset(None), and raises an exception if the latter doesn’t
return None or a timedelta object with magnitude less than one day.

Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes.




time.dst()¶
If tzinfo is None, returns None, else returns
self.tzinfo.dst(None), and raises an exception if the latter doesn’t return
None, or a timedelta object with magnitude less than one day.

Changed in version 3.7: The DST offset is not restricted to a whole number of minutes.




time.tzname()¶
If tzinfo is None, returns None, else returns
self.tzinfo.tzname(None), or raises an exception if the latter doesn’t
return None or a string object.

Example:
>>> from datetime import time, tzinfo, timedelta
>>> class GMT1(tzinfo):
...     def utcoffset(self, dt):
...         return timedelta(hours=1)
...     def dst(self, dt):
...         return timedelta(0)
...     def tzname(self,dt):
...         return "Europe/Prague"
...
>>> t = time(12, 10, 30, tzinfo=GMT1())
>>> t                               # doctest: +ELLIPSIS
datetime.time(12, 10, 30, tzinfo=<GMT1 object at 0x...>)
>>> gmt = GMT1()
>>> t.isoformat()
'12:10:30+01:00'
>>> t.dst()
datetime.timedelta(0)
>>> t.tzname()
'Europe/Prague'
>>> t.strftime("%H:%M:%S %Z")
'12:10:30 Europe/Prague'
>>> 'The {} is {:%H:%M}.'.format("time", t)
'The time is 12:10.'


