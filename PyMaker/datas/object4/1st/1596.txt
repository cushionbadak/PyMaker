link:
library/cmath.html#conversions-to-and-from-polar-coordinates

docs:

Conversions to and from polar coordinates¶
A Python complex number z is stored internally using rectangular
or Cartesian coordinates.  It is completely determined by its real
part z.real and its imaginary part z.imag.  In other
words:
z == z.real + z.imag*1j


Polar coordinates give an alternative way to represent a complex
number.  In polar coordinates, a complex number z is defined by the
modulus r and the phase angle phi. The modulus r is the distance
from z to the origin, while the phase phi is the counterclockwise
angle, measured in radians, from the positive x-axis to the line
segment that joins the origin to z.
The following functions can be used to convert from the native
rectangular coordinates to polar coordinates and back.


cmath.phase(x)¶
Return the phase of x (also known as the argument of x), as a
float.  phase(x) is equivalent to math.atan2(x.imag,
x.real).  The result lies in the range [-π, π], and the branch
cut for this operation lies along the negative real axis,
continuous from above.  On systems with support for signed zeros
(which includes most systems in current use), this means that the
sign of the result is the same as the sign of x.imag, even when
x.imag is zero:
>>> phase(complex(-1.0, 0.0))
3.141592653589793
>>> phase(complex(-1.0, -0.0))
-3.141592653589793




Note
The modulus (absolute value) of a complex number x can be
computed using the built-in abs() function.  There is no
separate cmath module function for this operation.



cmath.polar(x)¶
Return the representation of x in polar coordinates.  Returns a
pair (r, phi) where r is the modulus of x and phi is the
phase of x.  polar(x) is equivalent to (abs(x),
phase(x)).



cmath.rect(r, phi)¶
Return the complex number x with polar coordinates r and phi.
Equivalent to r * (math.cos(phi) + math.sin(phi)*1j).

