link:
library/stdtypes.html#ranges

docs:

Ranges¶
The range type represents an immutable sequence of numbers and is
commonly used for looping a specific number of times in for
loops.


class range(stop)¶

class range(start, stop[, step])
The arguments to the range constructor must be integers (either built-in
int or any object that implements the __index__ special
method).  If the step argument is omitted, it defaults to 1.
If the start argument is omitted, it defaults to 0.
If step is zero, ValueError is raised.
For a positive step, the contents of a range r are determined by the
formula r[i] = start + step*i where i >= 0 and
r[i] < stop.
For a negative step, the contents of the range are still determined by
the formula r[i] = start + step*i, but the constraints are i >= 0
and r[i] > stop.
A range object will be empty if r[0] does not meet the value
constraint. Ranges do support negative indices, but these are interpreted
as indexing from the end of the sequence determined by the positive
indices.
Ranges containing absolute values larger than sys.maxsize are
permitted but some features (such as len()) may raise
OverflowError.
Range examples:
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> list(range(1, 11))
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> list(range(0, 30, 5))
[0, 5, 10, 15, 20, 25]
>>> list(range(0, 10, 3))
[0, 3, 6, 9]
>>> list(range(0, -10, -1))
[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
>>> list(range(0))
[]
>>> list(range(1, 0))
[]


Ranges implement all of the common sequence operations
except concatenation and repetition (due to the fact that range objects can
only represent sequences that follow a strict pattern and repetition and
concatenation will usually violate that pattern).


start¶
The value of the start parameter (or 0 if the parameter was
not supplied)



stop¶
The value of the stop parameter



step¶
The value of the step parameter (or 1 if the parameter was
not supplied)


The advantage of the range type over a regular list or
tuple is that a range object will always take the same
(small) amount of memory, no matter the size of the range it represents (as it
only stores the start, stop and step values, calculating individual
items and subranges as needed).
Range objects implement the collections.abc.Sequence ABC, and provide
features such as containment tests, element index lookup, slicing and
support for negative indices (see Sequence Types — list, tuple, range):
>>> r = range(0, 20, 2)
>>> r
range(0, 20, 2)
>>> 11 in r
False
>>> 10 in r
True
>>> r.index(10)
5
>>> r[5]
10
>>> r[:5]
range(0, 10, 2)
>>> r[-1]
18


Testing range objects for equality with == and != compares
them as sequences.  That is, two range objects are considered equal if
they represent the same sequence of values.  (Note that two range
objects that compare equal might have different start,
stop and step attributes, for example
range(0) == range(2, 1, 3) or range(0, 3, 2) == range(0, 4, 2).)

Changed in version 3.2: Implement the Sequence ABC.
Support slicing and negative indices.
Test int objects for membership in constant time instead of
iterating through all items.


Changed in version 3.3: Define ‘==’ and ‘!=’ to compare range objects based on the
sequence of values they define (instead of comparing based on
object identity).


New in version 3.3: The start, stop and step
attributes.


See also

The linspace recipe
shows how to implement a lazy version of range suitable for floating
point applications.


