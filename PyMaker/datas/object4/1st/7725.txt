link:
library/gettext.html#gettext.install

docs:

<dt id="gettext.install">
<code class="descclassname">gettext.</code><code class="descname">install</code><span class="sig-paren">(</span><em>domain</em>, <em>localedir=None</em>, <em>codeset=None</em>, <em>names=None</em><span class="sig-paren">)</span><a class="headerlink" href="#gettext.install" title="Permalink to this definition">¶</a></dt>
<dd><p>This installs the function <code class="xref py py-func docutils literal notranslate"><span class="pre">_()</span></code> in Python’s builtins namespace, based on
<em>domain</em>, <em>localedir</em>, and <em>codeset</em> which are passed to the function
<a class="reference internal" href="#gettext.translation" title="gettext.translation"><code class="xref py py-func docutils literal notranslate"><span class="pre">translation()</span></code></a>.</p>
<p>For the <em>names</em> parameter, please see the description of the translation
object’s <a class="reference internal" href="#gettext.NullTranslations.install" title="gettext.NullTranslations.install"><code class="xref py py-meth docutils literal notranslate"><span class="pre">install()</span></code></a> method.</p>
<p>As seen below, you usually mark the strings in your application that are
candidates for translation, by wrapping them in a call to the <code class="xref py py-func docutils literal notranslate"><span class="pre">_()</span></code>
function, like this:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s1">'This string will be translated.'</span><span class="p">))</span>
</pre></div>
</div>
<p>For convenience, you want the <code class="xref py py-func docutils literal notranslate"><span class="pre">_()</span></code> function to be installed in Python’s
builtins namespace, so it is easily accessible in all modules of your
application.</p>
</dd>