link:
library/codecs.html#codecs.Codec.encode

docs:

<dt id="codecs.Codec.encode">
<code class="descclassname">Codec.</code><code class="descname">encode</code><span class="sig-paren">(</span><em>input</em><span class="optional">[</span>, <em>errors</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#codecs.Codec.encode" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Encodes the object <em>input</em> and returns a tuple (output object, length consumed).
For instance, <a class="reference internal" href="../glossary.html#term-text-encoding"><span class="xref std std-term">text encoding</span></a> converts
a string object to a bytes object using a particular
character set encoding (e.g., <code class="docutils literal notranslate"><span class="pre">cp1252</span></code> or <code class="docutils literal notranslate"><span class="pre">iso-8859-1</span></code>).</p>
<p>The <em>errors</em> argument defines the error handling to apply.
It defaults to <code class="docutils literal notranslate"><span class="pre">'strict'</span></code> handling.</p>
<p>The method may not store state in the <code class="xref py py-class docutils literal notranslate"><span class="pre">Codec</span></code> instance. Use
<a class="reference internal" href="#codecs.StreamWriter" title="codecs.StreamWriter"><code class="xref py py-class docutils literal notranslate"><span class="pre">StreamWriter</span></code></a> for codecs which have to keep state in order to make
encoding efficient.</p>
<p>The encoder must be able to handle zero length input and return an empty object
of the output object type in this situation.</p>
</dd>