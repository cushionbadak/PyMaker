link:
library/pprint.html#pprint.PrettyPrinter.format

docs:

<dt id="pprint.PrettyPrinter.format">
<code class="descclassname">PrettyPrinter.</code><code class="descname">format</code><span class="sig-paren">(</span><em>object</em>, <em>context</em>, <em>maxlevels</em>, <em>level</em><span class="sig-paren">)</span><a class="headerlink" href="#pprint.PrettyPrinter.format" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Returns three values: the formatted version of <em>object</em> as a string, a flag
indicating whether the result is readable, and a flag indicating whether
recursion was detected.  The first argument is the object to be presented.  The
second is a dictionary which contains the <a class="reference internal" href="functions.html#id" title="id"><code class="xref py py-func docutils literal notranslate"><span class="pre">id()</span></code></a> of objects that are part of
the current presentation context (direct and indirect containers for <em>object</em>
that are affecting the presentation) as the keys; if an object needs to be
presented which is already represented in <em>context</em>, the third return value
should be <code class="docutils literal notranslate"><span class="pre">True</span></code>.  Recursive calls to the <a class="reference internal" href="#pprint.PrettyPrinter.format" title="pprint.PrettyPrinter.format"><code class="xref py py-meth docutils literal notranslate"><span class="pre">format()</span></code></a> method should add
additional entries for containers to this dictionary.  The third argument,
<em>maxlevels</em>, gives the requested limit to recursion; this will be <code class="docutils literal notranslate"><span class="pre">0</span></code> if there
is no requested limit.  This argument should be passed unmodified to recursive
calls. The fourth argument, <em>level</em>, gives the current level; recursive calls
should be passed a value less than that of the current call.</p>
</dd>