link:
library/base64.html#base64.a85encode

docs:

<dt id="base64.a85encode">
<code class="descclassname">base64.</code><code class="descname">a85encode</code><span class="sig-paren">(</span><em>b</em>, <em>*</em>, <em>foldspaces=False</em>, <em>wrapcol=0</em>, <em>pad=False</em>, <em>adobe=False</em><span class="sig-paren">)</span><a class="headerlink" href="#base64.a85encode" title="Permalink to this definition">¶</a></dt>
<dd><p>Encode the <a class="reference internal" href="../glossary.html#term-bytes-like-object"><span class="xref std std-term">bytes-like object</span></a> <em>b</em> using Ascii85 and return the
encoded <a class="reference internal" href="stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a>.</p>
<p><em>foldspaces</em> is an optional flag that uses the special short sequence ‘y’
instead of 4 consecutive spaces (ASCII 0x20) as supported by ‘btoa’. This
feature is not supported by the “standard” Ascii85 encoding.</p>
<p><em>wrapcol</em> controls whether the output should have newline (<code class="docutils literal notranslate"><span class="pre">b'\n'</span></code>)
characters added to it. If this is non-zero, each output line will be
at most this many characters long.</p>
<p><em>pad</em> controls whether the input is padded to a multiple of 4
before encoding. Note that the <code class="docutils literal notranslate"><span class="pre">btoa</span></code> implementation always pads.</p>
<p><em>adobe</em> controls whether the encoded byte sequence is framed with <code class="docutils literal notranslate"><span class="pre">&lt;~</span></code>
and <code class="docutils literal notranslate"><span class="pre">~&gt;</span></code>, which is used by the Adobe implementation.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.4.</span></p>
</div>
</dd>