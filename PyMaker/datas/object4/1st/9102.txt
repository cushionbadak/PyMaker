link:
library/tracemalloc.html#tracemalloc.Snapshot

docs:

<dt id="tracemalloc.Snapshot">
<em class="property">class </em><code class="descclassname">tracemalloc.</code><code class="descname">Snapshot</code><a class="headerlink" href="#tracemalloc.Snapshot" title="Permalink to this definition">¶</a></dt>
<dd><p>Snapshot of traces of memory blocks allocated by Python.</p>
<p>The <a class="reference internal" href="#tracemalloc.take_snapshot" title="tracemalloc.take_snapshot"><code class="xref py py-func docutils literal notranslate"><span class="pre">take_snapshot()</span></code></a> function creates a snapshot instance.</p>
<dl class="method">
<dt id="tracemalloc.Snapshot.compare_to">
<code class="descname">compare_to</code><span class="sig-paren">(</span><em>old_snapshot: Snapshot</em>, <em>key_type: str</em>, <em>cumulative: bool=False</em><span class="sig-paren">)</span><a class="headerlink" href="#tracemalloc.Snapshot.compare_to" title="Permalink to this definition">¶</a></dt>
<dd><p>Compute the differences with an old snapshot. Get statistics as a sorted
list of <a class="reference internal" href="#tracemalloc.StatisticDiff" title="tracemalloc.StatisticDiff"><code class="xref py py-class docutils literal notranslate"><span class="pre">StatisticDiff</span></code></a> instances grouped by <em>key_type</em>.</p>
<p>See the <a class="reference internal" href="#tracemalloc.Snapshot.statistics" title="tracemalloc.Snapshot.statistics"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Snapshot.statistics()</span></code></a> method for <em>key_type</em> and <em>cumulative</em>
parameters.</p>
<p>The result is sorted from the biggest to the smallest by: absolute value
of <a class="reference internal" href="#tracemalloc.StatisticDiff.size_diff" title="tracemalloc.StatisticDiff.size_diff"><code class="xref py py-attr docutils literal notranslate"><span class="pre">StatisticDiff.size_diff</span></code></a>, <a class="reference internal" href="#tracemalloc.StatisticDiff.size" title="tracemalloc.StatisticDiff.size"><code class="xref py py-attr docutils literal notranslate"><span class="pre">StatisticDiff.size</span></code></a>, absolute
value of <a class="reference internal" href="#tracemalloc.StatisticDiff.count_diff" title="tracemalloc.StatisticDiff.count_diff"><code class="xref py py-attr docutils literal notranslate"><span class="pre">StatisticDiff.count_diff</span></code></a>, <a class="reference internal" href="#tracemalloc.Statistic.count" title="tracemalloc.Statistic.count"><code class="xref py py-attr docutils literal notranslate"><span class="pre">Statistic.count</span></code></a> and
then by <a class="reference internal" href="#tracemalloc.StatisticDiff.traceback" title="tracemalloc.StatisticDiff.traceback"><code class="xref py py-attr docutils literal notranslate"><span class="pre">StatisticDiff.traceback</span></code></a>.</p>
</dd></dl>
<dl class="method">
<dt id="tracemalloc.Snapshot.dump">
<code class="descname">dump</code><span class="sig-paren">(</span><em>filename</em><span class="sig-paren">)</span><a class="headerlink" href="#tracemalloc.Snapshot.dump" title="Permalink to this definition">¶</a></dt>
<dd><p>Write the snapshot into a file.</p>
<p>Use <a class="reference internal" href="#tracemalloc.Snapshot.load" title="tracemalloc.Snapshot.load"><code class="xref py py-meth docutils literal notranslate"><span class="pre">load()</span></code></a> to reload the snapshot.</p>
</dd></dl>
<dl class="method">
<dt id="tracemalloc.Snapshot.filter_traces">
<code class="descname">filter_traces</code><span class="sig-paren">(</span><em>filters</em><span class="sig-paren">)</span><a class="headerlink" href="#tracemalloc.Snapshot.filter_traces" title="Permalink to this definition">¶</a></dt>
<dd><p>Create a new <a class="reference internal" href="#tracemalloc.Snapshot" title="tracemalloc.Snapshot"><code class="xref py py-class docutils literal notranslate"><span class="pre">Snapshot</span></code></a> instance with a filtered <a class="reference internal" href="#tracemalloc.Snapshot.traces" title="tracemalloc.Snapshot.traces"><code class="xref py py-attr docutils literal notranslate"><span class="pre">traces</span></code></a>
sequence, <em>filters</em> is a list of <a class="reference internal" href="#tracemalloc.DomainFilter" title="tracemalloc.DomainFilter"><code class="xref py py-class docutils literal notranslate"><span class="pre">DomainFilter</span></code></a> and
<a class="reference internal" href="#tracemalloc.Filter" title="tracemalloc.Filter"><code class="xref py py-class docutils literal notranslate"><span class="pre">Filter</span></code></a> instances.  If <em>filters</em> is an empty list, return a new
<a class="reference internal" href="#tracemalloc.Snapshot" title="tracemalloc.Snapshot"><code class="xref py py-class docutils literal notranslate"><span class="pre">Snapshot</span></code></a> instance with a copy of the traces.</p>
<p>All inclusive filters are applied at once, a trace is ignored if no
inclusive filters match it. A trace is ignored if at least one exclusive
filter matches it.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6: </span><a class="reference internal" href="#tracemalloc.DomainFilter" title="tracemalloc.DomainFilter"><code class="xref py py-class docutils literal notranslate"><span class="pre">DomainFilter</span></code></a> instances are now also accepted in <em>filters</em>.</p>
</div>
</dd></dl>
<dl class="classmethod">
<dt id="tracemalloc.Snapshot.load">
<em class="property">classmethod </em><code class="descname">load</code><span class="sig-paren">(</span><em>filename</em><span class="sig-paren">)</span><a class="headerlink" href="#tracemalloc.Snapshot.load" title="Permalink to this definition">¶</a></dt>
<dd><p>Load a snapshot from a file.</p>
<p>See also <a class="reference internal" href="#tracemalloc.Snapshot.dump" title="tracemalloc.Snapshot.dump"><code class="xref py py-meth docutils literal notranslate"><span class="pre">dump()</span></code></a>.</p>
</dd></dl>
<dl class="method">
<dt id="tracemalloc.Snapshot.statistics">
<code class="descname">statistics</code><span class="sig-paren">(</span><em>key_type: str</em>, <em>cumulative: bool=False</em><span class="sig-paren">)</span><a class="headerlink" href="#tracemalloc.Snapshot.statistics" title="Permalink to this definition">¶</a></dt>
<dd><p>Get statistics as a sorted list of <a class="reference internal" href="#tracemalloc.Statistic" title="tracemalloc.Statistic"><code class="xref py py-class docutils literal notranslate"><span class="pre">Statistic</span></code></a> instances grouped
by <em>key_type</em>:</p>
<table border="1" class="docutils">
<colgroup>
<col width="47%"/>
<col width="53%"/>
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">key_type</th>
<th class="head">description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'filename'</span></code></td>
<td>filename</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">'lineno'</span></code></td>
<td>filename and line number</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">'traceback'</span></code></td>
<td>traceback</td>
</tr>
</tbody>
</table>
<p>If <em>cumulative</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code>, cumulate size and count of memory blocks of
all frames of the traceback of a trace, not only the most recent frame.
The cumulative mode can only be used with <em>key_type</em> equals to
<code class="docutils literal notranslate"><span class="pre">'filename'</span></code> and <code class="docutils literal notranslate"><span class="pre">'lineno'</span></code>.</p>
<p>The result is sorted from the biggest to the smallest by:
<a class="reference internal" href="#tracemalloc.Statistic.size" title="tracemalloc.Statistic.size"><code class="xref py py-attr docutils literal notranslate"><span class="pre">Statistic.size</span></code></a>, <a class="reference internal" href="#tracemalloc.Statistic.count" title="tracemalloc.Statistic.count"><code class="xref py py-attr docutils literal notranslate"><span class="pre">Statistic.count</span></code></a> and then by
<a class="reference internal" href="#tracemalloc.Statistic.traceback" title="tracemalloc.Statistic.traceback"><code class="xref py py-attr docutils literal notranslate"><span class="pre">Statistic.traceback</span></code></a>.</p>
</dd></dl>
<dl class="attribute">
<dt id="tracemalloc.Snapshot.traceback_limit">
<code class="descname">traceback_limit</code><a class="headerlink" href="#tracemalloc.Snapshot.traceback_limit" title="Permalink to this definition">¶</a></dt>
<dd><p>Maximum number of frames stored in the traceback of <a class="reference internal" href="#tracemalloc.Snapshot.traces" title="tracemalloc.Snapshot.traces"><code class="xref py py-attr docutils literal notranslate"><span class="pre">traces</span></code></a>:
result of the <a class="reference internal" href="#tracemalloc.get_traceback_limit" title="tracemalloc.get_traceback_limit"><code class="xref py py-func docutils literal notranslate"><span class="pre">get_traceback_limit()</span></code></a> when the snapshot was taken.</p>
</dd></dl>
<dl class="attribute">
<dt id="tracemalloc.Snapshot.traces">
<code class="descname">traces</code><a class="headerlink" href="#tracemalloc.Snapshot.traces" title="Permalink to this definition">¶</a></dt>
<dd><p>Traces of all memory blocks allocated by Python: sequence of
<a class="reference internal" href="#tracemalloc.Trace" title="tracemalloc.Trace"><code class="xref py py-class docutils literal notranslate"><span class="pre">Trace</span></code></a> instances.</p>
<p>The sequence has an undefined order. Use the <a class="reference internal" href="#tracemalloc.Snapshot.statistics" title="tracemalloc.Snapshot.statistics"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Snapshot.statistics()</span></code></a>
method to get a sorted list of statistics.</p>
</dd></dl>
</dd>