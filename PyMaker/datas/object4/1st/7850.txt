link:
library/turtle.html#drawing-state

docs:

Drawing state¶


turtle.pendown()¶

turtle.pd()¶

turtle.down()¶
Pull the pen down – drawing when moving.



turtle.penup()¶

turtle.pu()¶

turtle.up()¶
Pull the pen up – no drawing when moving.



turtle.pensize(width=None)¶

turtle.width(width=None)¶




Parameters:width – a positive number



Set the line thickness to width or return it.  If resizemode is set to
“auto” and turtleshape is a polygon, that polygon is drawn with the same line
thickness.  If no argument is given, the current pensize is returned.
>>> turtle.pensize()
1
>>> turtle.pensize(10)   # from here on lines of width 10 are drawn





turtle.pen(pen=None, **pendict)¶




Parameters:
pen – a dictionary with some or all of the below listed keys
pendict – one or more keyword-arguments with the below listed keys as keywords





Return or set the pen’s attributes in a “pen-dictionary” with the following
key/value pairs:

“shown”: True/False
“pendown”: True/False
“pencolor”: color-string or color-tuple
“fillcolor”: color-string or color-tuple
“pensize”: positive number
“speed”: number in range 0..10
“resizemode”: “auto” or “user” or “noresize”
“stretchfactor”: (positive number, positive number)
“outline”: positive number
“tilt”: number

This dictionary can be used as argument for a subsequent call to pen()
to restore the former pen-state.  Moreover one or more of these attributes
can be provided as keyword-arguments.  This can be used to set several pen
attributes in one statement.
>>> turtle.pen(fillcolor="black", pencolor="red", pensize=10)
>>> sorted(turtle.pen().items())
[('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),
 ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),
 ('shearfactor', 0.0), ('shown', True), ('speed', 9),
 ('stretchfactor', (1.0, 1.0)), ('tilt', 0.0)]
>>> penstate=turtle.pen()
>>> turtle.color("yellow", "")
>>> turtle.penup()
>>> sorted(turtle.pen().items())[:3]
[('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow')]
>>> turtle.pen(penstate, fillcolor="green")
>>> sorted(turtle.pen().items())[:3]
[('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red')]





turtle.isdown()¶
Return True if pen is down, False if it’s up.
>>> turtle.penup()
>>> turtle.isdown()
False
>>> turtle.pendown()
>>> turtle.isdown()
True



