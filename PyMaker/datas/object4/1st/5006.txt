link:
library/socket.html#module-contents

docs:

Module contents¶
The module socket exports the following elements.

Exceptions¶


exception socket.error¶
A deprecated alias of OSError.

Changed in version 3.3: Following PEP 3151, this class was made an alias of OSError.




exception socket.herror¶
A subclass of OSError, this exception is raised for
address-related errors, i.e. for functions that use h_errno in the POSIX
C API, including gethostbyname_ex() and gethostbyaddr().
The accompanying value is a pair (h_errno, string) representing an
error returned by a library call.  h_errno is a numeric value, while
string represents the description of h_errno, as returned by the
hstrerror() C function.

Changed in version 3.3: This class was made a subclass of OSError.




exception socket.gaierror¶
A subclass of OSError, this exception is raised for
address-related errors by getaddrinfo() and getnameinfo().
The accompanying value is a pair (error, string) representing an error
returned by a library call.  string represents the description of
error, as returned by the gai_strerror() C function.  The
numeric error value will match one of the EAI_* constants
defined in this module.

Changed in version 3.3: This class was made a subclass of OSError.




exception socket.timeout¶
A subclass of OSError, this exception is raised when a timeout
occurs on a socket which has had timeouts enabled via a prior call to
settimeout() (or implicitly through
setdefaulttimeout()).  The accompanying value is a string
whose value is currently always “timed out”.

Changed in version 3.3: This class was made a subclass of OSError.




Constants¶

The AF_* and SOCK_* constants are now AddressFamily and
SocketKind IntEnum collections.

New in version 3.4.




socket.AF_UNIX¶

socket.AF_INET¶

socket.AF_INET6¶
These constants represent the address (and protocol) families, used for the
first argument to socket().  If the AF_UNIX constant is not
defined then this protocol is unsupported.  More constants may be available
depending on the system.



socket.SOCK_STREAM¶

socket.SOCK_DGRAM¶

socket.SOCK_RAW¶

socket.SOCK_RDM¶

socket.SOCK_SEQPACKET¶
These constants represent the socket types, used for the second argument to
socket().  More constants may be available depending on the system.
(Only SOCK_STREAM and SOCK_DGRAM appear to be generally
useful.)



socket.SOCK_CLOEXEC¶

socket.SOCK_NONBLOCK¶
These two constants, if defined, can be combined with the socket types and
allow you to set some flags atomically (thus avoiding possible race
conditions and the need for separate calls).

See also
Secure File Descriptor Handling
for a more thorough explanation.

Availability: Linux >= 2.6.27.

New in version 3.2.




SO_*

socket.SOMAXCONN¶

MSG_*

SOL_*

SCM_*

IPPROTO_*

IPPORT_*

INADDR_*

IP_*

IPV6_*

EAI_*

AI_*

NI_*

TCP_*
Many constants of these forms, documented in the Unix documentation on sockets
and/or the IP protocol, are also defined in the socket module. They are
generally used in arguments to the setsockopt() and getsockopt()
methods of socket objects.  In most cases, only those symbols that are defined
in the Unix header files are defined; for a few symbols, default values are
provided.

Changed in version 3.6: SO_DOMAIN, SO_PROTOCOL, SO_PEERSEC, SO_PASSSEC,
TCP_USER_TIMEOUT, TCP_CONGESTION were added.


Changed in version 3.6.5: On Windows, TCP_FASTOPEN, TCP_KEEPCNT appear if run-time Windows
supports.


Changed in version 3.7: TCP_NOTSENT_LOWAT was added.
On Windows, TCP_KEEPIDLE, TCP_KEEPINTVL appear if run-time Windows
supports.




socket.AF_CAN¶

socket.PF_CAN¶

SOL_CAN_*

CAN_*
Many constants of these forms, documented in the Linux documentation, are
also defined in the socket module.
Availability: Linux >= 2.6.25.

New in version 3.3.




socket.CAN_BCM¶

CAN_BCM_*
CAN_BCM, in the CAN protocol family, is the broadcast manager (BCM) protocol.
Broadcast manager constants, documented in the Linux documentation, are also
defined in the socket module.
Availability: Linux >= 2.6.25.

New in version 3.4.




socket.CAN_RAW_FD_FRAMES¶
Enables CAN FD support in a CAN_RAW socket. This is disabled by default.
This allows your application to send both CAN and CAN FD frames; however,
you one must accept both CAN and CAN FD frames when reading from the socket.
This constant is documented in the Linux documentation.
Availability: Linux >= 3.6.

New in version 3.5.




socket.CAN_ISOTP¶
CAN_ISOTP, in the CAN protocol family, is the ISO-TP (ISO 15765-2) protocol.
ISO-TP constants, documented in the Linux documentation.
Availability: Linux >= 2.6.25.

New in version 3.7.




socket.AF_PACKET¶

socket.PF_PACKET¶

PACKET_*
Many constants of these forms, documented in the Linux documentation, are
also defined in the socket module.
Availability: Linux >= 2.2.



socket.AF_RDS¶

socket.PF_RDS¶

socket.SOL_RDS¶

RDS_*
Many constants of these forms, documented in the Linux documentation, are
also defined in the socket module.
Availability: Linux >= 2.6.30.

New in version 3.3.




socket.SIO_RCVALL¶

socket.SIO_KEEPALIVE_VALS¶

socket.SIO_LOOPBACK_FAST_PATH¶

RCVALL_*
Constants for Windows’ WSAIoctl(). The constants are used as arguments to the
ioctl() method of socket objects.

Changed in version 3.6: SIO_LOOPBACK_FAST_PATH was added.




TIPC_*
TIPC related constants, matching the ones exported by the C socket API. See
the TIPC documentation for more information.



socket.AF_ALG¶

socket.SOL_ALG¶

ALG_*
Constants for Linux Kernel cryptography.
Availability: Linux >= 2.6.38.

New in version 3.6.




socket.AF_VSOCK¶

socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID¶

VMADDR*

SO_VM*
Constants for Linux host/guest communication.
Availability: Linux >= 4.8.

New in version 3.7.




socket.AF_LINK¶
Availability: BSD, OSX.

New in version 3.4.




socket.has_ipv6¶
This constant contains a boolean value which indicates if IPv6 is supported on
this platform.



socket.BDADDR_ANY¶

socket.BDADDR_LOCAL¶
These are string constants containing Bluetooth addresses with special
meanings. For example, BDADDR_ANY can be used to indicate
any address when specifying the binding socket with
BTPROTO_RFCOMM.



socket.HCI_FILTER¶

socket.HCI_TIME_STAMP¶

socket.HCI_DATA_DIR¶
For use with BTPROTO_HCI. HCI_FILTER is not
available for NetBSD or DragonFlyBSD. HCI_TIME_STAMP and
HCI_DATA_DIR are not available for FreeBSD, NetBSD, or
DragonFlyBSD.



Functions¶

Creating sockets¶
The following functions all create socket objects.


socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)¶
Create a new socket using the given address family, socket type and protocol
number.  The address family should be AF_INET (the default),
AF_INET6, AF_UNIX, AF_CAN, AF_PACKET,
or AF_RDS. The socket type should be SOCK_STREAM (the
default), SOCK_DGRAM, SOCK_RAW or perhaps one of the other
SOCK_ constants. The protocol number is usually zero and may be omitted
or in the case where the address family is AF_CAN the protocol
should be one of CAN_RAW, CAN_BCM or CAN_ISOTP.
If fileno is specified, the values for family, type, and proto are
auto-detected from the specified file descriptor.  Auto-detection can be
overruled by calling the function with explicit family, type, or proto
arguments.  This only affects how Python represents e.g. the return value
of socket.getpeername() but not the actual OS resource.  Unlike
socket.fromfd(), fileno will return the same socket and not a
duplicate. This may help close a detached socket using
socket.close().
The newly created socket is non-inheritable.

Changed in version 3.3: The AF_CAN family was added.
The AF_RDS family was added.


Changed in version 3.4: The CAN_BCM protocol was added.


Changed in version 3.4: The returned socket is now non-inheritable.


Changed in version 3.7: The CAN_ISOTP protocol was added.


Changed in version 3.7: When SOCK_NONBLOCK or SOCK_CLOEXEC
bit flags are applied to type they are cleared, and
socket.type will not reflect them.  They are still passed
to the underlying system socket() call.  Therefore::


sock = socket.socket(
socket.AF_INET,
socket.SOCK_STREAM | socket.SOCK_NONBLOCK)


will still create a non-blocking socket on OSes that support
SOCK_NONBLOCK, but sock.type will be set to
socket.SOCK_STREAM.




socket.socketpair([family[, type[, proto]]])¶
Build a pair of connected socket objects using the given address family, socket
type, and protocol number.  Address family, socket type, and protocol number are
as for the socket() function above. The default family is AF_UNIX
if defined on the platform; otherwise, the default is AF_INET.
The newly created sockets are non-inheritable.

Changed in version 3.2: The returned socket objects now support the whole socket API, rather
than a subset.


Changed in version 3.4: The returned sockets are now non-inheritable.


Changed in version 3.5: Windows support added.




socket.create_connection(address[, timeout[, source_address]])¶
Connect to a TCP service listening on the Internet address (a 2-tuple
(host, port)), and return the socket object.  This is a higher-level
function than socket.connect(): if host is a non-numeric hostname,
it will try to resolve it for both AF_INET and AF_INET6,
and then try to connect to all possible addresses in turn until a
connection succeeds.  This makes it easy to write clients that are
compatible to both IPv4 and IPv6.
Passing the optional timeout parameter will set the timeout on the
socket instance before attempting to connect.  If no timeout is
supplied, the global default timeout setting returned by
getdefaulttimeout() is used.
If supplied, source_address must be a 2-tuple (host, port) for the
socket to bind to as its source address before connecting.  If host or port
are ‘’ or 0 respectively the OS default behavior will be used.

Changed in version 3.2: source_address was added.




socket.fromfd(fd, family, type, proto=0)¶
Duplicate the file descriptor fd (an integer as returned by a file object’s
fileno() method) and build a socket object from the result.  Address
family, socket type and protocol number are as for the socket() function
above. The file descriptor should refer to a socket, but this is not checked —
subsequent operations on the object may fail if the file descriptor is invalid.
This function is rarely needed, but can be used to get or set socket options on
a socket passed to a program as standard input or output (such as a server
started by the Unix inet daemon).  The socket is assumed to be in blocking mode.
The newly created socket is non-inheritable.

Changed in version 3.4: The returned socket is now non-inheritable.




socket.fromshare(data)¶
Instantiate a socket from data obtained from the socket.share()
method.  The socket is assumed to be in blocking mode.
Availability: Windows.

New in version 3.3.




socket.SocketType¶
This is a Python type object that represents the socket object type. It is the
same as type(socket(...)).



Other functions¶
The socket module also offers various network-related services:


socket.close(fd)¶
Close a socket file descriptor. This is like os.close(), but for
sockets. On some platforms (most noticeable Windows) os.close()
does not work for socket file descriptors.

New in version 3.7.




socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)¶
Translate the host/port argument into a sequence of 5-tuples that contain
all the necessary arguments for creating a socket connected to that service.
host is a domain name, a string representation of an IPv4/v6 address
or None. port is a string service name such as 'http', a numeric
port number or None.  By passing None as the value of host
and port, you can pass NULL to the underlying C API.
The family, type and proto arguments can be optionally specified
in order to narrow the list of addresses returned.  Passing zero as a
value for each of these arguments selects the full range of results.
The flags argument can be one or several of the AI_* constants,
and will influence how results are computed and returned.
For example, AI_NUMERICHOST will disable domain name resolution
and will raise an error if host is a domain name.
The function returns a list of 5-tuples with the following structure:
(family, type, proto, canonname, sockaddr)
In these tuples, family, type, proto are all integers and are
meant to be passed to the socket() function.  canonname will be
a string representing the canonical name of the host if
AI_CANONNAME is part of the flags argument; else canonname
will be empty.  sockaddr is a tuple describing a socket address, whose
format depends on the returned family (a (address, port) 2-tuple for
AF_INET, a (address, port, flow info, scope id) 4-tuple for
AF_INET6), and is meant to be passed to the socket.connect()
method.
The following example fetches address information for a hypothetical TCP
connection to example.org on port 80 (results may differ on your
system if IPv6 isn’t enabled):
>>> socket.getaddrinfo("example.org", 80, proto=socket.IPPROTO_TCP)
[(<AddressFamily.AF_INET6: 10>, <SocketType.SOCK_STREAM: 1>,
 6, '', ('2606:2800:220:1:248:1893:25c8:1946', 80, 0, 0)),
 (<AddressFamily.AF_INET: 2>, <SocketType.SOCK_STREAM: 1>,
 6, '', ('93.184.216.34', 80))]



Changed in version 3.2: parameters can now be passed using keyword arguments.


Changed in version 3.7: for IPv6 multicast addresses, string representing an address will not
contain %scope part.




socket.getfqdn([name])¶
Return a fully qualified domain name for name. If name is omitted or empty,
it is interpreted as the local host.  To find the fully qualified name, the
hostname returned by gethostbyaddr() is checked, followed by aliases for the
host, if available.  The first name which includes a period is selected.  In
case no fully qualified domain name is available, the hostname as returned by
gethostname() is returned.



socket.gethostbyname(hostname)¶
Translate a host name to IPv4 address format.  The IPv4 address is returned as a
string, such as  '100.50.200.5'.  If the host name is an IPv4 address itself
it is returned unchanged.  See gethostbyname_ex() for a more complete
interface. gethostbyname() does not support IPv6 name resolution, and
getaddrinfo() should be used instead for IPv4/v6 dual stack support.



socket.gethostbyname_ex(hostname)¶
Translate a host name to IPv4 address format, extended interface. Return a
triple (hostname, aliaslist, ipaddrlist) where hostname is the primary
host name responding to the given ip_address, aliaslist is a (possibly
empty) list of alternative host names for the same address, and ipaddrlist is
a list of IPv4 addresses for the same interface on the same host (often but not
always a single address). gethostbyname_ex() does not support IPv6 name
resolution, and getaddrinfo() should be used instead for IPv4/v6 dual
stack support.



socket.gethostname()¶
Return a string containing the hostname of the machine where  the Python
interpreter is currently executing.
Note: gethostname() doesn’t always return the fully qualified domain
name; use getfqdn() for that.



socket.gethostbyaddr(ip_address)¶
Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the
primary host name responding to the given ip_address, aliaslist is a
(possibly empty) list of alternative host names for the same address, and
ipaddrlist is a list of IPv4/v6 addresses for the same interface on the same
host (most likely containing only a single address). To find the fully qualified
domain name, use the function getfqdn(). gethostbyaddr() supports
both IPv4 and IPv6.



socket.getnameinfo(sockaddr, flags)¶
Translate a socket address sockaddr into a 2-tuple (host, port). Depending
on the settings of flags, the result can contain a fully-qualified domain name
or numeric address representation in host.  Similarly, port can contain a
string port name or a numeric port number.
For IPv6 addresses, %scope is appended to the host part if sockaddr
contains meaningful scopeid. Usually this happens for multicast addresses.



socket.getprotobyname(protocolname)¶
Translate an Internet protocol name (for example, 'icmp') to a constant
suitable for passing as the (optional) third argument to the socket()
function.  This is usually only needed for sockets opened in “raw” mode
(SOCK_RAW); for the normal socket modes, the correct protocol is chosen
automatically if the protocol is omitted or zero.



socket.getservbyname(servicename[, protocolname])¶
Translate an Internet service name and protocol name to a port number for that
service.  The optional protocol name, if given, should be 'tcp' or
'udp', otherwise any protocol will match.



socket.getservbyport(port[, protocolname])¶
Translate an Internet port number and protocol name to a service name for that
service.  The optional protocol name, if given, should be 'tcp' or
'udp', otherwise any protocol will match.



socket.ntohl(x)¶
Convert 32-bit positive integers from network to host byte order.  On machines
where the host byte order is the same as network byte order, this is a no-op;
otherwise, it performs a 4-byte swap operation.



socket.ntohs(x)¶
Convert 16-bit positive integers from network to host byte order.  On machines
where the host byte order is the same as network byte order, this is a no-op;
otherwise, it performs a 2-byte swap operation.

Deprecated since version 3.7: In case x does not fit in 16-bit unsigned integer, but does fit in a
positive C int, it is silently truncated to 16-bit unsigned integer.
This silent truncation feature is deprecated, and will raise an
exception in future versions of Python.




socket.htonl(x)¶
Convert 32-bit positive integers from host to network byte order.  On machines
where the host byte order is the same as network byte order, this is a no-op;
otherwise, it performs a 4-byte swap operation.



socket.htons(x)¶
Convert 16-bit positive integers from host to network byte order.  On machines
where the host byte order is the same as network byte order, this is a no-op;
otherwise, it performs a 2-byte swap operation.

Deprecated since version 3.7: In case x does not fit in 16-bit unsigned integer, but does fit in a
positive C int, it is silently truncated to 16-bit unsigned integer.
This silent truncation feature is deprecated, and will raise an
exception in future versions of Python.




socket.inet_aton(ip_string)¶
Convert an IPv4 address from dotted-quad string format (for example,
‘123.45.67.89’) to 32-bit packed binary format, as a bytes object four characters in
length.  This is useful when conversing with a program that uses the standard C
library and needs objects of type struct in_addr, which is the C type
for the 32-bit packed binary this function returns.
inet_aton() also accepts strings with less than three dots; see the
Unix manual page inet(3) for details.
If the IPv4 address string passed to this function is invalid,
OSError will be raised. Note that exactly what is valid depends on
the underlying C implementation of inet_aton().
inet_aton() does not support IPv6, and inet_pton() should be used
instead for IPv4/v6 dual stack support.



socket.inet_ntoa(packed_ip)¶
Convert a 32-bit packed IPv4 address (a bytes-like object four
bytes in length) to its standard dotted-quad string representation (for example,
‘123.45.67.89’).  This is useful when conversing with a program that uses the
standard C library and needs objects of type struct in_addr, which
is the C type for the 32-bit packed binary data this function takes as an
argument.
If the byte sequence passed to this function is not exactly 4 bytes in
length, OSError will be raised. inet_ntoa() does not
support IPv6, and inet_ntop() should be used instead for IPv4/v6 dual
stack support.

Changed in version 3.5: Writable bytes-like object is now accepted.




socket.inet_pton(address_family, ip_string)¶
Convert an IP address from its family-specific string format to a packed,
binary format. inet_pton() is useful when a library or network protocol
calls for an object of type struct in_addr (similar to
inet_aton()) or struct in6_addr.
Supported values for address_family are currently AF_INET and
AF_INET6. If the IP address string ip_string is invalid,
OSError will be raised. Note that exactly what is valid depends on
both the value of address_family and the underlying implementation of
inet_pton().
Availability: Unix (maybe not all platforms), Windows.

Changed in version 3.4: Windows support added




socket.inet_ntop(address_family, packed_ip)¶
Convert a packed IP address (a bytes-like object of some number of
bytes) to its standard, family-specific string representation (for
example, '7.10.0.5' or '5aef:2b::8').
inet_ntop() is useful when a library or network protocol returns an
object of type struct in_addr (similar to inet_ntoa()) or
struct in6_addr.
Supported values for address_family are currently AF_INET and
AF_INET6. If the bytes object packed_ip is not the correct
length for the specified address family, ValueError will be raised.
OSError is raised for errors from the call to inet_ntop().
Availability: Unix (maybe not all platforms), Windows.

Changed in version 3.4: Windows support added


Changed in version 3.5: Writable bytes-like object is now accepted.




socket.CMSG_LEN(length)¶
Return the total length, without trailing padding, of an ancillary
data item with associated data of the given length.  This value
can often be used as the buffer size for recvmsg() to
receive a single item of ancillary data, but RFC 3542 requires
portable applications to use CMSG_SPACE() and thus include
space for padding, even when the item will be the last in the
buffer.  Raises OverflowError if length is outside the
permissible range of values.
Availability: most Unix platforms, possibly others.

New in version 3.3.




socket.CMSG_SPACE(length)¶
Return the buffer size needed for recvmsg() to
receive an ancillary data item with associated data of the given
length, along with any trailing padding.  The buffer space needed
to receive multiple items is the sum of the CMSG_SPACE()
values for their associated data lengths.  Raises
OverflowError if length is outside the permissible range
of values.
Note that some systems might support ancillary data without
providing this function.  Also note that setting the buffer size
using the results of this function may not precisely limit the
amount of ancillary data that can be received, since additional
data may be able to fit into the padding area.
Availability: most Unix platforms, possibly others.

New in version 3.3.




socket.getdefaulttimeout()¶
Return the default timeout in seconds (float) for new socket objects. A value
of None indicates that new socket objects have no timeout. When the socket
module is first imported, the default is None.



socket.setdefaulttimeout(timeout)¶
Set the default timeout in seconds (float) for new socket objects.  When
the socket module is first imported, the default is None.  See
settimeout() for possible values and their respective
meanings.



socket.sethostname(name)¶
Set the machine’s hostname to name.  This will raise an
OSError if you don’t have enough rights.
Availability: Unix.

New in version 3.3.




socket.if_nameindex()¶
Return a list of network interface information
(index int, name string) tuples.
OSError if the system call fails.
Availability: Unix.

New in version 3.3.




socket.if_nametoindex(if_name)¶
Return a network interface index number corresponding to an
interface name.
OSError if no interface with the given name exists.
Availability: Unix.

New in version 3.3.




socket.if_indextoname(if_index)¶
Return a network interface name corresponding to an
interface index number.
OSError if no interface with the given index exists.
Availability: Unix.

New in version 3.3.




