link:
library/stdtypes.html#tuple

docs:

<dt id="tuple">
<em class="property">class </em><code class="descname">tuple</code><span class="sig-paren">(</span><span class="optional">[</span><em>iterable</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#tuple" title="Permalink to this definition">¶</a></dt>
<dd><p>Tuples may be constructed in a number of ways:</p>
<ul class="simple">
<li>Using a pair of parentheses to denote the empty tuple: <code class="docutils literal notranslate"><span class="pre">()</span></code></li>
<li>Using a trailing comma for a singleton tuple: <code class="docutils literal notranslate"><span class="pre">a,</span></code> or <code class="docutils literal notranslate"><span class="pre">(a,)</span></code></li>
<li>Separating items with commas: <code class="docutils literal notranslate"><span class="pre">a,</span> <span class="pre">b,</span> <span class="pre">c</span></code> or <code class="docutils literal notranslate"><span class="pre">(a,</span> <span class="pre">b,</span> <span class="pre">c)</span></code></li>
<li>Using the <a class="reference internal" href="#tuple" title="tuple"><code class="xref py py-func docutils literal notranslate"><span class="pre">tuple()</span></code></a> built-in: <code class="docutils literal notranslate"><span class="pre">tuple()</span></code> or <code class="docutils literal notranslate"><span class="pre">tuple(iterable)</span></code></li>
</ul>
<p>The constructor builds a tuple whose items are the same and in the same
order as <em>iterable</em>’s items.  <em>iterable</em> may be either a sequence, a
container that supports iteration, or an iterator object.  If <em>iterable</em>
is already a tuple, it is returned unchanged. For example,
<code class="docutils literal notranslate"><span class="pre">tuple('abc')</span></code> returns <code class="docutils literal notranslate"><span class="pre">('a',</span> <span class="pre">'b',</span> <span class="pre">'c')</span></code> and
<code class="docutils literal notranslate"><span class="pre">tuple(</span> <span class="pre">[1,</span> <span class="pre">2,</span> <span class="pre">3]</span> <span class="pre">)</span></code> returns <code class="docutils literal notranslate"><span class="pre">(1,</span> <span class="pre">2,</span> <span class="pre">3)</span></code>.
If no argument is given, the constructor creates a new empty tuple, <code class="docutils literal notranslate"><span class="pre">()</span></code>.</p>
<p>Note that it is actually the comma which makes a tuple, not the parentheses.
The parentheses are optional, except in the empty tuple case, or
when they are needed to avoid syntactic ambiguity. For example,
<code class="docutils literal notranslate"><span class="pre">f(a,</span> <span class="pre">b,</span> <span class="pre">c)</span></code> is a function call with three arguments, while
<code class="docutils literal notranslate"><span class="pre">f((a,</span> <span class="pre">b,</span> <span class="pre">c))</span></code> is a function call with a 3-tuple as the sole argument.</p>
<p>Tuples implement all of the <a class="reference internal" href="#typesseq-common"><span class="std std-ref">common</span></a> sequence
operations.</p>
</dd>