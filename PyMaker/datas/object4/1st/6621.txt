link:
library/urllib.request.html#urllib.request.Request

docs:


class urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)¶
This class is an abstraction of a URL request.
url should be a string containing a valid URL.
data must be an object specifying additional data to send to the
server, or None if no such data is needed.  Currently HTTP
requests are the only ones that use data.  The supported object
types include bytes, file-like objects, and iterables.  If no
Content-Length nor Transfer-Encoding header field
has been provided, HTTPHandler will set these headers according
to the type of data.  Content-Length will be used to send
bytes objects, while Transfer-Encoding: chunked as specified in
RFC 7230, Section 3.3.1 will be used to send files and other iterables.
For an HTTP POST request method, data should be a buffer in the
standard application/x-www-form-urlencoded format.  The
urllib.parse.urlencode() function takes a mapping or sequence
of 2-tuples and returns an ASCII string in this format. It should
be encoded to bytes before being used as the data parameter.
headers should be a dictionary, and will be treated as if
add_header() was called with each key and value as arguments.
This is often used to “spoof” the User-Agent header value, which is
used by a browser to identify itself – some HTTP servers only
allow requests coming from common browsers as opposed to scripts.
For example, Mozilla Firefox may identify itself as "Mozilla/5.0
(X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11", while
urllib’s default user agent string is
"Python-urllib/2.6" (on Python 2.6).
An appropriate Content-Type header should be included if the data
argument is present.  If this header has not been provided and data
is not None, Content-Type: application/x-www-form-urlencoded will
be added as a default.
The final two arguments are only of interest for correct handling
of third-party HTTP cookies:
origin_req_host should be the request-host of the origin
transaction, as defined by RFC 2965.  It defaults to
http.cookiejar.request_host(self).  This is the host name or IP
address of the original request that was initiated by the user.
For example, if the request is for an image in an HTML document,
this should be the request-host of the request for the page
containing the image.
unverifiable should indicate whether the request is unverifiable,
as defined by RFC 2965.  It defaults to False.  An unverifiable
request is one whose URL the user did not have the option to
approve.  For example, if the request is for an image in an HTML
document, and the user had no option to approve the automatic
fetching of the image, this should be true.
method should be a string that indicates the HTTP request method that
will be used (e.g. 'HEAD').  If provided, its value is stored in the
method attribute and is used by get_method().
The default is 'GET' if data is None or 'POST' otherwise.
Subclasses may indicate a different default method by setting the
method attribute in the class itself.

Note
The request will not work as expected if the data object is unable
to deliver its content more than once (e.g. a file or an iterable
that can produce the content only once) and the request is retried
for HTTP redirects or authentication.  The data is sent to the
HTTP server right away after the headers.  There is no support for
a 100-continue expectation in the library.


Changed in version 3.3: Request.method argument is added to the Request class.


Changed in version 3.4: Default Request.method may be indicated at the class level.


Changed in version 3.6: Do not raise an error if the Content-Length has not been
provided and data is neither None nor a bytes object.
Fall back to use chunked transfer encoding instead.

