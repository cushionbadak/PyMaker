link:
library/unittest.mock-examples.html#mocking-classes

docs:

Mocking Classes¶
A common use case is to mock out classes instantiated by your code under test.
When you patch a class, then that class is replaced with a mock. Instances
are created by calling the class. This means you access the “mock instance”
by looking at the return value of the mocked class.
In the example below we have a function some_function that instantiates Foo
and calls a method on it. The call to patch() replaces the class Foo with a
mock. The Foo instance is the result of calling the mock, so it is configured
by modifying the mock return_value.
>>> def some_function():
...     instance = module.Foo()
...     return instance.method()
...
>>> with patch('module.Foo') as mock:
...     instance = mock.return_value
...     instance.method.return_value = 'the result'
...     result = some_function()
...     assert result == 'the result'


