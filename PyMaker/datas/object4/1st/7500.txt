link:
library/ipaddress.html#other-module-level-functions

docs:

Other Module Level Functions¶
The module also provides the following module level functions:


ipaddress.v4_int_to_packed(address)¶
Represent an address as 4 packed bytes in network (big-endian) order.
address is an integer representation of an IPv4 IP address.  A
ValueError is raised if the integer is negative or too large to be an
IPv4 IP address.
>>> ipaddress.ip_address(3221225985)
IPv4Address('192.0.2.1')
>>> ipaddress.v4_int_to_packed(3221225985)
b'\xc0\x00\x02\x01'





ipaddress.v6_int_to_packed(address)¶
Represent an address as 16 packed bytes in network (big-endian) order.
address is an integer representation of an IPv6 IP address.  A
ValueError is raised if the integer is negative or too large to be an
IPv6 IP address.



ipaddress.summarize_address_range(first, last)¶
Return an iterator of the summarized network range given the first and last
IP addresses.  first is the first IPv4Address or
IPv6Address in the range and last is the last IPv4Address
or IPv6Address in the range.  A TypeError is raised if
first or last are not IP addresses or are not of the same version.  A
ValueError is raised if last is not greater than first or if
first address version is not 4 or 6.
>>> [ipaddr for ipaddr in ipaddress.summarize_address_range(
...    ipaddress.IPv4Address('192.0.2.0'),
...    ipaddress.IPv4Address('192.0.2.130'))]
[IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/31'), IPv4Network('192.0.2.130/32')]





ipaddress.collapse_addresses(addresses)¶
Return an iterator of the collapsed IPv4Network or
IPv6Network objects.  addresses is an iterator of
IPv4Network or IPv6Network objects.  A TypeError is
raised if addresses contains mixed version objects.
>>> [ipaddr for ipaddr in
... ipaddress.collapse_addresses([ipaddress.IPv4Network('192.0.2.0/25'),
... ipaddress.IPv4Network('192.0.2.128/25')])]
[IPv4Network('192.0.2.0/24')]





ipaddress.get_mixed_type_key(obj)¶
Return a key suitable for sorting between networks and addresses.  Address
and Network objects are not sortable by default; they’re fundamentally
different, so the expression:
IPv4Address('192.0.2.0') <= IPv4Network('192.0.2.0/24')


doesn’t make sense.  There are some times however, where you may wish to
have ipaddress sort these anyway.  If you need to do this, you can use
this function as the key argument to sorted().
obj is either a network or address object.

