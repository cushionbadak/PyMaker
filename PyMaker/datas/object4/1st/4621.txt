link:
library/asyncio-task.html#asyncio.wait

docs:


coroutine asyncio.wait(aws, *, loop=None, timeout=None, return_when=ALL_COMPLETED)¶
Run awaitable objects in the aws
set concurrently and block until the condition specified
by return_when.
If any awaitable in aws is a coroutine, it is automatically
scheduled as a Task.  Passing coroutines objects to
wait() directly is deprecated as it leads to
confusing behavior.
Returns two sets of Tasks/Futures: (done, pending).
Usage:
done, pending = await asyncio.wait(aws)


The loop argument is deprecated and scheduled for removal
in Python 3.10.
timeout (a float or int), if specified, can be used to control
the maximum number of seconds to wait before returning.
Note that this function does not raise asyncio.TimeoutError.
Futures or Tasks that aren’t done when the timeout occurs are simply
returned in the second set.
return_when indicates when this function should return.  It must
be one of the following constants:






Constant
Description



FIRST_COMPLETED
The function will return when any
future finishes or is cancelled.

FIRST_EXCEPTION
The function will return when any
future finishes by raising an
exception.  If no future raises an
exception then it is equivalent to
ALL_COMPLETED.

ALL_COMPLETED
The function will return when all
futures finish or are cancelled.



Unlike wait_for(), wait() does not cancel the
futures when a timeout occurs.

Note
wait() schedules coroutines as Tasks automatically and later
returns those implicitly created Task objects in (done, pending)
sets.  Therefore the following code won’t work as expected:
async def foo():
    return 42

coro = foo()
done, pending = await asyncio.wait({coro})

if coro in done:
    # This branch will never be run!


Here is how the above snippet can be fixed:
async def foo():
    return 42

task = asyncio.create_task(foo())
done, pending = await asyncio.wait({task})

if task in done:
    # Everything will work as expected now.


Passing coroutine objects to wait() directly is
deprecated.

