link:
library/asyncio-eventloop.html#asyncio.loop.call_later

docs:

<dt id="asyncio.loop.call_later">
<code class="descclassname">loop.</code><code class="descname">call_later</code><span class="sig-paren">(</span><em>delay</em>, <em>callback</em>, <em>*args</em>, <em>context=None</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.loop.call_later" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Schedule <em>callback</em> to be called after the given <em>delay</em>
number of seconds (can be either an int or a float).</p>
<p>An instance of <a class="reference internal" href="#asyncio.TimerHandle" title="asyncio.TimerHandle"><code class="xref py py-class docutils literal notranslate"><span class="pre">asyncio.TimerHandle</span></code></a> is returned which can
be used to cancel the callback.</p>
<p><em>callback</em> will be called exactly once.  If two callbacks are
scheduled for exactly the same time, the order in which they
are called is undefined.</p>
<p>The optional positional <em>args</em> will be passed to the callback when
it is called. If you want the callback to be called with keyword
arguments use <a class="reference internal" href="functools.html#functools.partial" title="functools.partial"><code class="xref py py-func docutils literal notranslate"><span class="pre">functools.partial()</span></code></a>.</p>
<p>An optional keyword-only <em>context</em> argument allows specifying a
custom <a class="reference internal" href="contextvars.html#contextvars.Context" title="contextvars.Context"><code class="xref py py-class docutils literal notranslate"><span class="pre">contextvars.Context</span></code></a> for the <em>callback</em> to run in.
The current context is used when no <em>context</em> is provided.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span>The <em>context</em> keyword-only parameter was added. See <span class="target" id="index-1"></span><a class="pep reference external" href="https://www.python.org/dev/peps/pep-0567"><strong>PEP 567</strong></a>
for more details.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7.1: </span>In Python 3.7.0 and earlier with the default event loop implementation,
the <em>delay</em> could not exceed one day.
This has been fixed in Python 3.7.1.</p>
</div>
</dd>