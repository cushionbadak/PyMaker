link:
library/pickletools.html#command-line-usage

docs:

Command line usage¶

New in version 3.2.

When invoked from the command line, python -m pickletools will
disassemble the contents of one or more pickle files.  Note that if
you want to see the Python object stored in the pickle rather than the
details of pickle format, you may want to use -m pickle instead.
However, when the pickle file that you want to examine comes from an
untrusted source, -m pickletools is a safer option because it does
not execute pickle bytecode.
For example, with a tuple (1, 2) pickled in file x.pickle:
$ python -m pickle x.pickle
(1, 2)

$ python -m pickletools x.pickle
    0: \x80 PROTO      3
    2: K    BININT1    1
    4: K    BININT1    2
    6: \x86 TUPLE2
    7: q    BINPUT     0
    9: .    STOP
highest protocol among opcodes = 2



Command line options¶


-a, --annotate¶
Annotate each line with a short opcode description.



-o, --output=<file>¶
Name of a file where the output should be written.



-l, --indentlevel=<num>¶
The number of blanks by which to indent a new MARK level.



-m, --memo¶
When multiple objects are disassembled, preserve memo between
disassemblies.



-p, --preamble=<preamble>¶
When more than one pickle file are specified, print given preamble
before each disassembly.


