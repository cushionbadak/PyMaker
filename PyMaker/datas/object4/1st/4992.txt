link:
library/asyncio-llapi-index.html#transports

docs:

TransportsÂ¶
All transports implement the following methods:






transport.close()
Close the transport.

transport.is_closing()
Return True if the transport is closing or is closed.

transport.get_extra_info()
Request for information about the transport.

transport.set_protocol()
Set a new protocol.

transport.get_protocol()
Return the current protocol.



Transports that can receive data (TCP and Unix connections,
pipes, etc).  Returned from methods like
loop.create_connection(), loop.create_unix_connection(),
loop.connect_read_pipe(), etc:
Read Transports






transport.is_reading()
Return True if the transport is receiving.

transport.pause_reading()
Pause receiving.

transport.resume_reading()
Resume receiving.



Transports that can Send data (TCP and Unix connections,
pipes, etc).  Returned from methods like
loop.create_connection(), loop.create_unix_connection(),
loop.connect_write_pipe(), etc:
Write Transports






transport.write()
Write data to the transport.

transport.writelines()
Write buffers to the transport.

transport.can_write_eof()
Return True if the transport supports sending EOF.

transport.write_eof()
Close and send EOF after flushing buffered data.

transport.abort()
Close the transport immediately.

transport.get_write_buffer_size()
Return high and low water marks for write flow control.

transport.set_write_buffer_limits()
Set new high and low water marks for write flow control.



Transports returned by loop.create_datagram_endpoint():
Datagram Transports






transport.sendto()
Send data to the remote peer.

transport.abort()
Close the transport immediately.



Low-level transport abstraction over subprocesses.
Returned by loop.subprocess_exec() and
loop.subprocess_shell():
Subprocess Transports






transport.get_pid()
Return the subprocess process id.

transport.get_pipe_transport()
Return the transport for the requested communication pipe
(stdin, stdout, or stderr).

transport.get_returncode()
Return the subprocess return code.

transport.kill()
Kill the subprocess.

transport.send_signal()
Send a signal to the subprocess.

transport.terminate()
Stop the subprocess.

transport.close()
Kill the subprocess and close all pipes.



