link:
library/uuid.html#uuid.UUID

docs:


class uuid.UUID(hex=None, bytes=None, bytes_le=None, fields=None, int=None, version=None, *, is_safe=SafeUUID.unknown)Â¶
Create a UUID from either a string of 32 hexadecimal digits, a string of 16
bytes in big-endian order as the bytes argument, a string of 16 bytes in
little-endian order as the bytes_le argument, a tuple of six integers
(32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as the
fields argument, or a single 128-bit integer as the int argument.
When a string of hex digits is given, curly braces, hyphens,
and a URN prefix are all optional.  For example, these
expressions all yield the same UUID:
UUID('{12345678-1234-5678-1234-567812345678}')
UUID('12345678123456781234567812345678')
UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
UUID(bytes=b'\x12\x34\x56\x78'*4)
UUID(bytes_le=b'\x78\x56\x34\x12\x34\x12\x78\x56' +
              b'\x12\x34\x56\x78\x12\x34\x56\x78')
UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
UUID(int=0x12345678123456781234567812345678)


Exactly one of hex, bytes, bytes_le, fields, or int must be given.
The version argument is optional; if given, the resulting UUID will have its
variant and version number set according to RFC 4122, overriding bits in the
given hex, bytes, bytes_le, fields, or int.
Comparison of UUID objects are made by way of comparing their
UUID.int attributes.  Comparison with a non-UUID object
raises a TypeError.
str(uuid) returns a string in the form
12345678-1234-5678-1234-567812345678 where the 32 hexadecimal digits
represent the UUID.
