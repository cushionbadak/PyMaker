link:
library/struct.html#functions-and-exceptions

docs:

Functions and Exceptions¶
The module defines the following exception and functions:


exception struct.error¶
Exception raised on various occasions; argument is a string describing what
is wrong.



struct.pack(format, v1, v2, ...)¶
Return a bytes object containing the values v1, v2, … packed according
to the format string format.  The arguments must match the values required by
the format exactly.



struct.pack_into(format, buffer, offset, v1, v2, ...)¶
Pack the values v1, v2, … according to the format string format and
write the packed bytes into the writable buffer buffer starting at
position offset.  Note that offset is a required argument.



struct.unpack(format, buffer)¶
Unpack from the buffer buffer (presumably packed by pack(format, ...))
according to the format string format.  The result is a tuple even if it
contains exactly one item.  The buffer’s size in bytes must match the
size required by the format, as reflected by calcsize().



struct.unpack_from(format, buffer, offset=0)¶
Unpack from buffer starting at position offset, according to the format
string format.  The result is a tuple even if it contains exactly one
item.  The buffer’s size in bytes, minus offset, must be at least
the size required by the format, as reflected by calcsize().



struct.iter_unpack(format, buffer)¶
Iteratively unpack from the buffer buffer according to the format
string format.  This function returns an iterator which will read
equally-sized chunks from the buffer until all its contents have been
consumed.  The buffer’s size in bytes must be a multiple of the size
required by the format, as reflected by calcsize().
Each iteration yields a tuple as specified by the format string.

New in version 3.4.




struct.calcsize(format)¶
Return the size of the struct (and hence of the bytes object produced by
pack(format, ...)) corresponding to the format string format.

