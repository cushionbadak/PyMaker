link:
library/email.header.html#email.header.make_header

docs:

<dt id="email.header.make_header">
<code class="descclassname">email.header.</code><code class="descname">make_header</code><span class="sig-paren">(</span><em>decoded_seq</em>, <em>maxlinelen=None</em>, <em>header_name=None</em>, <em>continuation_ws=' '</em><span class="sig-paren">)</span><a class="headerlink" href="#email.header.make_header" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Create a <a class="reference internal" href="#email.header.Header" title="email.header.Header"><code class="xref py py-class docutils literal notranslate"><span class="pre">Header</span></code></a> instance from a sequence of pairs as returned by
<a class="reference internal" href="#email.header.decode_header" title="email.header.decode_header"><code class="xref py py-func docutils literal notranslate"><span class="pre">decode_header()</span></code></a>.</p>
<p><a class="reference internal" href="#email.header.decode_header" title="email.header.decode_header"><code class="xref py py-func docutils literal notranslate"><span class="pre">decode_header()</span></code></a> takes a header value string and returns a sequence of
pairs of the format <code class="docutils literal notranslate"><span class="pre">(decoded_string,</span> <span class="pre">charset)</span></code> where <em>charset</em> is the name of
the character set.</p>
<p>This function takes one of those sequence of pairs and returns a
<a class="reference internal" href="#email.header.Header" title="email.header.Header"><code class="xref py py-class docutils literal notranslate"><span class="pre">Header</span></code></a> instance.  Optional <em>maxlinelen</em>, <em>header_name</em>, and
<em>continuation_ws</em> are as in the <a class="reference internal" href="#email.header.Header" title="email.header.Header"><code class="xref py py-class docutils literal notranslate"><span class="pre">Header</span></code></a> constructor.</p>
</dd>