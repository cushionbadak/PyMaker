link:
library/unittest.mock.html#call

docs:

call¶


unittest.mock.call(*args, **kwargs)¶
call() is a helper object for making simpler assertions, for comparing with
call_args, call_args_list,
mock_calls and method_calls. call() can also be
used with assert_has_calls().
>>> m = MagicMock(return_value=None)
>>> m(1, 2, a='foo', b='bar')
>>> m()
>>> m.call_args_list == [call(1, 2, a='foo', b='bar'), call()]
True





call.call_list()¶
For a call object that represents multiple calls, call_list()
returns a list of all the intermediate calls as well as the
final call.

call_list is particularly useful for making assertions on “chained calls”. A
chained call is multiple calls on a single line of code. This results in
multiple entries in mock_calls on a mock. Manually constructing
the sequence of calls can be tedious.
call_list() can construct the sequence of calls from the same
chained call:
>>> m = MagicMock()
>>> m(1).method(arg='foo').other('bar')(2.0)
<MagicMock name='mock().method().other()()' id='...'>
>>> kall = call(1).method(arg='foo').other('bar')(2.0)
>>> kall.call_list()
[call(1),
 call().method(arg='foo'),
 call().method().other('bar'),
 call().method().other()(2.0)]
>>> m.mock_calls == kall.call_list()
True


A call object is either a tuple of (positional args, keyword args) or
(name, positional args, keyword args) depending on how it was constructed. When
you construct them yourself this isn’t particularly interesting, but the call
objects that are in the Mock.call_args, Mock.call_args_list and
Mock.mock_calls attributes can be introspected to get at the individual
arguments they contain.
The call objects in Mock.call_args and Mock.call_args_list
are two-tuples of (positional args, keyword args) whereas the call objects
in Mock.mock_calls, along with ones you construct yourself, are
three-tuples of (name, positional args, keyword args).
You can use their “tupleness” to pull out the individual arguments for more
complex introspection and assertions. The positional arguments are a tuple
(an empty tuple if there are no positional arguments) and the keyword
arguments are a dictionary:
>>> m = MagicMock(return_value=None)
>>> m(1, 2, 3, arg='one', arg2='two')
>>> kall = m.call_args
>>> args, kwargs = kall
>>> args
(1, 2, 3)
>>> kwargs
{'arg2': 'two', 'arg': 'one'}
>>> args is kall[0]
True
>>> kwargs is kall[1]
True


>>> m = MagicMock()
>>> m.foo(4, 5, 6, arg='two', arg2='three')
<MagicMock name='mock.foo()' id='...'>
>>> kall = m.mock_calls[0]
>>> name, args, kwargs = kall
>>> name
'foo'
>>> args
(4, 5, 6)
>>> kwargs
{'arg2': 'three', 'arg': 'two'}
>>> name is m.mock_calls[0][0]
True


