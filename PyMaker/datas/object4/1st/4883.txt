link:
library/asyncio-protocol.html#asyncio.Transport

docs:

<dt id="asyncio.Transport">
<em class="property">class </em><code class="descclassname">asyncio.</code><code class="descname">Transport</code><span class="sig-paren">(</span><em>WriteTransport</em>, <em>ReadTransport</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.Transport" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Interface representing a bidirectional transport, such as a
TCP connection.</p>
<p>The user does not instantiate a transport directly; they call a
utility function, passing it a protocol factory and other
information necessary to create the transport and protocol.</p>
<p>Instances of the <em>Transport</em> class are returned from or used by
event loop methods like <a class="reference internal" href="asyncio-eventloop.html#asyncio.loop.create_connection" title="asyncio.loop.create_connection"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.create_connection()</span></code></a>,
<a class="reference internal" href="asyncio-eventloop.html#asyncio.loop.create_unix_connection" title="asyncio.loop.create_unix_connection"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.create_unix_connection()</span></code></a>,
<a class="reference internal" href="asyncio-eventloop.html#asyncio.loop.create_server" title="asyncio.loop.create_server"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.create_server()</span></code></a>, <a class="reference internal" href="asyncio-eventloop.html#asyncio.loop.sendfile" title="asyncio.loop.sendfile"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.sendfile()</span></code></a>, etc.</p>
</dd>