link:
library/logging.handlers.html#httphandler

docs:

HTTPHandler¶
The HTTPHandler class, located in the logging.handlers module,
supports sending logging messages to a Web server, using either GET or
POST semantics.


class logging.handlers.HTTPHandler(host, url, method='GET', secure=False, credentials=None, context=None)¶
Returns a new instance of the HTTPHandler class. The host can be
of the form host:port, should you need to use a specific port number.  If
no method is specified, GET is used. If secure is true, a HTTPS
connection will be used. The context parameter may be set to a
ssl.SSLContext instance to configure the SSL settings used for the
HTTPS connection. If credentials is specified, it should be a 2-tuple
consisting of userid and password, which will be placed in a HTTP
‘Authorization’ header using Basic authentication. If you specify
credentials, you should also specify secure=True so that your userid and
password are not passed in cleartext across the wire.

Changed in version 3.5: The context parameter was added.



mapLogRecord(record)¶
Provides a dictionary, based on record, which is to be URL-encoded
and sent to the web server. The default implementation just returns
record.__dict__. This method can be overridden if e.g. only a
subset of LogRecord is to be sent to the web server, or
if more specific customization of what’s sent to the server is required.



emit(record)¶
Sends the record to the Web server as a URL-encoded dictionary. The
mapLogRecord() method is used to convert the record to the
dictionary to be sent.


Note
Since preparing a record for sending it to a Web server is not
the same as a generic formatting operation, using
setFormatter() to specify a
Formatter for a HTTPHandler has no effect.
Instead of calling format(), this handler calls
mapLogRecord() and then urllib.parse.urlencode() to encode the
dictionary in a form suitable for sending to a Web server.


