link:
library/sys.html#sys.setprofile

docs:

<dt id="sys.setprofile">
<code class="descclassname">sys.</code><code class="descname">setprofile</code><span class="sig-paren">(</span><em>profilefunc</em><span class="sig-paren">)</span><a class="headerlink" href="#sys.setprofile" title="Permalink to this definition">¶</a></dt>
<dd><p id="index-24">Set the system’s profile function, which allows you to implement a Python source
code profiler in Python.  See chapter <a class="reference internal" href="profile.html#profile"><span class="std std-ref">The Python Profilers</span></a> for more information on the
Python profiler.  The system’s profile function is called similarly to the
system’s trace function (see <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a>), but it is called with different events,
for example it isn’t called for each executed line of code (only on call and return,
but the return event is reported even when an exception has been set). The function is
thread-specific, but there is no way for the profiler to know about context switches between
threads, so it does not make sense to use this in the presence of multiple threads. Also,
its return value is not used, so it can simply return <code class="docutils literal notranslate"><span class="pre">None</span></code>.  Error in the profile
function will cause itself unset.</p>
<p>Profile functions should have three arguments: <em>frame</em>, <em>event</em>, and
<em>arg</em>. <em>frame</em> is the current stack frame.  <em>event</em> is a string: <code class="docutils literal notranslate"><span class="pre">'call'</span></code>,
<code class="docutils literal notranslate"><span class="pre">'return'</span></code>, <code class="docutils literal notranslate"><span class="pre">'c_call'</span></code>, <code class="docutils literal notranslate"><span class="pre">'c_return'</span></code>, or <code class="docutils literal notranslate"><span class="pre">'c_exception'</span></code>. <em>arg</em> depends
on the event type.</p>
<p>The events have the following meaning:</p>
<dl class="docutils">
<dt><code class="docutils literal notranslate"><span class="pre">'call'</span></code></dt>
<dd>A function is called (or some other code block entered).  The
profile function is called; <em>arg</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code>.</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'return'</span></code></dt>
<dd>A function (or other code block) is about to return.  The profile
function is called; <em>arg</em> is the value that will be returned, or <code class="docutils literal notranslate"><span class="pre">None</span></code>
if the event is caused by an exception being raised.</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'c_call'</span></code></dt>
<dd>A C function is about to be called.  This may be an extension function or
a built-in.  <em>arg</em> is the C function object.</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'c_return'</span></code></dt>
<dd>A C function has returned. <em>arg</em> is the C function object.</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'c_exception'</span></code></dt>
<dd>A C function has raised an exception.  <em>arg</em> is the C function object.</dd>
</dl>
</dd>