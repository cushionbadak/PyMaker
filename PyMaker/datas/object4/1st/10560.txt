link:
library/optparse.html#querying-and-manipulating-your-option-parser

docs:

Querying and manipulating your option parser¶
The default behavior of the option parser can be customized slightly, and you
can also poke around your option parser and see what’s there.  OptionParser
provides several methods to help you out:


OptionParser.disable_interspersed_args()¶
Set parsing to stop on the first non-option.  For example, if -a and
-b are both simple options that take no arguments, optparse
normally accepts this syntax:
prog -a arg1 -b arg2


and treats it as equivalent to
prog -a -b arg1 arg2


To disable this feature, call disable_interspersed_args().  This
restores traditional Unix syntax, where option parsing stops with the first
non-option argument.
Use this if you have a command processor which runs another command which has
options of its own and you want to make sure these options don’t get
confused.  For example, each command might have a different set of options.



OptionParser.enable_interspersed_args()¶
Set parsing to not stop on the first non-option, allowing interspersing
switches with command arguments.  This is the default behavior.



OptionParser.get_option(opt_str)¶
Returns the Option instance with the option string opt_str, or None if
no options have that option string.



OptionParser.has_option(opt_str)¶
Return true if the OptionParser has an option with option string opt_str
(e.g., -q or --verbose).



OptionParser.remove_option(opt_str)¶
If the OptionParser has an option corresponding to opt_str, that
option is removed.  If that option provided any other option strings, all of
those option strings become invalid. If opt_str does not occur in any
option belonging to this OptionParser, raises ValueError.

