link:
library/os.html#random-numbers

docs:

Random numbers¶


os.getrandom(size, flags=0)¶
Get up to size random bytes. The function can return less bytes than
requested.
These bytes can be used to seed user-space random number generators or for
cryptographic purposes.
getrandom() relies on entropy gathered from device drivers and other
sources of environmental noise. Unnecessarily reading large quantities of
data will have a negative impact on  other users  of the /dev/random and
/dev/urandom devices.
The flags argument is a bit mask that can contain zero or more of the
following values ORed together: os.GRND_RANDOM and
GRND_NONBLOCK.
See also the Linux getrandom() manual page.
Availability: Linux 3.17 and newer.

New in version 3.6.




os.urandom(size)¶
Return a string of size random bytes suitable for cryptographic use.
This function returns random bytes from an OS-specific randomness source.  The
returned data should be unpredictable enough for cryptographic applications,
though its exact quality depends on the OS implementation.
On Linux, if the getrandom() syscall is available, it is used in
blocking mode: block until the system urandom entropy pool is initialized
(128 bits of entropy are collected by the kernel). See the PEP 524 for
the rationale. On Linux, the getrandom() function can be used to get
random bytes in non-blocking mode (using the GRND_NONBLOCK flag) or
to poll until the system urandom entropy pool is initialized.
On a Unix-like system, random bytes are read from the /dev/urandom
device. If the /dev/urandom device is not available or not readable, the
NotImplementedError exception is raised.
On Windows, it will use CryptGenRandom().

See also
The secrets module provides higher level functions. For an
easy-to-use interface to the random number generator provided by your
platform, please see random.SystemRandom.


Changed in version 3.6.0: On Linux, getrandom() is now used in blocking mode to increase the
security.


Changed in version 3.5.2: On Linux, if the getrandom() syscall blocks (the urandom entropy pool
is not initialized yet), fall back on reading /dev/urandom.


Changed in version 3.5: On Linux 3.17 and newer, the getrandom() syscall is now used
when available.  On OpenBSD 5.6 and newer, the C getentropy()
function is now used. These functions avoid the usage of an internal file
descriptor.




os.GRND_NONBLOCK¶
By  default, when reading from /dev/random, getrandom() blocks if
no random bytes are available, and when reading from /dev/urandom, it blocks
if the entropy pool has not yet been initialized.
If the GRND_NONBLOCK flag is set, then getrandom() does not
block in these cases, but instead immediately raises BlockingIOError.

New in version 3.6.




os.GRND_RANDOM¶
If  this  bit  is  set,  then  random bytes are drawn from the
/dev/random pool instead of the /dev/urandom pool.

New in version 3.6.


