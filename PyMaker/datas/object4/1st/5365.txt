link:
library/selectors.html#selectors.BaseSelector

docs:

<dt id="selectors.BaseSelector">
<em class="property">class </em><code class="descclassname">selectors.</code><code class="descname">BaseSelector</code><a class="headerlink" href="#selectors.BaseSelector" title="Permalink to this definition">¶</a></dt>
<dd><p>A <a class="reference internal" href="#selectors.BaseSelector" title="selectors.BaseSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">BaseSelector</span></code></a> is used to wait for I/O event readiness on multiple
file objects. It supports file stream registration, unregistration, and a
method to wait for I/O events on those streams, with an optional timeout.
It’s an abstract base class, so cannot be instantiated. Use
<a class="reference internal" href="#selectors.DefaultSelector" title="selectors.DefaultSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">DefaultSelector</span></code></a> instead, or one of <a class="reference internal" href="#selectors.SelectSelector" title="selectors.SelectSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectSelector</span></code></a>,
<a class="reference internal" href="#selectors.KqueueSelector" title="selectors.KqueueSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">KqueueSelector</span></code></a> etc. if you want to specifically use an
implementation, and your platform supports it.
<a class="reference internal" href="#selectors.BaseSelector" title="selectors.BaseSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">BaseSelector</span></code></a> and its concrete implementations support the
<a class="reference internal" href="../glossary.html#term-context-manager"><span class="xref std std-term">context manager</span></a> protocol.</p>
<dl class="method">
<dt id="selectors.BaseSelector.register">
<em class="property">abstractmethod </em><code class="descname">register</code><span class="sig-paren">(</span><em>fileobj</em>, <em>events</em>, <em>data=None</em><span class="sig-paren">)</span><a class="headerlink" href="#selectors.BaseSelector.register" title="Permalink to this definition">¶</a></dt>
<dd><p>Register a file object for selection, monitoring it for I/O events.</p>
<p><em>fileobj</em> is the file object to monitor.  It may either be an integer
file descriptor or an object with a <code class="docutils literal notranslate"><span class="pre">fileno()</span></code> method.
<em>events</em> is a bitwise mask of events to monitor.
<em>data</em> is an opaque object.</p>
<p>This returns a new <a class="reference internal" href="#selectors.SelectorKey" title="selectors.SelectorKey"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorKey</span></code></a> instance, or raises a
<a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> in case of invalid event mask or file descriptor, or
<a class="reference internal" href="exceptions.html#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> if the file object is already registered.</p>
</dd></dl>
<dl class="method">
<dt id="selectors.BaseSelector.unregister">
<em class="property">abstractmethod </em><code class="descname">unregister</code><span class="sig-paren">(</span><em>fileobj</em><span class="sig-paren">)</span><a class="headerlink" href="#selectors.BaseSelector.unregister" title="Permalink to this definition">¶</a></dt>
<dd><p>Unregister a file object from selection, removing it from monitoring. A
file object shall be unregistered prior to being closed.</p>
<p><em>fileobj</em> must be a file object previously registered.</p>
<p>This returns the associated <a class="reference internal" href="#selectors.SelectorKey" title="selectors.SelectorKey"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorKey</span></code></a> instance, or raises a
<a class="reference internal" href="exceptions.html#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> if <em>fileobj</em> is not registered.  It will raise
<a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> if <em>fileobj</em> is invalid (e.g. it has no <code class="docutils literal notranslate"><span class="pre">fileno()</span></code>
method or its <code class="docutils literal notranslate"><span class="pre">fileno()</span></code> method has an invalid return value).</p>
</dd></dl>
<dl class="method">
<dt id="selectors.BaseSelector.modify">
<code class="descname">modify</code><span class="sig-paren">(</span><em>fileobj</em>, <em>events</em>, <em>data=None</em><span class="sig-paren">)</span><a class="headerlink" href="#selectors.BaseSelector.modify" title="Permalink to this definition">¶</a></dt>
<dd><p>Change a registered file object’s monitored events or attached data.</p>
<p>This is equivalent to <code class="xref py py-meth docutils literal notranslate"><span class="pre">BaseSelector.unregister(fileobj)()</span></code> followed
by <code class="xref py py-meth docutils literal notranslate"><span class="pre">BaseSelector.register(fileobj,</span> <span class="pre">events,</span> <span class="pre">data)()</span></code>, except that it
can be implemented more efficiently.</p>
<p>This returns a new <a class="reference internal" href="#selectors.SelectorKey" title="selectors.SelectorKey"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorKey</span></code></a> instance, or raises a
<a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> in case of invalid event mask or file descriptor, or
<a class="reference internal" href="exceptions.html#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> if the file object is not registered.</p>
</dd></dl>
<dl class="method">
<dt id="selectors.BaseSelector.select">
<em class="property">abstractmethod </em><code class="descname">select</code><span class="sig-paren">(</span><em>timeout=None</em><span class="sig-paren">)</span><a class="headerlink" href="#selectors.BaseSelector.select" title="Permalink to this definition">¶</a></dt>
<dd><p>Wait until some registered file objects become ready, or the timeout
expires.</p>
<p>If <code class="docutils literal notranslate"><span class="pre">timeout</span> <span class="pre">&gt;</span> <span class="pre">0</span></code>, this specifies the maximum wait time, in seconds.
If <code class="docutils literal notranslate"><span class="pre">timeout</span> <span class="pre">&lt;=</span> <span class="pre">0</span></code>, the call won’t block, and will report the currently
ready file objects.
If <em>timeout</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code>, the call will block until a monitored file object
becomes ready.</p>
<p>This returns a list of <code class="docutils literal notranslate"><span class="pre">(key,</span> <span class="pre">events)</span></code> tuples, one for each ready file
object.</p>
<p><em>key</em> is the <a class="reference internal" href="#selectors.SelectorKey" title="selectors.SelectorKey"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorKey</span></code></a> instance corresponding to a ready file
object.
<em>events</em> is a bitmask of events ready on this file object.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">This method can return before any file object becomes ready or the
timeout has elapsed if the current process receives a signal: in this
case, an empty list will be returned.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>The selector is now retried with a recomputed timeout when interrupted
by a signal if the signal handler did not raise an exception (see
<span class="target" id="index-0"></span><a class="pep reference external" href="https://www.python.org/dev/peps/pep-0475"><strong>PEP 475</strong></a> for the rationale), instead of returning an empty list
of events before the timeout.</p>
</div>
</dd></dl>
<dl class="method">
<dt id="selectors.BaseSelector.close">
<code class="descname">close</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#selectors.BaseSelector.close" title="Permalink to this definition">¶</a></dt>
<dd><p>Close the selector.</p>
<p>This must be called to make sure that any underlying resource is freed.
The selector shall not be used once it has been closed.</p>
</dd></dl>
<dl class="method">
<dt id="selectors.BaseSelector.get_key">
<code class="descname">get_key</code><span class="sig-paren">(</span><em>fileobj</em><span class="sig-paren">)</span><a class="headerlink" href="#selectors.BaseSelector.get_key" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the key associated with a registered file object.</p>
<p>This returns the <a class="reference internal" href="#selectors.SelectorKey" title="selectors.SelectorKey"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorKey</span></code></a> instance associated to this file
object, or raises <a class="reference internal" href="exceptions.html#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> if the file object is not registered.</p>
</dd></dl>
<dl class="method">
<dt id="selectors.BaseSelector.get_map">
<em class="property">abstractmethod </em><code class="descname">get_map</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#selectors.BaseSelector.get_map" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a mapping of file objects to selector keys.</p>
<p>This returns a <a class="reference internal" href="collections.abc.html#collections.abc.Mapping" title="collections.abc.Mapping"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mapping</span></code></a> instance mapping
registered file objects to their associated <a class="reference internal" href="#selectors.SelectorKey" title="selectors.SelectorKey"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorKey</span></code></a>
instance.</p>
</dd></dl>
</dd>