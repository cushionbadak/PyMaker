link:
reference/expressions.html#generator-expressions

docs:

6.2.8. Generator expressionsÂ¶
A generator expression is a compact generator notation in parentheses:

generator_expression ::=  "(" expression comp_for ")"

A generator expression yields a new generator object.  Its syntax is the same as
for comprehensions, except that it is enclosed in parentheses instead of
brackets or curly braces.
Variables used in the generator expression are evaluated lazily when the
__next__() method is called for the generator object (in the same
fashion as normal generators).  However, the iterable expression in the
leftmost for clause is immediately evaluated, so that an error
produced by it will be emitted at the point where the generator expression
is defined, rather than at the point where the first value is retrieved.
Subsequent for clauses and any filter condition in the leftmost
for clause cannot be evaluated in the enclosing scope as they may
depend on the values obtained from the leftmost iterable. For example:
(x*y for x in range(10) for y in range(x, x+10)).
The parentheses can be omitted on calls with only one argument.  See section
Calls for details.
To avoid interfering with the expected operation of the generator expression
itself, yield and yield from expressions are prohibited in the
implicitly defined generator (in Python 3.7, such expressions emit
DeprecationWarning when compiled, in Python 3.8+ they will emit
SyntaxError).
If a generator expression contains either async for
clauses or await expressions it is called an
asynchronous generator expression.  An asynchronous generator
expression returns a new asynchronous generator object,
which is an asynchronous iterator (see Asynchronous Iterators).

New in version 3.6: Asynchronous generator expressions were introduced.


Changed in version 3.7: Prior to Python 3.7, asynchronous generator expressions could
only appear in async def coroutines.  Starting
with 3.7, any function can use asynchronous generator expressions.


Deprecated since version 3.7: yield and yield from deprecated in the implicitly nested scope.

