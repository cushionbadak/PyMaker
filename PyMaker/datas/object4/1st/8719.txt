link:
library/test.html#running-tests-using-the-command-line-interface

docs:

Running tests using the command-line interface¶
The test package can be run as a script to drive Python’s regression
test suite, thanks to the -m option: python -m test. Under
the hood, it uses test.regrtest; the call python -m
test.regrtest used in previous Python versions still works.  Running the
script by itself automatically starts running all regression tests in the
test package. It does this by finding all modules in the package whose
name starts with test_, importing them, and executing the function
test_main() if present or loading the tests via
unittest.TestLoader.loadTestsFromModule if test_main does not exist.  The
names of tests to execute may also be passed to the script. Specifying a single
regression test (python -m test test_spam) will minimize output and
only print whether the test passed or failed.
Running test directly allows what resources are available for
tests to use to be set. You do this by using the -u command-line
option. Specifying all as the value for the -u option enables all
possible resources: python -m test -uall.
If all but one resource is desired (a more common case), a
comma-separated list of resources that are not desired may be listed after
all. The command python -m test -uall,-audio,-largefile
will run test with all resources except the audio and
largefile resources. For a list of all resources and more command-line
options, run python -m test -h.
Some other ways to execute the regression tests depend on what platform the
tests are being executed on. On Unix, you can run make test at the
top-level directory where Python was built. On Windows,
executing rt.bat from your PCbuild directory will run all
regression tests.
