link:
reference/executionmodel.html#binding-of-names

docs:

4.2.1. Binding of namesÂ¶
Names refer to objects.  Names are introduced by name binding operations.
The following constructs bind names: formal parameters to functions,
import statements, class and function definitions (these bind the
class or function name in the defining block), and targets that are identifiers
if occurring in an assignment, for loop header, or after
as in a with statement or except clause.
The import statement
of the form from ... import * binds all names defined in the imported
module, except those beginning with an underscore.  This form may only be used
at the module level.
A target occurring in a del statement is also considered bound for
this purpose (though the actual semantics are to unbind the name).
Each assignment or import statement occurs within a block defined by a class or
function definition or at the module level (the top-level code block).
If a name is bound in a block, it is a local variable of that block, unless
declared as nonlocal or global.  If a name is bound at
the module level, it is a global variable.  (The variables of the module code
block are local and global.)  If a variable is used in a code block but not
defined there, it is a free variable.
Each occurrence of a name in the program text refers to the binding of
that name established by the following name resolution rules.
