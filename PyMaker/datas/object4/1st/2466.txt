link:
library/zlib.html#zlib.adler32

docs:

<dt id="zlib.adler32">
<code class="descclassname">zlib.</code><code class="descname">adler32</code><span class="sig-paren">(</span><em>data</em><span class="optional">[</span>, <em>value</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#zlib.adler32" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Computes an Adler-32 checksum of <em>data</em>.  (An Adler-32 checksum is almost as
reliable as a CRC32 but can be computed much more quickly.)  The result
is an unsigned 32-bit integer.  If <em>value</em> is present, it is used as
the starting value of the checksum; otherwise, a default value of 1
is used.  Passing in <em>value</em> allows computing a running checksum over the
concatenation of several inputs.  The algorithm is not cryptographically
strong, and should not be used for authentication or digital signatures.  Since
the algorithm is designed for use as a checksum algorithm, it is not suitable
for use as a general hash algorithm.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.0: </span>Always returns an unsigned value.
To generate the same numeric value across all Python versions and
platforms, use <code class="docutils literal notranslate"><span class="pre">adler32(data)</span> <span class="pre">&amp;</span> <span class="pre">0xffffffff</span></code>.</p>
</div>
</dd>