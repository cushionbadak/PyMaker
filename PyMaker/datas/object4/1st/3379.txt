link:
library/time.html#time.time

docs:

<dt id="time.time">
<code class="descclassname">time.</code><code class="descname">time</code><span class="sig-paren">(</span><span class="sig-paren">)</span> → float<a class="headerlink" href="#time.time" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the time in seconds since the <a class="reference internal" href="#epoch">epoch</a> as a floating point
number. The specific date of the epoch and the handling of
<a class="reference external" href="https://en.wikipedia.org/wiki/Leap_second">leap seconds</a> is platform dependent.
On Windows and most Unix systems, the epoch is January 1, 1970,
00:00:00 (UTC) and leap seconds are not counted towards the time
in seconds since the epoch. This is commonly referred to as
<a class="reference external" href="https://en.wikipedia.org/wiki/Unix_time">Unix time</a>.
To find out what the epoch is on a given platform, look at
<code class="docutils literal notranslate"><span class="pre">gmtime(0)</span></code>.</p>
<p>Note that even though the time is always returned as a floating point
number, not all systems provide time with a better precision than 1 second.
While this function normally returns non-decreasing values, it can return a
lower value than a previous call if the system clock has been set back
between the two calls.</p>
<p>The number returned by <a class="reference internal" href="#time.time" title="time.time"><code class="xref py py-func docutils literal notranslate"><span class="pre">time()</span></code></a> may be converted into a more common
time format (i.e. year, month, day, hour, etc…) in UTC by passing it to
<a class="reference internal" href="#time.gmtime" title="time.gmtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">gmtime()</span></code></a> function or in local time by passing it to the
<a class="reference internal" href="#time.localtime" title="time.localtime"><code class="xref py py-func docutils literal notranslate"><span class="pre">localtime()</span></code></a> function. In both cases a
<a class="reference internal" href="#time.struct_time" title="time.struct_time"><code class="xref py py-class docutils literal notranslate"><span class="pre">struct_time</span></code></a> object is returned, from which the components
of the calendar date may be accessed as attributes.</p>
</dd>