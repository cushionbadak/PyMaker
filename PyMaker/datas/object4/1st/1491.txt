link:
library/enum.html#functional-api

docs:

Functional APIÂ¶
The Enum class is callable, providing the following functional API:
>>> Animal = Enum('Animal', 'ANT BEE CAT DOG')
>>> Animal
<enum 'Animal'>
>>> Animal.ANT
<Animal.ANT: 1>
>>> Animal.ANT.value
1
>>> list(Animal)
[<Animal.ANT: 1>, <Animal.BEE: 2>, <Animal.CAT: 3>, <Animal.DOG: 4>]


The semantics of this API resemble namedtuple. The first
argument of the call to Enum is the name of the enumeration.
The second argument is the source of enumeration member names.  It can be a
whitespace-separated string of names, a sequence of names, a sequence of
2-tuples with key/value pairs, or a mapping (e.g. dictionary) of names to
values.  The last two options enable assigning arbitrary values to
enumerations; the others auto-assign increasing integers starting with 1 (use
the start parameter to specify a different starting value).  A
new class derived from Enum is returned.  In other words, the above
assignment to Animal is equivalent to:
>>> class Animal(Enum):
...     ANT = 1
...     BEE = 2
...     CAT = 3
...     DOG = 4
...


The reason for defaulting to 1 as the starting number and not 0 is
that 0 is False in a boolean sense, but enum members all evaluate
to True.
Pickling enums created with the functional API can be tricky as frame stack
implementation details are used to try and figure out which module the
enumeration is being created in (e.g. it will fail if you use a utility
function in separate module, and also may not work on IronPython or Jython).
The solution is to specify the module name explicitly as follows:
>>> Animal = Enum('Animal', 'ANT BEE CAT DOG', module=__name__)



Warning
If module is not supplied, and Enum cannot determine what it is,
the new Enum members will not be unpicklable; to keep errors closer to
the source, pickling will be disabled.

The new pickle protocol 4 also, in some circumstances, relies on
__qualname__ being set to the location where pickle will be able
to find the class.  For example, if the class was made available in class
SomeData in the global scope:
>>> Animal = Enum('Animal', 'ANT BEE CAT DOG', qualname='SomeData.Animal')


The complete signature is:
Enum(value='NewEnumName', names=<...>, *, module='...', qualname='...', type=<mixed-in class>, start=1)






value:What the new Enum class will record as its name.


names:The Enum members.  This can be a whitespace or comma separated string
(values will start at 1 unless otherwise specified):
'RED GREEN BLUE' | 'RED,GREEN,BLUE' | 'RED, GREEN, BLUE'


or an iterator of names:
['RED', 'GREEN', 'BLUE']


or an iterator of (name, value) pairs:
[('CYAN', 4), ('MAGENTA', 5), ('YELLOW', 6)]


or a mapping:
{'CHARTREUSE': 7, 'SEA_GREEN': 11, 'ROSEMARY': 42}




module:name of module where new Enum class can be found.


qualname:where in module new Enum class can be found.


type:type to mix in to new Enum class.


start:number to start counting at if only names are passed in.





Changed in version 3.5: The start parameter was added.

