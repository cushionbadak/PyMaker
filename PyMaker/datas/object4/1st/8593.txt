link:
library/unittest.mock.html#patch

docs:

patch¶

Note
patch() is straightforward to use. The key is to do the patching in the
right namespace. See the section where to patch.



unittest.mock.patch(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)¶
patch() acts as a function decorator, class decorator or a context
manager. Inside the body of the function or with statement, the target
is patched with a new object. When the function/with statement exits
the patch is undone.
If new is omitted, then the target is replaced with a
MagicMock. If patch() is used as a decorator and new is
omitted, the created mock is passed in as an extra argument to the
decorated function. If patch() is used as a context manager the created
mock is returned by the context manager.
target should be a string in the form 'package.module.ClassName'. The
target is imported and the specified object replaced with the new
object, so the target must be importable from the environment you are
calling patch() from. The target is imported when the decorated function
is executed, not at decoration time.
The spec and spec_set keyword arguments are passed to the MagicMock
if patch is creating one for you.
In addition you can pass spec=True or spec_set=True, which causes
patch to pass in the object being mocked as the spec/spec_set object.
new_callable allows you to specify a different class, or callable object,
that will be called to create the new object. By default MagicMock is
used.
A more powerful form of spec is autospec. If you set autospec=True
then the mock will be created with a spec from the object being replaced.
All attributes of the mock will also have the spec of the corresponding
attribute of the object being replaced. Methods and functions being mocked
will have their arguments checked and will raise a TypeError if they are
called with the wrong signature. For mocks
replacing a class, their return value (the ‘instance’) will have the same
spec as the class. See the create_autospec() function and
Autospeccing.
Instead of autospec=True you can pass autospec=some_object to use an
arbitrary object as the spec instead of the one being replaced.
By default patch() will fail to replace attributes that don’t exist.
If you pass in create=True, and the attribute doesn’t exist, patch will
create the attribute for you when the patched function is called, and delete
it again after the patched function has exited. This is useful for writing
tests against attributes that your production code creates at runtime. It is
off by default because it can be dangerous. With it switched on you can
write passing tests against APIs that don’t actually exist!

Note

Changed in version 3.5: If you are patching builtins in a module then you don’t
need to pass create=True, it will be added by default.


Patch can be used as a TestCase class decorator. It works by
decorating each test method in the class. This reduces the boilerplate
code when your test methods share a common patchings set. patch() finds
tests by looking for method names that start with patch.TEST_PREFIX.
By default this is 'test', which matches the way unittest finds tests.
You can specify an alternative prefix by setting patch.TEST_PREFIX.
Patch can be used as a context manager, with the with statement. Here the
patching applies to the indented block after the with statement. If you
use “as” then the patched object will be bound to the name after the
“as”; very useful if patch() is creating a mock object for you.
patch() takes arbitrary keyword arguments. These will be passed to
the Mock (or new_callable) on construction.
patch.dict(...), patch.multiple(...) and patch.object(...) are
available for alternate use-cases.

patch() as function decorator, creating the mock for you and passing it into
the decorated function:
>>> @patch('__main__.SomeClass')
... def function(normal_argument, mock_class):
...     print(mock_class is SomeClass)
...
>>> function(None)
True


Patching a class replaces the class with a MagicMock instance. If the
class is instantiated in the code under test then it will be the
return_value of the mock that will be used.
If the class is instantiated multiple times you could use
side_effect to return a new mock each time. Alternatively you
can set the return_value to be anything you want.
To configure return values on methods of instances on the patched class
you must do this on the return_value. For example:
>>> class Class:
...     def method(self):
...         pass
...
>>> with patch('__main__.Class') as MockClass:
...     instance = MockClass.return_value
...     instance.method.return_value = 'foo'
...     assert Class() is instance
...     assert Class().method() == 'foo'
...


If you use spec or spec_set and patch() is replacing a class, then the
return value of the created mock will have the same spec.
>>> Original = Class
>>> patcher = patch('__main__.Class', spec=True)
>>> MockClass = patcher.start()
>>> instance = MockClass()
>>> assert isinstance(instance, Original)
>>> patcher.stop()


The new_callable argument is useful where you want to use an alternative
class to the default MagicMock for the created mock. For example, if
you wanted a NonCallableMock to be used:
>>> thing = object()
>>> with patch('__main__.thing', new_callable=NonCallableMock) as mock_thing:
...     assert thing is mock_thing
...     thing()
...
Traceback (most recent call last):
  ...
TypeError: 'NonCallableMock' object is not callable


Another use case might be to replace an object with an io.StringIO instance:
>>> from io import StringIO
>>> def foo():
...     print('Something')
...
>>> @patch('sys.stdout', new_callable=StringIO)
... def test(mock_stdout):
...     foo()
...     assert mock_stdout.getvalue() == 'Something\n'
...
>>> test()


When patch() is creating a mock for you, it is common that the first thing
you need to do is to configure the mock. Some of that configuration can be done
in the call to patch. Any arbitrary keywords you pass into the call will be
used to set attributes on the created mock:
>>> patcher = patch('__main__.thing', first='one', second='two')
>>> mock_thing = patcher.start()
>>> mock_thing.first
'one'
>>> mock_thing.second
'two'


As well as attributes on the created mock attributes, like the
return_value and side_effect, of child mocks can
also be configured. These aren’t syntactically valid to pass in directly as
keyword arguments, but a dictionary with these as keys can still be expanded
into a patch() call using **:
>>> config = {'method.return_value': 3, 'other.side_effect': KeyError}
>>> patcher = patch('__main__.thing', **config)
>>> mock_thing = patcher.start()
>>> mock_thing.method()
3
>>> mock_thing.other()
Traceback (most recent call last):
  ...
KeyError


By default, attempting to patch a function in a module (or a method or an
attribute in a class) that does not exist will fail with AttributeError:
>>> @patch('sys.non_existing_attribute', 42)
... def test():
...     assert sys.non_existing_attribute == 42
...
>>> test()
Traceback (most recent call last):
  ...
AttributeError: <module 'sys' (built-in)> does not have the attribute 'non_existing'


but adding create=True in the call to patch() will make the previous example
work as expected:
>>> @patch('sys.non_existing_attribute', 42, create=True)
... def test(mock_stdout):
...     assert sys.non_existing_attribute == 42
...
>>> test()


