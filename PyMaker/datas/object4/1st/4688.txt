link:
library/asyncio-sync.html#condition

docs:

Condition¶


class asyncio.Condition(lock=None, *, loop=None)¶
A Condition object.  Not thread-safe.
An asyncio condition primitive can be used by a task to wait for
some event to happen and then get exclusive access to a shared
resource.
In essence, a Condition object combines the functionality
of an Event and a Lock.  It is possible to have
multiple Condition objects share one Lock, which allows coordinating
exclusive access to a shared resource between different tasks
interested in particular states of that shared resource.
The optional lock argument must be a Lock object or
None.  In the latter case a new Lock object is created
automatically.
The preferred way to use a Condition is an async with
statement:
cond = asyncio.Condition()

# ... later
async with cond:
    await cond.wait()


which is equivalent to:
cond = asyncio.Condition()

# ... later
await lock.acquire()
try:
    await cond.wait()
finally:
    lock.release()




coroutine acquire()¶
Acquire the underlying lock.
This method waits until the underlying lock is unlocked,
sets it to locked and returns True.



notify(n=1)¶
Wake up at most n tasks (1 by default) waiting on this
condition.  The method is no-op if no tasks are waiting.
The lock must be acquired before this method is called and
released shortly after.  If called with an unlocked lock
a RuntimeError error is raised.



locked()¶
Return True if the underlying lock is acquired.



notify_all()¶
Wake up all tasks waiting on this condition.
This method acts like notify(), but wakes up all waiting
tasks.
The lock must be acquired before this method is called and
released shortly after.  If called with an unlocked lock
a RuntimeError error is raised.



release()¶
Release the underlying lock.
When invoked on an unlocked lock, a RuntimeError is
raised.



coroutine wait()¶
Wait until notified.
If the calling task has not acquired the lock when this method is
called, a RuntimeError is raised.
This method releases the underlying lock, and then blocks until
it is awakened by a notify() or notify_all() call.
Once awakened, the Condition re-acquires its lock and this method
returns True.



coroutine wait_for(predicate)¶
Wait until a predicate becomes true.
The predicate must be a callable which result will be
interpreted as a boolean value.  The final value is the
return value.


