link:
library/logging.html#logging.LogRecord

docs:

<dt id="logging.LogRecord">
<em class="property">class </em><code class="descclassname">logging.</code><code class="descname">LogRecord</code><span class="sig-paren">(</span><em>name</em>, <em>level</em>, <em>pathname</em>, <em>lineno</em>, <em>msg</em>, <em>args</em>, <em>exc_info</em>, <em>func=None</em>, <em>sinfo=None</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.LogRecord" title="Permalink to this definition">¶</a></dt>
<dd><p>Contains all the information pertinent to the event being logged.</p>
<p>The primary information is passed in <code class="xref py py-attr docutils literal notranslate"><span class="pre">msg</span></code> and <code class="xref py py-attr docutils literal notranslate"><span class="pre">args</span></code>, which
are combined using <code class="docutils literal notranslate"><span class="pre">msg</span> <span class="pre">%</span> <span class="pre">args</span></code> to create the <code class="xref py py-attr docutils literal notranslate"><span class="pre">message</span></code> field of the
record.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name"/>
<col class="field-body"/>
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first last simple">
<li><strong>name</strong> – The name of the logger used to log the event represented by
this LogRecord. Note that this name will always have this
value, even though it may be emitted by a handler attached to
a different (ancestor) logger.</li>
<li><strong>level</strong> – The numeric level of the logging event (one of DEBUG, INFO etc.)
Note that this is converted to <em>two</em> attributes of the LogRecord:
<code class="docutils literal notranslate"><span class="pre">levelno</span></code> for the numeric value and <code class="docutils literal notranslate"><span class="pre">levelname</span></code> for the
corresponding level name.</li>
<li><strong>pathname</strong> – The full pathname of the source file where the logging call
was made.</li>
<li><strong>lineno</strong> – The line number in the source file where the logging call was
made.</li>
<li><strong>msg</strong> – The event description message, possibly a format string with
placeholders for variable data.</li>
<li><strong>args</strong> – Variable data to merge into the <em>msg</em> argument to obtain the
event description.</li>
<li><strong>exc_info</strong> – An exception tuple with the current exception information,
or <code class="docutils literal notranslate"><span class="pre">None</span></code> if no exception information is available.</li>
<li><strong>func</strong> – The name of the function or method from which the logging call
was invoked.</li>
<li><strong>sinfo</strong> – A text string representing stack information from the base of
the stack in the current thread, up to the logging call.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl class="method">
<dt id="logging.LogRecord.getMessage">
<code class="descname">getMessage</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#logging.LogRecord.getMessage" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns the message for this <a class="reference internal" href="#logging.LogRecord" title="logging.LogRecord"><code class="xref py py-class docutils literal notranslate"><span class="pre">LogRecord</span></code></a> instance after merging any
user-supplied arguments with the message. If the user-supplied message
argument to the logging call is not a string, <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-func docutils literal notranslate"><span class="pre">str()</span></code></a> is called on it to
convert it to a string. This allows use of user-defined classes as
messages, whose <code class="docutils literal notranslate"><span class="pre">__str__</span></code> method can return the actual format string to
be used.</p>
</dd></dl>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>The creation of a <code class="docutils literal notranslate"><span class="pre">LogRecord</span></code> has been made more configurable by
providing a factory which is used to create the record. The factory can be
set using <a class="reference internal" href="#logging.getLogRecordFactory" title="logging.getLogRecordFactory"><code class="xref py py-func docutils literal notranslate"><span class="pre">getLogRecordFactory()</span></code></a> and <a class="reference internal" href="#logging.setLogRecordFactory" title="logging.setLogRecordFactory"><code class="xref py py-func docutils literal notranslate"><span class="pre">setLogRecordFactory()</span></code></a>
(see this for the factory’s signature).</p>
</div>
<p>This functionality can be used to inject your own values into a
LogRecord at creation time. You can use the following pattern:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">old_factory</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogRecordFactory</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">record_factory</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="n">record</span> <span class="o">=</span> <span class="n">old_factory</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="n">record</span><span class="o">.</span><span class="n">custom_attribute</span> <span class="o">=</span> <span class="mh">0xdecafbad</span>
    <span class="k">return</span> <span class="n">record</span>

<span class="n">logging</span><span class="o">.</span><span class="n">setLogRecordFactory</span><span class="p">(</span><span class="n">record_factory</span><span class="p">)</span>
</pre></div>
</div>
<p>With this pattern, multiple factories could be chained, and as long
as they don’t overwrite each other’s attributes or unintentionally
overwrite the standard attributes listed above, there should be no
surprises.</p>
</dd>