link:
library/ipaddress.html#ipaddress.IPv4Network

docs:

<dt id="ipaddress.IPv4Network">
<em class="property">class </em><code class="descclassname">ipaddress.</code><code class="descname">IPv4Network</code><span class="sig-paren">(</span><em>address</em>, <em>strict=True</em><span class="sig-paren">)</span><a class="headerlink" href="#ipaddress.IPv4Network" title="Permalink to this definition">¶</a></dt>
<dd><p>Construct an IPv4 network definition.  <em>address</em> can be one of the following:</p>
<ol class="arabic">
<li><p class="first">A string consisting of an IP address and an optional mask, separated by
a slash (<code class="docutils literal notranslate"><span class="pre">/</span></code>).  The IP address is the network address, and the mask
can be either a single number, which means it’s a <em>prefix</em>, or a string
representation of an IPv4 address.  If it’s the latter, the mask is
interpreted as a <em>net mask</em> if it starts with a non-zero field, or as a
<em>host mask</em> if it starts with a zero field, with the single exception of
an all-zero mask which is treated as a <em>net mask</em>.  If no mask is provided,
it’s considered to be <code class="docutils literal notranslate"><span class="pre">/32</span></code>.</p>
<p>For example, the following <em>address</em> specifications are equivalent:
<code class="docutils literal notranslate"><span class="pre">192.168.1.0/24</span></code>, <code class="docutils literal notranslate"><span class="pre">192.168.1.0/255.255.255.0</span></code> and
<code class="docutils literal notranslate"><span class="pre">192.168.1.0/0.0.0.255</span></code>.</p>
</li>
<li><p class="first">An integer that fits into 32 bits.  This is equivalent to a
single-address network, with the network address being <em>address</em> and
the mask being <code class="docutils literal notranslate"><span class="pre">/32</span></code>.</p>
</li>
<li><p class="first">An integer packed into a <a class="reference internal" href="stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> object of length 4, big-endian.
The interpretation is similar to an integer <em>address</em>.</p>
</li>
<li><p class="first">A two-tuple of an address description and a netmask, where the address
description is either a string, a 32-bits integer, a 4-bytes packed
integer, or an existing IPv4Address object; and the netmask is either
an integer representing the prefix length (e.g. <code class="docutils literal notranslate"><span class="pre">24</span></code>) or a string
representing the prefix mask (e.g. <code class="docutils literal notranslate"><span class="pre">255.255.255.0</span></code>).</p>
</li>
</ol>
<p>An <a class="reference internal" href="#ipaddress.AddressValueError" title="ipaddress.AddressValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">AddressValueError</span></code></a> is raised if <em>address</em> is not a valid IPv4
address.  A <a class="reference internal" href="#ipaddress.NetmaskValueError" title="ipaddress.NetmaskValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">NetmaskValueError</span></code></a> is raised if the mask is not valid for
an IPv4 address.</p>
<p>If <em>strict</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code> and host bits are set in the supplied address,
then <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> is raised.  Otherwise, the host bits are masked out
to determine the appropriate network address.</p>
<p>Unless stated otherwise, all network methods accepting other network/address
objects will raise <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> if the argument’s IP version is
incompatible to <code class="docutils literal notranslate"><span class="pre">self</span></code>.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>Added the two-tuple form for the <em>address</em> constructor parameter.</p>
</div>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.version">
<code class="descname">version</code><a class="headerlink" href="#ipaddress.IPv4Network.version" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.max_prefixlen">
<code class="descname">max_prefixlen</code><a class="headerlink" href="#ipaddress.IPv4Network.max_prefixlen" title="Permalink to this definition">¶</a></dt>
<dd><p>Refer to the corresponding attribute documentation in
<a class="reference internal" href="#ipaddress.IPv4Address" title="ipaddress.IPv4Address"><code class="xref py py-class docutils literal notranslate"><span class="pre">IPv4Address</span></code></a>.</p>
</dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.is_multicast">
<code class="descname">is_multicast</code><a class="headerlink" href="#ipaddress.IPv4Network.is_multicast" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.is_private">
<code class="descname">is_private</code><a class="headerlink" href="#ipaddress.IPv4Network.is_private" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.is_unspecified">
<code class="descname">is_unspecified</code><a class="headerlink" href="#ipaddress.IPv4Network.is_unspecified" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.is_reserved">
<code class="descname">is_reserved</code><a class="headerlink" href="#ipaddress.IPv4Network.is_reserved" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.is_loopback">
<code class="descname">is_loopback</code><a class="headerlink" href="#ipaddress.IPv4Network.is_loopback" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.is_link_local">
<code class="descname">is_link_local</code><a class="headerlink" href="#ipaddress.IPv4Network.is_link_local" title="Permalink to this definition">¶</a></dt>
<dd><p>These attributes are true for the network as a whole if they are true
for both the network address and the broadcast address.</p>
</dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.network_address">
<code class="descname">network_address</code><a class="headerlink" href="#ipaddress.IPv4Network.network_address" title="Permalink to this definition">¶</a></dt>
<dd><p>The network address for the network. The network address and the
prefix length together uniquely define a network.</p>
</dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.broadcast_address">
<code class="descname">broadcast_address</code><a class="headerlink" href="#ipaddress.IPv4Network.broadcast_address" title="Permalink to this definition">¶</a></dt>
<dd><p>The broadcast address for the network. Packets sent to the broadcast
address should be received by every host on the network.</p>
</dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.hostmask">
<code class="descname">hostmask</code><a class="headerlink" href="#ipaddress.IPv4Network.hostmask" title="Permalink to this definition">¶</a></dt>
<dd><p>The host mask, as an <a class="reference internal" href="#ipaddress.IPv4Address" title="ipaddress.IPv4Address"><code class="xref py py-class docutils literal notranslate"><span class="pre">IPv4Address</span></code></a> object.</p>
</dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.netmask">
<code class="descname">netmask</code><a class="headerlink" href="#ipaddress.IPv4Network.netmask" title="Permalink to this definition">¶</a></dt>
<dd><p>The net mask, as an <a class="reference internal" href="#ipaddress.IPv4Address" title="ipaddress.IPv4Address"><code class="xref py py-class docutils literal notranslate"><span class="pre">IPv4Address</span></code></a> object.</p>
</dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.with_prefixlen">
<code class="descname">with_prefixlen</code><a class="headerlink" href="#ipaddress.IPv4Network.with_prefixlen" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.compressed">
<code class="descname">compressed</code><a class="headerlink" href="#ipaddress.IPv4Network.compressed" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.exploded">
<code class="descname">exploded</code><a class="headerlink" href="#ipaddress.IPv4Network.exploded" title="Permalink to this definition">¶</a></dt>
<dd><p>A string representation of the network, with the mask in prefix
notation.</p>
<p><code class="docutils literal notranslate"><span class="pre">with_prefixlen</span></code> and <code class="docutils literal notranslate"><span class="pre">compressed</span></code> are always the same as
<code class="docutils literal notranslate"><span class="pre">str(network)</span></code>.
<code class="docutils literal notranslate"><span class="pre">exploded</span></code> uses the exploded form the network address.</p>
</dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.with_netmask">
<code class="descname">with_netmask</code><a class="headerlink" href="#ipaddress.IPv4Network.with_netmask" title="Permalink to this definition">¶</a></dt>
<dd><p>A string representation of the network, with the mask in net mask
notation.</p>
</dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.with_hostmask">
<code class="descname">with_hostmask</code><a class="headerlink" href="#ipaddress.IPv4Network.with_hostmask" title="Permalink to this definition">¶</a></dt>
<dd><p>A string representation of the network, with the mask in host mask
notation.</p>
</dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.num_addresses">
<code class="descname">num_addresses</code><a class="headerlink" href="#ipaddress.IPv4Network.num_addresses" title="Permalink to this definition">¶</a></dt>
<dd><p>The total number of addresses in the network.</p>
</dd></dl>
<dl class="attribute">
<dt id="ipaddress.IPv4Network.prefixlen">
<code class="descname">prefixlen</code><a class="headerlink" href="#ipaddress.IPv4Network.prefixlen" title="Permalink to this definition">¶</a></dt>
<dd><p>Length of the network prefix, in bits.</p>
</dd></dl>
<dl class="method">
<dt id="ipaddress.IPv4Network.hosts">
<code class="descname">hosts</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#ipaddress.IPv4Network.hosts" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns an iterator over the usable hosts in the network.  The usable
hosts are all the IP addresses that belong to the network, except the
network address itself and the network broadcast address.  For networks
with a mask length of 31, the network address and network broadcast
address are also included in the result.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/29'</span><span class="p">)</span><span class="o">.</span><span class="n">hosts</span><span class="p">())</span>  <span class="c1">#doctest: +NORMALIZE_WHITESPACE</span>
<span class="go">[IPv4Address('192.0.2.1'), IPv4Address('192.0.2.2'),</span>
<span class="go"> IPv4Address('192.0.2.3'), IPv4Address('192.0.2.4'),</span>
<span class="go"> IPv4Address('192.0.2.5'), IPv4Address('192.0.2.6')]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/31'</span><span class="p">)</span><span class="o">.</span><span class="n">hosts</span><span class="p">())</span>
<span class="go">[IPv4Address('192.0.2.0'), IPv4Address('192.0.2.1')]</span>
</pre></div>
</div>
</dd></dl>
<dl class="method">
<dt id="ipaddress.IPv4Network.overlaps">
<code class="descname">overlaps</code><span class="sig-paren">(</span><em>other</em><span class="sig-paren">)</span><a class="headerlink" href="#ipaddress.IPv4Network.overlaps" title="Permalink to this definition">¶</a></dt>
<dd><p><code class="docutils literal notranslate"><span class="pre">True</span></code> if this network is partly or wholly contained in <em>other</em> or
<em>other</em> is wholly contained in this network.</p>
</dd></dl>
<dl class="method">
<dt id="ipaddress.IPv4Network.address_exclude">
<code class="descname">address_exclude</code><span class="sig-paren">(</span><em>network</em><span class="sig-paren">)</span><a class="headerlink" href="#ipaddress.IPv4Network.address_exclude" title="Permalink to this definition">¶</a></dt>
<dd><p>Computes the network definitions resulting from removing the given
<em>network</em> from this one.  Returns an iterator of network objects.
Raises <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> if <em>network</em> is not completely contained in
this network.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">n1</span> <span class="o">=</span> <span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/28'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">n2</span> <span class="o">=</span> <span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.1/32'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">n1</span><span class="o">.</span><span class="n">address_exclude</span><span class="p">(</span><span class="n">n2</span><span class="p">))</span>  <span class="c1">#doctest: +NORMALIZE_WHITESPACE</span>
<span class="go">[IPv4Network('192.0.2.8/29'), IPv4Network('192.0.2.4/30'),</span>
<span class="go"> IPv4Network('192.0.2.2/31'), IPv4Network('192.0.2.0/32')]</span>
</pre></div>
</div>
</dd></dl>
<dl class="method">
<dt id="ipaddress.IPv4Network.subnets">
<code class="descname">subnets</code><span class="sig-paren">(</span><em>prefixlen_diff=1</em>, <em>new_prefix=None</em><span class="sig-paren">)</span><a class="headerlink" href="#ipaddress.IPv4Network.subnets" title="Permalink to this definition">¶</a></dt>
<dd><p>The subnets that join to make the current network definition, depending
on the argument values.  <em>prefixlen_diff</em> is the amount our prefix
length should be increased by.  <em>new_prefix</em> is the desired new
prefix of the subnets; it must be larger than our prefix.  One and
only one of <em>prefixlen_diff</em> and <em>new_prefix</em> must be set.  Returns an
iterator of network objects.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/24'</span><span class="p">)</span><span class="o">.</span><span class="n">subnets</span><span class="p">())</span>
<span class="go">[IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/25')]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/24'</span><span class="p">)</span><span class="o">.</span><span class="n">subnets</span><span class="p">(</span><span class="n">prefixlen_diff</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>  <span class="c1">#doctest: +NORMALIZE_WHITESPACE</span>
<span class="go">[IPv4Network('192.0.2.0/26'), IPv4Network('192.0.2.64/26'),</span>
<span class="go"> IPv4Network('192.0.2.128/26'), IPv4Network('192.0.2.192/26')]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/24'</span><span class="p">)</span><span class="o">.</span><span class="n">subnets</span><span class="p">(</span><span class="n">new_prefix</span><span class="o">=</span><span class="mi">26</span><span class="p">))</span>  <span class="c1">#doctest: +NORMALIZE_WHITESPACE</span>
<span class="go">[IPv4Network('192.0.2.0/26'), IPv4Network('192.0.2.64/26'),</span>
<span class="go"> IPv4Network('192.0.2.128/26'), IPv4Network('192.0.2.192/26')]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/24'</span><span class="p">)</span><span class="o">.</span><span class="n">subnets</span><span class="p">(</span><span class="n">new_prefix</span><span class="o">=</span><span class="mi">23</span><span class="p">))</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
    <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s1">'new prefix must be longer'</span><span class="p">)</span>
<span class="gr">ValueError</span>: <span class="n">new prefix must be longer</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/24'</span><span class="p">)</span><span class="o">.</span><span class="n">subnets</span><span class="p">(</span><span class="n">new_prefix</span><span class="o">=</span><span class="mi">25</span><span class="p">))</span>
<span class="go">[IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/25')]</span>
</pre></div>
</div>
</dd></dl>
<dl class="method">
<dt id="ipaddress.IPv4Network.supernet">
<code class="descname">supernet</code><span class="sig-paren">(</span><em>prefixlen_diff=1</em>, <em>new_prefix=None</em><span class="sig-paren">)</span><a class="headerlink" href="#ipaddress.IPv4Network.supernet" title="Permalink to this definition">¶</a></dt>
<dd><p>The supernet containing this network definition, depending on the
argument values.  <em>prefixlen_diff</em> is the amount our prefix length
should be decreased by.  <em>new_prefix</em> is the desired new prefix of
the supernet; it must be smaller than our prefix.  One and only one
of <em>prefixlen_diff</em> and <em>new_prefix</em> must be set.  Returns a single
network object.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/24'</span><span class="p">)</span><span class="o">.</span><span class="n">supernet</span><span class="p">()</span>
<span class="go">IPv4Network('192.0.2.0/23')</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/24'</span><span class="p">)</span><span class="o">.</span><span class="n">supernet</span><span class="p">(</span><span class="n">prefixlen_diff</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="go">IPv4Network('192.0.0.0/22')</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/24'</span><span class="p">)</span><span class="o">.</span><span class="n">supernet</span><span class="p">(</span><span class="n">new_prefix</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="go">IPv4Network('192.0.0.0/20')</span>
</pre></div>
</div>
</dd></dl>
<dl class="method">
<dt id="ipaddress.IPv4Network.subnet_of">
<code class="descname">subnet_of</code><span class="sig-paren">(</span><em>other</em><span class="sig-paren">)</span><a class="headerlink" href="#ipaddress.IPv4Network.subnet_of" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns <em>True</em> if this network is a subnet of <em>other</em>.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.168.1.0/24'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.168.1.128/30'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span><span class="o">.</span><span class="n">subnet_of</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="go">True</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7.</span></p>
</div>
</dd></dl>
<dl class="method">
<dt id="ipaddress.IPv4Network.supernet_of">
<code class="descname">supernet_of</code><span class="sig-paren">(</span><em>other</em><span class="sig-paren">)</span><a class="headerlink" href="#ipaddress.IPv4Network.supernet_of" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns <em>True</em> if this network is a supernet of <em>other</em>.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span class="o">=</span> <span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.168.1.0/24'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span class="o">=</span> <span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.168.1.128/30'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span><span class="o">.</span><span class="n">supernet_of</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="go">True</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7.</span></p>
</div>
</dd></dl>
<dl class="method">
<dt id="ipaddress.IPv4Network.compare_networks">
<code class="descname">compare_networks</code><span class="sig-paren">(</span><em>other</em><span class="sig-paren">)</span><a class="headerlink" href="#ipaddress.IPv4Network.compare_networks" title="Permalink to this definition">¶</a></dt>
<dd><p>Compare this network to <em>other</em>.  In this comparison only the network
addresses are considered; host bits aren’t.  Returns either <code class="docutils literal notranslate"><span class="pre">-1</span></code>,
<code class="docutils literal notranslate"><span class="pre">0</span></code> or <code class="docutils literal notranslate"><span class="pre">1</span></code>.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.1/32'</span><span class="p">)</span><span class="o">.</span><span class="n">compare_networks</span><span class="p">(</span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.2/32'</span><span class="p">))</span>
<span class="go">-1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.1/32'</span><span class="p">)</span><span class="o">.</span><span class="n">compare_networks</span><span class="p">(</span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.0/32'</span><span class="p">))</span>
<span class="go">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.1/32'</span><span class="p">)</span><span class="o">.</span><span class="n">compare_networks</span><span class="p">(</span><span class="n">ip_network</span><span class="p">(</span><span class="s1">'192.0.2.1/32'</span><span class="p">))</span>
<span class="go">0</span>
</pre></div>
</div>
<div class="deprecated">
<p><span class="versionmodified">Deprecated since version 3.7: </span>It uses the same ordering and comparison algorithm as “&lt;”, “==”, and “&gt;”</p>
</div>
</dd></dl>
</dd>