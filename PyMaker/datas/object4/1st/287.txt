link:
reference/compound_stmts.html#the-async-with-statement

docs:

8.8.3. The async with statement¶

async_with_stmt ::=  "async" with_stmt

An asynchronous context manager is a context manager that is
able to suspend execution in its enter and exit methods.
The following code:
async with EXPR as VAR:
    BLOCK


Is semantically equivalent to:
mgr = (EXPR)
aexit = type(mgr).__aexit__
aenter = type(mgr).__aenter__(mgr)

VAR = await aenter
try:
    BLOCK
except:
    if not await aexit(mgr, *sys.exc_info()):
        raise
else:
    await aexit(mgr, None, None, None)


See also __aenter__() and __aexit__() for details.
It is a SyntaxError to use an async with statement outside the
body of a coroutine function.

See also

PEP 492 - Coroutines with async and await syntax
The proposal that made coroutines a proper standalone concept in Python,
and added supporting syntax.


Footnotes



[1]The exception is propagated to the invocation stack unless
there is a finally clause which happens to raise another
exception. That new exception causes the old one to be lost.





[2]A string literal appearing as the first statement in the function body is
transformed into the function’s __doc__ attribute and therefore the
function’s docstring.





[3]A string literal appearing as the first statement in the class body is
transformed into the namespace’s __doc__ item and therefore the class’s
docstring.


