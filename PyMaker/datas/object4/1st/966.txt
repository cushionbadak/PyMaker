link:
library/struct.html#examples

docs:

ExamplesÂ¶

Note
All examples assume a native byte order, size, and alignment with a
big-endian machine.

A basic example of packing/unpacking three integers:
>>> from struct import *
>>> pack('hhl', 1, 2, 3)
b'\x00\x01\x00\x02\x00\x00\x00\x03'
>>> unpack('hhl', b'\x00\x01\x00\x02\x00\x00\x00\x03')
(1, 2, 3)
>>> calcsize('hhl')
8


Unpacked fields can be named by assigning them to variables or by wrapping
the result in a named tuple:
>>> record = b'raymond   \x32\x12\x08\x01\x08'
>>> name, serialnum, school, gradelevel = unpack('<10sHHb', record)

>>> from collections import namedtuple
>>> Student = namedtuple('Student', 'name serialnum school gradelevel')
>>> Student._make(unpack('<10sHHb', record))
Student(name=b'raymond   ', serialnum=4658, school=264, gradelevel=8)


The ordering of format characters may have an impact on size since the padding
needed to satisfy alignment requirements is different:
>>> pack('ci', b'*', 0x12131415)
b'*\x00\x00\x00\x12\x13\x14\x15'
>>> pack('ic', 0x12131415, b'*')
b'\x12\x13\x14\x15*'
>>> calcsize('ci')
8
>>> calcsize('ic')
5


The following format 'llh0l' specifies two pad bytes at the end, assuming
longs are aligned on 4-byte boundaries:
>>> pack('llh0l', 1, 2, 3)
b'\x00\x00\x00\x01\x00\x00\x00\x02\x00\x03\x00\x00'


This only works when native size and alignment are in effect; standard size and
alignment does not enforce any alignment.

See also

Module array
Packed binary storage of homogeneous data.
Module xdrlib
Packing and unpacking of XDR data.


