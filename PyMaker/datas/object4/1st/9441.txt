link:
library/gc.html#gc.callbacks

docs:

<dt id="gc.callbacks">
<code class="descclassname">gc.</code><code class="descname">callbacks</code><a class="headerlink" href="#gc.callbacks" title="Permalink to this definition">¶</a></dt>
<dd><p>A list of callbacks that will be invoked by the garbage collector before and
after collection.  The callbacks will be called with two arguments,
<em>phase</em> and <em>info</em>.</p>
<p><em>phase</em> can be one of two values:</p>
<blockquote>
<div><p>“start”: The garbage collection is about to start.</p>
<p>“stop”: The garbage collection has finished.</p>
</div></blockquote>
<p><em>info</em> is a dict providing more information for the callback.  The following
keys are currently defined:</p>
<blockquote>
<div><p>“generation”: The oldest generation being collected.</p>
<p>“collected”: When <em>phase</em> is “stop”, the number of objects
successfully collected.</p>
<p>“uncollectable”: When <em>phase</em> is “stop”, the number of objects
that could not be collected and were put in <a class="reference internal" href="#gc.garbage" title="gc.garbage"><code class="xref py py-data docutils literal notranslate"><span class="pre">garbage</span></code></a>.</p>
</div></blockquote>
<p>Applications can add their own callbacks to this list.  The primary
use cases are:</p>
<blockquote>
<div><p>Gathering statistics about garbage collection, such as how often
various generations are collected, and how long the collection
takes.</p>
<p>Allowing applications to identify and clear their own uncollectable
types when they appear in <a class="reference internal" href="#gc.garbage" title="gc.garbage"><code class="xref py py-data docutils literal notranslate"><span class="pre">garbage</span></code></a>.</p>
</div></blockquote>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.3.</span></p>
</div>
</dd>