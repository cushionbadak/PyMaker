link:
library/asyncio-dev.html#detect-never-awaited-coroutines

docs:

Detect never-awaited coroutinesÂ¶
When a coroutine function is called, but not awaited
(e.g. coro() instead of await coro())
or the coroutine is not scheduled with asyncio.create_task(), asyncio
will emit a RuntimeWarning:
import asyncio

async def test():
    print("never scheduled")

async def main():
    test()

asyncio.run(main())


Output:
test.py:7: RuntimeWarning: coroutine 'test' was never awaited
  test()


Output in debug mode:
test.py:7: RuntimeWarning: coroutine 'test' was never awaited
Coroutine created at (most recent call last)
  File "../t.py", line 9, in <module>
    asyncio.run(main(), debug=True)

  < .. >

  File "../t.py", line 7, in main
    test()
  test()


The usual fix is to either await the coroutine or call the
asyncio.create_task() function:
async def main():
    await test()


