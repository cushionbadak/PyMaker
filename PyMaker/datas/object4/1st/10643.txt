link:
faq/library.html#why-doesn-t-closing-sys-stdout-stdin-stderr-really-close-it

docs:

Why doesn’t closing sys.stdout (stdin, stderr) really close it?¶
Python file objects are a high-level layer of
abstraction on low-level C file descriptors.
For most file objects you create in Python via the built-in open()
function, f.close() marks the Python file object as being closed from
Python’s point of view, and also arranges to close the underlying C file
descriptor.  This also happens automatically in f’s destructor, when
f becomes garbage.
But stdin, stdout and stderr are treated specially by Python, because of the
special status also given to them by C.  Running sys.stdout.close() marks
the Python-level file object as being closed, but does not close the
associated C file descriptor.
To close the underlying C file descriptor for one of these three, you should
first be sure that’s what you really want to do (e.g., you may confuse
extension modules trying to do I/O).  If it is, use os.close():
os.close(stdin.fileno())
os.close(stdout.fileno())
os.close(stderr.fileno())


Or you can use the numeric constants 0, 1 and 2, respectively.
