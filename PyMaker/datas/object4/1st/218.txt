link:
reference/expressions.html#displays-for-lists-sets-and-dictionaries

docs:

6.2.4. Displays for lists, sets and dictionaries¶
For constructing a list, a set or a dictionary Python provides special syntax
called “displays”, each of them in two flavors:

either the container contents are listed explicitly, or
they are computed via a set of looping and filtering instructions, called a
comprehension.

Common syntax elements for comprehensions are:

comprehension ::=  expression comp_for
comp_for      ::=  ["async"] "for" target_list "in" or_test [comp_iter]
comp_iter     ::=  comp_for | comp_if
comp_if       ::=  "if" expression_nocond [comp_iter]

The comprehension consists of a single expression followed by at least one
for clause and zero or more for or if clauses.
In this case, the elements of the new container are those that would be produced
by considering each of the for or if clauses a block,
nesting from left to right, and evaluating the expression to produce an element
each time the innermost block is reached.
However, aside from the iterable expression in the leftmost for clause,
the comprehension is executed in a separate implicitly nested scope. This ensures
that names assigned to in the target list don’t “leak” into the enclosing scope.
The iterable expression in the leftmost for clause is evaluated
directly in the enclosing scope and then passed as an argument to the implictly
nested scope. Subsequent for clauses and any filter condition in the
leftmost for clause cannot be evaluated in the enclosing scope as
they may depend on the values obtained from the leftmost iterable. For example:
[x*y for x in range(10) for y in range(x, x+10)].
To ensure the comprehension always results in a container of the appropriate
type, yield and yield from expressions are prohibited in the implicitly
nested scope (in Python 3.7, such expressions emit DeprecationWarning
when compiled, in Python 3.8+ they will emit SyntaxError).
Since Python 3.6, in an async def function, an async for
clause may be used to iterate over a asynchronous iterator.
A comprehension in an async def function may consist of either a
for or async for clause following the leading
expression, may contain additional for or async for
clauses, and may also use await expressions.
If a comprehension contains either async for clauses
or await expressions it is called an
asynchronous comprehension.  An asynchronous comprehension may
suspend the execution of the coroutine function in which it appears.
See also PEP 530.

New in version 3.6: Asynchronous comprehensions were introduced.


Deprecated since version 3.7: yield and yield from deprecated in the implicitly nested scope.

