link:
library/random.html#random.choices

docs:

<dt id="random.choices">
<code class="descclassname">random.</code><code class="descname">choices</code><span class="sig-paren">(</span><em>population</em>, <em>weights=None</em>, <em>*</em>, <em>cum_weights=None</em>, <em>k=1</em><span class="sig-paren">)</span><a class="headerlink" href="#random.choices" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Return a <em>k</em> sized list of elements chosen from the <em>population</em> with replacement.
If the <em>population</em> is empty, raises <a class="reference internal" href="exceptions.html#IndexError" title="IndexError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">IndexError</span></code></a>.</p>
<p>If a <em>weights</em> sequence is specified, selections are made according to the
relative weights.  Alternatively, if a <em>cum_weights</em> sequence is given, the
selections are made according to the cumulative weights (perhaps computed
using <a class="reference internal" href="itertools.html#itertools.accumulate" title="itertools.accumulate"><code class="xref py py-func docutils literal notranslate"><span class="pre">itertools.accumulate()</span></code></a>).  For example, the relative weights
<code class="docutils literal notranslate"><span class="pre">[10,</span> <span class="pre">5,</span> <span class="pre">30,</span> <span class="pre">5]</span></code> are equivalent to the cumulative weights
<code class="docutils literal notranslate"><span class="pre">[10,</span> <span class="pre">15,</span> <span class="pre">45,</span> <span class="pre">50]</span></code>.  Internally, the relative weights are converted to
cumulative weights before making selections, so supplying the cumulative
weights saves work.</p>
<p>If neither <em>weights</em> nor <em>cum_weights</em> are specified, selections are made
with equal probability.  If a weights sequence is supplied, it must be
the same length as the <em>population</em> sequence.  It is a <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>
to specify both <em>weights</em> and <em>cum_weights</em>.</p>
<p>The <em>weights</em> or <em>cum_weights</em> can use any numeric type that interoperates
with the <a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a> values returned by <a class="reference internal" href="#module-random" title="random: Generate pseudo-random numbers with various common distributions."><code class="xref py py-func docutils literal notranslate"><span class="pre">random()</span></code></a> (that includes
integers, floats, and fractions but excludes decimals).</p>
<p>For a given seed, the <a class="reference internal" href="#random.choices" title="random.choices"><code class="xref py py-func docutils literal notranslate"><span class="pre">choices()</span></code></a> function with equal weighting
typically produces a different sequence than repeated calls to
<a class="reference internal" href="#random.choice" title="random.choice"><code class="xref py py-func docutils literal notranslate"><span class="pre">choice()</span></code></a>.  The algorithm used by <a class="reference internal" href="#random.choices" title="random.choices"><code class="xref py py-func docutils literal notranslate"><span class="pre">choices()</span></code></a> uses floating
point arithmetic for internal consistency and speed.  The algorithm used
by <a class="reference internal" href="#random.choice" title="random.choice"><code class="xref py py-func docutils literal notranslate"><span class="pre">choice()</span></code></a> defaults to integer arithmetic with repeated selections
to avoid small biases from round-off error.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.6.</span></p>
</div>
</dd>