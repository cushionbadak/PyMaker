link:
library/codecs.html#error-handlers

docs:

Error Handlers¶
To simplify and standardize error handling,
codecs may implement different error handling schemes by
accepting the errors string argument.  The following string values are
defined and implemented by all standard Python codecs:






Value
Meaning



'strict'
Raise UnicodeError (or a subclass);
this is the default.  Implemented in
strict_errors().

'ignore'
Ignore the malformed data and continue
without further notice.  Implemented in
ignore_errors().



The following error handlers are only applicable to
text encodings:






Value
Meaning



'replace'
Replace with a suitable replacement
marker; Python will use the official
U+FFFD REPLACEMENT CHARACTER for the
built-in codecs on decoding, and ‘?’ on
encoding.  Implemented in
replace_errors().

'xmlcharrefreplace'
Replace with the appropriate XML character
reference (only for encoding).  Implemented
in xmlcharrefreplace_errors().

'backslashreplace'
Replace with backslashed escape sequences.
Implemented in
backslashreplace_errors().

'namereplace'
Replace with \N{...} escape sequences
(only for encoding).  Implemented in
namereplace_errors().

'surrogateescape'
On decoding, replace byte with individual
surrogate code ranging from U+DC80 to
U+DCFF.  This code will then be turned
back into the same byte when the
'surrogateescape' error handler is used
when encoding the data.  (See PEP 383 for
more.)



In addition, the following error handler is specific to the given codecs:







Value
Codecs
Meaning



'surrogatepass'
utf-8, utf-16, utf-32,
utf-16-be, utf-16-le,
utf-32-be, utf-32-le
Allow encoding and decoding of surrogate
codes.  These codecs normally treat the
presence of surrogates as an error.




New in version 3.1: The 'surrogateescape' and 'surrogatepass' error handlers.


Changed in version 3.4: The 'surrogatepass' error handlers now works with utf-16* and utf-32* codecs.


New in version 3.5: The 'namereplace' error handler.


Changed in version 3.5: The 'backslashreplace' error handlers now works with decoding and
translating.

The set of allowed values can be extended by registering a new named error
handler:


codecs.register_error(name, error_handler)¶
Register the error handling function error_handler under the name name.
The error_handler argument will be called during encoding and decoding
in case of an error, when name is specified as the errors parameter.
For encoding, error_handler will be called with a UnicodeEncodeError
instance, which contains information about the location of the error. The
error handler must either raise this or a different exception, or return a
tuple with a replacement for the unencodable part of the input and a position
where encoding should continue. The replacement may be either str or
bytes.  If the replacement is bytes, the encoder will simply copy
them into the output buffer. If the replacement is a string, the encoder will
encode the replacement.  Encoding continues on original input at the
specified position. Negative position values will be treated as being
relative to the end of the input string. If the resulting position is out of
bound an IndexError will be raised.
Decoding and translating works similarly, except UnicodeDecodeError or
UnicodeTranslateError will be passed to the handler and that the
replacement from the error handler will be put into the output directly.

Previously registered error handlers (including the standard error handlers)
can be looked up by name:


codecs.lookup_error(name)¶
Return the error handler previously registered under the name name.
Raises a LookupError in case the handler cannot be found.

The following standard error handlers are also made available as module level
functions:


codecs.strict_errors(exception)¶
Implements the 'strict' error handling: each encoding or
decoding error raises a UnicodeError.



codecs.replace_errors(exception)¶
Implements the 'replace' error handling (for text encodings only): substitutes '?' for encoding errors
(to be encoded by the codec), and '\ufffd' (the Unicode replacement
character) for decoding errors.



codecs.ignore_errors(exception)¶
Implements the 'ignore' error handling: malformed data is ignored and
encoding or decoding is continued without further notice.



codecs.xmlcharrefreplace_errors(exception)¶
Implements the 'xmlcharrefreplace' error handling (for encoding with
text encodings only): the
unencodable character is replaced by an appropriate XML character reference.



codecs.backslashreplace_errors(exception)¶
Implements the 'backslashreplace' error handling (for
text encodings only): malformed data is
replaced by a backslashed escape sequence.



codecs.namereplace_errors(exception)¶
Implements the 'namereplace' error handling (for encoding with
text encodings only): the
unencodable character is replaced by a \N{...} escape sequence.

New in version 3.5.


