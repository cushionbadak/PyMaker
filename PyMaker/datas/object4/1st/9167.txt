link:
library/zipapp.html#examples

docs:

ExamplesÂ¶
Pack up a directory into an archive, and run it.
$ python -m zipapp myapp
$ python myapp.pyz
<output from myapp>


The same can be done using the create_archive() function:
>>> import zipapp
>>> zipapp.create_archive('myapp.pyz', 'myapp')


To make the application directly executable on POSIX, specify an interpreter
to use.
$ python -m zipapp myapp -p "/usr/bin/env python"
$ ./myapp.pyz
<output from myapp>


To replace the shebang line on an existing archive, create a modified archive
using the create_archive() function:
>>> import zipapp
>>> zipapp.create_archive('old_archive.pyz', 'new_archive.pyz', '/usr/bin/python3')


To update the file in place, do the replacement in memory using a BytesIO
object, and then overwrite the source afterwards.  Note that there is a risk
when overwriting a file in place that an error will result in the loss of
the original file.  This code does not protect against such errors, but
production code should do so.  Also, this method will only work if the archive
fits in memory:
>>> import zipapp
>>> import io
>>> temp = io.BytesIO()
>>> zipapp.create_archive('myapp.pyz', temp, '/usr/bin/python2')
>>> with open('myapp.pyz', 'wb') as f:
>>>     f.write(temp.getvalue())


