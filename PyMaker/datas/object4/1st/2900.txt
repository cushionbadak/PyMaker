link:
library/os.html#process-parameters

docs:

Process Parameters¶
These functions and data items provide information and operate on the current
process and user.


os.ctermid()¶
Return the filename corresponding to the controlling terminal of the process.
Availability: Unix.



os.environ¶
A mapping object representing the string environment. For example,
environ['HOME'] is the pathname of your home directory (on some platforms),
and is equivalent to getenv("HOME") in C.
This mapping is captured the first time the os module is imported,
typically during Python startup as part of processing site.py.  Changes
to the environment made after this time are not reflected in os.environ,
except for changes made by modifying os.environ directly.
If the platform supports the putenv() function, this mapping may be used
to modify the environment as well as query the environment.  putenv() will
be called automatically when the mapping is modified.
On Unix, keys and values use sys.getfilesystemencoding() and
'surrogateescape' error handler. Use environb if you would like
to use a different encoding.

Note
Calling putenv() directly does not change os.environ, so it’s better
to modify os.environ.


Note
On some platforms, including FreeBSD and Mac OS X, setting environ may
cause memory leaks.  Refer to the system documentation for
putenv().

If putenv() is not provided, a modified copy of this mapping  may be
passed to the appropriate process-creation functions to cause  child processes
to use a modified environment.
If the platform supports the unsetenv() function, you can delete items in
this mapping to unset environment variables. unsetenv() will be called
automatically when an item is deleted from os.environ, and when
one of the pop() or clear() methods is called.



os.environb¶
Bytes version of environ: a mapping object representing the
environment as byte strings. environ and environb are
synchronized (modify environb updates environ, and vice
versa).
environb is only available if supports_bytes_environ is
True.

New in version 3.2.




os.chdir(path)

os.fchdir(fd)

os.getcwd()
These functions are described in Files and Directories.



os.fsencode(filename)¶
Encode path-like filename to the filesystem
encoding with 'surrogateescape' error handler, or 'strict' on
Windows; return bytes unchanged.
fsdecode() is the reverse function.

New in version 3.2.


Changed in version 3.6: Support added to accept objects implementing the os.PathLike
interface.




os.fsdecode(filename)¶
Decode the path-like filename from the
filesystem encoding with 'surrogateescape' error handler, or 'strict'
on Windows; return str unchanged.
fsencode() is the reverse function.

New in version 3.2.


Changed in version 3.6: Support added to accept objects implementing the os.PathLike
interface.




os.fspath(path)¶
Return the file system representation of the path.
If str or bytes is passed in, it is returned unchanged.
Otherwise __fspath__() is called and its value is
returned as long as it is a str or bytes object.
In all other cases, TypeError is raised.

New in version 3.6.




class os.PathLike¶
An abstract base class for objects representing a file system path,
e.g. pathlib.PurePath.

New in version 3.6.



abstractmethod __fspath__()¶
Return the file system path representation of the object.
The method should only return a str or bytes object,
with the preference being for str.




os.getenv(key, default=None)¶
Return the value of the environment variable key if it exists, or
default if it doesn’t. key, default and the result are str.
On Unix, keys and values are decoded with sys.getfilesystemencoding()
and 'surrogateescape' error handler. Use os.getenvb() if you
would like to use a different encoding.
Availability: most flavors of Unix, Windows.



os.getenvb(key, default=None)¶
Return the value of the environment variable key if it exists, or
default if it doesn’t. key, default and the result are bytes.
getenvb() is only available if supports_bytes_environ
is True.
Availability: most flavors of Unix.

New in version 3.2.




os.get_exec_path(env=None)¶
Returns the list of directories that will be searched for a named
executable, similar to a shell, when launching a process.
env, when specified, should be an environment variable dictionary
to lookup the PATH in.
By default, when env is None, environ is used.

New in version 3.2.




os.getegid()¶
Return the effective group id of the current process.  This corresponds to the
“set id” bit on the file being executed in the current process.
Availability: Unix.



os.geteuid()¶
Return the current process’s effective user id.
Availability: Unix.



os.getgid()¶
Return the real group id of the current process.
Availability: Unix.



os.getgrouplist(user, group)¶
Return list of group ids that user belongs to. If group is not in the
list, it is included; typically, group is specified as the group ID
field from the password record for user.
Availability: Unix.

New in version 3.3.




os.getgroups()¶
Return list of supplemental group ids associated with the current process.
Availability: Unix.

Note
On Mac OS X, getgroups() behavior differs somewhat from
other Unix platforms. If the Python interpreter was built with a
deployment target of 10.5 or earlier, getgroups() returns
the list of effective group ids associated with the current user process;
this list is limited to a system-defined number of entries, typically 16,
and may be modified by calls to setgroups() if suitably privileged.
If built with a deployment target greater than 10.5,
getgroups() returns the current group access list for the user
associated with the effective user id of the process; the group access
list may change over the lifetime of the process, it is not affected by
calls to setgroups(), and its length is not limited to 16.  The
deployment target value, MACOSX_DEPLOYMENT_TARGET, can be
obtained with sysconfig.get_config_var().




os.getlogin()¶
Return the name of the user logged in on the controlling terminal of the
process.  For most purposes, it is more useful to use
getpass.getuser() since the latter checks the environment variables
LOGNAME or USERNAME to find out who the user is, and
falls back to pwd.getpwuid(os.getuid())[0] to get the login name of the
current real user id.
Availability: Unix, Windows.



os.getpgid(pid)¶
Return the process group id of the process with process id pid. If pid is 0,
the process group id of the current process is returned.
Availability: Unix.



os.getpgrp()¶
Return the id of the current process group.
Availability: Unix.



os.getpid()¶
Return the current process id.



os.getppid()¶
Return the parent’s process id.  When the parent process has exited, on Unix
the id returned is the one of the init process (1), on Windows it is still
the same id, which may be already reused by another process.
Availability: Unix, Windows.

Changed in version 3.2: Added support for Windows.




os.getpriority(which, who)¶
Get program scheduling priority.  The value which is one of
PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who
is interpreted relative to which (a process identifier for
PRIO_PROCESS, process group identifier for PRIO_PGRP, and a
user ID for PRIO_USER).  A zero value for who denotes
(respectively) the calling process, the process group of the calling process,
or the real user ID of the calling process.
Availability: Unix.

New in version 3.3.




os.PRIO_PROCESS¶

os.PRIO_PGRP¶

os.PRIO_USER¶
Parameters for the getpriority() and setpriority() functions.
Availability: Unix.

New in version 3.3.




os.getresuid()¶
Return a tuple (ruid, euid, suid) denoting the current process’s
real, effective, and saved user ids.
Availability: Unix.

New in version 3.2.




os.getresgid()¶
Return a tuple (rgid, egid, sgid) denoting the current process’s
real, effective, and saved group ids.
Availability: Unix.

New in version 3.2.




os.getuid()¶
Return the current process’s real user id.
Availability: Unix.



os.initgroups(username, gid)¶
Call the system initgroups() to initialize the group access list with all of
the groups of which the specified username is a member, plus the specified
group id.
Availability: Unix.

New in version 3.2.




os.putenv(key, value)¶
Set the environment variable named key to the string value.  Such
changes to the environment affect subprocesses started with os.system(),
popen() or fork() and execv().
Availability: most flavors of Unix, Windows.

Note
On some platforms, including FreeBSD and Mac OS X, setting environ may
cause memory leaks. Refer to the system documentation for putenv.

When putenv() is supported, assignments to items in os.environ are
automatically translated into corresponding calls to putenv(); however,
calls to putenv() don’t update os.environ, so it is actually
preferable to assign to items of os.environ.



os.setegid(egid)¶
Set the current process’s effective group id.
Availability: Unix.



os.seteuid(euid)¶
Set the current process’s effective user id.
Availability: Unix.



os.setgid(gid)¶
Set the current process’ group id.
Availability: Unix.



os.setgroups(groups)¶
Set the list of supplemental group ids associated with the current process to
groups. groups must be a sequence, and each element must be an integer
identifying a group. This operation is typically available only to the superuser.
Availability: Unix.

Note
On Mac OS X, the length of groups may not exceed the
system-defined maximum number of effective group ids, typically 16.
See the documentation for getgroups() for cases where it may not
return the same group list set by calling setgroups().




os.setpgrp()¶
Call the system call setpgrp() or setpgrp(0, 0) depending on
which version is implemented (if any).  See the Unix manual for the semantics.
Availability: Unix.



os.setpgid(pid, pgrp)¶
Call the system call setpgid() to set the process group id of the
process with id pid to the process group with id pgrp.  See the Unix manual
for the semantics.
Availability: Unix.



os.setpriority(which, who, priority)¶
Set program scheduling priority. The value which is one of
PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who
is interpreted relative to which (a process identifier for
PRIO_PROCESS, process group identifier for PRIO_PGRP, and a
user ID for PRIO_USER). A zero value for who denotes
(respectively) the calling process, the process group of the calling process,
or the real user ID of the calling process.
priority is a value in the range -20 to 19. The default priority is 0;
lower priorities cause more favorable scheduling.
Availability: Unix.

New in version 3.3.




os.setregid(rgid, egid)¶
Set the current process’s real and effective group ids.
Availability: Unix.



os.setresgid(rgid, egid, sgid)¶
Set the current process’s real, effective, and saved group ids.
Availability: Unix.

New in version 3.2.




os.setresuid(ruid, euid, suid)¶
Set the current process’s real, effective, and saved user ids.
Availability: Unix.

New in version 3.2.




os.setreuid(ruid, euid)¶
Set the current process’s real and effective user ids.
Availability: Unix.



os.getsid(pid)¶
Call the system call getsid().  See the Unix manual for the semantics.
Availability: Unix.



os.setsid()¶
Call the system call setsid().  See the Unix manual for the semantics.
Availability: Unix.



os.setuid(uid)¶
Set the current process’s user id.
Availability: Unix.



os.strerror(code)¶
Return the error message corresponding to the error code in code.
On platforms where strerror() returns NULL when given an unknown
error number, ValueError is raised.



os.supports_bytes_environ¶
True if the native OS type of the environment is bytes (eg. False on
Windows).

New in version 3.2.




os.umask(mask)¶
Set the current numeric umask and return the previous umask.



os.uname()¶
Returns information identifying the current operating system.
The return value is an object with five attributes:

sysname - operating system name
nodename - name of machine on network (implementation-defined)
release - operating system release
version - operating system version
machine - hardware identifier

For backwards compatibility, this object is also iterable, behaving
like a five-tuple containing sysname, nodename,
release, version, and machine
in that order.
Some systems truncate nodename to 8 characters or to the
leading component; a better way to get the hostname is
socket.gethostname()  or even
socket.gethostbyaddr(socket.gethostname()).
Availability: recent flavors of Unix.

Changed in version 3.3: Return type changed from a tuple to a tuple-like object
with named attributes.




os.unsetenv(key)¶
Unset (delete) the environment variable named key. Such changes to the
environment affect subprocesses started with os.system(), popen() or
fork() and execv().
When unsetenv() is supported, deletion of items in os.environ is
automatically translated into a corresponding call to unsetenv(); however,
calls to unsetenv() don’t update os.environ, so it is actually
preferable to delete items of os.environ.
Availability: most flavors of Unix, Windows.

