link:
library/pyexpat.html#xmlparser-objects

docs:

XMLParser Objects¶
xmlparser objects have the following methods:


xmlparser.Parse(data[, isfinal])¶
Parses the contents of the string data, calling the appropriate handler
functions to process the parsed data.  isfinal must be true on the final call
to this method; it allows the parsing of a single file in fragments,
not the submission of multiple files.
data can be the empty string at any time.



xmlparser.ParseFile(file)¶
Parse XML data reading from the object file.  file only needs to provide
the read(nbytes) method, returning the empty string when there’s no more
data.



xmlparser.SetBase(base)¶
Sets the base to be used for resolving relative URIs in system identifiers in
declarations.  Resolving relative identifiers is left to the application: this
value will be passed through as the base argument to the
ExternalEntityRefHandler(), NotationDeclHandler(), and
UnparsedEntityDeclHandler() functions.



xmlparser.GetBase()¶
Returns a string containing the base set by a previous call to SetBase(),
or None if  SetBase() hasn’t been called.



xmlparser.GetInputContext()¶
Returns the input data that generated the current event as a string. The data is
in the encoding of the entity which contains the text. When called while an
event handler is not active, the return value is None.



xmlparser.ExternalEntityParserCreate(context[, encoding])¶
Create a “child” parser which can be used to parse an external parsed entity
referred to by content parsed by the parent parser.  The context parameter
should be the string passed to the ExternalEntityRefHandler() handler
function, described below. The child parser is created with the
ordered_attributes and specified_attributes set to the values of
this parser.



xmlparser.SetParamEntityParsing(flag)¶
Control parsing of parameter entities (including the external DTD subset).
Possible flag values are XML_PARAM_ENTITY_PARSING_NEVER,
XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE and
XML_PARAM_ENTITY_PARSING_ALWAYS.  Return true if setting the flag
was successful.



xmlparser.UseForeignDTD([flag])¶
Calling this with a true value for flag (the default) will cause Expat to call
the ExternalEntityRefHandler with None for all arguments to
allow an alternate DTD to be loaded.  If the document does not contain a
document type declaration, the ExternalEntityRefHandler will still be
called, but the StartDoctypeDeclHandler and
EndDoctypeDeclHandler will not be called.
Passing a false value for flag will cancel a previous call that passed a true
value, but otherwise has no effect.
This method can only be called before the Parse() or ParseFile()
methods are called; calling it after either of those have been called causes
ExpatError to be raised with the code attribute set to
errors.codes[errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING].

xmlparser objects have the following attributes:


xmlparser.buffer_size¶
The size of the buffer used when buffer_text is true.
A new buffer size can be set by assigning a new integer value
to this attribute.
When the size is changed, the buffer will be flushed.



xmlparser.buffer_text¶
Setting this to true causes the xmlparser object to buffer textual
content returned by Expat to avoid multiple calls to the
CharacterDataHandler() callback whenever possible.  This can improve
performance substantially since Expat normally breaks character data into chunks
at every line ending.  This attribute is false by default, and may be changed at
any time.



xmlparser.buffer_used¶
If buffer_text is enabled, the number of bytes stored in the buffer.
These bytes represent UTF-8 encoded text.  This attribute has no meaningful
interpretation when buffer_text is false.



xmlparser.ordered_attributes¶
Setting this attribute to a non-zero integer causes the attributes to be
reported as a list rather than a dictionary.  The attributes are presented in
the order found in the document text.  For each attribute, two list entries are
presented: the attribute name and the attribute value.  (Older versions of this
module also used this format.)  By default, this attribute is false; it may be
changed at any time.



xmlparser.specified_attributes¶
If set to a non-zero integer, the parser will report only those attributes which
were specified in the document instance and not those which were derived from
attribute declarations.  Applications which set this need to be especially
careful to use what additional information is available from the declarations as
needed to comply with the standards for the behavior of XML processors.  By
default, this attribute is false; it may be changed at any time.

The following attributes contain values relating to the most recent error
encountered by an xmlparser object, and will only have correct values
once a call to Parse() or ParseFile() has raised an
xml.parsers.expat.ExpatError exception.


xmlparser.ErrorByteIndex¶
Byte index at which an error occurred.



xmlparser.ErrorCode¶
Numeric code specifying the problem.  This value can be passed to the
ErrorString() function, or compared to one of the constants defined in the
errors object.



xmlparser.ErrorColumnNumber¶
Column number at which an error occurred.



xmlparser.ErrorLineNumber¶
Line number at which an error occurred.

The following attributes contain values relating to the current parse location
in an xmlparser object.  During a callback reporting a parse event they
indicate the location of the first of the sequence of characters that generated
the event.  When called outside of a callback, the position indicated will be
just past the last parse event (regardless of whether there was an associated
callback).


xmlparser.CurrentByteIndex¶
Current byte index in the parser input.



xmlparser.CurrentColumnNumber¶
Current column number in the parser input.



xmlparser.CurrentLineNumber¶
Current line number in the parser input.

Here is the list of handlers that can be set.  To set a handler on an
xmlparser object o, use o.handlername = func.  handlername must
be taken from the following list, and func must be a callable object accepting
the correct number of arguments.  The arguments are all strings, unless
otherwise stated.


xmlparser.XmlDeclHandler(version, encoding, standalone)¶
Called when the XML declaration is parsed.  The XML declaration is the
(optional) declaration of the applicable version of the XML recommendation, the
encoding of the document text, and an optional “standalone” declaration.
version and encoding will be strings, and standalone will be 1 if the
document is declared standalone, 0 if it is declared not to be standalone,
or -1 if the standalone clause was omitted. This is only available with
Expat version 1.95.0 or newer.



xmlparser.StartDoctypeDeclHandler(doctypeName, systemId, publicId, has_internal_subset)¶
Called when Expat begins parsing the document type declaration (<!DOCTYPE
...).  The doctypeName is provided exactly as presented.  The systemId and
publicId parameters give the system and public identifiers if specified, or
None if omitted.  has_internal_subset will be true if the document
contains and internal document declaration subset. This requires Expat version
1.2 or newer.



xmlparser.EndDoctypeDeclHandler()¶
Called when Expat is done parsing the document type declaration. This requires
Expat version 1.2 or newer.



xmlparser.ElementDeclHandler(name, model)¶
Called once for each element type declaration.  name is the name of the
element type, and model is a representation of the content model.



xmlparser.AttlistDeclHandler(elname, attname, type, default, required)¶
Called for each declared attribute for an element type.  If an attribute list
declaration declares three attributes, this handler is called three times, once
for each attribute.  elname is the name of the element to which the
declaration applies and attname is the name of the attribute declared.  The
attribute type is a string passed as type; the possible values are
'CDATA', 'ID', 'IDREF', … default gives the default value for
the attribute used when the attribute is not specified by the document instance,
or None if there is no default value (#IMPLIED values).  If the
attribute is required to be given in the document instance, required will be
true. This requires Expat version 1.95.0 or newer.



xmlparser.StartElementHandler(name, attributes)¶
Called for the start of every element.  name is a string containing the
element name, and attributes is the element attributes. If
ordered_attributes is true, this is a list (see
ordered_attributes for a full description). Otherwise it’s a
dictionary mapping names to values.



xmlparser.EndElementHandler(name)¶
Called for the end of every element.



xmlparser.ProcessingInstructionHandler(target, data)¶
Called for every processing instruction.



xmlparser.CharacterDataHandler(data)¶
Called for character data.  This will be called for normal character data, CDATA
marked content, and ignorable whitespace.  Applications which must distinguish
these cases can use the StartCdataSectionHandler,
EndCdataSectionHandler, and ElementDeclHandler callbacks to
collect the required information.



xmlparser.UnparsedEntityDeclHandler(entityName, base, systemId, publicId, notationName)¶
Called for unparsed (NDATA) entity declarations.  This is only present for
version 1.2 of the Expat library; for more recent versions, use
EntityDeclHandler instead.  (The underlying function in the Expat
library has been declared obsolete.)



xmlparser.EntityDeclHandler(entityName, is_parameter_entity, value, base, systemId, publicId, notationName)¶
Called for all entity declarations.  For parameter and internal entities,
value will be a string giving the declared contents of the entity; this will
be None for external entities.  The notationName parameter will be
None for parsed entities, and the name of the notation for unparsed
entities. is_parameter_entity will be true if the entity is a parameter entity
or false for general entities (most applications only need to be concerned with
general entities). This is only available starting with version 1.95.0 of the
Expat library.



xmlparser.NotationDeclHandler(notationName, base, systemId, publicId)¶
Called for notation declarations.  notationName, base, and systemId, and
publicId are strings if given.  If the public identifier is omitted,
publicId will be None.



xmlparser.StartNamespaceDeclHandler(prefix, uri)¶
Called when an element contains a namespace declaration.  Namespace declarations
are processed before the StartElementHandler is called for the element
on which declarations are placed.



xmlparser.EndNamespaceDeclHandler(prefix)¶
Called when the closing tag is reached for an element  that contained a
namespace declaration.  This is called once for each namespace declaration on
the element in the reverse of the order for which the
StartNamespaceDeclHandler was called to indicate the start of each
namespace declaration’s scope.  Calls to this handler are made after the
corresponding EndElementHandler for the end of the element.



xmlparser.CommentHandler(data)¶
Called for comments.  data is the text of the comment, excluding the leading
'<!--' and trailing '-->'.



xmlparser.StartCdataSectionHandler()¶
Called at the start of a CDATA section.  This and EndCdataSectionHandler
are needed to be able to identify the syntactical start and end for CDATA
sections.



xmlparser.EndCdataSectionHandler()¶
Called at the end of a CDATA section.



xmlparser.DefaultHandler(data)¶
Called for any characters in the XML document for which no applicable handler
has been specified.  This means characters that are part of a construct which
could be reported, but for which no handler has been supplied.



xmlparser.DefaultHandlerExpand(data)¶
This is the same as the DefaultHandler(),  but doesn’t inhibit expansion
of internal entities. The entity reference will not be passed to the default
handler.



xmlparser.NotStandaloneHandler()¶
Called if the XML document hasn’t been declared as being a standalone document.
This happens when there is an external subset or a reference to a parameter
entity, but the XML declaration does not set standalone to yes in an XML
declaration.  If this handler returns 0, then the parser will raise an
XML_ERROR_NOT_STANDALONE error.  If this handler is not set, no
exception is raised by the parser for this condition.



xmlparser.ExternalEntityRefHandler(context, base, systemId, publicId)¶
Called for references to external entities.  base is the current base, as set
by a previous call to SetBase().  The public and system identifiers,
systemId and publicId, are strings if given; if the public identifier is not
given, publicId will be None.  The context value is opaque and should
only be used as described below.
For external entities to be parsed, this handler must be implemented. It is
responsible for creating the sub-parser using
ExternalEntityParserCreate(context), initializing it with the appropriate
callbacks, and parsing the entity.  This handler should return an integer; if it
returns 0, the parser will raise an
XML_ERROR_EXTERNAL_ENTITY_HANDLING error, otherwise parsing will
continue.
If this handler is not provided, external entities are reported by the
DefaultHandler callback, if provided.

