link:
library/_thread.html#_thread.lock.acquire

docs:

<dt id="_thread.lock.acquire">
<code class="descclassname">lock.</code><code class="descname">acquire</code><span class="sig-paren">(</span><em>waitflag=1</em>, <em>timeout=-1</em><span class="sig-paren">)</span><a class="headerlink" href="#_thread.lock.acquire" title="Permalink to this definition">¶</a></dt>
<dd><p>Without any optional argument, this method acquires the lock unconditionally, if
necessary waiting until it is released by another thread (only one thread at a
time can acquire a lock — that’s their reason for existence).</p>
<p>If the integer <em>waitflag</em> argument is present, the action depends on its
value: if it is zero, the lock is only acquired if it can be acquired
immediately without waiting, while if it is nonzero, the lock is acquired
unconditionally as above.</p>
<p>If the floating-point <em>timeout</em> argument is present and positive, it
specifies the maximum wait time in seconds before returning.  A negative
<em>timeout</em> argument specifies an unbounded wait.  You cannot specify
a <em>timeout</em> if <em>waitflag</em> is zero.</p>
<p>The return value is <code class="docutils literal notranslate"><span class="pre">True</span></code> if the lock is acquired successfully,
<code class="docutils literal notranslate"><span class="pre">False</span></code> if not.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>The <em>timeout</em> parameter is new.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>Lock acquires can now be interrupted by signals on POSIX.</p>
</div>
</dd>