link:
library/email.contentmanager.html#email.contentmanager.ContentManager.set_content

docs:

<dt id="email.contentmanager.ContentManager.set_content">
<code class="descname">set_content</code><span class="sig-paren">(</span><em>msg</em>, <em>obj</em>, <em>*args</em>, <em>**kw</em><span class="sig-paren">)</span><a class="headerlink" href="#email.contentmanager.ContentManager.set_content" title="Permalink to this definition">¶</a></dt>
<dd><p>If the <code class="docutils literal notranslate"><span class="pre">maintype</span></code> is <code class="docutils literal notranslate"><span class="pre">multipart</span></code>, raise a <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>; otherwise
look up a handler function based on the type of <em>obj</em> (see next
paragraph), call <a class="reference internal" href="email.message.html#email.message.EmailMessage.clear_content" title="email.message.EmailMessage.clear_content"><code class="xref py py-meth docutils literal notranslate"><span class="pre">clear_content()</span></code></a> on the
<em>msg</em>, and call the handler function, passing through all arguments.  The
expectation is that the handler will transform and store <em>obj</em> into
<em>msg</em>, possibly making other changes to <em>msg</em> as well, such as adding
various MIME headers to encode information needed to interpret the stored
data.</p>
<p>To find the handler, obtain the type of <em>obj</em> (<code class="docutils literal notranslate"><span class="pre">typ</span> <span class="pre">=</span> <span class="pre">type(obj)</span></code>), and
look for the following keys in the registry, stopping with the first one
found:</p>
<blockquote>
<div><ul class="simple">
<li>the type itself (<code class="docutils literal notranslate"><span class="pre">typ</span></code>)</li>
<li>the type’s fully qualified name (<code class="docutils literal notranslate"><span class="pre">typ.__module__</span> <span class="pre">+</span> <span class="pre">'.'</span> <span class="pre">+</span>
<span class="pre">typ.__qualname__</span></code>).</li>
<li>the type’s qualname (<code class="docutils literal notranslate"><span class="pre">typ.__qualname__</span></code>)</li>
<li>the type’s name (<code class="docutils literal notranslate"><span class="pre">typ.__name__</span></code>).</li>
</ul>
</div></blockquote>
<p>If none of the above match, repeat all of the checks above for each of
the types in the <a class="reference internal" href="../glossary.html#term-mro"><span class="xref std std-term">MRO</span></a> (<code class="docutils literal notranslate"><span class="pre">typ.__mro__</span></code>).  Finally, if no other key
yields a handler, check for a handler for the key <code class="docutils literal notranslate"><span class="pre">None</span></code>.  If there is
no handler for <code class="docutils literal notranslate"><span class="pre">None</span></code>, raise a <a class="reference internal" href="exceptions.html#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> for the fully
qualified name of the type.</p>
<p>Also add a <em class="mailheader">MIME-Version</em> header if one is not present (see
also <a class="reference internal" href="email.message.html#email.message.MIMEPart" title="email.message.MIMEPart"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEPart</span></code></a>).</p>
</dd>