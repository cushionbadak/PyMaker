link:
library/select.html#dev-poll-polling-objects

docs:

/dev/poll Polling Objects¶
Solaris and derivatives have /dev/poll. While select() is
O(highest file descriptor) and poll() is O(number of file
descriptors), /dev/poll is O(active file descriptors).
/dev/poll behaviour is very close to the standard poll()
object.


devpoll.close()¶
Close the file descriptor of the polling object.

New in version 3.4.




devpoll.closed¶
True if the polling object is closed.

New in version 3.4.




devpoll.fileno()¶
Return the file descriptor number of the polling object.

New in version 3.4.




devpoll.register(fd[, eventmask])¶
Register a file descriptor with the polling object.  Future calls to the
poll() method will then check whether the file descriptor has any
pending I/O events.  fd can be either an integer, or an object with a
fileno() method that returns an integer.  File objects
implement fileno(), so they can also be used as the argument.
eventmask is an optional bitmask describing the type of events you want to
check for. The constants are the same that with poll()
object. The default value is a combination of the constants POLLIN,
POLLPRI, and POLLOUT.

Warning
Registering a file descriptor that’s already registered is not an
error, but the result is undefined. The appropriate action is to
unregister or modify it first. This is an important difference
compared with poll().




devpoll.modify(fd[, eventmask])¶
This method does an unregister() followed by a
register(). It is (a bit) more efficient that doing the same
explicitly.



devpoll.unregister(fd)¶
Remove a file descriptor being tracked by a polling object.  Just like the
register() method, fd can be an integer or an object with a
fileno() method that returns an integer.
Attempting to remove a file descriptor that was never registered is
safely ignored.



devpoll.poll([timeout])¶
Polls the set of registered file descriptors, and returns a possibly-empty list
containing (fd, event) 2-tuples for the descriptors that have events or
errors to report. fd is the file descriptor, and event is a bitmask with
bits set for the reported events for that descriptor — POLLIN for
waiting input, POLLOUT to indicate that the descriptor can be written
to, and so forth. An empty list indicates that the call timed out and no file
descriptors had any events to report. If timeout is given, it specifies the
length of time in milliseconds which the system will wait for events before
returning. If timeout is omitted, -1, or None, the call will
block until there is an event for this poll object.

Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by
a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale), instead of raising
InterruptedError.


