link:
library/codecs.html#incremental-encoding-and-decoding

docs:

Incremental Encoding and Decoding¶
The IncrementalEncoder and IncrementalDecoder classes provide
the basic interface for incremental encoding and decoding. Encoding/decoding the
input isn’t done with one call to the stateless encoder/decoder function, but
with multiple calls to the
encode()/decode() method of
the incremental encoder/decoder. The incremental encoder/decoder keeps track of
the encoding/decoding process during method calls.
The joined output of calls to the
encode()/decode() method is
the same as if all the single inputs were joined into one, and this input was
encoded/decoded with the stateless encoder/decoder.

IncrementalEncoder Objects¶
The IncrementalEncoder class is used for encoding an input in multiple
steps. It defines the following methods which every incremental encoder must
define in order to be compatible with the Python codec registry.


class codecs.IncrementalEncoder(errors='strict')¶
Constructor for an IncrementalEncoder instance.
All incremental encoders must provide this constructor interface. They are free
to add additional keyword arguments, but only the ones defined here are used by
the Python codec registry.
The IncrementalEncoder may implement different error handling schemes
by providing the errors keyword argument. See Error Handlers for
possible values.
The errors argument will be assigned to an attribute of the same name.
Assigning to this attribute makes it possible to switch between different error
handling strategies during the lifetime of the IncrementalEncoder
object.


encode(object[, final])¶
Encodes object (taking the current state of the encoder into account)
and returns the resulting encoded object. If this is the last call to
encode() final must be true (the default is false).



reset()¶
Reset the encoder to the initial state. The output is discarded: call
.encode(object, final=True), passing an empty byte or text string
if necessary, to reset the encoder and to get the output.



getstate()¶
Return the current state of the encoder which must be an integer. The
implementation should make sure that 0 is the most common
state. (States that are more complicated than integers can be converted
into an integer by marshaling/pickling the state and encoding the bytes
of the resulting string into an integer).



setstate(state)¶
Set the state of the encoder to state. state must be an encoder state
returned by getstate().




IncrementalDecoder Objects¶
The IncrementalDecoder class is used for decoding an input in multiple
steps. It defines the following methods which every incremental decoder must
define in order to be compatible with the Python codec registry.


class codecs.IncrementalDecoder(errors='strict')¶
Constructor for an IncrementalDecoder instance.
All incremental decoders must provide this constructor interface. They are free
to add additional keyword arguments, but only the ones defined here are used by
the Python codec registry.
The IncrementalDecoder may implement different error handling schemes
by providing the errors keyword argument. See Error Handlers for
possible values.
The errors argument will be assigned to an attribute of the same name.
Assigning to this attribute makes it possible to switch between different error
handling strategies during the lifetime of the IncrementalDecoder
object.


decode(object[, final])¶
Decodes object (taking the current state of the decoder into account)
and returns the resulting decoded object. If this is the last call to
decode() final must be true (the default is false). If final is
true the decoder must decode the input completely and must flush all
buffers. If this isn’t possible (e.g. because of incomplete byte sequences
at the end of the input) it must initiate error handling just like in the
stateless case (which might raise an exception).



reset()¶
Reset the decoder to the initial state.



getstate()¶
Return the current state of the decoder. This must be a tuple with two
items, the first must be the buffer containing the still undecoded
input. The second must be an integer and can be additional state
info. (The implementation should make sure that 0 is the most common
additional state info.) If this additional state info is 0 it must be
possible to set the decoder to the state which has no input buffered and
0 as the additional state info, so that feeding the previously
buffered input to the decoder returns it to the previous state without
producing any output. (Additional state info that is more complicated than
integers can be converted into an integer by marshaling/pickling the info
and encoding the bytes of the resulting string into an integer.)



setstate(state)¶
Set the state of the decoder to state. state must be a decoder state
returned by getstate().



