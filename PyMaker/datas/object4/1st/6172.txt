link:
library/xml.dom.html#xml.dom.getDOMImplementation

docs:

<dt id="xml.dom.getDOMImplementation">
<code class="descclassname">xml.dom.</code><code class="descname">getDOMImplementation</code><span class="sig-paren">(</span><em>name=None</em>, <em>features=()</em><span class="sig-paren">)</span><a class="headerlink" href="#xml.dom.getDOMImplementation" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Return a suitable DOM implementation. The <em>name</em> is either well-known, the
module name of a DOM implementation, or <code class="docutils literal notranslate"><span class="pre">None</span></code>. If it is not <code class="docutils literal notranslate"><span class="pre">None</span></code>, imports
the corresponding module and returns a <code class="xref py py-class docutils literal notranslate"><span class="pre">DOMImplementation</span></code> object if the
import succeeds.  If no name is given, and if the environment variable
<span class="target" id="index-0"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">PYTHON_DOM</span></code> is set, this variable is used to find the implementation.</p>
<p>If name is not given, this examines the available implementations to find one
with the required feature set.  If no implementation can be found, raise an
<a class="reference internal" href="exceptions.html#ImportError" title="ImportError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ImportError</span></code></a>.  The features list must be a sequence of <code class="docutils literal notranslate"><span class="pre">(feature,</span>
<span class="pre">version)</span></code> pairs which are passed to the <code class="xref py py-meth docutils literal notranslate"><span class="pre">hasFeature()</span></code> method on available
<code class="xref py py-class docutils literal notranslate"><span class="pre">DOMImplementation</span></code> objects.</p>
</dd>