link:
library/unittest.mock.html#patch-object

docs:

patch.object¶


patch.object(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)¶
patch the named member (attribute) on an object (target) with a mock
object.
patch.object() can be used as a decorator, class decorator or a context
manager. Arguments new, spec, create, spec_set, autospec and
new_callable have the same meaning as for patch(). Like patch(),
patch.object() takes arbitrary keyword arguments for configuring the mock
object it creates.
When used as a class decorator patch.object() honours patch.TEST_PREFIX
for choosing which methods to wrap.

You can either call patch.object() with three arguments or two arguments. The
three argument form takes the object to be patched, the attribute name and the
object to replace the attribute with.
When calling with the two argument form you omit the replacement object, and a
mock is created for you and passed in as an extra argument to the decorated
function:
>>> @patch.object(SomeClass, 'class_method')
... def test(mock_method):
...     SomeClass.class_method(3)
...     mock_method.assert_called_with(3)
...
>>> test()


spec, create and the other arguments to patch.object() have the same
meaning as they do for patch().
