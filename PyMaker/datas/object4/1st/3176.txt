link:
library/os.html#os.register_at_fork

docs:

<dt id="os.register_at_fork">
<code class="descclassname">os.</code><code class="descname">register_at_fork</code><span class="sig-paren">(</span><em>*</em>, <em>before=None</em>, <em>after_in_parent=None</em>, <em>after_in_child=None</em><span class="sig-paren">)</span><a class="headerlink" href="#os.register_at_fork" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Register callables to be executed when a new child process is forked
using <a class="reference internal" href="#os.fork" title="os.fork"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.fork()</span></code></a> or similar process cloning APIs.
The parameters are optional and keyword-only.
Each specifies a different call point.</p>
<ul class="simple">
<li><em>before</em> is a function called before forking a child process.</li>
<li><em>after_in_parent</em> is a function called from the parent process
after forking a child process.</li>
<li><em>after_in_child</em> is a function called from the child process.</li>
</ul>
<p>These calls are only made if control is expected to return to the
Python interpreter.  A typical <a class="reference internal" href="subprocess.html#module-subprocess" title="subprocess: Subprocess management."><code class="xref py py-mod docutils literal notranslate"><span class="pre">subprocess</span></code></a> launch will not
trigger them as the child is not going to re-enter the interpreter.</p>
<p>Functions registered for execution before forking are called in
reverse registration order.  Functions registered for execution
after forking (either in the parent or in the child) are called
in registration order.</p>
<p>Note that <code class="xref c c-func docutils literal notranslate"><span class="pre">fork()</span></code> calls made by third-party C code may not
call those functions, unless it explicitly calls <a class="reference internal" href="../c-api/sys.html#c.PyOS_BeforeFork" title="PyOS_BeforeFork"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyOS_BeforeFork()</span></code></a>,
<a class="reference internal" href="../c-api/sys.html#c.PyOS_AfterFork_Parent" title="PyOS_AfterFork_Parent"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyOS_AfterFork_Parent()</span></code></a> and <a class="reference internal" href="../c-api/sys.html#c.PyOS_AfterFork_Child" title="PyOS_AfterFork_Child"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyOS_AfterFork_Child()</span></code></a>.</p>
<p>There is no way to unregister a function.</p>
<p class="availability"><a class="reference internal" href="intro.html#availability"><span class="std std-ref">Availability</span></a>: Unix.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7.</span></p>
</div>
</dd>