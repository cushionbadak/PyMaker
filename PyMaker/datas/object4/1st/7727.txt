link:
library/gettext.html#gettext.NullTranslations

docs:


class gettext.NullTranslations(fp=None)¶
Takes an optional file object fp, which is ignored by the base class.
Initializes “protected” instance variables _info and _charset which are set
by derived classes, as well as _fallback, which is set through
add_fallback().  It then calls self._parse(fp) if fp is not
None.


_parse(fp)¶
No-op in the base class, this method takes file object fp, and reads
the data from the file, initializing its message catalog.  If you have an
unsupported message catalog file format, you should override this method
to parse your format.



add_fallback(fallback)¶
Add fallback as the fallback object for the current translation object.
A translation object should consult the fallback if it cannot provide a
translation for a given message.



gettext(message)¶
If a fallback has been set, forward gettext() to the fallback.
Otherwise, return message.  Overridden in derived classes.



ngettext(singular, plural, n)¶
If a fallback has been set, forward ngettext() to the fallback.
Otherwise, return singular if n is 1; return plural otherwise.
Overridden in derived classes.



lgettext(message)¶



lngettext(singular, plural, n)¶
Equivalent to gettext() and ngettext(), but the translation
is returned as a byte string encoded in the preferred system encoding
if no encoding was explicitly set with set_output_charset().
Overridden in derived classes.

Warning
These methods should be avoided in Python 3.  See the warning for the
lgettext() function.




info()¶
Return the “protected” _info variable, a dictionary containing
the metadata found in the message catalog file.



charset()¶
Return the encoding of the message catalog file.



output_charset()¶
Return the encoding used to return translated messages in lgettext()
and lngettext().



set_output_charset(charset)¶
Change the encoding used to return translated messages.



install(names=None)¶
This method installs gettext() into the built-in namespace,
binding it to _.
If the names parameter is given, it must be a sequence containing the
names of functions you want to install in the builtins namespace in
addition to _().  Supported names are 'gettext', 'ngettext',
'lgettext' and 'lngettext'.
Note that this is only one way, albeit the most convenient way, to make
the _() function available to your application.  Because it affects
the entire application globally, and specifically the built-in namespace,
localized modules should never install _(). Instead, they should use
this code to make _() available to their module:
import gettext
t = gettext.translation('mymodule', ...)
_ = t.gettext


This puts _() only in the module’s global namespace and so only
affects calls within this module.

