link:
library/zipapp.html#command-line-interface

docs:

Command-Line Interface¶
When called as a program from the command line, the following form is used:
$ python -m zipapp source [options]


If source is a directory, this will create an archive from the contents of
source.  If source is a file, it should be an archive, and it will be
copied to the target archive (or the contents of its shebang line will be
displayed if the –info option is specified).
The following options are understood:


-o <output>, --output=<output>¶
Write the output to a file named output.  If this option is not specified,
the output filename will be the same as the input source, with the
extension .pyz added.  If an explicit filename is given, it is used as
is (so a .pyz extension should be included if required).
An output filename must be specified if the source is an archive (and in
that case, output must not be the same as source).



-p <interpreter>, --python=<interpreter>¶
Add a #! line to the archive specifying interpreter as the command
to run.  Also, on POSIX, make the archive executable.  The default is to
write no #! line, and not make the file executable.



-m <mainfn>, --main=<mainfn>¶
Write a __main__.py file to the archive that executes mainfn.  The
mainfn argument should have the form “pkg.mod:fn”, where “pkg.mod” is a
package/module in the archive, and “fn” is a callable in the given module.
The __main__.py file will execute that callable.
--main cannot be specified when copying an archive.



-c, --compress¶
Compress files with the deflate method, reducing the size of the output
file. By default, files are stored uncompressed in the archive.
--compress has no effect when copying an archive.

New in version 3.7.




--info¶
Display the interpreter embedded in the archive, for diagnostic purposes.  In
this case, any other options are ignored and SOURCE must be an archive, not a
directory.



-h, --help¶
Print a short usage message and exit.

