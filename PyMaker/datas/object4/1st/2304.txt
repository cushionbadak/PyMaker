link:
library/pickle.html#data-stream-format

docs:

Data stream format¶
The data format used by pickle is Python-specific.  This has the
advantage that there are no restrictions imposed by external standards such as
JSON or XDR (which can’t represent pointer sharing); however it means that
non-Python programs may not be able to reconstruct pickled Python objects.
By default, the pickle data format uses a relatively compact binary
representation.  If you need optimal size characteristics, you can efficiently
compress pickled data.
The module pickletools contains tools for analyzing data streams
generated by pickle.  pickletools source code has extensive
comments about opcodes used by pickle protocols.
There are currently 5 different protocols which can be used for pickling.
The higher the protocol used, the more recent the version of Python needed
to read the pickle produced.

Protocol version 0 is the original “human-readable” protocol and is
backwards compatible with earlier versions of Python.
Protocol version 1 is an old binary format which is also compatible with
earlier versions of Python.
Protocol version 2 was introduced in Python 2.3.  It provides much more
efficient pickling of new-style classes.  Refer to PEP 307 for
information about improvements brought by protocol 2.
Protocol version 3 was added in Python 3.0.  It has explicit support for
bytes objects and cannot be unpickled by Python 2.x.  This is
the default protocol, and the recommended protocol when compatibility with
other Python 3 versions is required.
Protocol version 4 was added in Python 3.4.  It adds support for very large
objects, pickling more kinds of objects, and some data format
optimizations.  Refer to PEP 3154 for information about improvements
brought by protocol 4.


Note
Serialization is a more primitive notion than persistence; although
pickle reads and writes file objects, it does not handle the issue of
naming persistent objects, nor the (even more complicated) issue of concurrent
access to persistent objects.  The pickle module can transform a complex
object into a byte stream and it can transform the byte stream into an object
with the same internal structure.  Perhaps the most obvious thing to do with
these byte streams is to write them onto a file, but it is also conceivable to
send them across a network or store them in a database.  The shelve
module provides a simple interface to pickle and unpickle objects on
DBM-style database files.

