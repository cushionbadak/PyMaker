link:
library/hmac.html#hmac.digest

docs:

<dt id="hmac.digest">
<code class="descclassname">hmac.</code><code class="descname">digest</code><span class="sig-paren">(</span><em>key</em>, <em>msg</em>, <em>digest</em><span class="sig-paren">)</span><a class="headerlink" href="#hmac.digest" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Return digest of <em>msg</em> for given secret <em>key</em> and <em>digest</em>. The
function is equivalent to <code class="docutils literal notranslate"><span class="pre">HMAC(key,</span> <span class="pre">msg,</span> <span class="pre">digest).digest()</span></code>, but
uses an optimized C or inline implementation, which is faster for messages
that fit into memory. The parameters <em>key</em>, <em>msg</em>, and <em>digest</em> have
the same meaning as in <a class="reference internal" href="#hmac.new" title="hmac.new"><code class="xref py py-func docutils literal notranslate"><span class="pre">new()</span></code></a>.</p>
<p>CPython implementation detail, the optimized C implementation is only used
when <em>digest</em> is a string and name of a digest algorithm, which is
supported by OpenSSL.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7.</span></p>
</div>
</dd>