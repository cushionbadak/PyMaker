link:
library/configparser.html#configparser.ConfigParser.get

docs:

<dt id="configparser.ConfigParser.get">
<code class="descname">get</code><span class="sig-paren">(</span><em>section</em>, <em>option</em>, <em>*</em>, <em>raw=False</em>, <em>vars=None</em><span class="optional">[</span>, <em>fallback</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.get" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Get an <em>option</em> value for the named <em>section</em>.  If <em>vars</em> is provided, it
must be a dictionary.  The <em>option</em> is looked up in <em>vars</em> (if provided),
<em>section</em>, and in <em>DEFAULTSECT</em> in that order.  If the key is not found
and <em>fallback</em> is provided, it is used as a fallback value.  <code class="docutils literal notranslate"><span class="pre">None</span></code> can
be provided as a <em>fallback</em> value.</p>
<p>All the <code class="docutils literal notranslate"><span class="pre">'%'</span></code> interpolations are expanded in the return values, unless
the <em>raw</em> argument is true.  Values for interpolation keys are looked up
in the same manner as the option.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>Arguments <em>raw</em>, <em>vars</em> and <em>fallback</em> are keyword only to protect
users from trying to use the third argument as the <em>fallback</em> fallback
(especially when using the mapping protocol).</p>
</div>
</dd>