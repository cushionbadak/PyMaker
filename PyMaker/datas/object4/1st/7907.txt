link:
library/turtle.html#window-control

docs:

Window control¶


turtle.bgcolor(*args)¶




Parameters:args – a color string or three numbers in the range 0..colormode or a
3-tuple of such numbers



Set or return background color of the TurtleScreen.
>>> screen.bgcolor("orange")
>>> screen.bgcolor()
'orange'
>>> screen.bgcolor("#800080")
>>> screen.bgcolor()
(128.0, 0.0, 128.0)





turtle.bgpic(picname=None)¶




Parameters:picname – a string, name of a gif-file or "nopic", or None



Set background image or return name of current backgroundimage.  If picname
is a filename, set the corresponding image as background.  If picname is
"nopic", delete background image, if present.  If picname is None,
return the filename of the current backgroundimage.
>>> screen.bgpic()
'nopic'
>>> screen.bgpic("landscape.gif")
>>> screen.bgpic()
"landscape.gif"





turtle.clear()

turtle.clearscreen()¶
Delete all drawings and all turtles from the TurtleScreen.  Reset the now
empty TurtleScreen to its initial state: white background, no background
image, no event bindings and tracing on.

Note
This TurtleScreen method is available as a global function only under the
name clearscreen.  The global function clear is a different one
derived from the Turtle method clear.




turtle.reset()

turtle.resetscreen()¶
Reset all Turtles on the Screen to their initial state.

Note
This TurtleScreen method is available as a global function only under the
name resetscreen.  The global function reset is another one
derived from the Turtle method reset.




turtle.screensize(canvwidth=None, canvheight=None, bg=None)¶




Parameters:
canvwidth – positive integer, new width of canvas in pixels
canvheight – positive integer, new height of canvas in pixels
bg – colorstring or color-tuple, new background color





If no arguments are given, return current (canvaswidth, canvasheight).  Else
resize the canvas the turtles are drawing on.  Do not alter the drawing
window.  To observe hidden parts of the canvas, use the scrollbars. With this
method, one can make visible those parts of a drawing which were outside the
canvas before.
>>> screen.screensize()
(400, 300)
>>> screen.screensize(2000,1500)
>>> screen.screensize()
(2000, 1500)


e.g. to search for an erroneously escaped turtle ;-)



turtle.setworldcoordinates(llx, lly, urx, ury)¶




Parameters:
llx – a number, x-coordinate of lower left corner of canvas
lly – a number, y-coordinate of lower left corner of canvas
urx – a number, x-coordinate of upper right corner of canvas
ury – a number, y-coordinate of upper right corner of canvas





Set up user-defined coordinate system and switch to mode “world” if
necessary.  This performs a screen.reset().  If mode “world” is already
active, all drawings are redrawn according to the new coordinates.
ATTENTION: in user-defined coordinate systems angles may appear
distorted.
>>> screen.reset()
>>> screen.setworldcoordinates(-50,-7.5,50,7.5)
>>> for _ in range(72):
...     left(10)
...
>>> for _ in range(8):
...     left(45); fd(2)   # a regular octagon



