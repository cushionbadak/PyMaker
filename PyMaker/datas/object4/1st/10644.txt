link:
faq/library.html#network-internet-programming

docs:

Network/Internet Programming¶

What WWW tools are there for Python?¶
See the chapters titled Internet Protocols and Support and Internet Data Handling in the Library
Reference Manual.  Python has many modules that will help you build server-side
and client-side web systems.
A summary of available frameworks is maintained by Paul Boddie at
https://wiki.python.org/moin/WebProgramming.
Cameron Laird maintains a useful set of pages about Python web technologies at
http://phaseit.net/claird/comp.lang.python/web_python.


How can I mimic CGI form submission (METHOD=POST)?¶
I would like to retrieve web pages that are the result of POSTing a form. Is
there existing code that would let me do this easily?
Yes. Here’s a simple example that uses urllib.request:
#!/usr/local/bin/python

import urllib.request

# build the query string
qs = "First=Josephine&MI=Q&Last=Public"

# connect and send the server a path
req = urllib.request.urlopen('http://www.some-server.out-there'
                             '/cgi-bin/some-cgi-script', data=qs)
with req:
    msg, hdrs = req.read(), req.info()


Note that in general for percent-encoded POST operations, query strings must be
quoted using urllib.parse.urlencode().  For example, to send
name=Guy Steele, Jr.:
>>> import urllib.parse
>>> urllib.parse.urlencode({'name': 'Guy Steele, Jr.'})
'name=Guy+Steele%2C+Jr.'



See also
HOWTO Fetch Internet Resources Using The urllib Package for extensive examples.



What module should I use to help with generating HTML?¶
You can find a collection of useful links on the Web Programming wiki page.


How do I send mail from a Python script?¶
Use the standard library module smtplib.
Here’s a very simple interactive mail sender that uses it.  This method will
work on any host that supports an SMTP listener.
import sys, smtplib

fromaddr = input("From: ")
toaddrs  = input("To: ").split(',')
print("Enter message, end with ^D:")
msg = ''
while True:
    line = sys.stdin.readline()
    if not line:
        break
    msg += line

# The actual mail send
server = smtplib.SMTP('localhost')
server.sendmail(fromaddr, toaddrs, msg)
server.quit()


A Unix-only alternative uses sendmail.  The location of the sendmail program
varies between systems; sometimes it is /usr/lib/sendmail, sometimes
/usr/sbin/sendmail.  The sendmail manual page will help you out.  Here’s
some sample code:
import os

SENDMAIL = "/usr/sbin/sendmail"  # sendmail location
p = os.popen("%s -t -i" % SENDMAIL, "w")
p.write("To: receiver@example.com\n")
p.write("Subject: test\n")
p.write("\n")  # blank line separating headers from body
p.write("Some text\n")
p.write("some more text\n")
sts = p.close()
if sts != 0:
    print("Sendmail exit status", sts)




How do I avoid blocking in the connect() method of a socket?¶
The select module is commonly used to help with asynchronous I/O on
sockets.
To prevent the TCP connect from blocking, you can set the socket to non-blocking
mode.  Then when you do the connect(), you will either connect immediately
(unlikely) or get an exception that contains the error number as .errno.
errno.EINPROGRESS indicates that the connection is in progress, but hasn’t
finished yet.  Different OSes will return different values, so you’re going to
have to check what’s returned on your system.
You can use the connect_ex() method to avoid creating an exception.  It will
just return the errno value.  To poll, you can call connect_ex() again later
– 0 or errno.EISCONN indicate that you’re connected – or you can pass this
socket to select to check if it’s writable.

Note
The asyncore module presents a framework-like approach to the problem
of writing non-blocking networking code.
The third-party Twisted library is
a popular and feature-rich alternative.


