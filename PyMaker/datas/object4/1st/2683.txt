link:
library/csv.html#csv.Sniffer

docs:

<dt id="csv.Sniffer">
<em class="property">class </em><code class="descclassname">csv.</code><code class="descname">Sniffer</code><a class="headerlink" href="#csv.Sniffer" title="Permalink to this definition">¶</a></dt>
<dd><p>The <a class="reference internal" href="#csv.Sniffer" title="csv.Sniffer"><code class="xref py py-class docutils literal notranslate"><span class="pre">Sniffer</span></code></a> class is used to deduce the format of a CSV file.</p>
<p>The <a class="reference internal" href="#csv.Sniffer" title="csv.Sniffer"><code class="xref py py-class docutils literal notranslate"><span class="pre">Sniffer</span></code></a> class provides two methods:</p>
<dl class="method">
<dt id="csv.Sniffer.sniff">
<code class="descname">sniff</code><span class="sig-paren">(</span><em>sample</em>, <em>delimiters=None</em><span class="sig-paren">)</span><a class="headerlink" href="#csv.Sniffer.sniff" title="Permalink to this definition">¶</a></dt>
<dd><p>Analyze the given <em>sample</em> and return a <a class="reference internal" href="#csv.Dialect" title="csv.Dialect"><code class="xref py py-class docutils literal notranslate"><span class="pre">Dialect</span></code></a> subclass
reflecting the parameters found.  If the optional <em>delimiters</em> parameter
is given, it is interpreted as a string containing possible valid
delimiter characters.</p>
</dd></dl>
<dl class="method">
<dt id="csv.Sniffer.has_header">
<code class="descname">has_header</code><span class="sig-paren">(</span><em>sample</em><span class="sig-paren">)</span><a class="headerlink" href="#csv.Sniffer.has_header" title="Permalink to this definition">¶</a></dt>
<dd><p>Analyze the sample text (presumed to be in CSV format) and return
<a class="reference internal" href="constants.html#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a> if the first row appears to be a series of column headers.</p>
</dd></dl>
</dd>