link:
library/sys.html#sys.exc_info

docs:

<dt id="sys.exc_info">
<code class="descclassname">sys.</code><code class="descname">exc_info</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#sys.exc_info" title="Permalink to this definition">¶</a></dt>
<dd><p>This function returns a tuple of three values that give information about the
exception that is currently being handled.  The information returned is specific
both to the current thread and to the current stack frame.  If the current stack
frame is not handling an exception, the information is taken from the calling
stack frame, or its caller, and so on until a stack frame is found that is
handling an exception.  Here, “handling an exception” is defined as “executing
an except clause.”  For any stack frame, only information about the exception
being currently handled is accessible.</p>
<p id="index-5">If no exception is being handled anywhere on the stack, a tuple containing
three <code class="docutils literal notranslate"><span class="pre">None</span></code> values is returned.  Otherwise, the values returned are
<code class="docutils literal notranslate"><span class="pre">(type,</span> <span class="pre">value,</span> <span class="pre">traceback)</span></code>.  Their meaning is: <em>type</em> gets the type of the
exception being handled (a subclass of <a class="reference internal" href="exceptions.html#BaseException" title="BaseException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BaseException</span></code></a>); <em>value</em> gets
the exception instance (an instance of the exception type); <em>traceback</em> gets
a traceback object (see the Reference Manual) which encapsulates the call
stack at the point where the exception originally occurred.</p>
</dd>