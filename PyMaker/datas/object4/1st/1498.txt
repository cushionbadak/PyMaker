link:
library/enum.html#omitting-values

docs:

Omitting values¶
In many use-cases one doesn’t care what the actual value of an enumeration
is. There are several ways to define this type of simple enumeration:

use instances of auto for the value
use instances of object as the value
use a descriptive string as the value
use a tuple as the value and a custom __new__() to replace the
tuple with an int value

Using any of these methods signifies to the user that these values are not
important, and also enables one to add, remove, or reorder members without
having to renumber the remaining members.
Whichever method you choose, you should provide a repr() that also hides
the (unimportant) value:
>>> class NoValue(Enum):
...     def __repr__(self):
...         return '<%s.%s>' % (self.__class__.__name__, self.name)
...



Using auto¶
Using auto would look like:
>>> class Color(NoValue):
...     RED = auto()
...     BLUE = auto()
...     GREEN = auto()
...
>>> Color.GREEN
<Color.GREEN>




Using object¶
Using object would look like:
>>> class Color(NoValue):
...     RED = object()
...     GREEN = object()
...     BLUE = object()
...
>>> Color.GREEN
<Color.GREEN>




Using a descriptive string¶
Using a string as the value would look like:
>>> class Color(NoValue):
...     RED = 'stop'
...     GREEN = 'go'
...     BLUE = 'too fast!'
...
>>> Color.GREEN
<Color.GREEN>
>>> Color.GREEN.value
'go'




Using a custom __new__()¶
Using an auto-numbering __new__() would look like:
>>> class AutoNumber(NoValue):
...     def __new__(cls):
...         value = len(cls.__members__) + 1
...         obj = object.__new__(cls)
...         obj._value_ = value
...         return obj
...
>>> class Color(AutoNumber):
...     RED = ()
...     GREEN = ()
...     BLUE = ()
...
>>> Color.GREEN
<Color.GREEN>
>>> Color.GREEN.value
2



Note
The __new__() method, if defined, is used during creation of the Enum
members; it is then replaced by Enum’s __new__() which is used after
class creation for lookup of existing members.


