link:
library/heapq.html#basic-examples

docs:

Basic ExamplesÂ¶
A heapsort can be implemented by
pushing all values onto a heap and then popping off the smallest values one at a
time:
>>> def heapsort(iterable):
...     h = []
...     for value in iterable:
...         heappush(h, value)
...     return [heappop(h) for i in range(len(h))]
...
>>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


This is similar to sorted(iterable), but unlike sorted(), this
implementation is not stable.
Heap elements can be tuples.  This is useful for assigning comparison values
(such as task priorities) alongside the main record being tracked:
>>> h = []
>>> heappush(h, (5, 'write code'))
>>> heappush(h, (7, 'release product'))
>>> heappush(h, (1, 'write spec'))
>>> heappush(h, (3, 'create tests'))
>>> heappop(h)
(1, 'write spec')


