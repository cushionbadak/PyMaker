link:
library/email.compat32-message.html#email.message.Message.as_string

docs:


as_string(unixfrom=False, maxheaderlen=0, policy=None)¶
Return the entire message flattened as a string.  When optional unixfrom
is true, the envelope header is included in the returned string.
unixfrom defaults to False.  For backward compatibility reasons,
maxheaderlen defaults to 0, so if you want a different value you
must override it explicitly (the value specified for max_line_length in
the policy will be ignored by this method).  The policy argument may be
used to override the default policy obtained from the message instance.
This can be used to control some of the formatting produced by the
method, since the specified policy will be passed to the Generator.
Flattening the message may trigger changes to the Message if
defaults need to be filled in to complete the transformation to a string
(for example, MIME boundaries may be generated or modified).
Note that this method is provided as a convenience and may not always
format the message the way you want.  For example, by default it does
not do the mangling of lines that begin with From that is
required by the unix mbox format.  For more flexibility, instantiate a
Generator instance and use its
flatten() method directly.  For example:
from io import StringIO
from email.generator import Generator
fp = StringIO()
g = Generator(fp, mangle_from_=True, maxheaderlen=60)
g.flatten(msg)
text = fp.getvalue()


If the message object contains binary data that is not encoded according
to RFC standards, the non-compliant data will be replaced by unicode
“unknown character” code points.  (See also as_bytes() and
BytesGenerator.)

Changed in version 3.4: the policy keyword argument was added.

