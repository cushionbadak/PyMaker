link:
library/sys.html#sys.settrace

docs:

<dt id="sys.settrace">
<code class="descclassname">sys.</code><code class="descname">settrace</code><span class="sig-paren">(</span><em>tracefunc</em><span class="sig-paren">)</span><a class="headerlink" href="#sys.settrace" title="Permalink to this definition">¶</a></dt>
<dd><p id="index-25">Set the system’s trace function, which allows you to implement a Python
source code debugger in Python.  The function is thread-specific; for a
debugger to support multiple threads, it must be registered using
<a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a> for each thread being debugged.</p>
<p>Trace functions should have three arguments: <em>frame</em>, <em>event</em>, and
<em>arg</em>. <em>frame</em> is the current stack frame.  <em>event</em> is a string: <code class="docutils literal notranslate"><span class="pre">'call'</span></code>,
<code class="docutils literal notranslate"><span class="pre">'line'</span></code>, <code class="docutils literal notranslate"><span class="pre">'return'</span></code>, <code class="docutils literal notranslate"><span class="pre">'exception'</span></code> or <code class="docutils literal notranslate"><span class="pre">'opcode'</span></code>.  <em>arg</em> depends on
the event type.</p>
<p>The trace function is invoked (with <em>event</em> set to <code class="docutils literal notranslate"><span class="pre">'call'</span></code>) whenever a new
local scope is entered; it should return a reference to a local trace
function to be used that scope, or <code class="docutils literal notranslate"><span class="pre">None</span></code> if the scope shouldn’t be traced.</p>
<p>The local trace function should return a reference to itself (or to another
function for further tracing in that scope), or <code class="docutils literal notranslate"><span class="pre">None</span></code> to turn off tracing
in that scope.</p>
<p>If there is any error occurred in the trace function, it will be unset, just
like <code class="docutils literal notranslate"><span class="pre">settrace(None)</span></code> is called.</p>
<p>The events have the following meaning:</p>
<dl class="docutils">
<dt><code class="docutils literal notranslate"><span class="pre">'call'</span></code></dt>
<dd>A function is called (or some other code block entered).  The
global trace function is called; <em>arg</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code>; the return value
specifies the local trace function.</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'line'</span></code></dt>
<dd>The interpreter is about to execute a new line of code or re-execute the
condition of a loop.  The local trace function is called; <em>arg</em> is
<code class="docutils literal notranslate"><span class="pre">None</span></code>; the return value specifies the new local trace function.  See
<code class="file docutils literal notranslate"><span class="pre">Objects/lnotab_notes.txt</span></code> for a detailed explanation of how this
works.
Per-line events may be disabled for a frame by setting
<code class="xref py py-attr docutils literal notranslate"><span class="pre">f_trace_lines</span></code> to <a class="reference internal" href="constants.html#False" title="False"><code class="xref py py-const docutils literal notranslate"><span class="pre">False</span></code></a> on that frame.</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'return'</span></code></dt>
<dd>A function (or other code block) is about to return.  The local trace
function is called; <em>arg</em> is the value that will be returned, or <code class="docutils literal notranslate"><span class="pre">None</span></code>
if the event is caused by an exception being raised.  The trace function’s
return value is ignored.</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'exception'</span></code></dt>
<dd>An exception has occurred.  The local trace function is called; <em>arg</em> is a
tuple <code class="docutils literal notranslate"><span class="pre">(exception,</span> <span class="pre">value,</span> <span class="pre">traceback)</span></code>; the return value specifies the
new local trace function.</dd>
<dt><code class="docutils literal notranslate"><span class="pre">'opcode'</span></code></dt>
<dd>The interpreter is about to execute a new opcode (see <a class="reference internal" href="dis.html#module-dis" title="dis: Disassembler for Python bytecode."><code class="xref py py-mod docutils literal notranslate"><span class="pre">dis</span></code></a> for
opcode details).  The local trace function is called; <em>arg</em> is
<code class="docutils literal notranslate"><span class="pre">None</span></code>; the return value specifies the new local trace function.
Per-opcode events are not emitted by default: they must be explicitly
requested by setting <code class="xref py py-attr docutils literal notranslate"><span class="pre">f_trace_opcodes</span></code> to <a class="reference internal" href="constants.html#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a> on the
frame.</dd>
</dl>
<p>Note that as an exception is propagated down the chain of callers, an
<code class="docutils literal notranslate"><span class="pre">'exception'</span></code> event is generated at each level.</p>
<p>For more information on code and frame objects, refer to <a class="reference internal" href="../reference/datamodel.html#types"><span class="std std-ref">The standard type hierarchy</span></a>.</p>
<div class="impl-detail compound">
<p><strong>CPython implementation detail:</strong> The <a class="reference internal" href="#sys.settrace" title="sys.settrace"><code class="xref py py-func docutils literal notranslate"><span class="pre">settrace()</span></code></a> function is intended only for implementing debuggers,
profilers, coverage tools and the like.  Its behavior is part of the
implementation platform, rather than part of the language definition, and
thus may not be available in all Python implementations.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span><code class="docutils literal notranslate"><span class="pre">'opcode'</span></code> event type added; <code class="xref py py-attr docutils literal notranslate"><span class="pre">f_trace_lines</span></code> and
<code class="xref py py-attr docutils literal notranslate"><span class="pre">f_trace_opcodes</span></code> attributes added to frames</p>
</div>
</dd>