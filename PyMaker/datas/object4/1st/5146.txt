link:
library/ssl.html#random-generation

docs:

Random generation¶


ssl.RAND_bytes(num)¶
Return num cryptographically strong pseudo-random bytes. Raises an
SSLError if the PRNG has not been seeded with enough data or if the
operation is not supported by the current RAND method. RAND_status()
can be used to check the status of the PRNG and RAND_add() can be used
to seed the PRNG.
For almost all applications os.urandom() is preferable.
Read the Wikipedia article, Cryptographically secure pseudorandom number
generator (CSPRNG),
to get the requirements of a cryptographically generator.

New in version 3.3.




ssl.RAND_pseudo_bytes(num)¶
Return (bytes, is_cryptographic): bytes are num pseudo-random bytes,
is_cryptographic is True if the bytes generated are cryptographically
strong. Raises an SSLError if the operation is not supported by the
current RAND method.
Generated pseudo-random byte sequences will be unique if they are of
sufficient length, but are not necessarily unpredictable. They can be used
for non-cryptographic purposes and for certain purposes in cryptographic
protocols, but usually not for key generation etc.
For almost all applications os.urandom() is preferable.

New in version 3.3.


Deprecated since version 3.6: OpenSSL has deprecated ssl.RAND_pseudo_bytes(), use
ssl.RAND_bytes() instead.




ssl.RAND_status()¶
Return True if the SSL pseudo-random number generator has been seeded
with ‘enough’ randomness, and False otherwise.  You can use
ssl.RAND_egd() and ssl.RAND_add() to increase the randomness of
the pseudo-random number generator.



ssl.RAND_egd(path)¶
If you are running an entropy-gathering daemon (EGD) somewhere, and path
is the pathname of a socket connection open to it, this will read 256 bytes
of randomness from the socket, and add it to the SSL pseudo-random number
generator to increase the security of generated secret keys.  This is
typically only necessary on systems without better sources of randomness.
See http://egd.sourceforge.net/ or http://prngd.sourceforge.net/ for sources
of entropy-gathering daemons.
Availability: not available with LibreSSL and OpenSSL > 1.1.0.



ssl.RAND_add(bytes, entropy)¶
Mix the given bytes into the SSL pseudo-random number generator.  The
parameter entropy (a float) is a lower bound on the entropy contained in
string (so you can always use 0.0).  See RFC 1750 for more
information on sources of entropy.

Changed in version 3.5: Writable bytes-like object is now accepted.


