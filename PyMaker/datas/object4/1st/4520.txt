link:
library/subprocess.html#legacy-shell-invocation-functions

docs:

Legacy Shell Invocation Functions¶
This module also provides the following legacy functions from the 2.x
commands module. These operations implicitly invoke the system shell and
none of the guarantees described above regarding security and exception
handling consistency are valid for these functions.


subprocess.getstatusoutput(cmd)¶
Return (exitcode, output) of executing cmd in a shell.
Execute the string cmd in a shell with Popen.check_output() and
return a 2-tuple (exitcode, output). The locale encoding is used;
see the notes on Frequently Used Arguments for more details.
A trailing newline is stripped from the output.
The exit code for the command can be interpreted as the return code
of subprocess.  Example:
>>> subprocess.getstatusoutput('ls /bin/ls')
(0, '/bin/ls')
>>> subprocess.getstatusoutput('cat /bin/junk')
(1, 'cat: /bin/junk: No such file or directory')
>>> subprocess.getstatusoutput('/bin/junk')
(127, 'sh: /bin/junk: not found')
>>> subprocess.getstatusoutput('/bin/kill $$')
(-15, '')


Availability: POSIX & Windows.

Changed in version 3.3.4: Windows support was added.
The function now returns (exitcode, output) instead of (status, output)
as it did in Python 3.3.3 and earlier.  exitcode has the same value as
returncode.




subprocess.getoutput(cmd)¶
Return output (stdout and stderr) of executing cmd in a shell.
Like getstatusoutput(), except the exit code is ignored and the return
value is a string containing the command’s output.  Example:
>>> subprocess.getoutput('ls /bin/ls')
'/bin/ls'


Availability: POSIX & Windows.

Changed in version 3.3.4: Windows support added


