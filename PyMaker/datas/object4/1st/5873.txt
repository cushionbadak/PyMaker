link:
library/mailbox.html#mailbox.mbox

docs:

<dt id="mailbox.mbox">
<em class="property">class </em><code class="descclassname">mailbox.</code><code class="descname">mbox</code><span class="sig-paren">(</span><em>path</em>, <em>factory=None</em>, <em>create=True</em><span class="sig-paren">)</span><a class="headerlink" href="#mailbox.mbox" title="Permalink to this definition">¶</a></dt>
<dd><p>A subclass of <a class="reference internal" href="#mailbox.Mailbox" title="mailbox.Mailbox"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mailbox</span></code></a> for mailboxes in mbox format. Parameter <em>factory</em>
is a callable object that accepts a file-like message representation (which
behaves as if opened in binary mode) and returns a custom representation. If
<em>factory</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code>, <a class="reference internal" href="#mailbox.mboxMessage" title="mailbox.mboxMessage"><code class="xref py py-class docutils literal notranslate"><span class="pre">mboxMessage</span></code></a> is used as the default message
representation. If <em>create</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code>, the mailbox is created if it does not
exist.</p>
<p>The mbox format is the classic format for storing mail on Unix systems. All
messages in an mbox mailbox are stored in a single file with the beginning of
each message indicated by a line whose first five characters are “From “.</p>
<p>Several variations of the mbox format exist to address perceived shortcomings in
the original. In the interest of compatibility, <a class="reference internal" href="#mailbox.mbox" title="mailbox.mbox"><code class="xref py py-class docutils literal notranslate"><span class="pre">mbox</span></code></a> implements the
original format, which is sometimes referred to as <em class="dfn">mboxo</em>. This means that
the <em class="mailheader">Content-Length</em> header, if present, is ignored and that any
occurrences of “From ” at the beginning of a line in a message body are
transformed to “&gt;From ” when storing the message, although occurrences of “&gt;From
” are not transformed to “From ” when reading the message.</p>
<p>Some <a class="reference internal" href="#mailbox.Mailbox" title="mailbox.Mailbox"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mailbox</span></code></a> methods implemented by <a class="reference internal" href="#mailbox.mbox" title="mailbox.mbox"><code class="xref py py-class docutils literal notranslate"><span class="pre">mbox</span></code></a> deserve special
remarks:</p>
<dl class="method">
<dt id="mailbox.mbox.get_file">
<code class="descname">get_file</code><span class="sig-paren">(</span><em>key</em><span class="sig-paren">)</span><a class="headerlink" href="#mailbox.mbox.get_file" title="Permalink to this definition">¶</a></dt>
<dd><p>Using the file after calling <code class="xref py py-meth docutils literal notranslate"><span class="pre">flush()</span></code> or <code class="xref py py-meth docutils literal notranslate"><span class="pre">close()</span></code> on the
<a class="reference internal" href="#mailbox.mbox" title="mailbox.mbox"><code class="xref py py-class docutils literal notranslate"><span class="pre">mbox</span></code></a> instance may yield unpredictable results or raise an
exception.</p>
</dd></dl>
<dl class="method">
<dt id="mailbox.mbox.lock">
<code class="descname">lock</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#mailbox.mbox.lock" title="Permalink to this definition">¶</a></dt>
<dt id="mailbox.mbox.unlock">
<code class="descname">unlock</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#mailbox.mbox.unlock" title="Permalink to this definition">¶</a></dt>
<dd><p>Three locking mechanisms are used—dot locking and, if available, the
<code class="xref c c-func docutils literal notranslate"><span class="pre">flock()</span></code> and <code class="xref c c-func docutils literal notranslate"><span class="pre">lockf()</span></code> system calls.</p>
</dd></dl>
</dd>