link:
library/ssl.html#ssl.wrap_socket

docs:


ssl.wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version=PROTOCOL_TLS, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None)Â¶
Takes an instance sock of socket.socket, and returns an instance
of ssl.SSLSocket, a subtype of socket.socket, which wraps
the underlying socket in an SSL context.  sock must be a
SOCK_STREAM socket; other socket types are unsupported.
Internally, function creates a SSLContext with protocol
ssl_version and SSLContext.options set to cert_reqs. If
parameters keyfile, certfile, ca_certs or ciphers are set, then
the values are passed to SSLContext.load_cert_chain(),
SSLContext.load_verify_locations(), and
SSLContext.set_ciphers().
The arguments server_side, do_handshake_on_connect, and
suppress_ragged_eofs have the same meaning as
SSLContext.wrap_socket().

Deprecated since version 3.7: Since Python 3.2 and 2.7.9, it is recommended to use the
SSLContext.wrap_socket() instead of wrap_socket(). The
top-level function is limited and creates an insecure client socket
without server name indication or hostname matching.

