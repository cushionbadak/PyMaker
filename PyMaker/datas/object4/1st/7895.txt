link:
library/turtle.html#special-turtle-methods

docs:

Special Turtle methods¶


turtle.begin_poly()¶
Start recording the vertices of a polygon.  Current turtle position is first
vertex of polygon.



turtle.end_poly()¶
Stop recording the vertices of a polygon.  Current turtle position is last
vertex of polygon.  This will be connected with the first vertex.



turtle.get_poly()¶
Return the last recorded polygon.
>>> turtle.home()
>>> turtle.begin_poly()
>>> turtle.fd(100)
>>> turtle.left(20)
>>> turtle.fd(30)
>>> turtle.left(60)
>>> turtle.fd(50)
>>> turtle.end_poly()
>>> p = turtle.get_poly()
>>> register_shape("myFavouriteShape", p)





turtle.clone()¶
Create and return a clone of the turtle with same position, heading and
turtle properties.
>>> mick = Turtle()
>>> joe = mick.clone()





turtle.getturtle()¶

turtle.getpen()¶
Return the Turtle object itself.  Only reasonable use: as a function to
return the “anonymous turtle”:
>>> pet = getturtle()
>>> pet.fd(50)
>>> pet
<turtle.Turtle object at 0x...>





turtle.getscreen()¶
Return the TurtleScreen object the turtle is drawing on.
TurtleScreen methods can then be called for that object.
>>> ts = turtle.getscreen()
>>> ts
<turtle._Screen object at 0x...>
>>> ts.bgcolor("pink")





turtle.setundobuffer(size)¶




Parameters:size – an integer or None



Set or disable undobuffer.  If size is an integer an empty undobuffer of
given size is installed.  size gives the maximum number of turtle actions
that can be undone by the undo() method/function.  If size is
None, the undobuffer is disabled.
>>> turtle.setundobuffer(42)





turtle.undobufferentries()¶
Return number of entries in the undobuffer.
>>> while undobufferentries():
...     undo()



