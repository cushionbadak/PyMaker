link:
reference/compound_stmts.html#coroutine-function-definition

docs:

8.8.1. Coroutine function definitionÂ¶

async_funcdef ::=  [decorators] "async" "def" funcname "(" [parameter_list] ")"
                   ["->" expression] ":" suite

Execution of Python coroutines can be suspended and resumed at many points
(see coroutine).  Inside the body of a coroutine function, await and
async identifiers become reserved keywords; await expressions,
async for and async with can only be used in
coroutine function bodies.
Functions defined with async def syntax are always coroutine functions,
even if they do not contain await or async keywords.
It is a SyntaxError to use a yield from expression inside the body
of a coroutine function.
An example of a coroutine function:
async def func(param1, param2):
    do_stuff()
    await some_coroutine()


