link:
library/logging.html#logging.Logger.setLevel

docs:

<dt id="logging.Logger.setLevel">
<code class="descname">setLevel</code><span class="sig-paren">(</span><em>level</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.Logger.setLevel" title="Permalink to this definition">¶</a></dt>
<dd><p>Sets the threshold for this logger to <em>level</em>. Logging messages which are less
severe than <em>level</em> will be ignored; logging messages which have severity <em>level</em>
or higher will be emitted by whichever handler or handlers service this logger,
unless a handler’s level has been set to a higher severity level than <em>level</em>.</p>
<p>When a logger is created, the level is set to <code class="xref py py-const docutils literal notranslate"><span class="pre">NOTSET</span></code> (which causes
all messages to be processed when the logger is the root logger, or delegation
to the parent when the logger is a non-root logger). Note that the root logger
is created with level <code class="xref py py-const docutils literal notranslate"><span class="pre">WARNING</span></code>.</p>
<p>The term ‘delegation to the parent’ means that if a logger has a level of
NOTSET, its chain of ancestor loggers is traversed until either an ancestor with
a level other than NOTSET is found, or the root is reached.</p>
<p>If an ancestor is found with a level other than NOTSET, then that ancestor’s
level is treated as the effective level of the logger where the ancestor search
began, and is used to determine how a logging event is handled.</p>
<p>If the root is reached, and it has a level of NOTSET, then all messages will be
processed. Otherwise, the root’s level will be used as the effective level.</p>
<p>See <a class="reference internal" href="#levels"><span class="std std-ref">Logging Levels</span></a> for a list of levels.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>The <em>level</em> parameter now accepts a string representation of the
level such as ‘INFO’ as an alternative to the integer constants
such as <code class="xref py py-const docutils literal notranslate"><span class="pre">INFO</span></code>. Note, however, that levels are internally stored
as integers, and methods such as e.g. <a class="reference internal" href="#logging.Logger.getEffectiveLevel" title="logging.Logger.getEffectiveLevel"><code class="xref py py-meth docutils literal notranslate"><span class="pre">getEffectiveLevel()</span></code></a> and
<a class="reference internal" href="#logging.Logger.isEnabledFor" title="logging.Logger.isEnabledFor"><code class="xref py py-meth docutils literal notranslate"><span class="pre">isEnabledFor()</span></code></a> will return/expect to be passed integers.</p>
</div>
</dd>