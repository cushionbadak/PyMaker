link:
library/logging.html#logging.Logger.setLevel

docs:


setLevel(level)¶
Sets the threshold for this logger to level. Logging messages which are less
severe than level will be ignored; logging messages which have severity level
or higher will be emitted by whichever handler or handlers service this logger,
unless a handler’s level has been set to a higher severity level than level.
When a logger is created, the level is set to NOTSET (which causes
all messages to be processed when the logger is the root logger, or delegation
to the parent when the logger is a non-root logger). Note that the root logger
is created with level WARNING.
The term ‘delegation to the parent’ means that if a logger has a level of
NOTSET, its chain of ancestor loggers is traversed until either an ancestor with
a level other than NOTSET is found, or the root is reached.
If an ancestor is found with a level other than NOTSET, then that ancestor’s
level is treated as the effective level of the logger where the ancestor search
began, and is used to determine how a logging event is handled.
If the root is reached, and it has a level of NOTSET, then all messages will be
processed. Otherwise, the root’s level will be used as the effective level.
See Logging Levels for a list of levels.

Changed in version 3.2: The level parameter now accepts a string representation of the
level such as ‘INFO’ as an alternative to the integer constants
such as INFO. Note, however, that levels are internally stored
as integers, and methods such as e.g. getEffectiveLevel() and
isEnabledFor() will return/expect to be passed integers.

