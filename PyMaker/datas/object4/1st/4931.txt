link:
library/asyncio-protocol.html#buffered-streaming-protocols

docs:

Buffered Streaming Protocols¶

New in version 3.7: Important: this has been added to asyncio in Python 3.7
on a provisional basis!  This is as an experimental API that
might be changed or removed completely in Python 3.8.

Buffered Protocols can be used with any event loop method
that supports Streaming Protocols.
BufferedProtocol implementations allow explicit manual allocation
and control of the receive buffer.  Event loops can then use the buffer
provided by the protocol to avoid unnecessary data copies.  This
can result in noticeable performance improvement for protocols that
receive big amounts of data.  Sophisticated protocol implementations
can significantly reduce the number of buffer allocations.
The following callbacks are called on BufferedProtocol
instances:


BufferedProtocol.get_buffer(sizehint)¶
Called to allocate a new receive buffer.
sizehint is the recommended minimum size for the returned
buffer.  It is acceptable to return smaller or larger buffers
than what sizehint suggests.  When set to -1, the buffer size
can be arbitrary. It is an error to return a buffer with a zero size.
get_buffer() must return an object implementing the
buffer protocol.



BufferedProtocol.buffer_updated(nbytes)¶
Called when the buffer was updated with the received data.
nbytes is the total number of bytes that were written to the buffer.



BufferedProtocol.eof_received()¶
See the documentation of the protocol.eof_received() method.

get_buffer() can be called an arbitrary number
of times during a connection.  However, protocol.eof_received() is called at most once
and, if called, get_buffer() and
buffer_updated() won’t be called after it.
State machine:
start -> connection_made
    [-> get_buffer
        [-> buffer_updated]?
    ]*
    [-> eof_received]?
-> connection_lost -> end


