link:
library/optparse.html#optparse.Option.TYPE_CHECKER

docs:

<dt id="optparse.Option.TYPE_CHECKER">
<code class="descclassname">Option.</code><code class="descname">TYPE_CHECKER</code><a class="headerlink" href="#optparse.Option.TYPE_CHECKER" title="Permalink to this definition">¶</a></dt>
<dd><p>A dictionary mapping type names to type-checking functions.  A type-checking
function has the following signature:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">check_mytype</span><span class="p">(</span><span class="n">option</span><span class="p">,</span> <span class="n">opt</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</pre></div>
</div>
<p>where <code class="docutils literal notranslate"><span class="pre">option</span></code> is an <code class="xref py py-class docutils literal notranslate"><span class="pre">Option</span></code> instance, <code class="docutils literal notranslate"><span class="pre">opt</span></code> is an option string
(e.g., <code class="docutils literal notranslate"><span class="pre">-f</span></code>), and <code class="docutils literal notranslate"><span class="pre">value</span></code> is the string from the command line that must
be checked and converted to your desired type.  <code class="docutils literal notranslate"><span class="pre">check_mytype()</span></code> should
return an object of the hypothetical type <code class="docutils literal notranslate"><span class="pre">mytype</span></code>.  The value returned by
a type-checking function will wind up in the OptionValues instance returned
by <code class="xref py py-meth docutils literal notranslate"><span class="pre">OptionParser.parse_args()</span></code>, or be passed to a callback as the
<code class="docutils literal notranslate"><span class="pre">value</span></code> parameter.</p>
<p>Your type-checking function should raise <code class="xref py py-exc docutils literal notranslate"><span class="pre">OptionValueError</span></code> if it
encounters any problems.  <code class="xref py py-exc docutils literal notranslate"><span class="pre">OptionValueError</span></code> takes a single string
argument, which is passed as-is to <a class="reference internal" href="#optparse.OptionParser" title="optparse.OptionParser"><code class="xref py py-class docutils literal notranslate"><span class="pre">OptionParser</span></code></a>’s <code class="xref py py-meth docutils literal notranslate"><span class="pre">error()</span></code>
method, which in turn prepends the program name and the string <code class="docutils literal notranslate"><span class="pre">"error:"</span></code>
and prints everything to stderr before terminating the process.</p>
</dd>