link:
library/sqlite3.html#sqlite3.PARSE_COLNAMES

docs:

<dt id="sqlite3.PARSE_COLNAMES">
<code class="descclassname">sqlite3.</code><code class="descname">PARSE_COLNAMES</code><a class="headerlink" href="#sqlite3.PARSE_COLNAMES" title="Permalink to this definition">¶</a></dt>
<dd><p>This constant is meant to be used with the <em>detect_types</em> parameter of the
<a class="reference internal" href="#sqlite3.connect" title="sqlite3.connect"><code class="xref py py-func docutils literal notranslate"><span class="pre">connect()</span></code></a> function.</p>
<p>Setting this makes the SQLite interface parse the column name for each column it
returns.  It will look for a string formed [mytype] in there, and then decide
that ‘mytype’ is the type of the column. It will try to find an entry of
‘mytype’ in the converters dictionary and then use the converter function found
there to return the value. The column name found in <a class="reference internal" href="#sqlite3.Cursor.description" title="sqlite3.Cursor.description"><code class="xref py py-attr docutils literal notranslate"><span class="pre">Cursor.description</span></code></a>
is only the first word of the column name, i.  e. if you use something like
<code class="docutils literal notranslate"><span class="pre">'as</span> <span class="pre">"x</span> <span class="pre">[datetime]"'</span></code> in your SQL, then we will parse out everything until the
first blank for the column name: the column name would simply be “x”.</p>
</dd>