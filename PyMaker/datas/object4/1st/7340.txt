link:
library/xmlrpc.client.html#multicall-objects

docs:

MultiCall Objects¶
The MultiCall object provides a way to encapsulate multiple calls to a
remote server into a single request [1].


class xmlrpc.client.MultiCall(server)¶
Create an object used to boxcar method calls. server is the eventual target of
the call. Calls can be made to the result object, but they will immediately
return None, and only store the call name and parameters in the
MultiCall object. Calling the object itself causes all stored calls to
be transmitted as a single system.multicall request. The result of this call
is a generator; iterating over this generator yields the individual
results.

A usage example of this class follows.  The server code:
from xmlrpc.server import SimpleXMLRPCServer

def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    return x // y

# A simple server with simple arithmetic functions
server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_multicall_functions()
server.register_function(add, 'add')
server.register_function(subtract, 'subtract')
server.register_function(multiply, 'multiply')
server.register_function(divide, 'divide')
server.serve_forever()


The client code for the preceding server:
import xmlrpc.client

proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")
multicall = xmlrpc.client.MultiCall(proxy)
multicall.add(7, 3)
multicall.subtract(7, 3)
multicall.multiply(7, 3)
multicall.divide(7, 3)
result = multicall()

print("7+3=%d, 7-3=%d, 7*3=%d, 7//3=%d" % tuple(result))


