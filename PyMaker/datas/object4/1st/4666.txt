link:
library/asyncio-stream.html#asyncio.StreamWriter.drain

docs:

<dt id="asyncio.StreamWriter.drain">
<em class="property">coroutine </em><code class="descname">drain</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.StreamWriter.drain" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Wait until it is appropriate to resume writing to the stream.
Example:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="k">await</span> <span class="n">writer</span><span class="o">.</span><span class="n">drain</span><span class="p">()</span>
</pre></div>
</div>
<p>This is a flow control method that interacts with the underlying
IO write buffer.  When the size of the buffer reaches
the high watermark, <em>drain()</em> blocks until the size of the
buffer is drained down to the low watermark and writing can
be resumed.  When there is nothing to wait for, the <a class="reference internal" href="#asyncio.StreamWriter.drain" title="asyncio.StreamWriter.drain"><code class="xref py py-meth docutils literal notranslate"><span class="pre">drain()</span></code></a>
returns immediately.</p>
</dd>