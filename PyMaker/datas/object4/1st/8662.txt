link:
library/2to3.html#fixers

docs:

Fixers¶
Each step of transforming code is encapsulated in a fixer.  The command 2to3
-l lists them.  As documented above, each can be turned on
and off individually.  They are described here in more detail.


apply¶
Removes usage of apply().  For example apply(function, *args,
**kwargs) is converted to function(*args, **kwargs).



asserts¶
Replaces deprecated unittest method names with the correct ones.






From
To



failUnlessEqual(a, b)
assertEqual(a, b)

assertEquals(a, b)
assertEqual(a, b)

failIfEqual(a, b)
assertNotEqual(a, b)

assertNotEquals(a, b)
assertNotEqual(a, b)

failUnless(a)
assertTrue(a)

assert_(a)
assertTrue(a)

failIf(a)
assertFalse(a)

failUnlessRaises(exc, cal)
assertRaises(exc, cal)

failUnlessAlmostEqual(a, b)
assertAlmostEqual(a, b)

assertAlmostEquals(a, b)
assertAlmostEqual(a, b)

failIfAlmostEqual(a, b)
assertNotAlmostEqual(a, b)

assertNotAlmostEquals(a, b)
assertNotAlmostEqual(a, b)






basestring¶
Converts basestring to str.



buffer¶
Converts buffer to memoryview.  This fixer is optional
because the memoryview API is similar but not exactly the same as
that of buffer.



dict¶
Fixes dictionary iteration methods.  dict.iteritems() is converted to
dict.items(), dict.iterkeys() to dict.keys(), and
dict.itervalues() to dict.values().  Similarly,
dict.viewitems(), dict.viewkeys() and dict.viewvalues() are
converted respectively to dict.items(), dict.keys() and
dict.values().  It also wraps existing usages of dict.items(),
dict.keys(), and dict.values() in a call to list.



except¶
Converts except X, T to except X as T.



exec¶
Converts the exec statement to the exec() function.



execfile¶
Removes usage of execfile().  The argument to execfile() is
wrapped in calls to open(), compile(), and exec().



exitfunc¶
Changes assignment of sys.exitfunc to use of the atexit
module.



filter¶
Wraps filter() usage in a list call.



funcattrs¶
Fixes function attributes that have been renamed.  For example,
my_function.func_closure is converted to my_function.__closure__.



future¶
Removes from __future__ import new_feature statements.



getcwdu¶
Renames os.getcwdu() to os.getcwd().



has_key¶
Changes dict.has_key(key) to key in dict.



idioms¶
This optional fixer performs several transformations that make Python code
more idiomatic.  Type comparisons like type(x) is SomeClass and
type(x) == SomeClass are converted to isinstance(x, SomeClass).
while 1 becomes while True.  This fixer also tries to make use of
sorted() in appropriate places.  For example, this block
L = list(some_iterable)
L.sort()


is changed to
L = sorted(some_iterable)





import¶
Detects sibling imports and converts them to relative imports.



imports¶
Handles module renames in the standard library.



imports2¶
Handles other modules renames in the standard library.  It is separate from
the imports fixer only because of technical limitations.



input¶
Converts input(prompt) to eval(input(prompt)).



intern¶
Converts intern() to sys.intern().



isinstance¶
Fixes duplicate types in the second argument of isinstance().  For
example, isinstance(x, (int, int)) is converted to isinstance(x,
int) and isinstance(x, (int, float, int)) is converted to
isinstance(x, (int, float)).



itertools_imports¶
Removes imports of itertools.ifilter(), itertools.izip(), and
itertools.imap().  Imports of itertools.ifilterfalse() are also
changed to itertools.filterfalse().



itertools¶
Changes usage of itertools.ifilter(), itertools.izip(), and
itertools.imap() to their built-in equivalents.
itertools.ifilterfalse() is changed to itertools.filterfalse().



long¶
Renames long to int.



map¶
Wraps map() in a list call.  It also changes map(None, x)
to list(x).  Using from future_builtins import map disables this
fixer.



metaclass¶
Converts the old metaclass syntax (__metaclass__ = Meta in the class
body) to the new (class X(metaclass=Meta)).



methodattrs¶
Fixes old method attribute names.  For example, meth.im_func is converted
to meth.__func__.



ne¶
Converts the old not-equal syntax, <>, to !=.



next¶
Converts the use of iterator’s next() methods to the
next() function.  It also renames next() methods to
__next__().



nonzero¶
Renames __nonzero__() to __bool__().



numliterals¶
Converts octal literals into the new syntax.



operator¶
Converts calls to various functions in the operator module to other,
but equivalent, function calls.  When needed, the appropriate import
statements are added, e.g. import collections.abc.  The following mapping
are made:






From
To



operator.isCallable(obj)
callable(obj)

operator.sequenceIncludes(obj)
operator.contains(obj)

operator.isSequenceType(obj)
isinstance(obj, collections.abc.Sequence)

operator.isMappingType(obj)
isinstance(obj, collections.abc.Mapping)

operator.isNumberType(obj)
isinstance(obj, numbers.Number)

operator.repeat(obj, n)
operator.mul(obj, n)

operator.irepeat(obj, n)
operator.imul(obj, n)






paren¶
Add extra parenthesis where they are required in list comprehensions.  For
example, [x for x in 1, 2] becomes [x for x in (1, 2)].



print¶
Converts the print statement to the print() function.



raise¶
Converts raise E, V to raise E(V), and raise E, V, T to raise
E(V).with_traceback(T).  If E is a tuple, the translation will be
incorrect because substituting tuples for exceptions has been removed in 3.0.



raw_input¶
Converts raw_input() to input().



reduce¶
Handles the move of reduce() to functools.reduce().



reload¶
Converts reload() to importlib.reload().



renames¶
Changes sys.maxint to sys.maxsize.



repr¶
Replaces backtick repr with the repr() function.



set_literal¶
Replaces use of the set constructor with set literals.  This fixer
is optional.



standarderror¶
Renames StandardError to Exception.



sys_exc¶
Changes the deprecated sys.exc_value, sys.exc_type,
sys.exc_traceback to use sys.exc_info().



throw¶
Fixes the API change in generator’s throw() method.



tuple_params¶
Removes implicit tuple parameter unpacking.  This fixer inserts temporary
variables.



types¶
Fixes code broken from the removal of some members in the types
module.



unicode¶
Renames unicode to str.



urllib¶
Handles the rename of urllib and urllib2 to the urllib
package.



ws_comma¶
Removes excess whitespace from comma separated items.  This fixer is
optional.



xrange¶
Renames xrange() to range() and wraps existing range()
calls with list.



xreadlines¶
Changes for x in file.xreadlines() to for x in file.



zip¶
Wraps zip() usage in a list call.  This is disabled when
from future_builtins import zip appears.

