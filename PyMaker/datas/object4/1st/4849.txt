link:
library/asyncio-eventloop.html#event-loop-implementations

docs:

Event Loop Implementations¶
asyncio ships with two different event loop implementations:
SelectorEventLoop and ProactorEventLoop.
By default asyncio is configured to use SelectorEventLoop
on all platforms.


class asyncio.SelectorEventLoop¶
An event loop based on the selectors module.
Uses the most efficient selector available for the given
platform.  It is also possible to manually configure the
exact selector implementation to be used:
import asyncio
import selectors

selector = selectors.SelectSelector()
loop = asyncio.SelectorEventLoop(selector)
asyncio.set_event_loop(loop)


Availability: Unix, Windows.



class asyncio.ProactorEventLoop¶
An event loop for Windows that uses “I/O Completion Ports” (IOCP).
Availability: Windows.
An example how to use ProactorEventLoop on Windows:
import asyncio
import sys

if sys.platform == 'win32':
    loop = asyncio.ProactorEventLoop()
    asyncio.set_event_loop(loop)



See also
MSDN documentation on I/O Completion Ports.




class asyncio.AbstractEventLoop¶
Abstract base class for asyncio-compliant event loops.
The Event Loop Methods section lists all
methods that an alternative implementation of AbstractEventLoop
should have defined.

