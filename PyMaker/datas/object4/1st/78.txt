link:
reference/datamodel.html#creating-the-class-object

docs:

3.3.3.6. Creating the class objectÂ¶
Once the class namespace has been populated by executing the class body,
the class object is created by calling
metaclass(name, bases, namespace, **kwds) (the additional keywords
passed here are the same as those passed to __prepare__).
This class object is the one that will be referenced by the zero-argument
form of super(). __class__ is an implicit closure reference
created by the compiler if any methods in a class body refer to either
__class__ or super. This allows the zero argument form of
super() to correctly identify the class being defined based on
lexical scoping, while the class or instance that was used to make the
current call is identified based on the first argument passed to the method.

CPython implementation detail: In CPython 3.6 and later, the __class__ cell is passed to the metaclass
as a __classcell__ entry in the class namespace. If present, this must
be propagated up to the type.__new__ call in order for the class to be
initialised correctly.
Failing to do so will result in a DeprecationWarning in Python 3.6,
and a RuntimeError in Python 3.8.

When using the default metaclass type, or any metaclass that ultimately
calls type.__new__, the following additional customisation steps are
invoked after creating the class object:

first, type.__new__ collects all of the descriptors in the class
namespace that define a __set_name__() method;
second, all of these __set_name__ methods are called with the class
being defined and the assigned name of that particular descriptor;
finally, the __init_subclass__() hook is called on the
immediate parent of the new class in its method resolution order.

After the class object is created, it is passed to the class decorators
included in the class definition (if any) and the resulting object is bound
in the local namespace as the defined class.
When a new class is created by type.__new__, the object provided as the
namespace parameter is copied to a new ordered mapping and the original
object is discarded. The new copy is wrapped in a read-only proxy, which
becomes the __dict__ attribute of the class object.

See also

PEP 3135 - New super
Describes the implicit __class__ closure reference


