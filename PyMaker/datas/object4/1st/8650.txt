link:
library/unittest.mock-examples.html#mocking-unbound-methods

docs:

Mocking Unbound Methods¶
Whilst writing tests today I needed to patch an unbound method (patching the
method on the class rather than on the instance). I needed self to be passed
in as the first argument because I want to make asserts about which objects
were calling this particular method. The issue is that you can’t patch with a
mock for this, because if you replace an unbound method with a mock it doesn’t
become a bound method when fetched from the instance, and so it doesn’t get
self passed in. The workaround is to patch the unbound method with a real
function instead. The patch() decorator makes it so simple to
patch out methods with a mock that having to create a real function becomes a
nuisance.
If you pass autospec=True to patch then it does the patching with a
real function object. This function object has the same signature as the one
it is replacing, but delegates to a mock under the hood. You still get your
mock auto-created in exactly the same way as before. What it means though, is
that if you use it to patch out an unbound method on a class the mocked
function will be turned into a bound method if it is fetched from an instance.
It will have self passed in as the first argument, which is exactly what I
wanted:
>>> class Foo:
...   def foo(self):
...     pass
...
>>> with patch.object(Foo, 'foo', autospec=True) as mock_foo:
...   mock_foo.return_value = 'foo'
...   foo = Foo()
...   foo.foo()
...
'foo'
>>> mock_foo.assert_called_once_with(foo)


If we don’t use autospec=True then the unbound method is patched out
with a Mock instance instead, and isn’t called with self.
