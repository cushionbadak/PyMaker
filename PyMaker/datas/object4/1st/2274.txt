link:
library/shutil.html#shutil.rmtree

docs:

<dt id="shutil.rmtree">
<code class="descclassname">shutil.</code><code class="descname">rmtree</code><span class="sig-paren">(</span><em>path</em>, <em>ignore_errors=False</em>, <em>onerror=None</em><span class="sig-paren">)</span><a class="headerlink" href="#shutil.rmtree" title="Permalink to this definition">¶</a></dt>
<dd><p id="index-1">Delete an entire directory tree; <em>path</em> must point to a directory (but not a
symbolic link to a directory).  If <em>ignore_errors</em> is true, errors resulting
from failed removals will be ignored; if false or omitted, such errors are
handled by calling a handler specified by <em>onerror</em> or, if that is omitted,
they raise an exception.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">On platforms that support the necessary fd-based functions a symlink
attack resistant version of <a class="reference internal" href="#shutil.rmtree" title="shutil.rmtree"><code class="xref py py-func docutils literal notranslate"><span class="pre">rmtree()</span></code></a> is used by default.  On other
platforms, the <a class="reference internal" href="#shutil.rmtree" title="shutil.rmtree"><code class="xref py py-func docutils literal notranslate"><span class="pre">rmtree()</span></code></a> implementation is susceptible to a symlink
attack: given proper timing and circumstances, attackers can manipulate
symlinks on the filesystem to delete files they wouldn’t be able to access
otherwise.  Applications can use the <a class="reference internal" href="#shutil.rmtree.avoids_symlink_attacks" title="shutil.rmtree.avoids_symlink_attacks"><code class="xref py py-data docutils literal notranslate"><span class="pre">rmtree.avoids_symlink_attacks</span></code></a>
function attribute to determine which case applies.</p>
</div>
<p>If <em>onerror</em> is provided, it must be a callable that accepts three
parameters: <em>function</em>, <em>path</em>, and <em>excinfo</em>.</p>
<p>The first parameter, <em>function</em>, is the function which raised the exception;
it depends on the platform and implementation.  The second parameter,
<em>path</em>, will be the path name passed to <em>function</em>.  The third parameter,
<em>excinfo</em>, will be the exception information returned by
<a class="reference internal" href="sys.html#sys.exc_info" title="sys.exc_info"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.exc_info()</span></code></a>.  Exceptions raised by <em>onerror</em> will not be caught.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.3: </span>Added a symlink attack resistant version that is used automatically
if platform supports fd-based functions.</p>
</div>
<dl class="attribute">
<dt id="shutil.rmtree.avoids_symlink_attacks">
<code class="descclassname">rmtree.</code><code class="descname">avoids_symlink_attacks</code><a class="headerlink" href="#shutil.rmtree.avoids_symlink_attacks" title="Permalink to this definition">¶</a></dt>
<dd><p>Indicates whether the current platform and implementation provides a
symlink attack resistant version of <a class="reference internal" href="#shutil.rmtree" title="shutil.rmtree"><code class="xref py py-func docutils literal notranslate"><span class="pre">rmtree()</span></code></a>.  Currently this is
only true for platforms supporting fd-based directory access functions.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.3.</span></p>
</div>
</dd></dl>
</dd>