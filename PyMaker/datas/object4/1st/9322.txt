link:
library/dataclasses.html#init-only-variables

docs:

Init-only variablesÂ¶
The other place where dataclass() inspects a type annotation is to
determine if a field is an init-only variable.  It does this by seeing
if the type of a field is of type dataclasses.InitVar.  If a field
is an InitVar, it is considered a pseudo-field called an init-only
field.  As it is not a true field, it is not returned by the
module-level fields() function.  Init-only fields are added as
parameters to the generated __init__() method, and are passed to
the optional __post_init__() method.  They are not otherwise used
by dataclasses.
For example, suppose a field will be initialized from a database, if a
value is not provided when creating the class:
@dataclass
class C:
    i: int
    j: int = None
    database: InitVar[DatabaseType] = None

    def __post_init__(self, database):
        if self.j is None and database is not None:
            self.j = database.lookup('j')

c = C(10, database=my_database)


In this case, fields() will return Field objects for i and
j, but not for database.
