link:
library/threading.html#threading.Semaphore.acquire

docs:

<dt id="threading.Semaphore.acquire">
<code class="descname">acquire</code><span class="sig-paren">(</span><em>blocking=True</em>, <em>timeout=None</em><span class="sig-paren">)</span><a class="headerlink" href="#threading.Semaphore.acquire" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Acquire a semaphore.</p>
<p>When invoked without arguments:</p>
<ul class="simple">
<li>If the internal counter is larger than zero on entry, decrement it by
one and return true immediately.</li>
<li>If the internal counter is zero on entry, block until awoken by a call to
<a class="reference internal" href="#threading.Semaphore.release" title="threading.Semaphore.release"><code class="xref py py-meth docutils literal notranslate"><span class="pre">release()</span></code></a>.  Once awoken (and the counter is greater
than 0), decrement the counter by 1 and return true.  Exactly one
thread will be awoken by each call to <a class="reference internal" href="#threading.Semaphore.release" title="threading.Semaphore.release"><code class="xref py py-meth docutils literal notranslate"><span class="pre">release()</span></code></a>.  The
order in which threads are awoken should not be relied on.</li>
</ul>
<p>When invoked with <em>blocking</em> set to false, do not block.  If a call
without an argument would block, return false immediately; otherwise, do
the same thing as when called without arguments, and return true.</p>
<p>When invoked with a <em>timeout</em> other than <code class="docutils literal notranslate"><span class="pre">None</span></code>, it will block for at
most <em>timeout</em> seconds.  If acquire does not complete successfully in
that interval, return false.  Return true otherwise.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>The <em>timeout</em> parameter is new.</p>
</div>
</dd>