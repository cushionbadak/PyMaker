link:
library/asyncio-task.html#coroutines

docs:

Coroutines¶
Coroutines declared with async/await syntax is the preferred way of
writing asyncio applications.  For example, the following snippet
of code (requires Python 3.7+) prints “hello”, waits 1 second,
and then prints “world”:
>>> import asyncio

>>> async def main():
...     print('hello')
...     await asyncio.sleep(1)
...     print('world')

>>> asyncio.run(main())
hello
world


Note that simply calling a coroutine will not schedule it to
be executed:
>>> main()
<coroutine object main at 0x1053bb7c8>


To actually run a coroutine, asyncio provides three main mechanisms:

The asyncio.run() function to run the top-level
entry point “main()” function (see the above example.)

Awaiting on a coroutine.  The following snippet of code will
print “hello” after waiting for 1 second, and then print “world”
after waiting for another 2 seconds:
import asyncio
import time

async def say_after(delay, what):
    await asyncio.sleep(delay)
    print(what)

async def main():
    print(f"started at {time.strftime('%X')}")

    await say_after(1, 'hello')
    await say_after(2, 'world')

    print(f"finished at {time.strftime('%X')}")

asyncio.run(main())


Expected output:
started at 17:13:52
hello
world
finished at 17:13:55



The asyncio.create_task() function to run coroutines
concurrently as asyncio Tasks.
Let’s modify the above example and run two say_after coroutines
concurrently:
async def main():
    task1 = asyncio.create_task(
        say_after(1, 'hello'))

    task2 = asyncio.create_task(
        say_after(2, 'world'))

    print(f"started at {time.strftime('%X')}")

    # Wait until both tasks are completed (should take
    # around 2 seconds.)
    await task1
    await task2

    print(f"finished at {time.strftime('%X')}")


Note that expected output now shows that the snippet runs
1 second faster than before:
started at 17:14:32
hello
world
finished at 17:14:34




