link:
library/functions.html#round

docs:

<dt id="round">
<code class="descname">round</code><span class="sig-paren">(</span><em>number</em><span class="optional">[</span>, <em>ndigits</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#round" title="Permalink to this definition">¶</a></dt>
<dd><p>Return <em>number</em> rounded to <em>ndigits</em> precision after the decimal
point.  If <em>ndigits</em> is omitted or is <code class="docutils literal notranslate"><span class="pre">None</span></code>, it returns the
nearest integer to its input.</p>
<p>For the built-in types supporting <a class="reference internal" href="#round" title="round"><code class="xref py py-func docutils literal notranslate"><span class="pre">round()</span></code></a>, values are rounded to the
closest multiple of 10 to the power minus <em>ndigits</em>; if two multiples are
equally close, rounding is done toward the even choice (so, for example,
both <code class="docutils literal notranslate"><span class="pre">round(0.5)</span></code> and <code class="docutils literal notranslate"><span class="pre">round(-0.5)</span></code> are <code class="docutils literal notranslate"><span class="pre">0</span></code>, and <code class="docutils literal notranslate"><span class="pre">round(1.5)</span></code> is
<code class="docutils literal notranslate"><span class="pre">2</span></code>).  Any integer value is valid for <em>ndigits</em> (positive, zero, or
negative).  The return value is an integer if <em>ndigits</em> is omitted or
<code class="docutils literal notranslate"><span class="pre">None</span></code>.
Otherwise the return value has the same type as <em>number</em>.</p>
<p>For a general Python object <code class="docutils literal notranslate"><span class="pre">number</span></code>, <code class="docutils literal notranslate"><span class="pre">round</span></code> delegates to
<code class="docutils literal notranslate"><span class="pre">number.__round__</span></code>.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The behavior of <a class="reference internal" href="#round" title="round"><code class="xref py py-func docutils literal notranslate"><span class="pre">round()</span></code></a> for floats can be surprising: for example,
<code class="docutils literal notranslate"><span class="pre">round(2.675,</span> <span class="pre">2)</span></code> gives <code class="docutils literal notranslate"><span class="pre">2.67</span></code> instead of the expected <code class="docutils literal notranslate"><span class="pre">2.68</span></code>.
This is not a bug: it’s a result of the fact that most decimal fractions
can’t be represented exactly as a float.  See <a class="reference internal" href="../tutorial/floatingpoint.html#tut-fp-issues"><span class="std std-ref">Floating Point Arithmetic:  Issues and Limitations</span></a> for
more information.</p>
</div>
</dd>