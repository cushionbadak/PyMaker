link:
library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor

docs:


class concurrent.futures.ProcessPoolExecutor(max_workers=None, mp_context=None, initializer=None, initargs=())Â¶
An Executor subclass that executes calls asynchronously using a pool
of at most max_workers processes.  If max_workers is None or not
given, it will default to the number of processors on the machine.
If max_workers is lower or equal to 0, then a ValueError
will be raised.
mp_context can be a multiprocessing context or None. It will be used to
launch the workers. If mp_context is None or not given, the default
multiprocessing context is used.
initializer is an optional callable that is called at the start of
each worker process; initargs is a tuple of arguments passed to the
initializer.  Should initializer raise an exception, all currently
pending jobs will raise a BrokenProcessPool,
as well any attempt to submit more jobs to the pool.

Changed in version 3.3: When one of the worker processes terminates abruptly, a
BrokenProcessPool error is now raised.  Previously, behaviour
was undefined but operations on the executor or its futures would often
freeze or deadlock.


Changed in version 3.7: The mp_context argument was added to allow users to control the
start_method for worker processes created by the pool.
Added the initializer and initargs arguments.

