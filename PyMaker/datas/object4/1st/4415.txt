link:
library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor

docs:

<dt id="concurrent.futures.ProcessPoolExecutor">
<em class="property">class </em><code class="descclassname">concurrent.futures.</code><code class="descname">ProcessPoolExecutor</code><span class="sig-paren">(</span><em>max_workers=None</em>, <em>mp_context=None</em>, <em>initializer=None</em>, <em>initargs=()</em><span class="sig-paren">)</span><a class="headerlink" href="#concurrent.futures.ProcessPoolExecutor" title="Permalink to this definition">Â¶</a></dt>
<dd><p>An <a class="reference internal" href="#concurrent.futures.Executor" title="concurrent.futures.Executor"><code class="xref py py-class docutils literal notranslate"><span class="pre">Executor</span></code></a> subclass that executes calls asynchronously using a pool
of at most <em>max_workers</em> processes.  If <em>max_workers</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code> or not
given, it will default to the number of processors on the machine.
If <em>max_workers</em> is lower or equal to <code class="docutils literal notranslate"><span class="pre">0</span></code>, then a <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>
will be raised.
<em>mp_context</em> can be a multiprocessing context or None. It will be used to
launch the workers. If <em>mp_context</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code> or not given, the default
multiprocessing context is used.</p>
<p><em>initializer</em> is an optional callable that is called at the start of
each worker process; <em>initargs</em> is a tuple of arguments passed to the
initializer.  Should <em>initializer</em> raise an exception, all currently
pending jobs will raise a <a class="reference internal" href="#concurrent.futures.process.BrokenProcessPool" title="concurrent.futures.process.BrokenProcessPool"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BrokenProcessPool</span></code></a>,
as well any attempt to submit more jobs to the pool.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.3: </span>When one of the worker processes terminates abruptly, a
<code class="xref py py-exc docutils literal notranslate"><span class="pre">BrokenProcessPool</span></code> error is now raised.  Previously, behaviour
was undefined but operations on the executor or its futures would often
freeze or deadlock.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span>The <em>mp_context</em> argument was added to allow users to control the
start_method for worker processes created by the pool.</p>
<p>Added the <em>initializer</em> and <em>initargs</em> arguments.</p>
</div>
</dd>