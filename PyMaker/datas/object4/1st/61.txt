link:
reference/datamodel.html#customizing-module-attribute-access

docs:

3.3.2.1. Customizing module attribute access¶
Special names __getattr__ and __dir__ can be also used to customize
access to module attributes. The __getattr__ function at the module level
should accept one argument which is the name of an attribute and return the
computed value or raise an AttributeError. If an attribute is
not found on a module object through the normal lookup, i.e.
object.__getattribute__(), then __getattr__ is searched in
the module __dict__ before raising an AttributeError. If found,
it is called with the attribute name and the result is returned.
The __dir__ function should accept no arguments, and return a list of
strings that represents the names accessible on module. If present, this
function overrides the standard dir() search on a module.
For a more fine grained customization of the module behavior (setting
attributes, properties, etc.), one can set the __class__ attribute of
a module object to a subclass of types.ModuleType. For example:
import sys
from types import ModuleType

class VerboseModule(ModuleType):
    def __repr__(self):
        return f'Verbose {self.__name__}'

    def __setattr__(self, attr, value):
        print(f'Setting {attr}...')
        super().__setattr__(attr, value)

sys.modules[__name__].__class__ = VerboseModule



Note
Defining module __getattr__ and setting module __class__ only
affect lookups made using the attribute access syntax – directly accessing
the module globals (whether by code within the module, or via a reference
to the module’s globals dictionary) is unaffected.


Changed in version 3.5: __class__ module attribute is now writable.


New in version 3.7: __getattr__ and __dir__ module attributes.


See also

PEP 562 - Module __getattr__ and __dir__
Describes the __getattr__ and __dir__ functions on modules.


