link:
library/contextlib.html#supporting-a-variable-number-of-context-managers

docs:

Supporting a variable number of context managers¶
The primary use case for ExitStack is the one given in the class
documentation: supporting a variable number of context managers and other
cleanup operations in a single with statement. The variability
may come from the number of context managers needed being driven by user
input (such as opening a user specified collection of files), or from
some of the context managers being optional:
with ExitStack() as stack:
    for resource in resources:
        stack.enter_context(resource)
    if need_special_resource():
        special = acquire_special_resource()
        stack.callback(release_special_resource, special)
    # Perform operations that use the acquired resources


As shown, ExitStack also makes it quite easy to use with
statements to manage arbitrary resources that don’t natively support the
context management protocol.
