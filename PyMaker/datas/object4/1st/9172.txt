link:
library/zipapp.html#the-python-zip-application-archive-format

docs:

The Python Zip Application Archive Format¶
Python has been able to execute zip files which contain a __main__.py file
since version 2.6.  In order to be executed by Python, an application archive
simply has to be a standard zip file containing a __main__.py file which
will be run as the entry point for the application.  As usual for any Python
script, the parent of the script (in this case the zip file) will be placed on
sys.path and thus further modules can be imported from the zip file.
The zip file format allows arbitrary data to be prepended to a zip file.  The
zip application format uses this ability to prepend a standard POSIX “shebang”
line to the file (#!/path/to/interpreter).
Formally, the Python zip application format is therefore:

An optional shebang line, containing the characters b'#!' followed by an
interpreter name, and then a newline (b'\n') character.  The interpreter
name can be anything acceptable to the OS “shebang” processing, or the Python
launcher on Windows.  The interpreter should be encoded in UTF-8 on Windows,
and in sys.getfilesystemencoding() on POSIX.
Standard zipfile data, as generated by the zipfile module.  The
zipfile content must include a file called __main__.py (which must be
in the “root” of the zipfile - i.e., it cannot be in a subdirectory).  The
zipfile data can be compressed or uncompressed.

If an application archive has a shebang line, it may have the executable bit set
on POSIX systems, to allow it to be executed directly.
There is no requirement that the tools in this module are used to create
application archives - the module is a convenience, but archives in the above
format created by any means are acceptable to Python.
