link:
library/asyncio-protocol.html#asyncio.Protocol.data_received

docs:

<dt id="asyncio.Protocol.data_received">
<code class="descclassname">Protocol.</code><code class="descname">data_received</code><span class="sig-paren">(</span><em>data</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncio.Protocol.data_received" title="Permalink to this definition">¶</a></dt>
<dd><p>Called when some data is received.  <em>data</em> is a non-empty bytes
object containing the incoming data.</p>
<p>Whether the data is buffered, chunked or reassembled depends on
the transport.  In general, you shouldn’t rely on specific semantics
and instead make your parsing generic and flexible. However,
data is always received in the correct order.</p>
<p>The method can be called an arbitrary number of times while
a connection is open.</p>
<p>However, <a class="reference internal" href="#asyncio.Protocol.eof_received" title="asyncio.Protocol.eof_received"><code class="xref py py-meth docutils literal notranslate"><span class="pre">protocol.eof_received()</span></code></a>
is called at most once.  Once <cite>eof_received()</cite> is called,
<code class="docutils literal notranslate"><span class="pre">data_received()</span></code> is not called anymore.</p>
</dd>