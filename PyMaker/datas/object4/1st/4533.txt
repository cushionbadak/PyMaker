link:
library/sched.html#sched.scheduler.run

docs:

<dt id="sched.scheduler.run">
<code class="descclassname">scheduler.</code><code class="descname">run</code><span class="sig-paren">(</span><em>blocking=True</em><span class="sig-paren">)</span><a class="headerlink" href="#sched.scheduler.run" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Run all scheduled events. This method will wait  (using the <code class="xref py py-func docutils literal notranslate"><span class="pre">delayfunc()</span></code>
function passed to the constructor) for the next event, then execute it and so
on until there are no more scheduled events.</p>
<p>If <em>blocking</em> is false executes the scheduled events due to expire soonest
(if any) and then return the deadline of the next scheduled call in the
scheduler (if any).</p>
<p>Either <em>action</em> or <em>delayfunc</em> can raise an exception.  In either case, the
scheduler will maintain a consistent state and propagate the exception.  If an
exception is raised by <em>action</em>, the event will not be attempted in future calls
to <a class="reference internal" href="#sched.scheduler.run" title="sched.scheduler.run"><code class="xref py py-meth docutils literal notranslate"><span class="pre">run()</span></code></a>.</p>
<p>If a sequence of events takes longer to run than the time available before the
next event, the scheduler will simply fall behind.  No events will be dropped;
the calling code is responsible for canceling  events which are no longer
pertinent.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.3: </span><em>blocking</em> parameter was added.</p>
</div>
</dd>