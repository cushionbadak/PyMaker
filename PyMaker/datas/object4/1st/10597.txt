link:
library/imp.html#imp.load_module

docs:


imp.load_module(name, file, pathname, description)¶
Load a module that was previously found by find_module() (or by an
otherwise conducted search yielding compatible results).  This function does
more than importing the module: if the module was already imported, it will
reload the module!  The name argument indicates the full
module name (including the package name, if this is a submodule of a
package).  The file argument is an open file, and pathname is the
corresponding file name; these can be None and '', respectively, when
the module is a package or not being loaded from a file.  The description
argument is a tuple, as would be returned by get_suffixes(), describing
what kind of module must be loaded.
If the load is successful, the return value is the module object; otherwise,
an exception (usually ImportError) is raised.
Important: the caller is responsible for closing the file argument, if
it was not None, even when an exception is raised.  This is best done
using a try … finally statement.

Deprecated since version 3.3: If previously used in conjunction with imp.find_module() then
consider using importlib.import_module(), otherwise use the loader
returned by the replacement you chose for imp.find_module(). If you
called imp.load_module() and related functions directly with file
path arguments then use a combination of
importlib.util.spec_from_file_location() and
importlib.util.module_from_spec(). See the Examples
section of the importlib documentation for details of the various
approaches.

