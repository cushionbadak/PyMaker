link:
library/zipapp.html#zipapp.create_archive

docs:

<dt id="zipapp.create_archive">
<code class="descclassname">zipapp.</code><code class="descname">create_archive</code><span class="sig-paren">(</span><em>source</em>, <em>target=None</em>, <em>interpreter=None</em>, <em>main=None</em>, <em>filter=None</em>, <em>compressed=False</em><span class="sig-paren">)</span><a class="headerlink" href="#zipapp.create_archive" title="Permalink to this definition">¶</a></dt>
<dd><p>Create an application archive from <em>source</em>.  The source can be any
of the following:</p>
<ul class="simple">
<li>The name of a directory, or a <a class="reference internal" href="../glossary.html#term-path-like-object"><span class="xref std std-term">path-like object</span></a> referring
to a directory, in which case a new application archive will be
created from the content of that directory.</li>
<li>The name of an existing application archive file, or a <a class="reference internal" href="../glossary.html#term-path-like-object"><span class="xref std std-term">path-like object</span></a>
referring to such a file, in which case the file is copied to
the target (modifying it to reflect the value given for the <em>interpreter</em>
argument).  The file name should include the <code class="docutils literal notranslate"><span class="pre">.pyz</span></code> extension, if required.</li>
<li>A file object open for reading in bytes mode.  The content of the
file should be an application archive, and the file object is
assumed to be positioned at the start of the archive.</li>
</ul>
<p>The <em>target</em> argument determines where the resulting archive will be
written:</p>
<ul class="simple">
<li>If it is the name of a file, or a <a class="reference internal" href="../glossary.html#term-path-like-object"><span class="xref std std-term">path-like object</span></a>,
the archive will be written to that file.</li>
<li>If it is an open file object, the archive will be written to that
file object, which must be open for writing in bytes mode.</li>
<li>If the target is omitted (or <code class="docutils literal notranslate"><span class="pre">None</span></code>), the source must be a directory
and the target will be a file with the same name as the source, with
a <code class="docutils literal notranslate"><span class="pre">.pyz</span></code> extension added.</li>
</ul>
<p>The <em>interpreter</em> argument specifies the name of the Python
interpreter with which the archive will be executed.  It is written as
a “shebang” line at the start of the archive.  On POSIX, this will be
interpreted by the OS, and on Windows it will be handled by the Python
launcher.  Omitting the <em>interpreter</em> results in no shebang line being
written.  If an interpreter is specified, and the target is a
filename, the executable bit of the target file will be set.</p>
<p>The <em>main</em> argument specifies the name of a callable which will be
used as the main program for the archive.  It can only be specified if
the source is a directory, and the source does not already contain a
<code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> file.  The <em>main</em> argument should take the form
“pkg.module:callable” and the archive will be run by importing
“pkg.module” and executing the given callable with no arguments.  It
is an error to omit <em>main</em> if the source is a directory and does not
contain a <code class="docutils literal notranslate"><span class="pre">__main__.py</span></code> file, as otherwise the resulting archive
would not be executable.</p>
<p>The optional <em>filter</em> argument specifies a callback function that
is passed a Path object representing the path to the file being added
(relative to the source directory).  It should return <code class="docutils literal notranslate"><span class="pre">True</span></code> if the
file is to be added.</p>
<p>The optional <em>compressed</em> argument determines whether files are
compressed.  If set to <code class="docutils literal notranslate"><span class="pre">True</span></code>, files in the archive are compressed
with the deflate method; otherwise, files are stored uncompressed.
This argument has no effect when copying an existing archive.</p>
<p>If a file object is specified for <em>source</em> or <em>target</em>, it is the
caller’s responsibility to close it after calling create_archive.</p>
<p>When copying an existing archive, file objects supplied only need
<code class="docutils literal notranslate"><span class="pre">read</span></code> and <code class="docutils literal notranslate"><span class="pre">readline</span></code>, or <code class="docutils literal notranslate"><span class="pre">write</span></code> methods.  When creating an
archive from a directory, if the target is a file object it will be
passed to the <code class="docutils literal notranslate"><span class="pre">zipfile.ZipFile</span></code> class, and must supply the methods
needed by that class.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7: </span>Added the <em>filter</em> and <em>compressed</em> arguments.</p>
</div>
</dd>