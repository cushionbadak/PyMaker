link:
library/stdtypes.html#bytes

docs:

<dt id="bytes">
<em class="property">class </em><code class="descname">bytes</code><span class="sig-paren">(</span><span class="optional">[</span><em>source</em><span class="optional">[</span>, <em>encoding</em><span class="optional">[</span>, <em>errors</em><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#bytes" title="Permalink to this definition">¶</a></dt>
<dd><p>Firstly, the syntax for bytes literals is largely the same as that for string
literals, except that a <code class="docutils literal notranslate"><span class="pre">b</span></code> prefix is added:</p>
<ul class="simple">
<li>Single quotes: <code class="docutils literal notranslate"><span class="pre">b'still</span> <span class="pre">allows</span> <span class="pre">embedded</span> <span class="pre">"double"</span> <span class="pre">quotes'</span></code></li>
<li>Double quotes: <code class="docutils literal notranslate"><span class="pre">b"still</span> <span class="pre">allows</span> <span class="pre">embedded</span> <span class="pre">'single'</span> <span class="pre">quotes"</span></code>.</li>
<li>Triple quoted: <code class="docutils literal notranslate"><span class="pre">b'''3</span> <span class="pre">single</span> <span class="pre">quotes'''</span></code>, <code class="docutils literal notranslate"><span class="pre">b"""3</span> <span class="pre">double</span> <span class="pre">quotes"""</span></code></li>
</ul>
<p>Only ASCII characters are permitted in bytes literals (regardless of the
declared source code encoding). Any binary values over 127 must be entered
into bytes literals using the appropriate escape sequence.</p>
<p>As with string literals, bytes literals may also use a <code class="docutils literal notranslate"><span class="pre">r</span></code> prefix to disable
processing of escape sequences. See <a class="reference internal" href="../reference/lexical_analysis.html#strings"><span class="std std-ref">String and Bytes literals</span></a> for more about the various
forms of bytes literal, including supported escape sequences.</p>
<p>While bytes literals and representations are based on ASCII text, bytes
objects actually behave like immutable sequences of integers, with each
value in the sequence restricted such that <code class="docutils literal notranslate"><span class="pre">0</span> <span class="pre">&lt;=</span> <span class="pre">x</span> <span class="pre">&lt;</span> <span class="pre">256</span></code> (attempts to
violate this restriction will trigger <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>). This is done
deliberately to emphasise that while many binary formats include ASCII based
elements and can be usefully manipulated with some text-oriented algorithms,
this is not generally the case for arbitrary binary data (blindly applying
text processing algorithms to binary data formats that are not ASCII
compatible will usually lead to data corruption).</p>
<p>In addition to the literal forms, bytes objects can be created in a number of
other ways:</p>
<ul class="simple">
<li>A zero-filled bytes object of a specified length: <code class="docutils literal notranslate"><span class="pre">bytes(10)</span></code></li>
<li>From an iterable of integers: <code class="docutils literal notranslate"><span class="pre">bytes(range(20))</span></code></li>
<li>Copying existing binary data via the buffer protocol:  <code class="docutils literal notranslate"><span class="pre">bytes(obj)</span></code></li>
</ul>
<p>Also see the <a class="reference internal" href="functions.html#func-bytes"><span class="std std-ref">bytes</span></a> built-in.</p>
<p>Since 2 hexadecimal digits correspond precisely to a single byte, hexadecimal
numbers are a commonly used format for describing binary data. Accordingly,
the bytes type has an additional class method to read data in that format:</p>
<dl class="classmethod">
<dt id="bytes.fromhex">
<em class="property">classmethod </em><code class="descname">fromhex</code><span class="sig-paren">(</span><em>string</em><span class="sig-paren">)</span><a class="headerlink" href="#bytes.fromhex" title="Permalink to this definition">¶</a></dt>
<dd><p>This <a class="reference internal" href="#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> class method returns a bytes object, decoding the
given string object.  The string must contain two hexadecimal digits per
byte, with ASCII whitespace being ignored.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">bytes</span><span class="o">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s1">'2Ef0 F1f2  '</span><span class="p">)</span>
<span class="go">b'.\xf0\xf1\xf2'</span>
</pre></div>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span><a class="reference internal" href="#bytes.fromhex" title="bytes.fromhex"><code class="xref py py-meth docutils literal notranslate"><span class="pre">bytes.fromhex()</span></code></a> now skips all ASCII whitespace in the string,
not just spaces.</p>
</div>
</dd></dl>
<p>A reverse conversion function exists to transform a bytes object into its
hexadecimal representation.</p>
<dl class="method">
<dt id="bytes.hex">
<code class="descname">hex</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#bytes.hex" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a string object containing two hexadecimal digits for each
byte in the instance.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="sa">b</span><span class="s1">'</span><span class="se">\xf0\xf1\xf2</span><span class="s1">'</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span>
<span class="go">'f0f1f2'</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.5.</span></p>
</div>
</dd></dl>
</dd>