link:
reference/simple_stmts.html#the-global-statement

docs:

7.12. The global statement¶

global_stmt ::=  "global" identifier ("," identifier)*

The global statement is a declaration which holds for the entire
current code block.  It means that the listed identifiers are to be interpreted
as globals.  It would be impossible to assign to a global variable without
global, although free variables may refer to globals without being
declared global.
Names listed in a global statement must not be used in the same code
block textually preceding that global statement.
Names listed in a global statement must not be defined as formal
parameters or in a for loop control target, class
definition, function definition, import statement, or variable
annotation.

CPython implementation detail: The current implementation does not enforce some of these restrictions, but
programs should not abuse this freedom, as future implementations may enforce
them or silently change the meaning of the program.

Programmer’s note: global is a directive to the parser.  It
applies only to code parsed at the same time as the global statement.
In particular, a global statement contained in a string or code
object supplied to the built-in exec() function does not affect the code
block containing the function call, and code contained in such a string is
unaffected by global statements in the code containing the function
call.  The same applies to the eval() and compile() functions.
