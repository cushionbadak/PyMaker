link:
library/re.html#regular-expression-objects

docs:

Regular Expression Objects¶
Compiled regular expression objects support the following methods and
attributes:


Pattern.search(string[, pos[, endpos]])¶
Scan through string looking for the first location where this regular
expression produces a match, and return a corresponding match object.  Return None if no position in the string matches the
pattern; note that this is different from finding a zero-length match at some
point in the string.
The optional second parameter pos gives an index in the string where the
search is to start; it defaults to 0.  This is not completely equivalent to
slicing the string; the '^' pattern character matches at the real beginning
of the string and at positions just after a newline, but not necessarily at the
index where the search is to start.
The optional parameter endpos limits how far the string will be searched; it
will be as if the string is endpos characters long, so only the characters
from pos to endpos - 1 will be searched for a match.  If endpos is less
than pos, no match will be found; otherwise, if rx is a compiled regular
expression object, rx.search(string, 0, 50) is equivalent to
rx.search(string[:50], 0).
>>> pattern = re.compile("d")
>>> pattern.search("dog")     # Match at index 0
<re.Match object; span=(0, 1), match='d'>
>>> pattern.search("dog", 1)  # No match; search doesn't include the "d"





Pattern.match(string[, pos[, endpos]])¶
If zero or more characters at the beginning of string match this regular
expression, return a corresponding match object.
Return None if the string does not match the pattern; note that this is
different from a zero-length match.
The optional pos and endpos parameters have the same meaning as for the
search() method.
>>> pattern = re.compile("o")
>>> pattern.match("dog")      # No match as "o" is not at the start of "dog".
>>> pattern.match("dog", 1)   # Match as "o" is the 2nd character of "dog".
<re.Match object; span=(1, 2), match='o'>


If you want to locate a match anywhere in string, use
search() instead (see also search() vs. match()).



Pattern.fullmatch(string[, pos[, endpos]])¶
If the whole string matches this regular expression, return a corresponding
match object.  Return None if the string does not
match the pattern; note that this is different from a zero-length match.
The optional pos and endpos parameters have the same meaning as for the
search() method.
>>> pattern = re.compile("o[gh]")
>>> pattern.fullmatch("dog")      # No match as "o" is not at the start of "dog".
>>> pattern.fullmatch("ogre")     # No match as not the full string matches.
>>> pattern.fullmatch("doggie", 1, 3)   # Matches within given limits.
<re.Match object; span=(1, 3), match='og'>



New in version 3.4.




Pattern.split(string, maxsplit=0)¶
Identical to the split() function, using the compiled pattern.



Pattern.findall(string[, pos[, endpos]])¶
Similar to the findall() function, using the compiled pattern, but
also accepts optional pos and endpos parameters that limit the search
region like for search().



Pattern.finditer(string[, pos[, endpos]])¶
Similar to the finditer() function, using the compiled pattern, but
also accepts optional pos and endpos parameters that limit the search
region like for search().



Pattern.sub(repl, string, count=0)¶
Identical to the sub() function, using the compiled pattern.



Pattern.subn(repl, string, count=0)¶
Identical to the subn() function, using the compiled pattern.



Pattern.flags¶
The regex matching flags.  This is a combination of the flags given to
compile(), any (?...) inline flags in the pattern, and implicit
flags such as UNICODE if the pattern is a Unicode string.



Pattern.groups¶
The number of capturing groups in the pattern.



Pattern.groupindex¶
A dictionary mapping any symbolic group names defined by (?P<id>) to group
numbers.  The dictionary is empty if no symbolic groups were used in the
pattern.



Pattern.pattern¶
The pattern string from which the pattern object was compiled.


Changed in version 3.7: Added support of copy.copy() and copy.deepcopy().  Compiled
regular expression objects are considered atomic.

