link:
library/socketserver.html#request-handler-objects

docs:

Request Handler Objects¶


class socketserver.BaseRequestHandler¶
This is the superclass of all request handler objects.  It defines
the interface, given below.  A concrete request handler subclass must
define a new handle() method, and can override any of
the other methods.  A new instance of the subclass is created for each
request.


setup()¶
Called before the handle() method to perform any initialization actions
required.  The default implementation does nothing.



handle()¶
This function must do all the work required to service a request.  The
default implementation does nothing.  Several instance attributes are
available to it; the request is available as self.request; the client
address as self.client_address; and the server instance as
self.server, in case it needs access to per-server information.
The type of self.request is different for datagram or stream
services.  For stream services, self.request is a socket object; for
datagram services, self.request is a pair of string and socket.



finish()¶
Called after the handle() method to perform any clean-up actions
required.  The default implementation does nothing.  If setup()
raises an exception, this function will not be called.




class socketserver.StreamRequestHandler¶

class socketserver.DatagramRequestHandler¶
These BaseRequestHandler subclasses override the
setup() and finish()
methods, and provide self.rfile and self.wfile attributes.
The self.rfile and self.wfile attributes can be
read or written, respectively, to get the request data or return data
to the client.
The rfile attributes of both classes support the
io.BufferedIOBase readable interface, and
DatagramRequestHandler.wfile supports the
io.BufferedIOBase writable interface.

Changed in version 3.6: StreamRequestHandler.wfile also supports the
io.BufferedIOBase writable interface.


