link:
library/email.headerregistry.html#email.headerregistry.HeaderRegistry

docs:

<dt id="email.headerregistry.HeaderRegistry">
<em class="property">class </em><code class="descclassname">email.headerregistry.</code><code class="descname">HeaderRegistry</code><span class="sig-paren">(</span><em>base_class=BaseHeader</em>, <em>default_class=UnstructuredHeader</em>, <em>use_default_map=True</em><span class="sig-paren">)</span><a class="headerlink" href="#email.headerregistry.HeaderRegistry" title="Permalink to this definition">¶</a></dt>
<dd><p>This is the factory used by <a class="reference internal" href="email.policy.html#email.policy.EmailPolicy" title="email.policy.EmailPolicy"><code class="xref py py-class docutils literal notranslate"><span class="pre">EmailPolicy</span></code></a> by default.
<code class="docutils literal notranslate"><span class="pre">HeaderRegistry</span></code> builds the class used to create a header instance
dynamically, using <em>base_class</em> and a specialized class retrieved from a
registry that it holds.  When a given header name does not appear in the
registry, the class specified by <em>default_class</em> is used as the specialized
class.  When <em>use_default_map</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code> (the default), the standard
mapping of header names to classes is copied in to the registry during
initialization.  <em>base_class</em> is always the last class in the generated
class’s <code class="docutils literal notranslate"><span class="pre">__bases__</span></code> list.</p>
<p>The default mappings are:</p>
<blockquote>
<div><table class="docutils field-list" frame="void" rules="none">
<col class="field-name"/>
<col class="field-body"/>
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">subject:</th><td class="field-body">UniqueUnstructuredHeader</td>
</tr>
<tr class="field-even field"><th class="field-name">date:</th><td class="field-body">UniqueDateHeader</td>
</tr>
<tr class="field-odd field"><th class="field-name">resent-date:</th><td class="field-body">DateHeader</td>
</tr>
<tr class="field-even field"><th class="field-name">orig-date:</th><td class="field-body">UniqueDateHeader</td>
</tr>
<tr class="field-odd field"><th class="field-name">sender:</th><td class="field-body">UniqueSingleAddressHeader</td>
</tr>
<tr class="field-even field"><th class="field-name">resent-sender:</th><td class="field-body">SingleAddressHeader</td>
</tr>
<tr class="field-odd field"><th class="field-name">to:</th><td class="field-body">UniqueAddressHeader</td>
</tr>
<tr class="field-even field"><th class="field-name">resent-to:</th><td class="field-body">AddressHeader</td>
</tr>
<tr class="field-odd field"><th class="field-name">cc:</th><td class="field-body">UniqueAddressHeader</td>
</tr>
<tr class="field-even field"><th class="field-name">resent-cc:</th><td class="field-body">AddressHeader</td>
</tr>
<tr class="field-odd field"><th class="field-name">from:</th><td class="field-body">UniqueAddressHeader</td>
</tr>
<tr class="field-even field"><th class="field-name">resent-from:</th><td class="field-body">AddressHeader</td>
</tr>
<tr class="field-odd field"><th class="field-name">reply-to:</th><td class="field-body">UniqueAddressHeader</td>
</tr>
</tbody>
</table>
</div></blockquote>
<p><code class="docutils literal notranslate"><span class="pre">HeaderRegistry</span></code> has the following methods:</p>
<dl class="method">
<dt id="email.headerregistry.HeaderRegistry.map_to_type">
<code class="descname">map_to_type</code><span class="sig-paren">(</span><em>self</em>, <em>name</em>, <em>cls</em><span class="sig-paren">)</span><a class="headerlink" href="#email.headerregistry.HeaderRegistry.map_to_type" title="Permalink to this definition">¶</a></dt>
<dd><p><em>name</em> is the name of the header to be mapped.  It will be converted to
lower case in the registry.  <em>cls</em> is the specialized class to be used,
along with <em>base_class</em>, to create the class used to instantiate headers
that match <em>name</em>.</p>
</dd></dl>
<dl class="method">
<dt id="email.headerregistry.HeaderRegistry.__getitem__">
<code class="descname">__getitem__</code><span class="sig-paren">(</span><em>name</em><span class="sig-paren">)</span><a class="headerlink" href="#email.headerregistry.HeaderRegistry.__getitem__" title="Permalink to this definition">¶</a></dt>
<dd><p>Construct and return a class to handle creating a <em>name</em> header.</p>
</dd></dl>
<dl class="method">
<dt id="email.headerregistry.HeaderRegistry.__call__">
<code class="descname">__call__</code><span class="sig-paren">(</span><em>name</em>, <em>value</em><span class="sig-paren">)</span><a class="headerlink" href="#email.headerregistry.HeaderRegistry.__call__" title="Permalink to this definition">¶</a></dt>
<dd><p>Retrieves the specialized header associated with <em>name</em> from the
registry (using <em>default_class</em> if <em>name</em> does not appear in the
registry) and composes it with <em>base_class</em> to produce a class,
calls the constructed class’s constructor, passing it the same
argument list, and finally returns the class instance created thereby.</p>
</dd></dl>
</dd>