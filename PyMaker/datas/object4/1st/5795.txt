link:
library/json.html#json.JSONDecoder

docs:


class json.JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)¶
Simple JSON decoder.
Performs the following translations in decoding by default:






JSON
Python



object
dict

array
list

string
str

number (int)
int

number (real)
float

true
True

false
False

null
None



It also understands NaN, Infinity, and -Infinity as their
corresponding float values, which is outside the JSON spec.
object_hook, if specified, will be called with the result of every JSON
object decoded and its return value will be used in place of the given
dict.  This can be used to provide custom deserializations (e.g. to
support JSON-RPC class hinting).
object_pairs_hook, if specified will be called with the result of every
JSON object decoded with an ordered list of pairs.  The return value of
object_pairs_hook will be used instead of the dict.  This
feature can be used to implement custom decoders.  If object_hook is also
defined, the object_pairs_hook takes priority.

Changed in version 3.1: Added support for object_pairs_hook.

parse_float, if specified, will be called with the string of every JSON
float to be decoded.  By default, this is equivalent to float(num_str).
This can be used to use another datatype or parser for JSON floats
(e.g. decimal.Decimal).
parse_int, if specified, will be called with the string of every JSON int
to be decoded.  By default, this is equivalent to int(num_str).  This can
be used to use another datatype or parser for JSON integers
(e.g. float).
parse_constant, if specified, will be called with one of the following
strings: '-Infinity', 'Infinity', 'NaN'.
This can be used to raise an exception if invalid JSON numbers
are encountered.
If strict is false (True is the default), then control characters
will be allowed inside strings.  Control characters in this context are
those with character codes in the 0–31 range, including '\t' (tab),
'\n', '\r' and '\0'.
If the data being deserialized is not a valid JSON document, a
JSONDecodeError will be raised.

Changed in version 3.6: All parameters are now keyword-only.



decode(s)¶
Return the Python representation of s (a str instance
containing a JSON document).
JSONDecodeError will be raised if the given JSON document is not
valid.



raw_decode(s)¶
Decode a JSON document from s (a str beginning with a
JSON document) and return a 2-tuple of the Python representation
and the index in s where the document ended.
This can be used to decode a JSON document from a string that may have
extraneous data at the end.

