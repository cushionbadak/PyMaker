link:
library/optparse.html#printing-a-version-string

docs:

Printing a version string¶
Similar to the brief usage string, optparse can also print a version
string for your program.  You have to supply the string as the version
argument to OptionParser:
parser = OptionParser(usage="%prog [-f] [-q]", version="%prog 1.0")


%prog is expanded just like it is in usage.  Apart from that,
version can contain anything you like.  When you supply it, optparse
automatically adds a --version option to your parser. If it encounters
this option on the command line, it expands your version string (by
replacing %prog), prints it to stdout, and exits.
For example, if your script is called /usr/bin/foo:
$ /usr/bin/foo --version
foo 1.0


The following two methods can be used to print and get the version string:


OptionParser.print_version(file=None)¶
Print the version message for the current program (self.version) to
file (default stdout).  As with print_usage(), any occurrence
of %prog in self.version is replaced with the name of the current
program.  Does nothing if self.version is empty or undefined.



OptionParser.get_version()¶
Same as print_version() but returns the version string instead of
printing it.

