link:
reference/import.html#references

docs:

5.10. References¶
The import machinery has evolved considerably since Python’s early days.  The
original specification for packages is still available to read,
although some details have changed since the writing of that document.
The original specification for sys.meta_path was PEP 302, with
subsequent extension in PEP 420.
PEP 420 introduced namespace packages for
Python 3.3.  PEP 420 also introduced the find_loader() protocol as an
alternative to find_module().
PEP 366 describes the addition of the __package__ attribute for
explicit relative imports in main modules.
PEP 328 introduced absolute and explicit relative imports and initially
proposed __name__ for semantics PEP 366 would eventually specify for
__package__.
PEP 338 defines executing modules as scripts.
PEP 451 adds the encapsulation of per-module import state in spec
objects.  It also off-loads most of the boilerplate responsibilities of
loaders back onto the import machinery.  These changes allow the
deprecation of several APIs in the import system and also addition of new
methods to finders and loaders.
Footnotes



[1]See types.ModuleType.





[2]The importlib implementation avoids using the return value
directly. Instead, it gets the module object by looking the module name up
in sys.modules.  The indirect effect of this is that an imported
module may replace itself in sys.modules.  This is
implementation-specific behavior that is not guaranteed to work in other
Python implementations.





[3]In legacy code, it is possible to find instances of
imp.NullImporter in the sys.path_importer_cache.  It
is recommended that code be changed to use None instead.  See
Porting Python code for more details.


