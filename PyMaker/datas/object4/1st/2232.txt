link:
library/tempfile.html#tempfile.NamedTemporaryFile

docs:

<dt id="tempfile.NamedTemporaryFile">
<code class="descclassname">tempfile.</code><code class="descname">NamedTemporaryFile</code><span class="sig-paren">(</span><em>mode='w+b'</em>, <em>buffering=None</em>, <em>encoding=None</em>, <em>newline=None</em>, <em>suffix=None</em>, <em>prefix=None</em>, <em>dir=None</em>, <em>delete=True</em><span class="sig-paren">)</span><a class="headerlink" href="#tempfile.NamedTemporaryFile" title="Permalink to this definition">Â¶</a></dt>
<dd><p>This function operates exactly as <a class="reference internal" href="#tempfile.TemporaryFile" title="tempfile.TemporaryFile"><code class="xref py py-func docutils literal notranslate"><span class="pre">TemporaryFile()</span></code></a> does, except that
the file is guaranteed to have a visible name in the file system (on
Unix, the directory entry is not unlinked).  That name can be retrieved
from the <code class="xref py py-attr docutils literal notranslate"><span class="pre">name</span></code> attribute of the returned
file-like object.  Whether the name can be
used to open the file a second time, while the named temporary file is
still open, varies across platforms (it can be so used on Unix; it cannot
on Windows NT or later).  If <em>delete</em> is true (the default), the file is
deleted as soon as it is closed.
The returned object is always a file-like object whose <code class="xref py py-attr docutils literal notranslate"><span class="pre">file</span></code>
attribute is the underlying true file object. This file-like object can
be used in a <a class="reference internal" href="../reference/compound_stmts.html#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> statement, just like a normal file.</p>
</dd>