link:
library/stdtypes.html#bytearray

docs:

<dt id="bytearray">
<em class="property">class </em><code class="descname">bytearray</code><span class="sig-paren">(</span><span class="optional">[</span><em>source</em><span class="optional">[</span>, <em>encoding</em><span class="optional">[</span>, <em>errors</em><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#bytearray" title="Permalink to this definition">¶</a></dt>
<dd><p>There is no dedicated literal syntax for bytearray objects, instead
they are always created by calling the constructor:</p>
<ul class="simple">
<li>Creating an empty instance: <code class="docutils literal notranslate"><span class="pre">bytearray()</span></code></li>
<li>Creating a zero-filled instance with a given length: <code class="docutils literal notranslate"><span class="pre">bytearray(10)</span></code></li>
<li>From an iterable of integers: <code class="docutils literal notranslate"><span class="pre">bytearray(range(20))</span></code></li>
<li>Copying existing binary data via the buffer protocol:  <code class="docutils literal notranslate"><span class="pre">bytearray(b'Hi!')</span></code></li>
</ul>
<p>As bytearray objects are mutable, they support the
<a class="reference internal" href="#typesseq-mutable"><span class="std std-ref">mutable</span></a> sequence operations in addition to the
common bytes and bytearray operations described in <a class="reference internal" href="#bytes-methods"><span class="std std-ref">Bytes and Bytearray Operations</span></a>.</p>
<p>Also see the <a class="reference internal" href="functions.html#func-bytearray"><span class="std std-ref">bytearray</span></a> built-in.</p>
<p>Since 2 hexadecimal digits correspond precisely to a single byte, hexadecimal
numbers are a commonly used format for describing binary data. Accordingly,
the bytearray type has an additional class method to read data in that format:</p>
<dl class="classmethod">
<dt id="bytearray.fromhex">
<em class="property">classmethod </em><code class="descname">fromhex</code><span class="sig-paren">(</span><em>string</em><span class="sig-paren">)</span><a class="headerlink" href="#bytearray.fromhex" title="Permalink to this definition">¶</a></dt>
<dd><p>This <a class="reference internal" href="#bytearray" title="bytearray"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytearray</span></code></a> class method returns bytearray object, decoding
the given string object.  The string must contain two hexadecimal digits
per byte, with ASCII whitespace being ignored.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">bytearray</span><span class="o">.</span><span class="n">fromhex</span><span class="p">(</span><span class="s1">'2Ef0 F1f2  '</span><span class="p">)</span>
<span class="go">bytearray(b'.\xf0\xf1\xf2')</span>
</pre></div>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span><a class="reference internal" href="#bytearray.fromhex" title="bytearray.fromhex"><code class="xref py py-meth docutils literal notranslate"><span class="pre">bytearray.fromhex()</span></code></a> now skips all ASCII whitespace in the string,
not just spaces.</p>
</div>
</dd></dl>
<p>A reverse conversion function exists to transform a bytearray object into its
hexadecimal representation.</p>
<dl class="method">
<dt id="bytearray.hex">
<code class="descname">hex</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#bytearray.hex" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a string object containing two hexadecimal digits for each
byte in the instance.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">bytearray</span><span class="p">(</span><span class="sa">b</span><span class="s1">'</span><span class="se">\xf0\xf1\xf2</span><span class="s1">'</span><span class="p">)</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span>
<span class="go">'f0f1f2'</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.5.</span></p>
</div>
</dd></dl>
</dd>