link:
library/stdtypes.html#bytearray

docs:


class bytearray([source[, encoding[, errors]]])¶
There is no dedicated literal syntax for bytearray objects, instead
they are always created by calling the constructor:

Creating an empty instance: bytearray()
Creating a zero-filled instance with a given length: bytearray(10)
From an iterable of integers: bytearray(range(20))
Copying existing binary data via the buffer protocol:  bytearray(b'Hi!')

As bytearray objects are mutable, they support the
mutable sequence operations in addition to the
common bytes and bytearray operations described in Bytes and Bytearray Operations.
Also see the bytearray built-in.
Since 2 hexadecimal digits correspond precisely to a single byte, hexadecimal
numbers are a commonly used format for describing binary data. Accordingly,
the bytearray type has an additional class method to read data in that format:


classmethod fromhex(string)¶
This bytearray class method returns bytearray object, decoding
the given string object.  The string must contain two hexadecimal digits
per byte, with ASCII whitespace being ignored.
>>> bytearray.fromhex('2Ef0 F1f2  ')
bytearray(b'.\xf0\xf1\xf2')



Changed in version 3.7: bytearray.fromhex() now skips all ASCII whitespace in the string,
not just spaces.


A reverse conversion function exists to transform a bytearray object into its
hexadecimal representation.


hex()¶
Return a string object containing two hexadecimal digits for each
byte in the instance.
>>> bytearray(b'\xf0\xf1\xf2').hex()
'f0f1f2'



New in version 3.5.


