link:
library/subprocess.html#popen-constructor

docs:

Popen Constructor¶
The underlying process creation and management in this module is handled by
the Popen class. It offers a lot of flexibility so that developers
are able to handle the less common cases not covered by the convenience
functions.


class subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, encoding=None, errors=None, text=None)¶
Execute a child program in a new process.  On POSIX, the class uses
os.execvp()-like behavior to execute the child program.  On Windows,
the class uses the Windows CreateProcess() function.  The arguments to
Popen are as follows.
args should be a sequence of program arguments or else a single string.
By default, the program to execute is the first item in args if args is
a sequence.  If args is a string, the interpretation is
platform-dependent and described below.  See the shell and executable
arguments for additional differences from the default behavior.  Unless
otherwise stated, it is recommended to pass args as a sequence.
On POSIX, if args is a string, the string is interpreted as the name or
path of the program to execute.  However, this can only be done if not
passing arguments to the program.

Note
shlex.split() can be useful when determining the correct
tokenization for args, especially in complex cases:
>>> import shlex, subprocess
>>> command_line = input()
/bin/vikings -input eggs.txt -output "spam spam.txt" -cmd "echo '$MONEY'"
>>> args = shlex.split(command_line)
>>> print(args)
['/bin/vikings', '-input', 'eggs.txt', '-output', 'spam spam.txt', '-cmd', "echo '$MONEY'"]
>>> p = subprocess.Popen(args) # Success!


Note in particular that options (such as -input) and arguments (such
as eggs.txt) that are separated by whitespace in the shell go in separate
list elements, while arguments that need quoting or backslash escaping when
used in the shell (such as filenames containing spaces or the echo command
shown above) are single list elements.

On Windows, if args is a sequence, it will be converted to a string in a
manner described in Converting an argument sequence to a string on Windows.  This is because
the underlying CreateProcess() operates on strings.
The shell argument (which defaults to False) specifies whether to use
the shell as the program to execute.  If shell is True, it is
recommended to pass args as a string rather than as a sequence.
On POSIX with shell=True, the shell defaults to /bin/sh.  If
args is a string, the string specifies the command
to execute through the shell.  This means that the string must be
formatted exactly as it would be when typed at the shell prompt.  This
includes, for example, quoting or backslash escaping filenames with spaces in
them.  If args is a sequence, the first item specifies the command string, and
any additional items will be treated as additional arguments to the shell
itself.  That is to say, Popen does the equivalent of:
Popen(['/bin/sh', '-c', args[0], args[1], ...])


On Windows with shell=True, the COMSPEC environment variable
specifies the default shell.  The only time you need to specify
shell=True on Windows is when the command you wish to execute is built
into the shell (e.g. dir or copy).  You do not need
shell=True to run a batch file or console-based executable.

Note
Read the Security Considerations section before using shell=True.

bufsize will be supplied as the corresponding argument to the
open() function when creating the stdin/stdout/stderr pipe
file objects:

0 means unbuffered (read and write are one
system call and can return short)
1 means line buffered
(only usable if universal_newlines=True i.e., in a text mode)
any other positive value means use a buffer of approximately that
size
negative bufsize (the default) means the system default of
io.DEFAULT_BUFFER_SIZE will be used.


Changed in version 3.3.1: bufsize now defaults to -1 to enable buffering by default to match the
behavior that most code expects.  In versions prior to Python 3.2.4 and
3.3.1 it incorrectly defaulted to 0 which was unbuffered
and allowed short reads.  This was unintentional and did not match the
behavior of Python 2 as most code expected.

The executable argument specifies a replacement program to execute.   It
is very seldom needed.  When shell=False, executable replaces the
program to execute specified by args.  However, the original args is
still passed to the program.  Most programs treat the program specified
by args as the command name, which can then be different from the program
actually executed.  On POSIX, the args name
becomes the display name for the executable in utilities such as
ps.  If shell=True, on POSIX the executable argument
specifies a replacement shell for the default /bin/sh.
stdin, stdout and stderr specify the executed program’s standard input,
standard output and standard error file handles, respectively.  Valid values
are PIPE, DEVNULL, an existing file descriptor (a positive
integer), an existing file object, and None.  PIPE
indicates that a new pipe to the child should be created.  DEVNULL
indicates that the special file os.devnull will be used. With the
default settings of None, no redirection will occur; the child’s file
handles will be inherited from the parent.  Additionally, stderr can be
STDOUT, which indicates that the stderr data from the applications
should be captured into the same file handle as for stdout.
If preexec_fn is set to a callable object, this object will be called in the
child process just before the child is executed.
(POSIX only)

Warning
The preexec_fn parameter is not safe to use in the presence of threads
in your application.  The child process could deadlock before exec is
called.
If you must use it, keep it trivial!  Minimize the number of libraries
you call into.


Note
If you need to modify the environment for the child use the env
parameter rather than doing it in a preexec_fn.
The start_new_session parameter can take the place of a previously
common use of preexec_fn to call os.setsid() in the child.

If close_fds is true, all file descriptors except 0, 1 and
2 will be closed before the child process is executed.  Otherwise
when close_fds is false, file descriptors obey their inheritable flag
as described in Inheritance of File Descriptors.
On Windows, if close_fds is true then no handles will be inherited by the
child process unless explicitly passed in the handle_list element of
STARTUPINFO.lpAttributeList, or by standard handle redirection.

Changed in version 3.2: The default for close_fds was changed from False to
what is described above.


Changed in version 3.7: On Windows the default for close_fds was changed from False to
True when redirecting the standard handles. It’s now possible to
set close_fds to True when redirecting the standard handles.

pass_fds is an optional sequence of file descriptors to keep open
between the parent and child.  Providing any pass_fds forces
close_fds to be True.  (POSIX only)

New in version 3.2: The pass_fds parameter was added.

If cwd is not None, the function changes the working directory to
cwd before executing the child.  cwd can be a str and
path-like object.  In particular, the function
looks for executable (or for the first item in args) relative to cwd
if the executable path is a relative path.

Changed in version 3.6: cwd parameter accepts a path-like object.

If restore_signals is true (the default) all signals that Python has set to
SIG_IGN are restored to SIG_DFL in the child process before the exec.
Currently this includes the SIGPIPE, SIGXFZ and SIGXFSZ signals.
(POSIX only)

Changed in version 3.2: restore_signals was added.

If start_new_session is true the setsid() system call will be made in the
child process prior to the execution of the subprocess.  (POSIX only)

Changed in version 3.2: start_new_session was added.

If env is not None, it must be a mapping that defines the environment
variables for the new process; these are used instead of the default
behavior of inheriting the current process’ environment.

Note
If specified, env must provide any variables required for the program to
execute.  On Windows, in order to run a side-by-side assembly the
specified env must include a valid SystemRoot.

If encoding or errors are specified, or text is true, the file objects
stdin, stdout and stderr are opened in text mode with the specified
encoding and errors, as described above in Frequently Used Arguments.
The universal_newlines argument is equivalent  to text and is provided
for backwards compatibility. By default, file objects are opened in binary mode.

New in version 3.6: encoding and errors were added.


New in version 3.7: text was added as a more readable alias for universal_newlines.

If given, startupinfo will be a STARTUPINFO object, which is
passed to the underlying CreateProcess function.
creationflags, if given, can be one or more of the following flags:


CREATE_NEW_CONSOLE
CREATE_NEW_PROCESS_GROUP
ABOVE_NORMAL_PRIORITY_CLASS
BELOW_NORMAL_PRIORITY_CLASS
HIGH_PRIORITY_CLASS
IDLE_PRIORITY_CLASS
NORMAL_PRIORITY_CLASS
REALTIME_PRIORITY_CLASS
CREATE_NO_WINDOW
DETACHED_PROCESS
CREATE_DEFAULT_ERROR_MODE
CREATE_BREAKAWAY_FROM_JOB


Popen objects are supported as context managers via the with statement:
on exit, standard file descriptors are closed, and the process is waited for.
with Popen(["ifconfig"], stdout=PIPE) as proc:
    log.write(proc.stdout.read())



Changed in version 3.2: Added context manager support.


Changed in version 3.6: Popen destructor now emits a ResourceWarning warning if the child
process is still running.


