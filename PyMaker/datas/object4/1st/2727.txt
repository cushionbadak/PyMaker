link:
library/configparser.html#configparser.ConfigParser

docs:

<dt id="configparser.ConfigParser">
<em class="property">class </em><code class="descclassname">configparser.</code><code class="descname">ConfigParser</code><span class="sig-paren">(</span><em>defaults=None</em>, <em>dict_type=collections.OrderedDict</em>, <em>allow_no_value=False</em>, <em>delimiters=('='</em>, <em>':')</em>, <em>comment_prefixes=('#'</em>, <em>';')</em>, <em>inline_comment_prefixes=None</em>, <em>strict=True</em>, <em>empty_lines_in_values=True</em>, <em>default_section=configparser.DEFAULTSECT</em>, <em>interpolation=BasicInterpolation()</em>, <em>converters={}</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser" title="Permalink to this definition">¶</a></dt>
<dd><p>The main configuration parser.  When <em>defaults</em> is given, it is initialized
into the dictionary of intrinsic defaults.  When <em>dict_type</em> is given, it
will be used to create the dictionary objects for the list of sections, for
the options within a section, and for the default values.</p>
<p>When <em>delimiters</em> is given, it is used as the set of substrings that
divide keys from values.  When <em>comment_prefixes</em> is given, it will be used
as the set of substrings that prefix comments in otherwise empty lines.
Comments can be indented.  When <em>inline_comment_prefixes</em> is given, it will
be used as the set of substrings that prefix comments in non-empty lines.</p>
<p>When <em>strict</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code> (the default), the parser won’t allow for
any section or option duplicates while reading from a single source (file,
string or dictionary), raising <a class="reference internal" href="#configparser.DuplicateSectionError" title="configparser.DuplicateSectionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">DuplicateSectionError</span></code></a> or
<a class="reference internal" href="#configparser.DuplicateOptionError" title="configparser.DuplicateOptionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">DuplicateOptionError</span></code></a>.  When <em>empty_lines_in_values</em> is <code class="docutils literal notranslate"><span class="pre">False</span></code>
(default: <code class="docutils literal notranslate"><span class="pre">True</span></code>), each empty line marks the end of an option.  Otherwise,
internal empty lines of a multiline option are kept as part of the value.
When <em>allow_no_value</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code> (default: <code class="docutils literal notranslate"><span class="pre">False</span></code>), options without
values are accepted; the value held for these is <code class="docutils literal notranslate"><span class="pre">None</span></code> and they are
serialized without the trailing delimiter.</p>
<p>When <em>default_section</em> is given, it specifies the name for the special
section holding default values for other sections and interpolation purposes
(normally named <code class="docutils literal notranslate"><span class="pre">"DEFAULT"</span></code>).  This value can be retrieved and changed on
runtime using the <code class="docutils literal notranslate"><span class="pre">default_section</span></code> instance attribute.</p>
<p>Interpolation behaviour may be customized by providing a custom handler
through the <em>interpolation</em> argument. <code class="docutils literal notranslate"><span class="pre">None</span></code> can be used to turn off
interpolation completely, <code class="docutils literal notranslate"><span class="pre">ExtendedInterpolation()</span></code> provides a more
advanced variant inspired by <code class="docutils literal notranslate"><span class="pre">zc.buildout</span></code>.  More on the subject in the
<a class="reference external" href="#interpolation-of-values">dedicated documentation section</a>.</p>
<p>All option names used in interpolation will be passed through the
<a class="reference internal" href="#configparser.ConfigParser.optionxform" title="configparser.ConfigParser.optionxform"><code class="xref py py-meth docutils literal notranslate"><span class="pre">optionxform()</span></code></a> method just like any other option name reference.  For
example, using the default implementation of <a class="reference internal" href="#configparser.ConfigParser.optionxform" title="configparser.ConfigParser.optionxform"><code class="xref py py-meth docutils literal notranslate"><span class="pre">optionxform()</span></code></a> (which
converts option names to lower case), the values <code class="docutils literal notranslate"><span class="pre">foo</span> <span class="pre">%(bar)s</span></code> and <code class="docutils literal notranslate"><span class="pre">foo</span>
<span class="pre">%(BAR)s</span></code> are equivalent.</p>
<p>When <em>converters</em> is given, it should be a dictionary where each key
represents the name of a type converter and each value is a callable
implementing the conversion from string to the desired datatype.  Every
converter gets its own corresponding <code class="xref py py-meth docutils literal notranslate"><span class="pre">get*()</span></code> method on the parser
object and section proxies.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.1: </span>The default <em>dict_type</em> is <a class="reference internal" href="collections.html#collections.OrderedDict" title="collections.OrderedDict"><code class="xref py py-class docutils literal notranslate"><span class="pre">collections.OrderedDict</span></code></a>.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span><em>allow_no_value</em>, <em>delimiters</em>, <em>comment_prefixes</em>, <em>strict</em>,
<em>empty_lines_in_values</em>, <em>default_section</em> and <em>interpolation</em> were
added.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>The <em>converters</em> argument was added.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.7: </span>The <em>defaults</em> argument is read with <a class="reference internal" href="#configparser.ConfigParser.read_dict" title="configparser.ConfigParser.read_dict"><code class="xref py py-meth docutils literal notranslate"><span class="pre">read_dict()</span></code></a>,
providing consistent behavior across the parser: non-string
keys and values are implicitly converted to strings.</p>
</div>
<dl class="method">
<dt id="configparser.ConfigParser.defaults">
<code class="descname">defaults</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.defaults" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a dictionary containing the instance-wide defaults.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.sections">
<code class="descname">sections</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.sections" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a list of the sections available; the <em>default section</em> is not
included in the list.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.add_section">
<code class="descname">add_section</code><span class="sig-paren">(</span><em>section</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.add_section" title="Permalink to this definition">¶</a></dt>
<dd><p>Add a section named <em>section</em> to the instance.  If a section by the given
name already exists, <a class="reference internal" href="#configparser.DuplicateSectionError" title="configparser.DuplicateSectionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">DuplicateSectionError</span></code></a> is raised.  If the
<em>default section</em> name is passed, <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> is raised.  The name
of the section must be a string; if not, <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> is raised.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>Non-string section names raise <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>.</p>
</div>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.has_section">
<code class="descname">has_section</code><span class="sig-paren">(</span><em>section</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.has_section" title="Permalink to this definition">¶</a></dt>
<dd><p>Indicates whether the named <em>section</em> is present in the configuration.
The <em>default section</em> is not acknowledged.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.options">
<code class="descname">options</code><span class="sig-paren">(</span><em>section</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.options" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a list of options available in the specified <em>section</em>.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.has_option">
<code class="descname">has_option</code><span class="sig-paren">(</span><em>section</em>, <em>option</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.has_option" title="Permalink to this definition">¶</a></dt>
<dd><p>If the given <em>section</em> exists, and contains the given <em>option</em>, return
<a class="reference internal" href="constants.html#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a>; otherwise return <a class="reference internal" href="constants.html#False" title="False"><code class="xref py py-const docutils literal notranslate"><span class="pre">False</span></code></a>.  If the specified
<em>section</em> is <a class="reference internal" href="constants.html#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a> or an empty string, DEFAULT is assumed.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.read">
<code class="descname">read</code><span class="sig-paren">(</span><em>filenames</em>, <em>encoding=None</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.read" title="Permalink to this definition">¶</a></dt>
<dd><p>Attempt to read and parse an iterable of filenames, returning a list of
filenames which were successfully parsed.</p>
<p>If <em>filenames</em> is a string, a <a class="reference internal" href="stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> object or a
<a class="reference internal" href="../glossary.html#term-path-like-object"><span class="xref std std-term">path-like object</span></a>, it is treated as
a single filename.  If a file named in <em>filenames</em> cannot be opened, that
file will be ignored.  This is designed so that you can specify an
iterable of potential configuration file locations (for example, the
current directory, the user’s home directory, and some system-wide
directory), and all existing configuration files in the iterable will be
read.</p>
<p>If none of the named files exist, the <a class="reference internal" href="#configparser.ConfigParser" title="configparser.ConfigParser"><code class="xref py py-class docutils literal notranslate"><span class="pre">ConfigParser</span></code></a>
instance will contain an empty dataset.  An application which requires
initial values to be loaded from a file should load the required file or
files using <a class="reference internal" href="#configparser.ConfigParser.read_file" title="configparser.ConfigParser.read_file"><code class="xref py py-meth docutils literal notranslate"><span class="pre">read_file()</span></code></a> before calling <a class="reference internal" href="#configparser.ConfigParser.read" title="configparser.ConfigParser.read"><code class="xref py py-meth docutils literal notranslate"><span class="pre">read()</span></code></a> for any
optional files:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">configparser</span><span class="o">,</span> <span class="nn">os</span>

<span class="n">config</span> <span class="o">=</span> <span class="n">configparser</span><span class="o">.</span><span class="n">ConfigParser</span><span class="p">()</span>
<span class="n">config</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s1">'defaults.cfg'</span><span class="p">))</span>
<span class="n">config</span><span class="o">.</span><span class="n">read</span><span class="p">([</span><span class="s1">'site.cfg'</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">expanduser</span><span class="p">(</span><span class="s1">'~/.myapp.cfg'</span><span class="p">)],</span>
            <span class="n">encoding</span><span class="o">=</span><span class="s1">'cp1250'</span><span class="p">)</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.2: </span>The <em>encoding</em> parameter.  Previously, all files were read using the
default encoding for <a class="reference internal" href="functions.html#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a>.</p>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.6.1: </span>The <em>filenames</em> parameter accepts a <a class="reference internal" href="../glossary.html#term-path-like-object"><span class="xref std std-term">path-like object</span></a>.</p>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7: </span>The <em>filenames</em> parameter accepts a <a class="reference internal" href="stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> object.</p>
</div>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.read_file">
<code class="descname">read_file</code><span class="sig-paren">(</span><em>f</em>, <em>source=None</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.read_file" title="Permalink to this definition">¶</a></dt>
<dd><p>Read and parse configuration data from <em>f</em> which must be an iterable
yielding Unicode strings (for example files opened in text mode).</p>
<p>Optional argument <em>source</em> specifies the name of the file being read.  If
not given and <em>f</em> has a <code class="xref py py-attr docutils literal notranslate"><span class="pre">name</span></code> attribute, that is used for
<em>source</em>; the default is <code class="docutils literal notranslate"><span class="pre">'&lt;???&gt;'</span></code>.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.2: </span>Replaces <a class="reference internal" href="#configparser.ConfigParser.readfp" title="configparser.ConfigParser.readfp"><code class="xref py py-meth docutils literal notranslate"><span class="pre">readfp()</span></code></a>.</p>
</div>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.read_string">
<code class="descname">read_string</code><span class="sig-paren">(</span><em>string</em>, <em>source='&lt;string&gt;'</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.read_string" title="Permalink to this definition">¶</a></dt>
<dd><p>Parse configuration data from a string.</p>
<p>Optional argument <em>source</em> specifies a context-specific name of the
string passed.  If not given, <code class="docutils literal notranslate"><span class="pre">'&lt;string&gt;'</span></code> is used.  This should
commonly be a filesystem path or a URL.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.2.</span></p>
</div>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.read_dict">
<code class="descname">read_dict</code><span class="sig-paren">(</span><em>dictionary</em>, <em>source='&lt;dict&gt;'</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.read_dict" title="Permalink to this definition">¶</a></dt>
<dd><p>Load configuration from any object that provides a dict-like <code class="docutils literal notranslate"><span class="pre">items()</span></code>
method.  Keys are section names, values are dictionaries with keys and
values that should be present in the section.  If the used dictionary
type preserves order, sections and their keys will be added in order.
Values are automatically converted to strings.</p>
<p>Optional argument <em>source</em> specifies a context-specific name of the
dictionary passed.  If not given, <code class="docutils literal notranslate"><span class="pre">&lt;dict&gt;</span></code> is used.</p>
<p>This method can be used to copy state between parsers.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.2.</span></p>
</div>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.get">
<code class="descname">get</code><span class="sig-paren">(</span><em>section</em>, <em>option</em>, <em>*</em>, <em>raw=False</em>, <em>vars=None</em><span class="optional">[</span>, <em>fallback</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.get" title="Permalink to this definition">¶</a></dt>
<dd><p>Get an <em>option</em> value for the named <em>section</em>.  If <em>vars</em> is provided, it
must be a dictionary.  The <em>option</em> is looked up in <em>vars</em> (if provided),
<em>section</em>, and in <em>DEFAULTSECT</em> in that order.  If the key is not found
and <em>fallback</em> is provided, it is used as a fallback value.  <code class="docutils literal notranslate"><span class="pre">None</span></code> can
be provided as a <em>fallback</em> value.</p>
<p>All the <code class="docutils literal notranslate"><span class="pre">'%'</span></code> interpolations are expanded in the return values, unless
the <em>raw</em> argument is true.  Values for interpolation keys are looked up
in the same manner as the option.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span>Arguments <em>raw</em>, <em>vars</em> and <em>fallback</em> are keyword only to protect
users from trying to use the third argument as the <em>fallback</em> fallback
(especially when using the mapping protocol).</p>
</div>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.getint">
<code class="descname">getint</code><span class="sig-paren">(</span><em>section</em>, <em>option</em>, <em>*</em>, <em>raw=False</em>, <em>vars=None</em><span class="optional">[</span>, <em>fallback</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.getint" title="Permalink to this definition">¶</a></dt>
<dd><p>A convenience method which coerces the <em>option</em> in the specified <em>section</em>
to an integer.  See <a class="reference internal" href="#configparser.ConfigParser.get" title="configparser.ConfigParser.get"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get()</span></code></a> for explanation of <em>raw</em>, <em>vars</em> and
<em>fallback</em>.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.getfloat">
<code class="descname">getfloat</code><span class="sig-paren">(</span><em>section</em>, <em>option</em>, <em>*</em>, <em>raw=False</em>, <em>vars=None</em><span class="optional">[</span>, <em>fallback</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.getfloat" title="Permalink to this definition">¶</a></dt>
<dd><p>A convenience method which coerces the <em>option</em> in the specified <em>section</em>
to a floating point number.  See <a class="reference internal" href="#configparser.ConfigParser.get" title="configparser.ConfigParser.get"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get()</span></code></a> for explanation of <em>raw</em>,
<em>vars</em> and <em>fallback</em>.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.getboolean">
<code class="descname">getboolean</code><span class="sig-paren">(</span><em>section</em>, <em>option</em>, <em>*</em>, <em>raw=False</em>, <em>vars=None</em><span class="optional">[</span>, <em>fallback</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.getboolean" title="Permalink to this definition">¶</a></dt>
<dd><p>A convenience method which coerces the <em>option</em> in the specified <em>section</em>
to a Boolean value.  Note that the accepted values for the option are
<code class="docutils literal notranslate"><span class="pre">'1'</span></code>, <code class="docutils literal notranslate"><span class="pre">'yes'</span></code>, <code class="docutils literal notranslate"><span class="pre">'true'</span></code>, and <code class="docutils literal notranslate"><span class="pre">'on'</span></code>, which cause this method to
return <code class="docutils literal notranslate"><span class="pre">True</span></code>, and <code class="docutils literal notranslate"><span class="pre">'0'</span></code>, <code class="docutils literal notranslate"><span class="pre">'no'</span></code>, <code class="docutils literal notranslate"><span class="pre">'false'</span></code>, and <code class="docutils literal notranslate"><span class="pre">'off'</span></code>, which
cause it to return <code class="docutils literal notranslate"><span class="pre">False</span></code>.  These string values are checked in a
case-insensitive manner.  Any other value will cause it to raise
<a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>.  See <a class="reference internal" href="#configparser.ConfigParser.get" title="configparser.ConfigParser.get"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get()</span></code></a> for explanation of <em>raw</em>, <em>vars</em> and
<em>fallback</em>.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.items">
<code class="descname">items</code><span class="sig-paren">(</span><em>raw=False</em>, <em>vars=None</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.items" title="Permalink to this definition">¶</a></dt>
<dt>
<code class="descname">items</code><span class="sig-paren">(</span><em>section</em>, <em>raw=False</em>, <em>vars=None</em><span class="sig-paren">)</span></dt>
<dd><p>When <em>section</em> is not given, return a list of <em>section_name</em>,
<em>section_proxy</em> pairs, including DEFAULTSECT.</p>
<p>Otherwise, return a list of <em>name</em>, <em>value</em> pairs for the options in the
given <em>section</em>.  Optional arguments have the same meaning as for the
<a class="reference internal" href="#configparser.ConfigParser.get" title="configparser.ConfigParser.get"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get()</span></code></a> method.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.set">
<code class="descname">set</code><span class="sig-paren">(</span><em>section</em>, <em>option</em>, <em>value</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.set" title="Permalink to this definition">¶</a></dt>
<dd><p>If the given section exists, set the given option to the specified value;
otherwise raise <a class="reference internal" href="#configparser.NoSectionError" title="configparser.NoSectionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">NoSectionError</span></code></a>.  <em>option</em> and <em>value</em> must be
strings; if not, <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> is raised.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.write">
<code class="descname">write</code><span class="sig-paren">(</span><em>fileobject</em>, <em>space_around_delimiters=True</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.write" title="Permalink to this definition">¶</a></dt>
<dd><p>Write a representation of the configuration to the specified <a class="reference internal" href="../glossary.html#term-file-object"><span class="xref std std-term">file
object</span></a>, which must be opened in text mode (accepting strings).  This
representation can be parsed by a future <a class="reference internal" href="#configparser.ConfigParser.read" title="configparser.ConfigParser.read"><code class="xref py py-meth docutils literal notranslate"><span class="pre">read()</span></code></a> call.  If
<em>space_around_delimiters</em> is true, delimiters between
keys and values are surrounded by spaces.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.remove_option">
<code class="descname">remove_option</code><span class="sig-paren">(</span><em>section</em>, <em>option</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.remove_option" title="Permalink to this definition">¶</a></dt>
<dd><p>Remove the specified <em>option</em> from the specified <em>section</em>.  If the
section does not exist, raise <a class="reference internal" href="#configparser.NoSectionError" title="configparser.NoSectionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">NoSectionError</span></code></a>.  If the option
existed to be removed, return <a class="reference internal" href="constants.html#True" title="True"><code class="xref py py-const docutils literal notranslate"><span class="pre">True</span></code></a>; otherwise return
<a class="reference internal" href="constants.html#False" title="False"><code class="xref py py-const docutils literal notranslate"><span class="pre">False</span></code></a>.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.remove_section">
<code class="descname">remove_section</code><span class="sig-paren">(</span><em>section</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.remove_section" title="Permalink to this definition">¶</a></dt>
<dd><p>Remove the specified <em>section</em> from the configuration.  If the section in
fact existed, return <code class="docutils literal notranslate"><span class="pre">True</span></code>.  Otherwise return <code class="docutils literal notranslate"><span class="pre">False</span></code>.</p>
</dd></dl>
<dl class="method">
<dt>
<code class="descname">optionxform</code><span class="sig-paren">(</span><em>option</em><span class="sig-paren">)</span></dt>
<dd><p>Transforms the option name <em>option</em> as found in an input file or as passed
in by client code to the form that should be used in the internal
structures.  The default implementation returns a lower-case version of
<em>option</em>; subclasses may override this or client code can set an attribute
of this name on instances to affect this behavior.</p>
<p>You don’t need to subclass the parser to use this method, you can also
set it on an instance, to a function that takes a string argument and
returns a string.  Setting it to <code class="docutils literal notranslate"><span class="pre">str</span></code>, for example, would make option
names case sensitive:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">cfgparser</span> <span class="o">=</span> <span class="n">ConfigParser</span><span class="p">()</span>
<span class="n">cfgparser</span><span class="o">.</span><span class="n">optionxform</span> <span class="o">=</span> <span class="nb">str</span>
</pre></div>
</div>
<p>Note that when reading configuration files, whitespace around the option
names is stripped before <a class="reference internal" href="#configparser.ConfigParser.optionxform" title="configparser.ConfigParser.optionxform"><code class="xref py py-meth docutils literal notranslate"><span class="pre">optionxform()</span></code></a> is called.</p>
</dd></dl>
<dl class="method">
<dt id="configparser.ConfigParser.readfp">
<code class="descname">readfp</code><span class="sig-paren">(</span><em>fp</em>, <em>filename=None</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.ConfigParser.readfp" title="Permalink to this definition">¶</a></dt>
<dd><div class="deprecated">
<p><span class="versionmodified">Deprecated since version 3.2: </span>Use <a class="reference internal" href="#configparser.ConfigParser.read_file" title="configparser.ConfigParser.read_file"><code class="xref py py-meth docutils literal notranslate"><span class="pre">read_file()</span></code></a> instead.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span><a class="reference internal" href="#configparser.ConfigParser.readfp" title="configparser.ConfigParser.readfp"><code class="xref py py-meth docutils literal notranslate"><span class="pre">readfp()</span></code></a> now iterates on <em>fp</em> instead of calling <code class="docutils literal notranslate"><span class="pre">fp.readline()</span></code>.</p>
</div>
<p>For existing code calling <a class="reference internal" href="#configparser.ConfigParser.readfp" title="configparser.ConfigParser.readfp"><code class="xref py py-meth docutils literal notranslate"><span class="pre">readfp()</span></code></a> with arguments which don’t
support iteration, the following generator may be used as a wrapper
around the file-like object:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">readline_generator</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>
    <span class="n">line</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
    <span class="k">while</span> <span class="n">line</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">line</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</pre></div>
</div>
<p>Instead of <code class="docutils literal notranslate"><span class="pre">parser.readfp(fp)</span></code> use
<code class="docutils literal notranslate"><span class="pre">parser.read_file(readline_generator(fp))</span></code>.</p>
</dd></dl>
</dd>