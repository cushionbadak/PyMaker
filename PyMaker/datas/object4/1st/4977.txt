link:
library/asyncio-platforms.html#windows

docs:

Windows¶
All event loops on Windows do not support the following methods:

loop.create_unix_connection() and
loop.create_unix_server() are not supported.
The socket.AF_UNIX socket family is specific to Unix.
loop.add_signal_handler() and
loop.remove_signal_handler() are not supported.

SelectorEventLoop has the following limitations:

SelectSelector is used to wait on socket events:
it supports sockets and is limited to 512 sockets.
loop.add_reader() and loop.add_writer() only accept
socket handles (e.g. pipe file descriptors are not supported).
Pipes are not supported, so the loop.connect_read_pipe()
and loop.connect_write_pipe() methods are not implemented.
Subprocesses are not supported, i.e.
loop.subprocess_exec() and loop.subprocess_shell()
methods are not implemented.

ProactorEventLoop has the following limitations:

The loop.create_datagram_endpoint() method
is not supported.
The loop.add_reader() and loop.add_writer()
methods are not supported.

The resolution of the monotonic clock on Windows is usually around 15.6
msec.  The best resolution is 0.5 msec. The resolution depends on the
hardware (availability of HPET) and on the
Windows configuration.

Subprocess Support on Windows¶
SelectorEventLoop on Windows does not support subproceses.
On Windows, ProactorEventLoop should be used instead:
import asyncio

asyncio.set_event_loop_policy(
    asyncio.WindowsProactorEventLoopPolicy())

asyncio.run(your_code())


The policy.set_child_watcher() function is also
not supported, as ProactorEventLoop has a different mechanism
to watch child processes.

