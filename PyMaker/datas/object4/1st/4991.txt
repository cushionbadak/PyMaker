link:
library/asyncio-llapi-index.html#event-loop-methods

docs:

Event Loop MethodsÂ¶
See also the main documentation section about the
event loop methods.
Lifecycle






loop.run_until_complete()
Run a Future/Task/awaitable until complete.

loop.run_forever()
Run the event loop forever.

loop.stop()
Stop the event loop.

loop.close()
Close the event loop.

loop.is_running()
Return True if the event loop is running.

loop.is_closed()
Return True if the event loop is closed.

await loop.shutdown_asyncgens()
Close asynchronous generators.



Debugging






loop.set_debug()
Enable or disable the debug mode.

loop.get_debug()
Get the current debug mode.



Scheduling Callbacks






loop.call_soon()
Invoke a callback soon.

loop.call_soon_threadsafe()
A thread-safe variant of loop.call_soon().

loop.call_later()
Invoke a callback after the given time.

loop.call_at()
Invoke a callback at the given time.



Thread/Process Pool






await loop.run_in_executor()
Run a CPU-bound or other blocking function in
a concurrent.futures executor.

loop.set_default_executor()
Set the default executor for loop.run_in_executor().



Tasks and Futures






loop.create_future()
Create a Future object.

loop.create_task()
Schedule coroutine as a Task.

loop.set_task_factory()
Set a factory used by loop.create_task() to
create Tasks.

loop.get_task_factory()
Get the factory loop.create_task() uses
to create Tasks.



DNS






await loop.getaddrinfo()
Asynchronous version of socket.getaddrinfo().

await loop.getnameinfo()
Asynchronous version of socket.getnameinfo().



Networking and IPC






await loop.create_connection()
Open a TCP connection.

await loop.create_server()
Create a TCP server.

await loop.create_unix_connection()
Open a Unix socket connection.

await loop.create_unix_server()
Create a Unix socket server.

await loop.connect_accepted_socket()
Wrap a socket into a (transport, protocol)
pair.

await loop.create_datagram_endpoint()
Open a datagram (UDP) connection.

await loop.sendfile()
Send a file over a transport.

await loop.start_tls()
Upgrade an existing connection to TLS.

await loop.connect_read_pipe()
Wrap a read end of a pipe into a (transport, protocol) pair.

await loop.connect_write_pipe()
Wrap a write end of a pipe into a (transport, protocol) pair.



Sockets






await loop.sock_recv()
Receive data from the socket.

await loop.sock_recv_into()
Receive data from the socket into a buffer.

await loop.sock_sendall()
Send data to the socket.

await loop.sock_connect()
Connect the socket.

await loop.sock_accept()
Accept a socket connection.

await loop.sock_sendfile()
Send a file over the socket.

loop.add_reader()
Start watching a file descriptor for read availability.

loop.remove_reader()
Stop watching a file descriptor for read availability.

loop.add_writer()
Start watching a file descriptor for write availability.

loop.remove_writer()
Stop watching a file descriptor for write availability.



Unix Signals






loop.add_signal_handler()
Add a handler for a signal.

loop.remove_signal_handler()
Remove a handler for a signal.



Subprocesses






loop.subprocess_exec()
Spawn a subprocess.

loop.subprocess_shell()
Spawn a subprocess from a shell command.



Error Handling






loop.call_exception_handler()
Call the exception handler.

loop.set_exception_handler()
Set a new exception handler.

loop.get_exception_handler()
Get the current exception handler.

loop.default_exception_handler()
The default exception handler implementation.



Examples

Using asyncio.get_event_loop() and loop.run_forever().
Using loop.call_later().
Using loop.create_connection() to implement
an echo-client.
Using loop.create_connection() to
connect a socket.
Using add_reader() to watch an FD for read events.
Using loop.add_signal_handler().
Using loop.subprocess_exec().

