link:
library/unittest.html#unittest.TestResult.addSubTest

docs:

<dt id="unittest.TestResult.addSubTest">
<code class="descname">addSubTest</code><span class="sig-paren">(</span><em>test</em>, <em>subtest</em>, <em>outcome</em><span class="sig-paren">)</span><a class="headerlink" href="#unittest.TestResult.addSubTest" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Called when a subtest finishes.  <em>test</em> is the test case
corresponding to the test method.  <em>subtest</em> is a custom
<a class="reference internal" href="#unittest.TestCase" title="unittest.TestCase"><code class="xref py py-class docutils literal notranslate"><span class="pre">TestCase</span></code></a> instance describing the subtest.</p>
<p>If <em>outcome</em> is <a class="reference internal" href="constants.html#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a>, the subtest succeeded.  Otherwise,
it failed with an exception where <em>outcome</em> is a tuple of the form
returned by <a class="reference internal" href="sys.html#sys.exc_info" title="sys.exc_info"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.exc_info()</span></code></a>: <code class="docutils literal notranslate"><span class="pre">(type,</span> <span class="pre">value,</span> <span class="pre">traceback)</span></code>.</p>
<p>The default implementation does nothing when the outcome is a
success, and records subtest failures as normal failures.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.4.</span></p>
</div>
</dd>