link:
library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree

docs:


class xml.etree.ElementTree.ElementTree(element=None, file=None)¶
ElementTree wrapper class.  This class represents an entire element
hierarchy, and adds some extra support for serialization to and from
standard XML.
element is the root element.  The tree is initialized with the contents
of the XML file if given.


_setroot(element)¶
Replaces the root element for this tree.  This discards the current
contents of the tree, and replaces it with the given element.  Use with
care.  element is an element instance.



find(match, namespaces=None)¶
Same as Element.find(), starting at the root of the tree.



findall(match, namespaces=None)¶
Same as Element.findall(), starting at the root of the tree.



findtext(match, default=None, namespaces=None)¶
Same as Element.findtext(), starting at the root of the tree.



getiterator(tag=None)¶

Deprecated since version 3.2: Use method ElementTree.iter() instead.




getroot()¶
Returns the root element for this tree.



iter(tag=None)¶
Creates and returns a tree iterator for the root element.  The iterator
loops over all elements in this tree, in section order.  tag is the tag
to look for (default is to return all elements).



iterfind(match, namespaces=None)¶
Same as Element.iterfind(), starting at the root of the tree.

New in version 3.2.




parse(source, parser=None)¶
Loads an external XML section into this element tree.  source is a file
name or file object.  parser is an optional parser instance.
If not given, the standard XMLParser parser is used.  Returns the
section root element.



write(file, encoding="us-ascii", xml_declaration=None, default_namespace=None, method="xml", *, short_empty_elements=True)¶
Writes the element tree to a file, as XML.  file is a file name, or a
file object opened for writing.  encoding [1] is the output
encoding (default is US-ASCII).
xml_declaration controls if an XML declaration should be added to the
file.  Use False for never, True for always, None
for only if not US-ASCII or UTF-8 or Unicode (default is None).
default_namespace sets the default XML namespace (for “xmlns”).
method is either "xml", "html" or "text" (default is
"xml").
The keyword-only short_empty_elements parameter controls the formatting
of elements that contain no content.  If True (the default), they are
emitted as a single self-closed tag, otherwise they are emitted as a pair
of start/end tags.
The output is either a string (str) or binary (bytes).
This is controlled by the encoding argument.  If encoding is
"unicode", the output is a string; otherwise, it’s binary.  Note that
this may conflict with the type of file if it’s an open
file object; make sure you do not try to write a string to a
binary stream and vice versa.

New in version 3.4: The short_empty_elements parameter.


