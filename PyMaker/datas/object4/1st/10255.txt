link:
library/msilib.html#msilib.Directory

docs:

<dt id="msilib.Directory">
<em class="property">class </em><code class="descclassname">msilib.</code><code class="descname">Directory</code><span class="sig-paren">(</span><em>database</em>, <em>cab</em>, <em>basedir</em>, <em>physical</em>, <em>logical</em>, <em>default</em><span class="optional">[</span>, <em>componentflags</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#msilib.Directory" title="Permalink to this definition">¶</a></dt>
<dd><p>Create a new directory in the Directory table. There is a current component at
each point in time for the directory, which is either explicitly created through
<a class="reference internal" href="#msilib.Directory.start_component" title="msilib.Directory.start_component"><code class="xref py py-meth docutils literal notranslate"><span class="pre">start_component()</span></code></a>, or implicitly when files are added for the first time.
Files are added into the current component, and into the cab file.  To create a
directory, a base directory object needs to be specified (can be <code class="docutils literal notranslate"><span class="pre">None</span></code>), the
path to the physical directory, and a logical directory name.  <em>default</em>
specifies the DefaultDir slot in the directory table. <em>componentflags</em> specifies
the default flags that new components get.</p>
<dl class="method">
<dt id="msilib.Directory.start_component">
<code class="descname">start_component</code><span class="sig-paren">(</span><em>component=None</em>, <em>feature=None</em>, <em>flags=None</em>, <em>keyfile=None</em>, <em>uuid=None</em><span class="sig-paren">)</span><a class="headerlink" href="#msilib.Directory.start_component" title="Permalink to this definition">¶</a></dt>
<dd><p>Add an entry to the Component table, and make this component the current
component for this directory. If no component name is given, the directory
name is used. If no <em>feature</em> is given, the current feature is used. If no
<em>flags</em> are given, the directory’s default flags are used. If no <em>keyfile</em>
is given, the KeyPath is left null in the Component table.</p>
</dd></dl>
<dl class="method">
<dt id="msilib.Directory.add_file">
<code class="descname">add_file</code><span class="sig-paren">(</span><em>file</em>, <em>src=None</em>, <em>version=None</em>, <em>language=None</em><span class="sig-paren">)</span><a class="headerlink" href="#msilib.Directory.add_file" title="Permalink to this definition">¶</a></dt>
<dd><p>Add a file to the current component of the directory, starting a new one
if there is no current component. By default, the file name in the source
and the file table will be identical. If the <em>src</em> file is specified, it
is interpreted relative to the current directory. Optionally, a <em>version</em>
and a <em>language</em> can be specified for the entry in the File table.</p>
</dd></dl>
<dl class="method">
<dt id="msilib.Directory.glob">
<code class="descname">glob</code><span class="sig-paren">(</span><em>pattern</em>, <em>exclude=None</em><span class="sig-paren">)</span><a class="headerlink" href="#msilib.Directory.glob" title="Permalink to this definition">¶</a></dt>
<dd><p>Add a list of files to the current component as specified in the glob
pattern.  Individual files can be excluded in the <em>exclude</em> list.</p>
</dd></dl>
<dl class="method">
<dt id="msilib.Directory.remove_pyc">
<code class="descname">remove_pyc</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#msilib.Directory.remove_pyc" title="Permalink to this definition">¶</a></dt>
<dd><p>Remove <code class="docutils literal notranslate"><span class="pre">.pyc</span></code> files on uninstall.</p>
</dd></dl>
</dd>