link:
library/winreg.html#registry-handle-objects

docs:

Registry Handle Objects¶
This object wraps a Windows HKEY object, automatically closing it when the
object is destroyed.  To guarantee cleanup, you can call either the
Close() method on the object, or the CloseKey() function.
All registry functions in this module return one of these objects.
All registry functions in this module which accept a handle object also accept
an integer, however, use of the handle object is encouraged.
Handle objects provide semantics for __bool__() – thus
if handle:
    print("Yes")


will print Yes if the handle is currently valid (has not been closed or
detached).
The object also support comparison semantics, so handle objects will compare
true if they both reference the same underlying Windows handle value.
Handle objects can be converted to an integer (e.g., using the built-in
int() function), in which case the underlying Windows handle value is
returned.  You can also use the Detach() method to return the
integer handle, and also disconnect the Windows handle from the handle object.


PyHKEY.Close()¶
Closes the underlying Windows handle.
If the handle is already closed, no error is raised.



PyHKEY.Detach()¶
Detaches the Windows handle from the handle object.
The result is an integer that holds the value of the handle before it is
detached.  If the handle is already detached or closed, this will return
zero.
After calling this function, the handle is effectively invalidated, but the
handle is not closed.  You would call this function when you need the
underlying Win32 handle to exist beyond the lifetime of the handle object.



PyHKEY.__enter__()¶

PyHKEY.__exit__(*exc_info)¶
The HKEY object implements __enter__() and
__exit__() and thus supports the context protocol for the
with statement:
with OpenKey(HKEY_LOCAL_MACHINE, "foo") as key:
    ...  # work with key


will automatically close key when control leaves the with block.

