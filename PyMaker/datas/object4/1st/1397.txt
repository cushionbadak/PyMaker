link:
library/types.html#standard-interpreter-types

docs:

Standard Interpreter Types¶
This module provides names for many of the types that are required to
implement a Python interpreter. It deliberately avoids including some of
the types that arise only incidentally during processing such as the
listiterator type.
Typical use of these names is for isinstance() or
issubclass() checks.
Standard names are defined for the following types:


types.FunctionType¶

types.LambdaType¶
The type of user-defined functions and functions created by
lambda  expressions.



types.GeneratorType¶
The type of generator-iterator objects, created by
generator functions.



types.CoroutineType¶
The type of coroutine objects, created by
async def functions.

New in version 3.5.




types.AsyncGeneratorType¶
The type of asynchronous generator-iterator objects, created by
asynchronous generator functions.

New in version 3.6.




types.CodeType¶
The type for code objects such as returned by compile().



types.MethodType¶
The type of methods of user-defined class instances.



types.BuiltinFunctionType¶

types.BuiltinMethodType¶
The type of built-in functions like len() or sys.exit(), and
methods of built-in classes.  (Here, the term “built-in” means “written in
C”.)



types.WrapperDescriptorType¶
The type of methods of some built-in data types and base classes such as
object.__init__() or object.__lt__().

New in version 3.7.




types.MethodWrapperType¶
The type of bound methods of some built-in data types and base classes.
For example it is the type of object().__str__.

New in version 3.7.




types.MethodDescriptorType¶
The type of methods of some built-in data types such as str.join().

New in version 3.7.




types.ClassMethodDescriptorType¶
The type of unbound class methods of some built-in data types such as
dict.__dict__['fromkeys'].

New in version 3.7.




class types.ModuleType(name, doc=None)¶
The type of modules. Constructor takes the name of the
module to be created and optionally its docstring.

Note
Use importlib.util.module_from_spec() to create a new module if you
wish to set the various import-controlled attributes.



__doc__¶
The docstring of the module. Defaults to None.



__loader__¶
The loader which loaded the module. Defaults to None.

Changed in version 3.4: Defaults to None. Previously the attribute was optional.




__name__¶
The name of the module.



__package__¶
Which package a module belongs to. If the module is top-level
(i.e. not a part of any specific package) then the attribute should be set
to '', else it should be set to the name of the package (which can be
__name__ if the module is a package itself). Defaults to None.

Changed in version 3.4: Defaults to None. Previously the attribute was optional.





class types.TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)¶
The type of traceback objects such as found in sys.exc_info()[2].
See the language reference for details of the
available attributes and operations, and guidance on creating tracebacks
dynamically.



types.FrameType¶
The type of frame objects such as found in tb.tb_frame if tb is a
traceback object.
See the language reference for details of the
available attributes and operations.



types.GetSetDescriptorType¶
The type of objects defined in extension modules with PyGetSetDef, such
as FrameType.f_locals or array.array.typecode.  This type is used as
descriptor for object attributes; it has the same purpose as the
property type, but for classes defined in extension modules.



types.MemberDescriptorType¶
The type of objects defined in extension modules with PyMemberDef, such
as datetime.timedelta.days.  This type is used as descriptor for simple C
data members which use standard conversion functions; it has the same purpose
as the property type, but for classes defined in extension modules.

CPython implementation detail: In other implementations of Python, this type may be identical to
GetSetDescriptorType.




class types.MappingProxyType(mapping)¶
Read-only proxy of a mapping. It provides a dynamic view on the mapping’s
entries, which means that when the mapping changes, the view reflects these
changes.

New in version 3.3.



key in proxy
Return True if the underlying mapping has a key key, else
False.



proxy[key]
Return the item of the underlying mapping with key key.  Raises a
KeyError if key is not in the underlying mapping.



iter(proxy)
Return an iterator over the keys of the underlying mapping.  This is a
shortcut for iter(proxy.keys()).



len(proxy)
Return the number of items in the underlying mapping.



copy()¶
Return a shallow copy of the underlying mapping.



get(key[, default])¶
Return the value for key if key is in the underlying mapping, else
default.  If default is not given, it defaults to None, so that
this method never raises a KeyError.



items()¶
Return a new view of the underlying mapping’s items ((key, value)
pairs).



keys()¶
Return a new view of the underlying mapping’s keys.



values()¶
Return a new view of the underlying mapping’s values.


