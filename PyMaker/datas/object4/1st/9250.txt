link:
library/sys.html#sys.set_coroutine_wrapper

docs:

<dt id="sys.set_coroutine_wrapper">
<code class="descclassname">sys.</code><code class="descname">set_coroutine_wrapper</code><span class="sig-paren">(</span><em>wrapper</em><span class="sig-paren">)</span><a class="headerlink" href="#sys.set_coroutine_wrapper" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Allows intercepting creation of <a class="reference internal" href="../glossary.html#term-coroutine"><span class="xref std std-term">coroutine</span></a> objects (only ones that
are created by an <a class="reference internal" href="../reference/compound_stmts.html#async-def"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">async</span> <span class="pre">def</span></code></a> function; generators decorated with
<a class="reference internal" href="types.html#types.coroutine" title="types.coroutine"><code class="xref py py-func docutils literal notranslate"><span class="pre">types.coroutine()</span></code></a> or <a class="reference internal" href="asyncio-task.html#asyncio.coroutine" title="asyncio.coroutine"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.coroutine()</span></code></a> will not be
intercepted).</p>
<p>The <em>wrapper</em> argument must be either:</p>
<ul class="simple">
<li>a callable that accepts one argument (a coroutine object);</li>
<li><code class="docutils literal notranslate"><span class="pre">None</span></code>, to reset the wrapper.</li>
</ul>
<p>If called twice, the new wrapper replaces the previous one.  The function
is thread-specific.</p>
<p>The <em>wrapper</em> callable cannot define new coroutines directly or indirectly:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">coro</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="n">coro</span><span class="p">):</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">coro</span>
    <span class="k">return</span> <span class="n">wrap</span><span class="p">(</span><span class="n">coro</span><span class="p">)</span>
<span class="n">sys</span><span class="o">.</span><span class="n">set_coroutine_wrapper</span><span class="p">(</span><span class="n">wrapper</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
    <span class="k">pass</span>

<span class="c1"># The following line will fail with a RuntimeError, because</span>
<span class="c1"># ``wrapper`` creates a ``wrap(coro)`` coroutine:</span>
<span class="n">foo</span><span class="p">()</span>
</pre></div>
</div>
<p>See also <a class="reference internal" href="#sys.get_coroutine_wrapper" title="sys.get_coroutine_wrapper"><code class="xref py py-func docutils literal notranslate"><span class="pre">get_coroutine_wrapper()</span></code></a>.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.5: </span>See <span class="target" id="index-29"></span><a class="pep reference external" href="https://www.python.org/dev/peps/pep-0492"><strong>PEP 492</strong></a> for more details.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">This function has been added on a provisional basis (see <span class="target" id="index-30"></span><a class="pep reference external" href="https://www.python.org/dev/peps/pep-0411"><strong>PEP 411</strong></a>
for details.)  Use it only for debugging purposes.</p>
</div>
<div class="deprecated">
<p><span class="versionmodified">Deprecated since version 3.7: </span>The coroutine wrapper functionality has been deprecated, and
will be removed in 3.8. See <a class="reference external" href="https://bugs.python.org/issue32591">bpo-32591</a> for details.</p>
</div>
</dd>