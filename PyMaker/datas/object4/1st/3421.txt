link:
library/argparse.html#conflict-handler

docs:

conflict_handlerÂ¶
ArgumentParser objects do not allow two actions with the same option
string.  By default, ArgumentParser objects raise an exception if an
attempt is made to create an argument with an option string that is already in
use:
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('-f', '--foo', help='old foo help')
>>> parser.add_argument('--foo', help='new foo help')
Traceback (most recent call last):
 ..
ArgumentError: argument --foo: conflicting option string(s): --foo


Sometimes (e.g. when using parents) it may be useful to simply override any
older arguments with the same option string.  To get this behavior, the value
'resolve' can be supplied to the conflict_handler= argument of
ArgumentParser:
>>> parser = argparse.ArgumentParser(prog='PROG', conflict_handler='resolve')
>>> parser.add_argument('-f', '--foo', help='old foo help')
>>> parser.add_argument('--foo', help='new foo help')
>>> parser.print_help()
usage: PROG [-h] [-f FOO] [--foo FOO]

optional arguments:
 -h, --help  show this help message and exit
 -f FOO      old foo help
 --foo FOO   new foo help


Note that ArgumentParser objects only remove an action if all of its
option strings are overridden.  So, in the example above, the old -f/--foo
action is retained as the -f action, because only the --foo option
string was overridden.
