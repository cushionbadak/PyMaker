link:
library/io.html#id1

docs:

Text I/O¶


class io.TextIOBase¶
Base class for text streams.  This class provides a character and line based
interface to stream I/O.  It inherits IOBase.
There is no public constructor.
TextIOBase provides or overrides these data attributes and
methods in addition to those from IOBase:


encoding¶
The name of the encoding used to decode the stream’s bytes into
strings, and to encode strings into bytes.



errors¶
The error setting of the decoder or encoder.



newlines¶
A string, a tuple of strings, or None, indicating the newlines
translated so far.  Depending on the implementation and the initial
constructor flags, this may not be available.



buffer¶
The underlying binary buffer (a BufferedIOBase instance) that
TextIOBase deals with.  This is not part of the
TextIOBase API and may not exist in some implementations.



detach()¶
Separate the underlying binary buffer from the TextIOBase and
return it.
After the underlying buffer has been detached, the TextIOBase is
in an unusable state.
Some TextIOBase implementations, like StringIO, may not
have the concept of an underlying buffer and calling this method will
raise UnsupportedOperation.

New in version 3.1.




read(size=-1)¶
Read and return at most size characters from the stream as a single
str.  If size is negative or None, reads until EOF.



readline(size=-1)¶
Read until newline or EOF and return a single str.  If the stream is
already at EOF, an empty string is returned.
If size is specified, at most size characters will be read.



seek(offset[, whence])¶
Change the stream position to the given offset.  Behaviour depends on
the whence parameter.  The default value for whence is
SEEK_SET.

SEEK_SET or 0: seek from the start of the stream
(the default); offset must either be a number returned by
TextIOBase.tell(), or zero.  Any other offset value
produces undefined behaviour.
SEEK_CUR or 1: “seek” to the current position;
offset must be zero, which is a no-operation (all other values
are unsupported).
SEEK_END or 2: seek to the end of the stream;
offset must be zero (all other values are unsupported).

Return the new absolute position as an opaque number.

New in version 3.1: The SEEK_* constants.




tell()¶
Return the current stream position as an opaque number.  The number
does not usually represent a number of bytes in the underlying
binary storage.



write(s)¶
Write the string s to the stream and return the number of characters
written.




class io.TextIOWrapper(buffer, encoding=None, errors=None, newline=None, line_buffering=False, write_through=False)¶
A buffered text stream over a BufferedIOBase binary stream.
It inherits TextIOBase.
encoding gives the name of the encoding that the stream will be decoded or
encoded with.  It defaults to
locale.getpreferredencoding(False).
errors is an optional string that specifies how encoding and decoding
errors are to be handled.  Pass 'strict' to raise a ValueError
exception if there is an encoding error (the default of None has the same
effect), or pass 'ignore' to ignore errors.  (Note that ignoring encoding
errors can lead to data loss.)  'replace' causes a replacement marker
(such as '?') to be inserted where there is malformed data.
'backslashreplace' causes malformed data to be replaced by a
backslashed escape sequence.  When writing, 'xmlcharrefreplace'
(replace with the appropriate XML character reference)  or 'namereplace'
(replace with \N{...} escape sequences) can be used.  Any other error
handling name that has been registered with
codecs.register_error() is also valid.
newline controls how line endings are handled.  It can be None,
'', '\n', '\r', and '\r\n'.  It works as follows:

When reading input from the stream, if newline is None,
universal newlines mode is enabled.  Lines in the input can end in
'\n', '\r', or '\r\n', and these are translated into '\n'
before being returned to the caller.  If it is '', universal newlines
mode is enabled, but line endings are returned to the caller untranslated.
If it has any of the other legal values, input lines are only terminated
by the given string, and the line ending is returned to the caller
untranslated.
When writing output to the stream, if newline is None, any '\n'
characters written are translated to the system default line separator,
os.linesep.  If newline is '' or '\n', no translation
takes place.  If newline is any of the other legal values, any '\n'
characters written are translated to the given string.

If line_buffering is True, flush() is implied when a call to
write contains a newline character or a carriage return.
If write_through is True, calls to write() are guaranteed
not to be buffered: any data written on the TextIOWrapper
object is immediately handled to its underlying binary buffer.

Changed in version 3.3: The write_through argument has been added.


Changed in version 3.3: The default encoding is now locale.getpreferredencoding(False)
instead of locale.getpreferredencoding(). Don’t change temporary the
locale encoding using locale.setlocale(), use the current locale
encoding instead of the user preferred encoding.

TextIOWrapper provides these members in addition to those of
TextIOBase and its parents:


line_buffering¶
Whether line buffering is enabled.



write_through¶
Whether writes are passed immediately to the underlying binary
buffer.

New in version 3.7.




reconfigure(*[, encoding][, errors][, newline][,                      line_buffering][, write_through])¶
Reconfigure this text stream using new settings for encoding,
errors, newline, line_buffering and write_through.
Parameters not specified keep current settings, except
errors='strict is used when encoding is specified but
errors is not specified.
It is not possible to change the encoding or newline if some data
has already been read from the stream. On the other hand, changing
encoding after write is possible.
This method does an implicit stream flush before setting the
new parameters.

New in version 3.7.





class io.StringIO(initial_value='', newline='\n')¶
An in-memory stream for text I/O.  The text buffer is discarded when the
close() method is called.
The initial value of the buffer can be set by providing initial_value.
If newline translation is enabled, newlines will be encoded as if by
write().  The stream is positioned at the start of
the buffer.
The newline argument works like that of TextIOWrapper.
The default is to consider only \n characters as ends of lines and
to do no newline translation.  If newline is set to None,
newlines are written as \n on all platforms, but universal
newline decoding is still performed when reading.
StringIO provides this method in addition to those from
TextIOBase and its parents:


getvalue()¶
Return a str containing the entire contents of the buffer.
Newlines are decoded as if by read(), although
the stream position is not changed.

Example usage:
import io

output = io.StringIO()
output.write('First line.\n')
print('Second line.', file=output)

# Retrieve file contents -- this will be
# 'First line.\nSecond line.\n'
contents = output.getvalue()

# Close object and discard memory buffer --
# .getvalue() will now raise an exception.
output.close()





class io.IncrementalNewlineDecoder¶
A helper codec that decodes newlines for universal newlines mode.
It inherits codecs.IncrementalDecoder.

