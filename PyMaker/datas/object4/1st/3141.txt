link:
library/os.html#process-management

docs:

Process Management¶
These functions may be used to create and manage processes.
The various exec* functions take a list of arguments for the new
program loaded into the process.  In each case, the first of these arguments is
passed to the new program as its own name rather than as an argument a user may
have typed on a command line.  For the C programmer, this is the argv[0]
passed to a program’s main().  For example, os.execv('/bin/echo',
['foo', 'bar']) will only print bar on standard output; foo will seem
to be ignored.


os.abort()¶
Generate a SIGABRT signal to the current process.  On Unix, the default
behavior is to produce a core dump; on Windows, the process immediately returns
an exit code of 3.  Be aware that calling this function will not call the
Python signal handler registered for SIGABRT with
signal.signal().



os.execl(path, arg0, arg1, ...)¶

os.execle(path, arg0, arg1, ..., env)¶

os.execlp(file, arg0, arg1, ...)¶

os.execlpe(file, arg0, arg1, ..., env)¶

os.execv(path, args)¶

os.execve(path, args, env)¶

os.execvp(file, args)¶

os.execvpe(file, args, env)¶
These functions all execute a new program, replacing the current process; they
do not return.  On Unix, the new executable is loaded into the current process,
and will have the same process id as the caller.  Errors will be reported as
OSError exceptions.
The current process is replaced immediately. Open file objects and
descriptors are not flushed, so if there may be data buffered
on these open files, you should flush them using
sys.stdout.flush() or os.fsync() before calling an
exec* function.
The “l” and “v” variants of the exec* functions differ in how
command-line arguments are passed.  The “l” variants are perhaps the easiest
to work with if the number of parameters is fixed when the code is written; the
individual parameters simply become additional parameters to the execl*()
functions.  The “v” variants are good when the number of parameters is
variable, with the arguments being passed in a list or tuple as the args
parameter.  In either case, the arguments to the child process should start with
the name of the command being run, but this is not enforced.
The variants which include a “p” near the end (execlp(),
execlpe(), execvp(), and execvpe()) will use the
PATH environment variable to locate the program file.  When the
environment is being replaced (using one of the exec*e variants,
discussed in the next paragraph), the new environment is used as the source of
the PATH variable. The other variants, execl(), execle(),
execv(), and execve(), will not use the PATH variable to
locate the executable; path must contain an appropriate absolute or relative
path.
For execle(), execlpe(), execve(), and execvpe() (note
that these all end in “e”), the env parameter must be a mapping which is
used to define the environment variables for the new process (these are used
instead of the current process’ environment); the functions execl(),
execlp(), execv(), and execvp() all cause the new process to
inherit the environment of the current process.
For execve() on some platforms, path may also be specified as an open
file descriptor.  This functionality may not be supported on your platform;
you can check whether or not it is available using os.supports_fd.
If it is unavailable, using it will raise a NotImplementedError.
Availability: Unix, Windows.

New in version 3.3: Added support for specifying an open file descriptor for path
for execve().


Changed in version 3.6: Accepts a path-like object.




os._exit(n)¶
Exit the process with status n, without calling cleanup handlers, flushing
stdio buffers, etc.

Note
The standard way to exit is sys.exit(n).  _exit() should
normally only be used in the child process after a fork().


The following exit codes are defined and can be used with _exit(),
although they are not required.  These are typically used for system programs
written in Python, such as a mail server’s external command delivery program.

Note
Some of these may not be available on all Unix platforms, since there is some
variation.  These constants are defined where they are defined by the underlying
platform.



os.EX_OK¶
Exit code that means no error occurred.
Availability: Unix.



os.EX_USAGE¶
Exit code that means the command was used incorrectly, such as when the wrong
number of arguments are given.
Availability: Unix.



os.EX_DATAERR¶
Exit code that means the input data was incorrect.
Availability: Unix.



os.EX_NOINPUT¶
Exit code that means an input file did not exist or was not readable.
Availability: Unix.



os.EX_NOUSER¶
Exit code that means a specified user did not exist.
Availability: Unix.



os.EX_NOHOST¶
Exit code that means a specified host did not exist.
Availability: Unix.



os.EX_UNAVAILABLE¶
Exit code that means that a required service is unavailable.
Availability: Unix.



os.EX_SOFTWARE¶
Exit code that means an internal software error was detected.
Availability: Unix.



os.EX_OSERR¶
Exit code that means an operating system error was detected, such as the
inability to fork or create a pipe.
Availability: Unix.



os.EX_OSFILE¶
Exit code that means some system file did not exist, could not be opened, or had
some other kind of error.
Availability: Unix.



os.EX_CANTCREAT¶
Exit code that means a user specified output file could not be created.
Availability: Unix.



os.EX_IOERR¶
Exit code that means that an error occurred while doing I/O on some file.
Availability: Unix.



os.EX_TEMPFAIL¶
Exit code that means a temporary failure occurred.  This indicates something
that may not really be an error, such as a network connection that couldn’t be
made during a retryable operation.
Availability: Unix.



os.EX_PROTOCOL¶
Exit code that means that a protocol exchange was illegal, invalid, or not
understood.
Availability: Unix.



os.EX_NOPERM¶
Exit code that means that there were insufficient permissions to perform the
operation (but not intended for file system problems).
Availability: Unix.



os.EX_CONFIG¶
Exit code that means that some kind of configuration error occurred.
Availability: Unix.



os.EX_NOTFOUND¶
Exit code that means something like “an entry was not found”.
Availability: Unix.



os.fork()¶
Fork a child process.  Return 0 in the child and the child’s process id in the
parent.  If an error occurs OSError is raised.
Note that some platforms including FreeBSD <= 6.3 and Cygwin have
known issues when using fork() from a thread.

Warning
See ssl for applications that use the SSL module with fork().

Availability: Unix.



os.forkpty()¶
Fork a child process, using a new pseudo-terminal as the child’s controlling
terminal. Return a pair of (pid, fd), where pid is 0 in the child, the
new child’s process id in the parent, and fd is the file descriptor of the
master end of the pseudo-terminal.  For a more portable approach, use the
pty module.  If an error occurs OSError is raised.
Availability: some flavors of Unix.



os.kill(pid, sig)¶
Send signal sig to the process pid.  Constants for the specific signals
available on the host platform are defined in the signal module.
Windows: The signal.CTRL_C_EVENT and
signal.CTRL_BREAK_EVENT signals are special signals which can
only be sent to console processes which share a common console window,
e.g., some subprocesses. Any other value for sig will cause the process
to be unconditionally killed by the TerminateProcess API, and the exit code
will be set to sig. The Windows version of kill() additionally takes
process handles to be killed.
See also signal.pthread_kill().

New in version 3.2: Windows support.




os.killpg(pgid, sig)¶
Send the signal sig to the process group pgid.
Availability: Unix.



os.nice(increment)¶
Add increment to the process’s “niceness”.  Return the new niceness.
Availability: Unix.



os.plock(op)¶
Lock program segments into memory.  The value of op (defined in
<sys/lock.h>) determines which segments are locked.
Availability: Unix.



os.popen(cmd, mode='r', buffering=-1)¶
Open a pipe to or from command cmd.
The return value is an open file object
connected to the pipe, which can be read or written depending on whether mode
is 'r' (default) or 'w'. The buffering argument has the same meaning as
the corresponding argument to the built-in open() function. The
returned file object reads or writes text strings rather than bytes.
The close method returns None if the subprocess exited
successfully, or the subprocess’s return code if there was an
error. On POSIX systems, if the return code is positive it
represents the return value of the process left-shifted by one
byte.  If the return code is negative, the process was terminated
by the signal given by the negated value of the return code.  (For
example, the return value might be - signal.SIGKILL if the
subprocess was killed.)  On Windows systems, the return value
contains the signed integer return code from the child process.
This is implemented using subprocess.Popen; see that class’s
documentation for more powerful ways to manage and communicate with
subprocesses.



os.register_at_fork(*, before=None, after_in_parent=None, after_in_child=None)¶
Register callables to be executed when a new child process is forked
using os.fork() or similar process cloning APIs.
The parameters are optional and keyword-only.
Each specifies a different call point.

before is a function called before forking a child process.
after_in_parent is a function called from the parent process
after forking a child process.
after_in_child is a function called from the child process.

These calls are only made if control is expected to return to the
Python interpreter.  A typical subprocess launch will not
trigger them as the child is not going to re-enter the interpreter.
Functions registered for execution before forking are called in
reverse registration order.  Functions registered for execution
after forking (either in the parent or in the child) are called
in registration order.
Note that fork() calls made by third-party C code may not
call those functions, unless it explicitly calls PyOS_BeforeFork(),
PyOS_AfterFork_Parent() and PyOS_AfterFork_Child().
There is no way to unregister a function.
Availability: Unix.

New in version 3.7.




os.spawnl(mode, path, ...)¶

os.spawnle(mode, path, ..., env)¶

os.spawnlp(mode, file, ...)¶

os.spawnlpe(mode, file, ..., env)¶

os.spawnv(mode, path, args)¶

os.spawnve(mode, path, args, env)¶

os.spawnvp(mode, file, args)¶

os.spawnvpe(mode, file, args, env)¶
Execute the program path in a new process.
(Note that the subprocess module provides more powerful facilities for
spawning new processes and retrieving their results; using that module is
preferable to using these functions.  Check especially the
Replacing Older Functions with the subprocess Module section.)
If mode is P_NOWAIT, this function returns the process id of the new
process; if mode is P_WAIT, returns the process’s exit code if it
exits normally, or -signal, where signal is the signal that killed the
process.  On Windows, the process id will actually be the process handle, so can
be used with the waitpid() function.
The “l” and “v” variants of the spawn* functions differ in how
command-line arguments are passed.  The “l” variants are perhaps the easiest
to work with if the number of parameters is fixed when the code is written; the
individual parameters simply become additional parameters to the
spawnl*() functions.  The “v” variants are good when the number of
parameters is variable, with the arguments being passed in a list or tuple as
the args parameter.  In either case, the arguments to the child process must
start with the name of the command being run.
The variants which include a second “p” near the end (spawnlp(),
spawnlpe(), spawnvp(), and spawnvpe()) will use the
PATH environment variable to locate the program file.  When the
environment is being replaced (using one of the spawn*e variants,
discussed in the next paragraph), the new environment is used as the source of
the PATH variable.  The other variants, spawnl(),
spawnle(), spawnv(), and spawnve(), will not use the
PATH variable to locate the executable; path must contain an
appropriate absolute or relative path.
For spawnle(), spawnlpe(), spawnve(), and spawnvpe()
(note that these all end in “e”), the env parameter must be a mapping
which is used to define the environment variables for the new process (they are
used instead of the current process’ environment); the functions
spawnl(), spawnlp(), spawnv(), and spawnvp() all cause
the new process to inherit the environment of the current process.  Note that
keys and values in the env dictionary must be strings; invalid keys or
values will cause the function to fail, with a return value of 127.
As an example, the following calls to spawnlp() and spawnvpe() are
equivalent:
import os
os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')

L = ['cp', 'index.html', '/dev/null']
os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)


Availability: Unix, Windows.  spawnlp(), spawnlpe(), spawnvp()
and spawnvpe() are not available on Windows.  spawnle() and
spawnve() are not thread-safe on Windows; we advise you to use the
subprocess module instead.

Changed in version 3.6: Accepts a path-like object.




os.P_NOWAIT¶

os.P_NOWAITO¶
Possible values for the mode parameter to the spawn* family of
functions.  If either of these values is given, the spawn*() functions
will return as soon as the new process has been created, with the process id as
the return value.
Availability: Unix, Windows.



os.P_WAIT¶
Possible value for the mode parameter to the spawn* family of
functions.  If this is given as mode, the spawn*() functions will not
return until the new process has run to completion and will return the exit code
of the process the run is successful, or -signal if a signal kills the
process.
Availability: Unix, Windows.



os.P_DETACH¶

os.P_OVERLAY¶
Possible values for the mode parameter to the spawn* family of
functions.  These are less portable than those listed above. P_DETACH
is similar to P_NOWAIT, but the new process is detached from the
console of the calling process. If P_OVERLAY is used, the current
process will be replaced; the spawn* function will not return.
Availability: Windows.



os.startfile(path[, operation])¶
Start a file with its associated application.
When operation is not specified or 'open', this acts like double-clicking
the file in Windows Explorer, or giving the file name as an argument to the
start command from the interactive command shell: the file is opened
with whatever application (if any) its extension is associated.
When another operation is given, it must be a “command verb” that specifies
what should be done with the file. Common verbs documented by Microsoft are
'print' and  'edit' (to be used on files) as well as 'explore' and
'find' (to be used on directories).
startfile() returns as soon as the associated application is launched.
There is no option to wait for the application to close, and no way to retrieve
the application’s exit status.  The path parameter is relative to the current
directory.  If you want to use an absolute path, make sure the first character
is not a slash ('/'); the underlying Win32 ShellExecute() function
doesn’t work if it is.  Use the os.path.normpath() function to ensure that
the path is properly encoded for Win32.
To reduce interpreter startup overhead, the Win32 ShellExecute()
function is not resolved until this function is first called.  If the function
cannot be resolved, NotImplementedError will be raised.
Availability: Windows.



os.system(command)¶
Execute the command (a string) in a subshell.  This is implemented by calling
the Standard C function system(), and has the same limitations.
Changes to sys.stdin, etc. are not reflected in the environment of
the executed command. If command generates any output, it will be sent to
the interpreter standard output stream.
On Unix, the return value is the exit status of the process encoded in the
format specified for wait().  Note that POSIX does not specify the
meaning of the return value of the C system() function, so the return
value of the Python function is system-dependent.
On Windows, the return value is that returned by the system shell after
running command.  The shell is given by the Windows environment variable
COMSPEC: it is usually cmd.exe, which returns the exit
status of the command run; on systems using a non-native shell, consult your
shell documentation.
The subprocess module provides more powerful facilities for spawning
new processes and retrieving their results; using that module is preferable
to using this function.  See the Replacing Older Functions with the subprocess Module section in
the subprocess documentation for some helpful recipes.
Availability: Unix, Windows.



os.times()¶
Returns the current global process times.
The return value is an object with five attributes:

user - user time
system - system time
children_user - user time of all child processes
children_system - system time of all child processes
elapsed - elapsed real time since a fixed point in the past

For backwards compatibility, this object also behaves like a five-tuple
containing user, system, children_user,
children_system, and elapsed in that order.
See the Unix manual page
times(2) or the corresponding Windows Platform API documentation.
On Windows, only user and system are known; the other
attributes are zero.
Availability: Unix, Windows.

Changed in version 3.3: Return type changed from a tuple to a tuple-like object
with named attributes.




os.wait()¶
Wait for completion of a child process, and return a tuple containing its pid
and exit status indication: a 16-bit number, whose low byte is the signal number
that killed the process, and whose high byte is the exit status (if the signal
number is zero); the high bit of the low byte is set if a core file was
produced.
Availability: Unix.



os.waitid(idtype, id, options)¶
Wait for the completion of one or more child processes.
idtype can be P_PID, P_PGID or P_ALL.
id specifies the pid to wait on.
options is constructed from the ORing of one or more of WEXITED,
WSTOPPED or WCONTINUED and additionally may be ORed with
WNOHANG or WNOWAIT. The return value is an object
representing the data contained in the siginfo_t structure, namely:
si_pid, si_uid, si_signo, si_status,
si_code or None if WNOHANG is specified and there are no
children in a waitable state.
Availability: Unix.

New in version 3.3.




os.P_PID¶

os.P_PGID¶

os.P_ALL¶
These are the possible values for idtype in waitid(). They affect
how id is interpreted.
Availability: Unix.

New in version 3.3.




os.WEXITED¶

os.WSTOPPED¶

os.WNOWAIT¶
Flags that can be used in options in waitid() that specify what
child signal to wait for.
Availability: Unix.

New in version 3.3.




os.CLD_EXITED¶

os.CLD_DUMPED¶

os.CLD_TRAPPED¶

os.CLD_CONTINUED¶
These are the possible values for si_code in the result returned by
waitid().
Availability: Unix.

New in version 3.3.




os.waitpid(pid, options)¶
The details of this function differ on Unix and Windows.
On Unix: Wait for completion of a child process given by process id pid, and
return a tuple containing its process id and exit status indication (encoded as
for wait()).  The semantics of the call are affected by the value of the
integer options, which should be 0 for normal operation.
If pid is greater than 0, waitpid() requests status information for
that specific process.  If pid is 0, the request is for the status of any
child in the process group of the current process.  If pid is -1, the
request pertains to any child of the current process.  If pid is less than
-1, status is requested for any process in the process group -pid (the
absolute value of pid).
An OSError is raised with the value of errno when the syscall
returns -1.
On Windows: Wait for completion of a process given by process handle pid, and
return a tuple containing pid, and its exit status shifted left by 8 bits
(shifting makes cross-platform use of the function easier). A pid less than or
equal to 0 has no special meaning on Windows, and raises an exception. The
value of integer options has no effect. pid can refer to any process whose
id is known, not necessarily a child process. The spawn*
functions called with P_NOWAIT return suitable process handles.

Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an
exception, the function now retries the system call instead of raising an
InterruptedError exception (see PEP 475 for the rationale).




os.wait3(options)¶
Similar to waitpid(), except no process id argument is given and a
3-element tuple containing the child’s process id, exit status indication,
and resource usage information is returned.  Refer to
resource.getrusage() for details on resource usage
information.  The option argument is the same as that provided to
waitpid() and wait4().
Availability: Unix.



os.wait4(pid, options)¶
Similar to waitpid(), except a 3-element tuple, containing the child’s
process id, exit status indication, and resource usage information is returned.
Refer to resource.getrusage() for details on
resource usage information.  The arguments to wait4() are the same
as those provided to waitpid().
Availability: Unix.



os.WNOHANG¶
The option for waitpid() to return immediately if no child process status
is available immediately. The function returns (0, 0) in this case.
Availability: Unix.



os.WCONTINUED¶
This option causes child processes to be reported if they have been continued
from a job control stop since their status was last reported.
Availability: some Unix systems.



os.WUNTRACED¶
This option causes child processes to be reported if they have been stopped but
their current state has not been reported since they were stopped.
Availability: Unix.

The following functions take a process status code as returned by
system(), wait(), or waitpid() as a parameter.  They may be
used to determine the disposition of a process.


os.WCOREDUMP(status)¶
Return True if a core dump was generated for the process, otherwise
return False.
Availability: Unix.



os.WIFCONTINUED(status)¶
Return True if the process has been continued from a job control stop,
otherwise return False.
Availability: Unix.



os.WIFSTOPPED(status)¶
Return True if the process has been stopped, otherwise return
False.
Availability: Unix.



os.WIFSIGNALED(status)¶
Return True if the process exited due to a signal, otherwise return
False.
Availability: Unix.



os.WIFEXITED(status)¶
Return True if the process exited using the exit(2) system call,
otherwise return False.
Availability: Unix.



os.WEXITSTATUS(status)¶
If WIFEXITED(status) is true, return the integer parameter to the
exit(2) system call.  Otherwise, the return value is meaningless.
Availability: Unix.



os.WSTOPSIG(status)¶
Return the signal which caused the process to stop.
Availability: Unix.



os.WTERMSIG(status)¶
Return the signal which caused the process to exit.
Availability: Unix.

