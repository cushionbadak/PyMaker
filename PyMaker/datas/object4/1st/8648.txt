link:
library/unittest.mock-examples.html#mocking-a-generator-method

docs:

Mocking a Generator Method¶
A Python generator is a function or method that uses the yield statement
to return a series of values when iterated over [1].
A generator method / function is called to return the generator object. It is
the generator object that is then iterated over. The protocol method for
iteration is __iter__(), so we can
mock this using a MagicMock.
Here’s an example class with an “iter” method implemented as a generator:
>>> class Foo:
...     def iter(self):
...         for i in [1, 2, 3]:
...             yield i
...
>>> foo = Foo()
>>> list(foo.iter())
[1, 2, 3]


How would we mock this class, and in particular its “iter” method?
To configure the values returned from the iteration (implicit in the call to
list), we need to configure the object returned by the call to foo.iter().
>>> mock_foo = MagicMock()
>>> mock_foo.iter.return_value = iter([1, 2, 3])
>>> list(mock_foo.iter())
[1, 2, 3]





[1]There are also generator expressions and more advanced uses of generators, but we aren’t
concerned about them here. A very good introduction to generators and how
powerful they are is: Generator Tricks for Systems Programmers.


