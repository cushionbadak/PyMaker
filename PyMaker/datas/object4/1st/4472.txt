link:
library/subprocess.html#subprocess.Popen.communicate

docs:

<dt id="subprocess.Popen.communicate">
<code class="descclassname">Popen.</code><code class="descname">communicate</code><span class="sig-paren">(</span><em>input=None</em>, <em>timeout=None</em><span class="sig-paren">)</span><a class="headerlink" href="#subprocess.Popen.communicate" title="Permalink to this definition">¶</a></dt>
<dd><p>Interact with process: Send data to stdin.  Read data from stdout and stderr,
until end-of-file is reached.  Wait for process to terminate.  The optional
<em>input</em> argument should be data to be sent to the child process, or
<code class="docutils literal notranslate"><span class="pre">None</span></code>, if no data should be sent to the child.  If streams were opened in
text mode, <em>input</em> must be a string.  Otherwise, it must be bytes.</p>
<p><a class="reference internal" href="#subprocess.Popen.communicate" title="subprocess.Popen.communicate"><code class="xref py py-meth docutils literal notranslate"><span class="pre">communicate()</span></code></a> returns a tuple <code class="docutils literal notranslate"><span class="pre">(stdout_data,</span> <span class="pre">stderr_data)</span></code>.
The data will be strings if streams were opened in text mode; otherwise,
bytes.</p>
<p>Note that if you want to send data to the process’s stdin, you need to create
the Popen object with <code class="docutils literal notranslate"><span class="pre">stdin=PIPE</span></code>.  Similarly, to get anything other than
<code class="docutils literal notranslate"><span class="pre">None</span></code> in the result tuple, you need to give <code class="docutils literal notranslate"><span class="pre">stdout=PIPE</span></code> and/or
<code class="docutils literal notranslate"><span class="pre">stderr=PIPE</span></code> too.</p>
<p>If the process does not terminate after <em>timeout</em> seconds, a
<a class="reference internal" href="#subprocess.TimeoutExpired" title="subprocess.TimeoutExpired"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TimeoutExpired</span></code></a> exception will be raised.  Catching this exception and
retrying communication will not lose any output.</p>
<p>The child process is not killed if the timeout expires, so in order to
cleanup properly a well-behaved application should kill the child process and
finish communication:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">proc</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">outs</span><span class="p">,</span> <span class="n">errs</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="n">communicate</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="k">except</span> <span class="n">TimeoutExpired</span><span class="p">:</span>
    <span class="n">proc</span><span class="o">.</span><span class="n">kill</span><span class="p">()</span>
    <span class="n">outs</span><span class="p">,</span> <span class="n">errs</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The data read is buffered in memory, so do not use this method if the data
size is large or unlimited.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.3: </span><em>timeout</em> was added.</p>
</div>
</dd>