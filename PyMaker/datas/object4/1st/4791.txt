link:
library/asyncio-eventloop.html#creating-network-servers

docs:

Creating network servers¶


coroutine loop.create_server(protocol_factory, host=None, port=None, *, family=socket.AF_UNSPEC, flags=socket.AI_PASSIVE, sock=None, backlog=100, ssl=None, reuse_address=None, reuse_port=None, ssl_handshake_timeout=None, start_serving=True)¶
Create a TCP server (socket type SOCK_STREAM) listening
on port of the host address.
Returns a Server object.
Arguments:

protocol_factory must be a callable returning a
protocol implementation.
The host parameter can be set to several types which determine where
the server would be listening:
If host is a string, the TCP server is bound to a single network
interface specified by host.
If host is a sequence of strings, the TCP server is bound to all
network interfaces specified by the sequence.
If host is an empty string or None, all interfaces are
assumed and a list of multiple sockets will be returned (most likely
one for IPv4 and another one for IPv6).


family can be set to either socket.AF_INET or
AF_INET6 to force the socket to use IPv4 or IPv6.
If not set, the family will be determined from host name
(defaults to AF_UNSPEC).
flags is a bitmask for getaddrinfo().
sock can optionally be specified in order to use a preexisting
socket object. If specified, host and port must not be specified.
backlog is the maximum number of queued connections passed to
listen() (defaults to 100).
ssl can be set to an SSLContext instance to enable
TLS over the accepted connections.
reuse_address tells the kernel to reuse a local socket in
TIME_WAIT state, without waiting for its natural timeout to
expire. If not specified will automatically be set to True on
Unix.
reuse_port tells the kernel to allow this endpoint to be bound to the
same port as other existing endpoints are bound to, so long as they all
set this flag when being created. This option is not supported on
Windows.
ssl_handshake_timeout is (for a TLS server) the time in seconds to wait
for the TLS handshake to complete before aborting the connection.
60.0 seconds if None (default).
start_serving set to True (the default) causes the created server
to start accepting connections immediately.  When set to False,
the user should await on Server.start_serving() or
Server.serve_forever() to make the server to start accepting
connections.


New in version 3.7: Added ssl_handshake_timeout and start_serving parameters.


Changed in version 3.6: The socket option TCP_NODELAY is set by default
for all TCP connections.


Changed in version 3.5: Added support for SSL/TLS in ProactorEventLoop.


Changed in version 3.5.1: The host parameter can be a sequence of strings.


See also
The start_server() function is a higher-level alternative API
that returns a pair of StreamReader and StreamWriter
that can be used in an async/await code.




coroutine loop.create_unix_server(protocol_factory, path=None, *, sock=None, backlog=100, ssl=None, ssl_handshake_timeout=None, start_serving=True)¶
Similar to loop.create_server() but works with the
AF_UNIX socket family.
path is the name of a Unix domain socket, and is required,
unless a sock argument is provided.  Abstract Unix sockets,
str, bytes, and Path paths
are supported.
See the documentation of the loop.create_server() method
for information about arguments to this method.
Availability: Unix.

New in version 3.7: The ssl_handshake_timeout and start_serving parameters.


Changed in version 3.7: The path parameter can now be a Path object.




coroutine loop.connect_accepted_socket(protocol_factory, sock, *, ssl=None, ssl_handshake_timeout=None)¶
Wrap an already accepted connection into a transport/protocol pair.
This method can be used by servers that accept connections outside
of asyncio but that use asyncio to handle them.
Parameters:

protocol_factory must be a callable returning a
protocol implementation.
sock is a preexisting socket object returned from
socket.accept.
ssl can be set to an SSLContext to enable SSL over
the accepted connections.
ssl_handshake_timeout is (for an SSL connection) the time in seconds to
wait for the SSL handshake to complete before aborting the connection.
60.0 seconds if None (default).

Returns a (transport, protocol) pair.

New in version 3.7: The ssl_handshake_timeout parameter.


New in version 3.5.3.


