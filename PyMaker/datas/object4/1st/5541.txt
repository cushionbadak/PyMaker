link:
library/email.parser.html#parser-api

docs:

Parser API¶
The BytesParser class, imported from the email.parser module,
provides an API that can be used to parse a message when the complete contents
of the message are available in a bytes-like object or file.  The
email.parser module also provides Parser for parsing strings,
and header-only parsers, BytesHeaderParser and
HeaderParser, which can be used if you’re only interested in the
headers of the message.  BytesHeaderParser and HeaderParser
can be much faster in these situations, since they do not attempt to parse the
message body, instead setting the payload to the raw body.


class email.parser.BytesParser(_class=None, *, policy=policy.compat32)¶
Create a BytesParser instance.  The _class and policy
arguments have the same meaning and semantics as the _factory
and policy arguments of BytesFeedParser.
Note: The policy keyword should always be specified; The default will
change to email.policy.default in a future version of Python.

Changed in version 3.3: Removed the strict argument that was deprecated in 2.4.  Added the
policy keyword.


Changed in version 3.6: _class defaults to the policy message_factory.



parse(fp, headersonly=False)¶
Read all the data from the binary file-like object fp, parse the
resulting bytes, and return the message object.  fp must support
both the readline() and the read()
methods.
The bytes contained in fp must be formatted as a block of RFC 5322
(or, if utf8 is True, RFC 6532)
style headers and header continuation lines, optionally preceded by an
envelope header.  The header block is terminated either by the end of the
data or by a blank line.  Following the header block is the body of the
message (which may contain MIME-encoded subparts, including subparts
with a Content-Transfer-Encoding of 8bit).
Optional headersonly is a flag specifying whether to stop parsing after
reading the headers or not.  The default is False, meaning it parses
the entire contents of the file.



parsebytes(bytes, headersonly=False)¶
Similar to the parse() method, except it takes a bytes-like
object instead of a file-like object.  Calling this method on a
bytes-like object is equivalent to wrapping bytes in a
BytesIO instance first and calling parse().
Optional headersonly is as with the parse() method.


New in version 3.2.




class email.parser.BytesHeaderParser(_class=None, *, policy=policy.compat32)¶
Exactly like BytesParser, except that headersonly
defaults to True.

New in version 3.3.




class email.parser.Parser(_class=None, *, policy=policy.compat32)¶
This class is parallel to BytesParser, but handles string input.

Changed in version 3.3: Removed the strict argument.  Added the policy keyword.


Changed in version 3.6: _class defaults to the policy message_factory.



parse(fp, headersonly=False)¶
Read all the data from the text-mode file-like object fp, parse the
resulting text, and return the root message object.  fp must support
both the readline() and the
read() methods on file-like objects.
Other than the text mode requirement, this method operates like
BytesParser.parse().



parsestr(text, headersonly=False)¶
Similar to the parse() method, except it takes a string object
instead of a file-like object.  Calling this method on a string is
equivalent to wrapping text in a StringIO instance first
and calling parse().
Optional headersonly is as with the parse() method.




class email.parser.HeaderParser(_class=None, *, policy=policy.compat32)¶
Exactly like Parser, except that headersonly
defaults to True.

Since creating a message object structure from a string or a file object is such
a common task, four functions are provided as a convenience.  They are available
in the top-level email package namespace.


email.message_from_bytes(s, _class=None, *, policy=policy.compat32)¶
Return a message object structure from a bytes-like object.  This is
equivalent to BytesParser().parsebytes(s).  Optional _class and
policy are interpreted as with the BytesParser class
constructor.

New in version 3.2.


Changed in version 3.3: Removed the strict argument.  Added the policy keyword.




email.message_from_binary_file(fp, _class=None, *, policy=policy.compat32)¶
Return a message object structure tree from an open binary file
object.  This is equivalent to BytesParser().parse(fp).  _class and
policy are interpreted as with the BytesParser class
constructor.

New in version 3.2.


Changed in version 3.3: Removed the strict argument.  Added the policy keyword.




email.message_from_string(s, _class=None, *, policy=policy.compat32)¶
Return a message object structure from a string.  This is equivalent to
Parser().parsestr(s).  _class and policy are interpreted as
with the Parser class constructor.

Changed in version 3.3: Removed the strict argument.  Added the policy keyword.




email.message_from_file(fp, _class=None, *, policy=policy.compat32)¶
Return a message object structure tree from an open file object.
This is equivalent to Parser().parse(fp).  _class and policy are
interpreted as with the Parser class constructor.

Changed in version 3.3: Removed the strict argument.  Added the policy keyword.


Changed in version 3.6: _class defaults to the policy message_factory.


Here’s an example of how you might use message_from_bytes() at an
interactive Python prompt:
>>> import email
>>> msg = email.message_from_bytes(myBytes)  


