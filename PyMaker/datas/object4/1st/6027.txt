link:
library/binascii.html#binascii.a2b_hex

docs:

<dt id="binascii.a2b_hex">
<code class="descclassname">binascii.</code><code class="descname">a2b_hex</code><span class="sig-paren">(</span><em>hexstr</em><span class="sig-paren">)</span><a class="headerlink" href="#binascii.a2b_hex" title="Permalink to this definition">¶</a></dt>
<dt id="binascii.unhexlify">
<code class="descclassname">binascii.</code><code class="descname">unhexlify</code><span class="sig-paren">(</span><em>hexstr</em><span class="sig-paren">)</span><a class="headerlink" href="#binascii.unhexlify" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the binary data represented by the hexadecimal string <em>hexstr</em>.  This
function is the inverse of <a class="reference internal" href="#binascii.b2a_hex" title="binascii.b2a_hex"><code class="xref py py-func docutils literal notranslate"><span class="pre">b2a_hex()</span></code></a>. <em>hexstr</em> must contain an even number
of hexadecimal digits (which can be upper or lower case), otherwise an
<a class="reference internal" href="#binascii.Error" title="binascii.Error"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Error</span></code></a> exception is raised.</p>
<p>Similar functionality (accepting only text string arguments, but more
liberal towards whitespace) is also accessible using the
<a class="reference internal" href="stdtypes.html#bytes.fromhex" title="bytes.fromhex"><code class="xref py py-meth docutils literal notranslate"><span class="pre">bytes.fromhex()</span></code></a> class method.</p>
</dd>