link:
library/contextlib.html#catching-exceptions-from-enter-methods

docs:

Catching exceptions from __enter__ methods¶
It is occasionally desirable to catch exceptions from an __enter__
method implementation, without inadvertently catching exceptions from
the with statement body or the context manager’s __exit__
method. By using ExitStack the steps in the context management
protocol can be separated slightly in order to allow this:
stack = ExitStack()
try:
    x = stack.enter_context(cm)
except Exception:
    # handle __enter__ exception
else:
    with stack:
        # Handle normal case


Actually needing to do this is likely to indicate that the underlying API
should be providing a direct resource management interface for use with
try/except/finally statements, but not
all APIs are well designed in that regard. When a context manager is the
only resource management API provided, then ExitStack can make it
easier to handle various situations that can’t be handled directly in a
with statement.
