link:
library/codecs.html#incrementalencoder-objects

docs:

IncrementalEncoder Objects¶
The IncrementalEncoder class is used for encoding an input in multiple
steps. It defines the following methods which every incremental encoder must
define in order to be compatible with the Python codec registry.


class codecs.IncrementalEncoder(errors='strict')¶
Constructor for an IncrementalEncoder instance.
All incremental encoders must provide this constructor interface. They are free
to add additional keyword arguments, but only the ones defined here are used by
the Python codec registry.
The IncrementalEncoder may implement different error handling schemes
by providing the errors keyword argument. See Error Handlers for
possible values.
The errors argument will be assigned to an attribute of the same name.
Assigning to this attribute makes it possible to switch between different error
handling strategies during the lifetime of the IncrementalEncoder
object.


encode(object[, final])¶
Encodes object (taking the current state of the encoder into account)
and returns the resulting encoded object. If this is the last call to
encode() final must be true (the default is false).



reset()¶
Reset the encoder to the initial state. The output is discarded: call
.encode(object, final=True), passing an empty byte or text string
if necessary, to reset the encoder and to get the output.



getstate()¶
Return the current state of the encoder which must be an integer. The
implementation should make sure that 0 is the most common
state. (States that are more complicated than integers can be converted
into an integer by marshaling/pickling the state and encoding the bytes
of the resulting string into an integer).



setstate(state)¶
Set the state of the encoder to state. state must be an encoder state
returned by getstate().


