link:
library/xmlrpc.client.html#datetime-objects

docs:

DateTime Objects¶


class xmlrpc.client.DateTime¶
This class may be initialized with seconds since the epoch, a time
tuple, an ISO 8601 time/date string, or a datetime.datetime
instance.  It has the following methods, supported mainly for internal
use by the marshalling/unmarshalling code:


decode(string)¶
Accept a string as the instance’s new time value.



encode(out)¶
Write the XML-RPC encoding of this DateTime item to the out stream
object.

It also supports certain of Python’s built-in operators through rich comparison
and __repr__() methods.

A working example follows. The server code:
import datetime
from xmlrpc.server import SimpleXMLRPCServer
import xmlrpc.client

def today():
    today = datetime.datetime.today()
    return xmlrpc.client.DateTime(today)

server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_function(today, "today")
server.serve_forever()


The client code for the preceding server:
import xmlrpc.client
import datetime

proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")

today = proxy.today()
# convert the ISO8601 string to a datetime object
converted = datetime.datetime.strptime(today.value, "%Y%m%dT%H:%M:%S")
print("Today: %s" % converted.strftime("%d.%m.%Y, %H:%M"))


