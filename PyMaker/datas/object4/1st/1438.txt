link:
library/pprint.html#pprint.PrettyPrinter

docs:


class pprint.PrettyPrinter(indent=1, width=80, depth=None, stream=None, *, compact=False)¶
Construct a PrettyPrinter instance.  This constructor understands
several keyword parameters.  An output stream may be set using the stream
keyword; the only method used on the stream object is the file protocol’s
write() method.  If not specified, the PrettyPrinter adopts
sys.stdout.  The
amount of indentation added for each recursive level is specified by indent;
the default is one.  Other values can cause output to look a little odd, but can
make nesting easier to spot.  The number of levels which may be printed is
controlled by depth; if the data structure being printed is too deep, the next
contained level is replaced by ....  By default, there is no constraint on
the depth of the objects being formatted.  The desired output width is
constrained using the width parameter; the default is 80 characters.  If a
structure cannot be formatted within the constrained width, a best effort will
be made.  If compact is false (the default) each item of a long sequence
will be formatted on a separate line.  If compact is true, as many items
as will fit within the width will be formatted on each output line.

Changed in version 3.4: Added the compact parameter.
>>> import pprint
>>> stuff = ['spam', 'eggs', 'lumberjack', 'knights', 'ni']
>>> stuff.insert(0, stuff[:])
>>> pp = pprint.PrettyPrinter(indent=4)
>>> pp.pprint(stuff)
[   ['spam', 'eggs', 'lumberjack', 'knights', 'ni'],
    'spam',
    'eggs',
    'lumberjack',
    'knights',
    'ni']
>>> pp = pprint.PrettyPrinter(width=41, compact=True)
>>> pp.pprint(stuff)
[['spam', 'eggs', 'lumberjack',
  'knights', 'ni'],
 'spam', 'eggs', 'lumberjack', 'knights',
 'ni']
>>> tup = ('spam', ('eggs', ('lumberjack', ('knights', ('ni', ('dead',
... ('parrot', ('fresh fruit',))))))))
>>> pp = pprint.PrettyPrinter(depth=6)
>>> pp.pprint(tup)
('spam', ('eggs', ('lumberjack', ('knights', ('ni', ('dead', (...)))))))



