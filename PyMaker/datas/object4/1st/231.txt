link:
reference/expressions.html#asynchronous-generator-iterator-methods

docs:

6.2.9.4. Asynchronous generator-iterator methods¶
This subsection describes the methods of an asynchronous generator iterator,
which are used to control the execution of a generator function.


coroutine agen.__anext__()¶
Returns an awaitable which when run starts to execute the asynchronous
generator or resumes it at the last executed yield expression.  When an
asynchronous generator function is resumed with an __anext__()
method, the current yield expression always evaluates to None in
the returned awaitable, which when run will continue to the next yield
expression. The value of the expression_list of the yield
expression is the value of the StopIteration exception raised by
the completing coroutine.  If the asynchronous generator exits without
yielding another value, the awaitable instead raises a
StopAsyncIteration exception, signalling that the asynchronous
iteration has completed.
This method is normally called implicitly by a async for loop.



coroutine agen.asend(value)¶
Returns an awaitable which when run resumes the execution of the
asynchronous generator. As with the send() method for a
generator, this “sends” a value into the asynchronous generator function,
and the value argument becomes the result of the current yield expression.
The awaitable returned by the asend() method will return the next
value yielded by the generator as the value of the raised
StopIteration, or raises StopAsyncIteration if the
asynchronous generator exits without yielding another value.  When
asend() is called to start the asynchronous
generator, it must be called with None as the argument,
because there is no yield expression that could receive the value.



coroutine agen.athrow(type[, value[, traceback]])¶
Returns an awaitable that raises an exception of type type at the point
where the asynchronous generator was paused, and returns the next value
yielded by the generator function as the value of the raised
StopIteration exception.  If the asynchronous generator exits
without yielding another value, a StopAsyncIteration exception is
raised by the awaitable.
If the generator function does not catch the passed-in exception, or
raises a different exception, then when the awaitable is run that exception
propagates to the caller of the awaitable.



coroutine agen.aclose()¶
Returns an awaitable that when run will throw a GeneratorExit into
the asynchronous generator function at the point where it was paused.
If the asynchronous generator function then exits gracefully, is already
closed, or raises GeneratorExit (by not catching the exception),
then the returned awaitable will raise a StopIteration exception.
Any further awaitables returned by subsequent calls to the asynchronous
generator will raise a StopAsyncIteration exception.  If the
asynchronous generator yields a value, a RuntimeError is raised
by the awaitable.  If the asynchronous generator raises any other exception,
it is propagated to the caller of the awaitable.  If the asynchronous
generator has already exited due to an exception or normal exit, then
further calls to aclose() will return an awaitable that does nothing.

