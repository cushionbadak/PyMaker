link:
library/enum.html#derived-enumerations

docs:

Derived Enumerations¶

IntEnum¶
The first variation of Enum that is provided is also a subclass of
int.  Members of an IntEnum can be compared to integers;
by extension, integer enumerations of different types can also be compared
to each other:
>>> from enum import IntEnum
>>> class Shape(IntEnum):
...     CIRCLE = 1
...     SQUARE = 2
...
>>> class Request(IntEnum):
...     POST = 1
...     GET = 2
...
>>> Shape == 1
False
>>> Shape.CIRCLE == 1
True
>>> Shape.CIRCLE == Request.POST
True


However, they still can’t be compared to standard Enum enumerations:
>>> class Shape(IntEnum):
...     CIRCLE = 1
...     SQUARE = 2
...
>>> class Color(Enum):
...     RED = 1
...     GREEN = 2
...
>>> Shape.CIRCLE == Color.RED
False


IntEnum values behave like integers in other ways you’d expect:
>>> int(Shape.CIRCLE)
1
>>> ['a', 'b', 'c'][Shape.CIRCLE]
'b'
>>> [i for i in range(Shape.SQUARE)]
[0, 1]




IntFlag¶
The next variation of Enum provided, IntFlag, is also based
on int.  The difference being IntFlag members can be combined
using the bitwise operators (&, |, ^, ~) and the result is still an
IntFlag member.  However, as the name implies, IntFlag
members also subclass int and can be used wherever an int is
used.  Any operation on an IntFlag member besides the bit-wise
operations will lose the IntFlag membership.

New in version 3.6.

Sample IntFlag class:
>>> from enum import IntFlag
>>> class Perm(IntFlag):
...     R = 4
...     W = 2
...     X = 1
...
>>> Perm.R | Perm.W
<Perm.R|W: 6>
>>> Perm.R + Perm.W
6
>>> RW = Perm.R | Perm.W
>>> Perm.R in RW
True


It is also possible to name the combinations:
>>> class Perm(IntFlag):
...     R = 4
...     W = 2
...     X = 1
...     RWX = 7
>>> Perm.RWX
<Perm.RWX: 7>
>>> ~Perm.RWX
<Perm.-8: -8>


Another important difference between IntFlag and Enum is that
if no flags are set (the value is 0), its boolean evaluation is False:
>>> Perm.R & Perm.X
<Perm.0: 0>
>>> bool(Perm.R & Perm.X)
False


Because IntFlag members are also subclasses of int they can
be combined with them:
>>> Perm.X | 8
<Perm.8|X: 9>




Flag¶
The last variation is Flag.  Like IntFlag, Flag
members can be combined using the bitwise operators (&, |, ^, ~).  Unlike
IntFlag, they cannot be combined with, nor compared against, any
other Flag enumeration, nor int.  While it is possible to
specify the values directly it is recommended to use auto as the
value and let Flag select an appropriate value.

New in version 3.6.

Like IntFlag, if a combination of Flag members results in no
flags being set, the boolean evaluation is False:
>>> from enum import Flag, auto
>>> class Color(Flag):
...     RED = auto()
...     BLUE = auto()
...     GREEN = auto()
...
>>> Color.RED & Color.GREEN
<Color.0: 0>
>>> bool(Color.RED & Color.GREEN)
False


Individual flags should have values that are powers of two (1, 2, 4, 8, …),
while combinations of flags won’t:
>>> class Color(Flag):
...     RED = auto()
...     BLUE = auto()
...     GREEN = auto()
...     WHITE = RED | BLUE | GREEN
...
>>> Color.WHITE
<Color.WHITE: 7>


Giving a name to the “no flags set” condition does not change its boolean
value:
>>> class Color(Flag):
...     BLACK = 0
...     RED = auto()
...     BLUE = auto()
...     GREEN = auto()
...
>>> Color.BLACK
<Color.BLACK: 0>
>>> bool(Color.BLACK)
False



Note
For the majority of new code, Enum and Flag are strongly
recommended, since IntEnum and IntFlag break some
semantic promises of an enumeration (by being comparable to integers, and
thus by transitivity to other unrelated enumerations).  IntEnum
and IntFlag should be used only in cases where Enum and
Flag will not do; for example, when integer constants are replaced
with enumerations, or for interoperability with other systems.



Others¶
While IntEnum is part of the enum module, it would be very
simple to implement independently:
class IntEnum(int, Enum):
    pass


This demonstrates how similar derived enumerations can be defined; for example
a StrEnum that mixes in str instead of int.
Some rules:

When subclassing Enum, mix-in types must appear before
Enum itself in the sequence of bases, as in the IntEnum
example above.
While Enum can have members of any type, once you mix in an
additional type, all the members must have values of that type, e.g.
int above.  This restriction does not apply to mix-ins which only
add methods and don’t specify another data type such as int or
str.
When another data type is mixed in, the value attribute is not the
same as the enum member itself, although it is equivalent and will compare
equal.
%-style formatting:  %s and %r call the Enum class’s
__str__() and __repr__() respectively; other codes (such as
%i or %h for IntEnum) treat the enum member as its mixed-in type.
Formatted string literals, str.format(),
and format() will use the mixed-in
type’s __format__().  If the Enum class’s str() or
repr() is desired, use the !s or !r format codes.


