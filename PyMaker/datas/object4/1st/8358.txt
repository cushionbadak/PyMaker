link:
library/doctest.html#doctest.testfile

docs:

<dt id="doctest.testfile">
<code class="descclassname">doctest.</code><code class="descname">testfile</code><span class="sig-paren">(</span><em>filename</em>, <em>module_relative=True</em>, <em>name=None</em>, <em>package=None</em>, <em>globs=None</em>, <em>verbose=None</em>, <em>report=True</em>, <em>optionflags=0</em>, <em>extraglobs=None</em>, <em>raise_on_error=False</em>, <em>parser=DocTestParser()</em>, <em>encoding=None</em><span class="sig-paren">)</span><a class="headerlink" href="#doctest.testfile" title="Permalink to this definition">¶</a></dt>
<dd><p>All arguments except <em>filename</em> are optional, and should be specified in keyword
form.</p>
<p>Test examples in the file named <em>filename</em>.  Return <code class="docutils literal notranslate"><span class="pre">(failure_count,</span>
<span class="pre">test_count)</span></code>.</p>
<p>Optional argument <em>module_relative</em> specifies how the filename should be
interpreted:</p>
<ul class="simple">
<li>If <em>module_relative</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code> (the default), then <em>filename</em> specifies an
OS-independent module-relative path.  By default, this path is relative to the
calling module’s directory; but if the <em>package</em> argument is specified, then it
is relative to that package.  To ensure OS-independence, <em>filename</em> should use
<code class="docutils literal notranslate"><span class="pre">/</span></code> characters to separate path segments, and may not be an absolute path
(i.e., it may not begin with <code class="docutils literal notranslate"><span class="pre">/</span></code>).</li>
<li>If <em>module_relative</em> is <code class="docutils literal notranslate"><span class="pre">False</span></code>, then <em>filename</em> specifies an OS-specific
path.  The path may be absolute or relative; relative paths are resolved with
respect to the current working directory.</li>
</ul>
<p>Optional argument <em>name</em> gives the name of the test; by default, or if <code class="docutils literal notranslate"><span class="pre">None</span></code>,
<code class="docutils literal notranslate"><span class="pre">os.path.basename(filename)</span></code> is used.</p>
<p>Optional argument <em>package</em> is a Python package or the name of a Python package
whose directory should be used as the base directory for a module-relative
filename.  If no package is specified, then the calling module’s directory is
used as the base directory for module-relative filenames.  It is an error to
specify <em>package</em> if <em>module_relative</em> is <code class="docutils literal notranslate"><span class="pre">False</span></code>.</p>
<p>Optional argument <em>globs</em> gives a dict to be used as the globals when executing
examples.  A new shallow copy of this dict is created for the doctest, so its
examples start with a clean slate. By default, or if <code class="docutils literal notranslate"><span class="pre">None</span></code>, a new empty dict
is used.</p>
<p>Optional argument <em>extraglobs</em> gives a dict merged into the globals used to
execute examples.  This works like <a class="reference internal" href="stdtypes.html#dict.update" title="dict.update"><code class="xref py py-meth docutils literal notranslate"><span class="pre">dict.update()</span></code></a>:  if <em>globs</em> and
<em>extraglobs</em> have a common key, the associated value in <em>extraglobs</em> appears in
the combined dict.  By default, or if <code class="docutils literal notranslate"><span class="pre">None</span></code>, no extra globals are used.  This
is an advanced feature that allows parameterization of doctests.  For example, a
doctest can be written for a base class, using a generic name for the class,
then reused to test any number of subclasses by passing an <em>extraglobs</em> dict
mapping the generic name to the subclass to be tested.</p>
<p>Optional argument <em>verbose</em> prints lots of stuff if true, and prints only
failures if false; by default, or if <code class="docutils literal notranslate"><span class="pre">None</span></code>, it’s true if and only if <code class="docutils literal notranslate"><span class="pre">'-v'</span></code>
is in <code class="docutils literal notranslate"><span class="pre">sys.argv</span></code>.</p>
<p>Optional argument <em>report</em> prints a summary at the end when true, else prints
nothing at the end.  In verbose mode, the summary is detailed, else the summary
is very brief (in fact, empty if all tests passed).</p>
<p>Optional argument <em>optionflags</em> (default value 0) takes the
<a class="reference internal" href="../reference/expressions.html#bitwise"><span class="std std-ref">bitwise OR</span></a> of option flags.
See section <a class="reference internal" href="#doctest-options"><span class="std std-ref">Option Flags</span></a>.</p>
<p>Optional argument <em>raise_on_error</em> defaults to false.  If true, an exception is
raised upon the first failure or unexpected exception in an example.  This
allows failures to be post-mortem debugged. Default behavior is to continue
running examples.</p>
<p>Optional argument <em>parser</em> specifies a <a class="reference internal" href="#doctest.DocTestParser" title="doctest.DocTestParser"><code class="xref py py-class docutils literal notranslate"><span class="pre">DocTestParser</span></code></a> (or subclass) that
should be used to extract tests from the files.  It defaults to a normal parser
(i.e., <code class="docutils literal notranslate"><span class="pre">DocTestParser()</span></code>).</p>
<p>Optional argument <em>encoding</em> specifies an encoding that should be used to
convert the file to unicode.</p>
</dd>