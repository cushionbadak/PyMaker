link:
library/logging.handlers.html#logging.handlers.MemoryHandler

docs:

<dt id="logging.handlers.MemoryHandler">
<em class="property">class </em><code class="descclassname">logging.handlers.</code><code class="descname">MemoryHandler</code><span class="sig-paren">(</span><em>capacity</em>, <em>flushLevel=ERROR</em>, <em>target=None</em>, <em>flushOnClose=True</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.MemoryHandler" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns a new instance of the <a class="reference internal" href="#logging.handlers.MemoryHandler" title="logging.handlers.MemoryHandler"><code class="xref py py-class docutils literal notranslate"><span class="pre">MemoryHandler</span></code></a> class. The instance is
initialized with a buffer size of <em>capacity</em>. If <em>flushLevel</em> is not specified,
<code class="xref py py-const docutils literal notranslate"><span class="pre">ERROR</span></code> is used. If no <em>target</em> is specified, the target will need to be
set using <a class="reference internal" href="#logging.handlers.MemoryHandler.setTarget" title="logging.handlers.MemoryHandler.setTarget"><code class="xref py py-meth docutils literal notranslate"><span class="pre">setTarget()</span></code></a> before this handler does anything useful. If
<em>flushOnClose</em> is specified as <code class="docutils literal notranslate"><span class="pre">False</span></code>, then the buffer is <em>not</em> flushed when
the handler is closed. If not specified or specified as <code class="docutils literal notranslate"><span class="pre">True</span></code>, the previous
behaviour of flushing the buffer will occur when the handler is closed.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6: </span>The <em>flushOnClose</em> parameter was added.</p>
</div>
<dl class="method">
<dt id="logging.handlers.MemoryHandler.close">
<code class="descname">close</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.MemoryHandler.close" title="Permalink to this definition">¶</a></dt>
<dd><p>Calls <a class="reference internal" href="#logging.handlers.MemoryHandler.flush" title="logging.handlers.MemoryHandler.flush"><code class="xref py py-meth docutils literal notranslate"><span class="pre">flush()</span></code></a>, sets the target to <code class="docutils literal notranslate"><span class="pre">None</span></code> and clears the
buffer.</p>
</dd></dl>
<dl class="method">
<dt id="logging.handlers.MemoryHandler.flush">
<code class="descname">flush</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.MemoryHandler.flush" title="Permalink to this definition">¶</a></dt>
<dd><p>For a <a class="reference internal" href="#logging.handlers.MemoryHandler" title="logging.handlers.MemoryHandler"><code class="xref py py-class docutils literal notranslate"><span class="pre">MemoryHandler</span></code></a>, flushing means just sending the buffered
records to the target, if there is one. The buffer is also cleared when
this happens. Override if you want different behavior.</p>
</dd></dl>
<dl class="method">
<dt id="logging.handlers.MemoryHandler.setTarget">
<code class="descname">setTarget</code><span class="sig-paren">(</span><em>target</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.MemoryHandler.setTarget" title="Permalink to this definition">¶</a></dt>
<dd><p>Sets the target handler for this handler.</p>
</dd></dl>
<dl class="method">
<dt id="logging.handlers.MemoryHandler.shouldFlush">
<code class="descname">shouldFlush</code><span class="sig-paren">(</span><em>record</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.MemoryHandler.shouldFlush" title="Permalink to this definition">¶</a></dt>
<dd><p>Checks for buffer full or a record at the <em>flushLevel</em> or higher.</p>
</dd></dl>
</dd>