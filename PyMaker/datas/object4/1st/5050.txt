link:
library/socket.html#socket.socket

docs:


socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)Â¶
Create a new socket using the given address family, socket type and protocol
number.  The address family should be AF_INET (the default),
AF_INET6, AF_UNIX, AF_CAN, AF_PACKET,
or AF_RDS. The socket type should be SOCK_STREAM (the
default), SOCK_DGRAM, SOCK_RAW or perhaps one of the other
SOCK_ constants. The protocol number is usually zero and may be omitted
or in the case where the address family is AF_CAN the protocol
should be one of CAN_RAW, CAN_BCM or CAN_ISOTP.
If fileno is specified, the values for family, type, and proto are
auto-detected from the specified file descriptor.  Auto-detection can be
overruled by calling the function with explicit family, type, or proto
arguments.  This only affects how Python represents e.g. the return value
of socket.getpeername() but not the actual OS resource.  Unlike
socket.fromfd(), fileno will return the same socket and not a
duplicate. This may help close a detached socket using
socket.close().
The newly created socket is non-inheritable.

Changed in version 3.3: The AF_CAN family was added.
The AF_RDS family was added.


Changed in version 3.4: The CAN_BCM protocol was added.


Changed in version 3.4: The returned socket is now non-inheritable.


Changed in version 3.7: The CAN_ISOTP protocol was added.


Changed in version 3.7: When SOCK_NONBLOCK or SOCK_CLOEXEC
bit flags are applied to type they are cleared, and
socket.type will not reflect them.  They are still passed
to the underlying system socket() call.  Therefore::


sock = socket.socket(
socket.AF_INET,
socket.SOCK_STREAM | socket.SOCK_NONBLOCK)


will still create a non-blocking socket on OSes that support
SOCK_NONBLOCK, but sock.type will be set to
socket.SOCK_STREAM.

