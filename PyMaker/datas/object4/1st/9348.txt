link:
library/contextlib.html#contextlib.AsyncExitStack

docs:

<dt id="contextlib.AsyncExitStack">
<em class="property">class </em><code class="descclassname">contextlib.</code><code class="descname">AsyncExitStack</code><a class="headerlink" href="#contextlib.AsyncExitStack" title="Permalink to this definition">¶</a></dt>
<dd><p>An <a class="reference internal" href="../reference/datamodel.html#async-context-managers"><span class="std std-ref">asynchronous context manager</span></a>, similar
to <a class="reference internal" href="#contextlib.ExitStack" title="contextlib.ExitStack"><code class="xref py py-class docutils literal notranslate"><span class="pre">ExitStack</span></code></a>, that supports combining both synchronous and
asynchronous context managers, as well as having coroutines for
cleanup logic.</p>
<p>The <code class="xref py py-meth docutils literal notranslate"><span class="pre">close()</span></code> method is not implemented, <a class="reference internal" href="#contextlib.AsyncExitStack.aclose" title="contextlib.AsyncExitStack.aclose"><code class="xref py py-meth docutils literal notranslate"><span class="pre">aclose()</span></code></a> must be used
instead.</p>
<dl class="method">
<dt id="contextlib.AsyncExitStack.enter_async_context">
<code class="descname">enter_async_context</code><span class="sig-paren">(</span><em>cm</em><span class="sig-paren">)</span><a class="headerlink" href="#contextlib.AsyncExitStack.enter_async_context" title="Permalink to this definition">¶</a></dt>
<dd><p>Similar to <code class="xref py py-meth docutils literal notranslate"><span class="pre">enter_context()</span></code> but expects an asynchronous context
manager.</p>
</dd></dl>
<dl class="method">
<dt id="contextlib.AsyncExitStack.push_async_exit">
<code class="descname">push_async_exit</code><span class="sig-paren">(</span><em>exit</em><span class="sig-paren">)</span><a class="headerlink" href="#contextlib.AsyncExitStack.push_async_exit" title="Permalink to this definition">¶</a></dt>
<dd><p>Similar to <code class="xref py py-meth docutils literal notranslate"><span class="pre">push()</span></code> but expects either an asynchronous context manager
or a coroutine function.</p>
</dd></dl>
<dl class="method">
<dt id="contextlib.AsyncExitStack.push_async_callback">
<code class="descname">push_async_callback</code><span class="sig-paren">(</span><em>callback</em>, <em>*args</em>, <em>**kwds</em><span class="sig-paren">)</span><a class="headerlink" href="#contextlib.AsyncExitStack.push_async_callback" title="Permalink to this definition">¶</a></dt>
<dd><p>Similar to <code class="xref py py-meth docutils literal notranslate"><span class="pre">callback()</span></code> but expects a coroutine function.</p>
</dd></dl>
<dl class="method">
<dt id="contextlib.AsyncExitStack.aclose">
<code class="descname">aclose</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#contextlib.AsyncExitStack.aclose" title="Permalink to this definition">¶</a></dt>
<dd><p>Similar to <code class="xref py py-meth docutils literal notranslate"><span class="pre">close()</span></code> but properly handles awaitables.</p>
</dd></dl>
<p>Continuing the example for <a class="reference internal" href="#contextlib.asynccontextmanager" title="contextlib.asynccontextmanager"><code class="xref py py-func docutils literal notranslate"><span class="pre">asynccontextmanager()</span></code></a>:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">async</span> <span class="k">with</span> <span class="n">AsyncExitStack</span><span class="p">()</span> <span class="k">as</span> <span class="n">stack</span><span class="p">:</span>
    <span class="n">connections</span> <span class="o">=</span> <span class="p">[</span><span class="k">await</span> <span class="n">stack</span><span class="o">.</span><span class="n">enter_async_context</span><span class="p">(</span><span class="n">get_connection</span><span class="p">())</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
    <span class="c1"># All opened connections will automatically be released at the end of</span>
    <span class="c1"># the async with statement, even if attempts to open a connection</span>
    <span class="c1"># later in the list raise an exception.</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.7.</span></p>
</div>
</dd>