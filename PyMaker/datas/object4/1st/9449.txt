link:
library/inspect.html#types-and-members

docs:

Types and members¶
The getmembers() function retrieves the members of an object such as a
class or module. The functions whose names begin with “is” are mainly
provided as convenient choices for the second argument to getmembers().
They also help you determine when you can expect to find the following special
attributes:







Type
Attribute
Description



module
__doc__
documentation string

 
__file__
filename (missing for
built-in modules)

class
__doc__
documentation string

 
__name__
name with which this
class was defined

 
__qualname__
qualified name

 
__module__
name of module in which
this class was defined

method
__doc__
documentation string

 
__name__
name with which this
method was defined

 
__qualname__
qualified name

 
__func__
function object
containing implementation
of method

 
__self__
instance to which this
method is bound, or
None

function
__doc__
documentation string

 
__name__
name with which this
function was defined

 
__qualname__
qualified name

 
__code__
code object containing
compiled function
bytecode

 
__defaults__
tuple of any default
values for positional or
keyword parameters

 
__kwdefaults__
mapping of any default
values for keyword-only
parameters

 
__globals__
global namespace in which
this function was defined

 
__annotations__
mapping of parameters
names to annotations;
"return" key is
reserved for return
annotations.

traceback
tb_frame
frame object at this
level

 
tb_lasti
index of last attempted
instruction in bytecode

 
tb_lineno
current line number in
Python source code

 
tb_next
next inner traceback
object (called by this
level)

frame
f_back
next outer frame object
(this frame’s caller)

 
f_builtins
builtins namespace seen
by this frame

 
f_code
code object being
executed in this frame

 
f_globals
global namespace seen by
this frame

 
f_lasti
index of last attempted
instruction in bytecode

 
f_lineno
current line number in
Python source code

 
f_locals
local namespace seen by
this frame

 
f_trace
tracing function for this
frame, or None

code
co_argcount
number of arguments (not
including keyword only
arguments, * or **
args)

 
co_code
string of raw compiled
bytecode

 
co_cellvars
tuple of names of cell
variables (referenced by
containing scopes)

 
co_consts
tuple of constants used
in the bytecode

 
co_filename
name of file in which
this code object was
created

 
co_firstlineno
number of first line in
Python source code

 
co_flags
bitmap of CO_* flags,
read more here

 
co_lnotab
encoded mapping of line
numbers to bytecode
indices

 
co_freevars
tuple of names of free
variables (referenced via
a function’s closure)

 
co_kwonlyargcount
number of keyword only
arguments (not including
** arg)

 
co_name
name with which this code
object was defined

 
co_names
tuple of names of local
variables

 
co_nlocals
number of local variables

 
co_stacksize
virtual machine stack
space required

 
co_varnames
tuple of names of
arguments and local
variables

generator
__name__
name

 
__qualname__
qualified name

 
gi_frame
frame

 
gi_running
is the generator running?

 
gi_code
code

 
gi_yieldfrom
object being iterated by
yield from, or
None

coroutine
__name__
name

 
__qualname__
qualified name

 
cr_await
object being awaited on,
or None

 
cr_frame
frame

 
cr_running
is the coroutine running?

 
cr_code
code

 
cr_origin
where coroutine was
created, or None. See
sys.set_coroutine_origin_tracking_depth()

builtin
__doc__
documentation string

 
__name__
original name of this
function or method

 
__qualname__
qualified name

 
__self__
instance to which a
method is bound, or
None




Changed in version 3.5: Add __qualname__ and gi_yieldfrom attributes to generators.
The __name__ attribute of generators is now set from the function
name, instead of the code name, and it can now be modified.


Changed in version 3.7: Add cr_origin attribute to coroutines.



inspect.getmembers(object[, predicate])¶
Return all the members of an object in a list of (name, value) pairs sorted by
name.  If the optional predicate argument is supplied, only members for which
the predicate returns a true value are included.

Note
getmembers() will only return class attributes defined in the
metaclass when the argument is a class and those attributes have been
listed in the metaclass’ custom __dir__().




inspect.getmodulename(path)¶
Return the name of the module named by the file path, without including the
names of enclosing packages. The file extension is checked against all of
the entries in importlib.machinery.all_suffixes(). If it matches,
the final path component is returned with the extension removed.
Otherwise, None is returned.
Note that this function only returns a meaningful name for actual
Python modules - paths that potentially refer to Python packages will
still return None.

Changed in version 3.3: The function is based directly on importlib.




inspect.ismodule(object)¶
Return true if the object is a module.



inspect.isclass(object)¶
Return true if the object is a class, whether built-in or created in Python
code.



inspect.ismethod(object)¶
Return true if the object is a bound method written in Python.



inspect.isfunction(object)¶
Return true if the object is a Python function, which includes functions
created by a lambda expression.



inspect.isgeneratorfunction(object)¶
Return true if the object is a Python generator function.



inspect.isgenerator(object)¶
Return true if the object is a generator.



inspect.iscoroutinefunction(object)¶
Return true if the object is a coroutine function
(a function defined with an async def syntax).

New in version 3.5.




inspect.iscoroutine(object)¶
Return true if the object is a coroutine created by an
async def function.

New in version 3.5.




inspect.isawaitable(object)¶
Return true if the object can be used in await expression.
Can also be used to distinguish generator-based coroutines from regular
generators:
def gen():
    yield
@types.coroutine
def gen_coro():
    yield

assert not isawaitable(gen())
assert isawaitable(gen_coro())



New in version 3.5.




inspect.isasyncgenfunction(object)¶
Return true if the object is an asynchronous generator function,
for example:
>>> async def agen():
...     yield 1
...
>>> inspect.isasyncgenfunction(agen)
True



New in version 3.6.




inspect.isasyncgen(object)¶
Return true if the object is an asynchronous generator iterator
created by an asynchronous generator function.

New in version 3.6.




inspect.istraceback(object)¶
Return true if the object is a traceback.



inspect.isframe(object)¶
Return true if the object is a frame.



inspect.iscode(object)¶
Return true if the object is a code.



inspect.isbuiltin(object)¶
Return true if the object is a built-in function or a bound built-in method.



inspect.isroutine(object)¶
Return true if the object is a user-defined or built-in function or method.



inspect.isabstract(object)¶
Return true if the object is an abstract base class.



inspect.ismethoddescriptor(object)¶
Return true if the object is a method descriptor, but not if
ismethod(), isclass(), isfunction() or isbuiltin()
are true.
This, for example, is true of int.__add__.  An object passing this test
has a __get__() method but not a __set__()
method, but beyond that the set of attributes varies.  A
__name__ attribute is usually
sensible, and __doc__ often is.
Methods implemented via descriptors that also pass one of the other tests
return false from the ismethoddescriptor() test, simply because the
other tests promise more – you can, e.g., count on having the
__func__ attribute (etc) when an object passes ismethod().



inspect.isdatadescriptor(object)¶
Return true if the object is a data descriptor.
Data descriptors have both a __get__ and a __set__ method.
Examples are properties (defined in Python), getsets, and members.  The
latter two are defined in C and there are more specific tests available for
those types, which is robust across Python implementations.  Typically, data
descriptors will also have __name__ and __doc__ attributes
(properties, getsets, and members have both of these attributes), but this is
not guaranteed.



inspect.isgetsetdescriptor(object)¶
Return true if the object is a getset descriptor.

CPython implementation detail: getsets are attributes defined in extension modules via
PyGetSetDef structures.  For Python implementations without such
types, this method will always return False.




inspect.ismemberdescriptor(object)¶
Return true if the object is a member descriptor.

CPython implementation detail: Member descriptors are attributes defined in extension modules via
PyMemberDef structures.  For Python implementations without such
types, this method will always return False.


