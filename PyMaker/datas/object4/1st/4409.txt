link:
library/concurrent.futures.html#concurrent.futures.Executor.map

docs:


map(func, *iterables, timeout=None, chunksize=1)¶
Similar to map(func, *iterables) except:

the iterables are collected immediately rather than lazily;
func is executed asynchronously and several calls to
func may be made concurrently.

The returned iterator raises a concurrent.futures.TimeoutError
if __next__() is called and the result isn’t available
after timeout seconds from the original call to Executor.map().
timeout can be an int or a float.  If timeout is not specified or
None, there is no limit to the wait time.
If a func call raises an exception, then that exception will be
raised when its value is retrieved from the iterator.
When using ProcessPoolExecutor, this method chops iterables
into a number of chunks which it submits to the pool as separate
tasks.  The (approximate) size of these chunks can be specified by
setting chunksize to a positive integer.  For very long iterables,
using a large value for chunksize can significantly improve
performance compared to the default size of 1.  With
ThreadPoolExecutor, chunksize has no effect.

Changed in version 3.5: Added the chunksize argument.

