link:
library/queue.html#simplequeue-objects

docs:

SimpleQueue Objects¶
SimpleQueue objects provide the public methods described below.


SimpleQueue.qsize()¶
Return the approximate size of the queue.  Note, qsize() > 0 doesn’t
guarantee that a subsequent get() will not block.



SimpleQueue.empty()¶
Return True if the queue is empty, False otherwise. If empty()
returns False it doesn’t guarantee that a subsequent call to get()
will not block.



SimpleQueue.put(item, block=True, timeout=None)¶
Put item into the queue.  The method never blocks and always succeeds
(except for potential low-level errors such as failure to allocate memory).
The optional args block and timeout are ignored and only provided
for compatibility with Queue.put().

CPython implementation detail: This method has a C implementation which is reentrant.  That is, a
put() or get() call can be interrupted by another put()
call in the same thread without deadlocking or corrupting internal
state inside the queue.  This makes it appropriate for use in
destructors such as __del__ methods or weakref callbacks.




SimpleQueue.put_nowait(item)¶
Equivalent to put(item), provided for compatibility with
Queue.put_nowait().



SimpleQueue.get(block=True, timeout=None)¶
Remove and return an item from the queue.  If optional args block is true and
timeout is None (the default), block if necessary until an item is available.
If timeout is a positive number, it blocks at most timeout seconds and
raises the Empty exception if no item was available within that time.
Otherwise (block is false), return an item if one is immediately available,
else raise the Empty exception (timeout is ignored in that case).



SimpleQueue.get_nowait()¶
Equivalent to get(False).


See also

Class multiprocessing.Queue
A queue class for use in a multi-processing (rather than multi-threading)
context.

collections.deque is an alternative implementation of unbounded
queues with fast atomic append() and
popleft() operations that do not require locking.

