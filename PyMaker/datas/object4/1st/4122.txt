link:
library/ctypes.html#ctypes-fundamental-data-types-2

docs:

Fundamental data types¶


class ctypes._SimpleCData¶
This non-public class is the base class of all fundamental ctypes data
types. It is mentioned here because it contains the common attributes of the
fundamental ctypes data types.  _SimpleCData is a subclass of
_CData, so it inherits their methods and attributes. ctypes data
types that are not and do not contain pointers can now be pickled.
Instances have a single attribute:


value¶
This attribute contains the actual value of the instance. For integer and
pointer types, it is an integer, for character types, it is a single
character bytes object or string, for character pointer types it is a
Python bytes object or string.
When the value attribute is retrieved from a ctypes instance, usually
a new object is returned each time.  ctypes does not implement
original object return, always a new object is constructed.  The same is
true for all other ctypes object instances.


Fundamental data types, when returned as foreign function call results, or, for
example, by retrieving structure field members or array items, are transparently
converted to native Python types.  In other words, if a foreign function has a
restype of c_char_p, you will always receive a Python bytes
object, not a c_char_p instance.
Subclasses of fundamental data types do not inherit this behavior. So, if a
foreign functions restype is a subclass of c_void_p, you will
receive an instance of this subclass from the function call. Of course, you can
get the value of the pointer by accessing the value attribute.
These are the fundamental ctypes data types:


class ctypes.c_byte¶
Represents the C signed char datatype, and interprets the value as
small integer.  The constructor accepts an optional integer initializer; no
overflow checking is done.



class ctypes.c_char¶
Represents the C char datatype, and interprets the value as a single
character.  The constructor accepts an optional string initializer, the
length of the string must be exactly one character.



class ctypes.c_char_p¶
Represents the C char * datatype when it points to a zero-terminated
string.  For a general character pointer that may also point to binary data,
POINTER(c_char) must be used.  The constructor accepts an integer
address, or a bytes object.



class ctypes.c_double¶
Represents the C double datatype.  The constructor accepts an
optional float initializer.



class ctypes.c_longdouble¶
Represents the C long double datatype.  The constructor accepts an
optional float initializer.  On platforms where sizeof(long double) ==
sizeof(double) it is an alias to c_double.



class ctypes.c_float¶
Represents the C float datatype.  The constructor accepts an
optional float initializer.



class ctypes.c_int¶
Represents the C signed int datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.  On platforms
where sizeof(int) == sizeof(long) it is an alias to c_long.



class ctypes.c_int8¶
Represents the C 8-bit signed int datatype.  Usually an alias for
c_byte.



class ctypes.c_int16¶
Represents the C 16-bit signed int datatype.  Usually an alias for
c_short.



class ctypes.c_int32¶
Represents the C 32-bit signed int datatype.  Usually an alias for
c_int.



class ctypes.c_int64¶
Represents the C 64-bit signed int datatype.  Usually an alias for
c_longlong.



class ctypes.c_long¶
Represents the C signed long datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.



class ctypes.c_longlong¶
Represents the C signed long long datatype.  The constructor accepts
an optional integer initializer; no overflow checking is done.



class ctypes.c_short¶
Represents the C signed short datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.



class ctypes.c_size_t¶
Represents the C size_t datatype.



class ctypes.c_ssize_t¶
Represents the C ssize_t datatype.

New in version 3.2.




class ctypes.c_ubyte¶
Represents the C unsigned char datatype, it interprets the value as
small integer.  The constructor accepts an optional integer initializer; no
overflow checking is done.



class ctypes.c_uint¶
Represents the C unsigned int datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.  On platforms
where sizeof(int) == sizeof(long) it is an alias for c_ulong.



class ctypes.c_uint8¶
Represents the C 8-bit unsigned int datatype.  Usually an alias for
c_ubyte.



class ctypes.c_uint16¶
Represents the C 16-bit unsigned int datatype.  Usually an alias for
c_ushort.



class ctypes.c_uint32¶
Represents the C 32-bit unsigned int datatype.  Usually an alias for
c_uint.



class ctypes.c_uint64¶
Represents the C 64-bit unsigned int datatype.  Usually an alias for
c_ulonglong.



class ctypes.c_ulong¶
Represents the C unsigned long datatype.  The constructor accepts an
optional integer initializer; no overflow checking is done.



class ctypes.c_ulonglong¶
Represents the C unsigned long long datatype.  The constructor
accepts an optional integer initializer; no overflow checking is done.



class ctypes.c_ushort¶
Represents the C unsigned short datatype.  The constructor accepts
an optional integer initializer; no overflow checking is done.



class ctypes.c_void_p¶
Represents the C void * type.  The value is represented as integer.
The constructor accepts an optional integer initializer.



class ctypes.c_wchar¶
Represents the C wchar_t datatype, and interprets the value as a
single character unicode string.  The constructor accepts an optional string
initializer, the length of the string must be exactly one character.



class ctypes.c_wchar_p¶
Represents the C wchar_t * datatype, which must be a pointer to a
zero-terminated wide character string.  The constructor accepts an integer
address, or a string.



class ctypes.c_bool¶
Represent the C bool datatype (more accurately, _Bool from
C99).  Its value can be True or False, and the constructor accepts any object
that has a truth value.



class ctypes.HRESULT¶
Windows only: Represents a HRESULT value, which contains success or
error information for a function or method call.



class ctypes.py_object¶
Represents the C PyObject * datatype.  Calling this without an
argument creates a NULL PyObject * pointer.

The ctypes.wintypes module provides quite some other Windows specific
data types, for example HWND, WPARAM, or DWORD.  Some
useful structures like MSG or RECT are also defined.
