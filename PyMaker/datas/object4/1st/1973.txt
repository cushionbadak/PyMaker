link:
library/operator.html#in-place-operators

docs:

In-place Operators¶
Many operations have an “in-place” version.  Listed below are functions
providing a more primitive access to in-place operators than the usual syntax
does; for example, the statement x += y is equivalent to
x = operator.iadd(x, y).  Another way to put it is to say that
z = operator.iadd(x, y) is equivalent to the compound statement
z = x; z += y.
In those examples, note that when an in-place method is called, the computation
and assignment are performed in two separate steps.  The in-place functions
listed below only do the first step, calling the in-place method.  The second
step, assignment, is not handled.
For immutable targets such as strings, numbers, and tuples, the updated
value is computed, but not assigned back to the input variable:
>>> a = 'hello'
>>> iadd(a, ' world')
'hello world'
>>> a
'hello'


For mutable targets such as lists and dictionaries, the in-place method
will perform the update, so no subsequent assignment is necessary:
>>> s = ['h', 'e', 'l', 'l', 'o']
>>> iadd(s, [' ', 'w', 'o', 'r', 'l', 'd'])
['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']
>>> s
['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']




operator.iadd(a, b)¶

operator.__iadd__(a, b)¶
a = iadd(a, b) is equivalent to a += b.



operator.iand(a, b)¶

operator.__iand__(a, b)¶
a = iand(a, b) is equivalent to a &= b.



operator.iconcat(a, b)¶

operator.__iconcat__(a, b)¶
a = iconcat(a, b) is equivalent to a += b for a and b sequences.



operator.ifloordiv(a, b)¶

operator.__ifloordiv__(a, b)¶
a = ifloordiv(a, b) is equivalent to a //= b.



operator.ilshift(a, b)¶

operator.__ilshift__(a, b)¶
a = ilshift(a, b) is equivalent to a <<= b.



operator.imod(a, b)¶

operator.__imod__(a, b)¶
a = imod(a, b) is equivalent to a %= b.



operator.imul(a, b)¶

operator.__imul__(a, b)¶
a = imul(a, b) is equivalent to a *= b.



operator.imatmul(a, b)¶

operator.__imatmul__(a, b)¶
a = imatmul(a, b) is equivalent to a @= b.

New in version 3.5.




operator.ior(a, b)¶

operator.__ior__(a, b)¶
a = ior(a, b) is equivalent to a |= b.



operator.ipow(a, b)¶

operator.__ipow__(a, b)¶
a = ipow(a, b) is equivalent to a **= b.



operator.irshift(a, b)¶

operator.__irshift__(a, b)¶
a = irshift(a, b) is equivalent to a >>= b.



operator.isub(a, b)¶

operator.__isub__(a, b)¶
a = isub(a, b) is equivalent to a -= b.



operator.itruediv(a, b)¶

operator.__itruediv__(a, b)¶
a = itruediv(a, b) is equivalent to a /= b.



operator.ixor(a, b)¶

operator.__ixor__(a, b)¶
a = ixor(a, b) is equivalent to a ^= b.

