link:
library/contextvars.html#contextvars.Context

docs:

<dt id="contextvars.Context">
<em class="property">class </em><code class="descclassname">contextvars.</code><code class="descname">Context</code><a class="headerlink" href="#contextvars.Context" title="Permalink to this definition">¶</a></dt>
<dd><p>A mapping of <a class="reference internal" href="#contextvars.ContextVar" title="contextvars.ContextVar"><code class="xref py py-class docutils literal notranslate"><span class="pre">ContextVars</span></code></a> to their values.</p>
<p><code class="docutils literal notranslate"><span class="pre">Context()</span></code> creates an empty context with no values in it.
To get a copy of the current context use the
<a class="reference internal" href="#contextvars.copy_context" title="contextvars.copy_context"><code class="xref py py-func docutils literal notranslate"><span class="pre">copy_context()</span></code></a> function.</p>
<p>Context implements the <a class="reference internal" href="collections.abc.html#collections.abc.Mapping" title="collections.abc.Mapping"><code class="xref py py-class docutils literal notranslate"><span class="pre">collections.abc.Mapping</span></code></a> interface.</p>
<dl class="method">
<dt id="contextvars.Context.run">
<code class="descname">run</code><span class="sig-paren">(</span><em>callable</em>, <em>*args</em>, <em>**kwargs</em><span class="sig-paren">)</span><a class="headerlink" href="#contextvars.Context.run" title="Permalink to this definition">¶</a></dt>
<dd><p>Execute <code class="docutils literal notranslate"><span class="pre">callable(*args,</span> <span class="pre">**kwargs)</span></code> code in the context object
the <em>run</em> method is called on.  Return the result of the execution
or propagate an exception if one occurred.</p>
<p>Any changes to any context variables that <em>callable</em> makes will
be contained in the context object:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">var</span> <span class="o">=</span> <span class="n">ContextVar</span><span class="p">(</span><span class="s1">'var'</span><span class="p">)</span>
<span class="n">var</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">'spam'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># 'var' was set to 'spam' before</span>
    <span class="c1"># calling 'copy_context()' and 'ctx.run(main)', so:</span>
    <span class="c1"># var.get() == ctx[var] == 'spam'</span>

    <span class="n">var</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">'ham'</span><span class="p">)</span>

    <span class="c1"># Now, after setting 'var' to 'ham':</span>
    <span class="c1"># var.get() == ctx[var] == 'ham'</span>

<span class="n">ctx</span> <span class="o">=</span> <span class="n">copy_context</span><span class="p">()</span>

<span class="c1"># Any changes that the 'main' function makes to 'var'</span>
<span class="c1"># will be contained in 'ctx'.</span>
<span class="n">ctx</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">)</span>

<span class="c1"># The 'main()' function was run in the 'ctx' context,</span>
<span class="c1"># so changes to 'var' are contained in it:</span>
<span class="c1"># ctx[var] == 'ham'</span>

<span class="c1"># However, outside of 'ctx', 'var' is still set to 'spam':</span>
<span class="c1"># var.get() == 'spam'</span>
</pre></div>
</div>
<p>The method raises a <a class="reference internal" href="exceptions.html#RuntimeError" title="RuntimeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">RuntimeError</span></code></a> when called on the same
context object from more than one OS thread, or when called
recursively.</p>
</dd></dl>
<dl class="method">
<dt id="contextvars.Context.copy">
<code class="descname">copy</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#contextvars.Context.copy" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a shallow copy of the context object.</p>
</dd></dl>
<dl class="describe">
<dt>
<code class="descname">var in context</code></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if the <em>context</em> has a value for <em>var</em> set;
return <code class="docutils literal notranslate"><span class="pre">False</span></code> otherwise.</p>
</dd></dl>
<dl class="describe">
<dt>
<code class="descname">context[var]</code></dt>
<dd><p>Return the value of the <em>var</em> <a class="reference internal" href="#contextvars.ContextVar" title="contextvars.ContextVar"><code class="xref py py-class docutils literal notranslate"><span class="pre">ContextVar</span></code></a> variable.
If the variable is not set in the context object, a
<a class="reference internal" href="exceptions.html#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> is raised.</p>
</dd></dl>
<dl class="method">
<dt id="contextvars.Context.get">
<code class="descname">get</code><span class="sig-paren">(</span><em>var</em><span class="optional">[</span>, <em>default</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#contextvars.Context.get" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the value for <em>var</em> if <em>var</em> has the value in the context
object.  Return <em>default</em> otherwise.  If <em>default</em> is not given,
return <code class="docutils literal notranslate"><span class="pre">None</span></code>.</p>
</dd></dl>
<dl class="describe">
<dt>
<code class="descname">iter(context)</code></dt>
<dd><p>Return an iterator over the variables stored in the context
object.</p>
</dd></dl>
<dl class="describe">
<dt>
<code class="descname">len(proxy)</code></dt>
<dd><p>Return the number of variables set in the context object.</p>
</dd></dl>
<dl class="method">
<dt id="contextvars.Context.keys">
<code class="descname">keys</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#contextvars.Context.keys" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a list of all variables in the context object.</p>
</dd></dl>
<dl class="method">
<dt id="contextvars.Context.values">
<code class="descname">values</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#contextvars.Context.values" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a list of all variables’ values in the context object.</p>
</dd></dl>
<dl class="method">
<dt id="contextvars.Context.items">
<code class="descname">items</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#contextvars.Context.items" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a list of 2-tuples containing all variables and their
values in the context object.</p>
</dd></dl>
</dd>