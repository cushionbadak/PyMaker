link:
library/configparser.html#configparser.RawConfigParser.set

docs:

<dt id="configparser.RawConfigParser.set">
<code class="descname">set</code><span class="sig-paren">(</span><em>section</em>, <em>option</em>, <em>value</em><span class="sig-paren">)</span><a class="headerlink" href="#configparser.RawConfigParser.set" title="Permalink to this definition">Â¶</a></dt>
<dd><p>If the given section exists, set the given option to the specified value;
otherwise raise <a class="reference internal" href="#configparser.NoSectionError" title="configparser.NoSectionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">NoSectionError</span></code></a>.  While it is possible to use
<a class="reference internal" href="#configparser.RawConfigParser" title="configparser.RawConfigParser"><code class="xref py py-class docutils literal notranslate"><span class="pre">RawConfigParser</span></code></a> (or <a class="reference internal" href="#configparser.ConfigParser" title="configparser.ConfigParser"><code class="xref py py-class docutils literal notranslate"><span class="pre">ConfigParser</span></code></a> with <em>raw</em> parameters
set to true) for <em>internal</em> storage of non-string values, full
functionality (including interpolation and output to files) can only be
achieved using string values.</p>
<p>This method lets users assign non-string values to keys internally.  This
behaviour is unsupported and will cause errors when attempting to write
to a file or get it in non-raw mode.  <strong>Use the mapping protocol API</strong>
which does not allow such assignments to take place.</p>
</dd>