link:
library/asyncore.html#asyncore.dispatcher

docs:

<dt id="asyncore.dispatcher">
<em class="property">class </em><code class="descclassname">asyncore.</code><code class="descname">dispatcher</code><a class="headerlink" href="#asyncore.dispatcher" title="Permalink to this definition">¶</a></dt>
<dd><p>The <a class="reference internal" href="#asyncore.dispatcher" title="asyncore.dispatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">dispatcher</span></code></a> class is a thin wrapper around a low-level socket
object. To make it more useful, it has a few methods for event-handling
which are called from the asynchronous loop.   Otherwise, it can be treated
as a normal non-blocking socket object.</p>
<p>The firing of low-level events at certain times or in certain connection
states tells the asynchronous loop that certain higher-level events have
taken place.  For example, if we have asked for a socket to connect to
another host, we know that the connection has been made when the socket
becomes writable for the first time (at this point you know that you may
write to it with the expectation of success).  The implied higher-level
events are:</p>
<table border="1" class="docutils">
<colgroup>
<col width="35%"/>
<col width="65%"/>
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Event</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">handle_connect()</span></code></td>
<td>Implied by the first read or write
event</td>
</tr>
<tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">handle_close()</span></code></td>
<td>Implied by a read event with no data
available</td>
</tr>
<tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">handle_accepted()</span></code></td>
<td>Implied by a read event on a listening
socket</td>
</tr>
</tbody>
</table>
<p>During asynchronous processing, each mapped channel’s <a class="reference internal" href="#asyncore.dispatcher.readable" title="asyncore.dispatcher.readable"><code class="xref py py-meth docutils literal notranslate"><span class="pre">readable()</span></code></a> and
<a class="reference internal" href="#asyncore.dispatcher.writable" title="asyncore.dispatcher.writable"><code class="xref py py-meth docutils literal notranslate"><span class="pre">writable()</span></code></a> methods are used to determine whether the channel’s socket
should be added to the list of channels <code class="xref c c-func docutils literal notranslate"><span class="pre">select()</span></code>ed or
<code class="xref c c-func docutils literal notranslate"><span class="pre">poll()</span></code>ed for read and write events.</p>
<p>Thus, the set of channel events is larger than the basic socket events.  The
full set of methods that can be overridden in your subclass follows:</p>
<dl class="method">
<dt id="asyncore.dispatcher.handle_read">
<code class="descname">handle_read</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.handle_read" title="Permalink to this definition">¶</a></dt>
<dd><p>Called when the asynchronous loop detects that a <code class="xref py py-meth docutils literal notranslate"><span class="pre">read()</span></code> call on the
channel’s socket will succeed.</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.handle_write">
<code class="descname">handle_write</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.handle_write" title="Permalink to this definition">¶</a></dt>
<dd><p>Called when the asynchronous loop detects that a writable socket can be
written.  Often this method will implement the necessary buffering for
performance.  For example:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">handle_write</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">sent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">buffer</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">buffer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">buffer</span><span class="p">[</span><span class="n">sent</span><span class="p">:]</span>
</pre></div>
</div>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.handle_expt">
<code class="descname">handle_expt</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.handle_expt" title="Permalink to this definition">¶</a></dt>
<dd><p>Called when there is out of band (OOB) data for a socket connection.  This
will almost never happen, as OOB is tenuously supported and rarely used.</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.handle_connect">
<code class="descname">handle_connect</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.handle_connect" title="Permalink to this definition">¶</a></dt>
<dd><p>Called when the active opener’s socket actually makes a connection.  Might
send a “welcome” banner, or initiate a protocol negotiation with the
remote endpoint, for example.</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.handle_close">
<code class="descname">handle_close</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.handle_close" title="Permalink to this definition">¶</a></dt>
<dd><p>Called when the socket is closed.</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.handle_error">
<code class="descname">handle_error</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.handle_error" title="Permalink to this definition">¶</a></dt>
<dd><p>Called when an exception is raised and not otherwise handled.  The default
version prints a condensed traceback.</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.handle_accept">
<code class="descname">handle_accept</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.handle_accept" title="Permalink to this definition">¶</a></dt>
<dd><p>Called on listening channels (passive openers) when a connection can be
established with a new remote endpoint that has issued a <a class="reference internal" href="#asyncore.dispatcher.connect" title="asyncore.dispatcher.connect"><code class="xref py py-meth docutils literal notranslate"><span class="pre">connect()</span></code></a>
call for the local endpoint. Deprecated in version 3.2; use
<a class="reference internal" href="#asyncore.dispatcher.handle_accepted" title="asyncore.dispatcher.handle_accepted"><code class="xref py py-meth docutils literal notranslate"><span class="pre">handle_accepted()</span></code></a> instead.</p>
<div class="deprecated">
<p><span class="versionmodified">Deprecated since version 3.2.</span></p>
</div>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.handle_accepted">
<code class="descname">handle_accepted</code><span class="sig-paren">(</span><em>sock</em>, <em>addr</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.handle_accepted" title="Permalink to this definition">¶</a></dt>
<dd><p>Called on listening channels (passive openers) when a connection has been
established with a new remote endpoint that has issued a <a class="reference internal" href="#asyncore.dispatcher.connect" title="asyncore.dispatcher.connect"><code class="xref py py-meth docutils literal notranslate"><span class="pre">connect()</span></code></a>
call for the local endpoint.  <em>sock</em> is a <em>new</em> socket object usable to
send and receive data on the connection, and <em>addr</em> is the address
bound to the socket on the other end of the connection.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.2.</span></p>
</div>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.readable">
<code class="descname">readable</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.readable" title="Permalink to this definition">¶</a></dt>
<dd><p>Called each time around the asynchronous loop to determine whether a
channel’s socket should be added to the list on which read events can
occur.  The default method simply returns <code class="docutils literal notranslate"><span class="pre">True</span></code>, indicating that by
default, all channels will be interested in read events.</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.writable">
<code class="descname">writable</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.writable" title="Permalink to this definition">¶</a></dt>
<dd><p>Called each time around the asynchronous loop to determine whether a
channel’s socket should be added to the list on which write events can
occur.  The default method simply returns <code class="docutils literal notranslate"><span class="pre">True</span></code>, indicating that by
default, all channels will be interested in write events.</p>
</dd></dl>
<p>In addition, each channel delegates or extends many of the socket methods.
Most of these are nearly identical to their socket partners.</p>
<dl class="method">
<dt id="asyncore.dispatcher.create_socket">
<code class="descname">create_socket</code><span class="sig-paren">(</span><em>family=socket.AF_INET</em>, <em>type=socket.SOCK_STREAM</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.create_socket" title="Permalink to this definition">¶</a></dt>
<dd><p>This is identical to the creation of a normal socket, and will use the
same options for creation.  Refer to the <a class="reference internal" href="socket.html#module-socket" title="socket: Low-level networking interface."><code class="xref py py-mod docutils literal notranslate"><span class="pre">socket</span></code></a> documentation for
information on creating sockets.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.3: </span><em>family</em> and <em>type</em> arguments can be omitted.</p>
</div>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.connect">
<code class="descname">connect</code><span class="sig-paren">(</span><em>address</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.connect" title="Permalink to this definition">¶</a></dt>
<dd><p>As with the normal socket object, <em>address</em> is a tuple with the first
element the host to connect to, and the second the port number.</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.send">
<code class="descname">send</code><span class="sig-paren">(</span><em>data</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.send" title="Permalink to this definition">¶</a></dt>
<dd><p>Send <em>data</em> to the remote end-point of the socket.</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.recv">
<code class="descname">recv</code><span class="sig-paren">(</span><em>buffer_size</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.recv" title="Permalink to this definition">¶</a></dt>
<dd><p>Read at most <em>buffer_size</em> bytes from the socket’s remote end-point.  An
empty bytes object implies that the channel has been closed from the
other end.</p>
<p>Note that <a class="reference internal" href="#asyncore.dispatcher.recv" title="asyncore.dispatcher.recv"><code class="xref py py-meth docutils literal notranslate"><span class="pre">recv()</span></code></a> may raise <a class="reference internal" href="exceptions.html#BlockingIOError" title="BlockingIOError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BlockingIOError</span></code></a> , even though
<a class="reference internal" href="select.html#select.select" title="select.select"><code class="xref py py-func docutils literal notranslate"><span class="pre">select.select()</span></code></a> or <a class="reference internal" href="select.html#select.poll" title="select.poll"><code class="xref py py-func docutils literal notranslate"><span class="pre">select.poll()</span></code></a> has reported the socket
ready for reading.</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.listen">
<code class="descname">listen</code><span class="sig-paren">(</span><em>backlog</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.listen" title="Permalink to this definition">¶</a></dt>
<dd><p>Listen for connections made to the socket.  The <em>backlog</em> argument
specifies the maximum number of queued connections and should be at least
1; the maximum value is system-dependent (usually 5).</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.bind">
<code class="descname">bind</code><span class="sig-paren">(</span><em>address</em><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.bind" title="Permalink to this definition">¶</a></dt>
<dd><p>Bind the socket to <em>address</em>.  The socket must not already be bound.  (The
format of <em>address</em> depends on the address family — refer to the
<a class="reference internal" href="socket.html#module-socket" title="socket: Low-level networking interface."><code class="xref py py-mod docutils literal notranslate"><span class="pre">socket</span></code></a> documentation for more information.)  To mark
the socket as re-usable (setting the <code class="xref py py-const docutils literal notranslate"><span class="pre">SO_REUSEADDR</span></code> option), call
the <a class="reference internal" href="#asyncore.dispatcher" title="asyncore.dispatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">dispatcher</span></code></a> object’s <code class="xref py py-meth docutils literal notranslate"><span class="pre">set_reuse_addr()</span></code> method.</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.accept">
<code class="descname">accept</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.accept" title="Permalink to this definition">¶</a></dt>
<dd><p>Accept a connection.  The socket must be bound to an address and listening
for connections.  The return value can be either <code class="docutils literal notranslate"><span class="pre">None</span></code> or a pair
<code class="docutils literal notranslate"><span class="pre">(conn,</span> <span class="pre">address)</span></code> where <em>conn</em> is a <em>new</em> socket object usable to send
and receive data on the connection, and <em>address</em> is the address bound to
the socket on the other end of the connection.
When <code class="docutils literal notranslate"><span class="pre">None</span></code> is returned it means the connection didn’t take place, in
which case the server should just ignore this event and keep listening
for further incoming connections.</p>
</dd></dl>
<dl class="method">
<dt id="asyncore.dispatcher.close">
<code class="descname">close</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#asyncore.dispatcher.close" title="Permalink to this definition">¶</a></dt>
<dd><p>Close the socket.  All future operations on the socket object will fail.
The remote end-point will receive no more data (after queued data is
flushed).  Sockets are automatically closed when they are
garbage-collected.</p>
</dd></dl>
</dd>