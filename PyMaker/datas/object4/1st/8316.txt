link:
library/typing.html#typing.overload

docs:


@typing.overloadÂ¶
The @overload decorator allows describing functions and methods
that support multiple different combinations of argument types. A series
of @overload-decorated definitions must be followed by exactly one
non-@overload-decorated definition (for the same function/method).
The @overload-decorated definitions are for the benefit of the
type checker only, since they will be overwritten by the
non-@overload-decorated definition, while the latter is used at
runtime but should be ignored by a type checker.  At runtime, calling
a @overload-decorated function directly will raise
NotImplementedError. An example of overload that gives a more
precise type than can be expressed using a union or a type variable:
@overload
def process(response: None) -> None:
    ...
@overload
def process(response: int) -> Tuple[int, str]:
    ...
@overload
def process(response: bytes) -> str:
    ...
def process(response):
    <actual implementation>


See PEP 484 for details and comparison with other typing semantics.
