link:
library/difflib.html#difflib.unified_diff

docs:


difflib.unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n')Â¶
Compare a and b (lists of strings); return a delta (a generator
generating the delta lines) in unified diff format.
Unified diffs are a compact way of showing just the lines that have changed plus
a few lines of context.  The changes are shown in an inline style (instead of
separate before/after blocks).  The number of context lines is set by n which
defaults to three.
By default, the diff control lines (those with ---, +++, or @@) are
created with a trailing newline.  This is helpful so that inputs created from
io.IOBase.readlines() result in diffs that are suitable for use with
io.IOBase.writelines() since both the inputs and outputs have trailing
newlines.
For inputs that do not have trailing newlines, set the lineterm argument to
"" so that the output will be uniformly newline free.
The context diff format normally has a header for filenames and modification
times.  Any or all of these may be specified using strings for fromfile,
tofile, fromfiledate, and tofiledate.  The modification times are normally
expressed in the ISO 8601 format. If not specified, the
strings default to blanks.
>>> s1 = ['bacon\n', 'eggs\n', 'ham\n', 'guido\n']
>>> s2 = ['python\n', 'eggy\n', 'hamster\n', 'guido\n']
>>> sys.stdout.writelines(unified_diff(s1, s2, fromfile='before.py', tofile='after.py'))
--- before.py
+++ after.py
@@ -1,4 +1,4 @@
-bacon
-eggs
-ham
+python
+eggy
+hamster
 guido


See A command-line interface to difflib for a more detailed example.
