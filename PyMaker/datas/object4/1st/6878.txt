link:
library/poplib.html#poplib.POP3_SSL

docs:

<dt id="poplib.POP3_SSL">
<em class="property">class </em><code class="descclassname">poplib.</code><code class="descname">POP3_SSL</code><span class="sig-paren">(</span><em>host</em>, <em>port=POP3_SSL_PORT</em>, <em>keyfile=None</em>, <em>certfile=None</em>, <em>timeout=None</em>, <em>context=None</em><span class="sig-paren">)</span><a class="headerlink" href="#poplib.POP3_SSL" title="Permalink to this definition">¶</a></dt>
<dd><p>This is a subclass of <a class="reference internal" href="#poplib.POP3" title="poplib.POP3"><code class="xref py py-class docutils literal notranslate"><span class="pre">POP3</span></code></a> that connects to the server over an SSL
encrypted socket.  If <em>port</em> is not specified, 995, the standard POP3-over-SSL
port is used.  <em>timeout</em> works as in the <a class="reference internal" href="#poplib.POP3" title="poplib.POP3"><code class="xref py py-class docutils literal notranslate"><span class="pre">POP3</span></code></a> constructor.
<em>context</em> is an optional <a class="reference internal" href="ssl.html#ssl.SSLContext" title="ssl.SSLContext"><code class="xref py py-class docutils literal notranslate"><span class="pre">ssl.SSLContext</span></code></a> object which allows
bundling SSL configuration options, certificates and private keys into a
single (potentially long-lived) structure.  Please read <a class="reference internal" href="ssl.html#ssl-security"><span class="std std-ref">Security considerations</span></a>
for best practices.</p>
<p><em>keyfile</em> and <em>certfile</em> are a legacy alternative to <em>context</em> - they can
point to PEM-formatted private key and certificate chain files,
respectively, for the SSL connection.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.2: </span><em>context</em> parameter added.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.4: </span>The class now supports hostname check with
<a class="reference internal" href="ssl.html#ssl.SSLContext.check_hostname" title="ssl.SSLContext.check_hostname"><code class="xref py py-attr docutils literal notranslate"><span class="pre">ssl.SSLContext.check_hostname</span></code></a> and <em>Server Name Indication</em> (see
<a class="reference internal" href="ssl.html#ssl.HAS_SNI" title="ssl.HAS_SNI"><code class="xref py py-data docutils literal notranslate"><span class="pre">ssl.HAS_SNI</span></code></a>).</p>
</div>
<div class="deprecated">
<p><span class="versionmodified">Deprecated since version 3.6: </span><em>keyfile</em> and <em>certfile</em> are deprecated in favor of <em>context</em>.
Please use <a class="reference internal" href="ssl.html#ssl.SSLContext.load_cert_chain" title="ssl.SSLContext.load_cert_chain"><code class="xref py py-meth docutils literal notranslate"><span class="pre">ssl.SSLContext.load_cert_chain()</span></code></a> instead, or let
<a class="reference internal" href="ssl.html#ssl.create_default_context" title="ssl.create_default_context"><code class="xref py py-func docutils literal notranslate"><span class="pre">ssl.create_default_context()</span></code></a> select the system’s trusted CA
certificates for you.</p>
</div>
</dd>