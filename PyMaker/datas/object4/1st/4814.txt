link:
library/asyncio-eventloop.html#working-with-pipes

docs:

Working with pipes¶


coroutine loop.connect_read_pipe(protocol_factory, pipe)¶
Register the read end of pipe in the event loop.
protocol_factory must be a callable returning an
asyncio protocol implementation.
pipe is a file-like object.
Return pair (transport, protocol), where transport supports
the ReadTransport interface and protocol is an object
instantiated by the protocol_factory.
With SelectorEventLoop event loop, the pipe is set to
non-blocking mode.



coroutine loop.connect_write_pipe(protocol_factory, pipe)¶
Register the write end of pipe in the event loop.
protocol_factory must be a callable returning an
asyncio protocol implementation.
pipe is file-like object.
Return pair (transport, protocol), where transport supports
WriteTransport interface and protocol is an object
instantiated by the protocol_factory.
With SelectorEventLoop event loop, the pipe is set to
non-blocking mode.


Note
SelectorEventLoop does not support the above methods on
Windows.  Use ProactorEventLoop instead for Windows.


See also
The loop.subprocess_exec() and
loop.subprocess_shell() methods.

