link:
library/enum.html#finer-points

docs:

Finer Points¶

Supported __dunder__ names¶
__members__ is an OrderedDict of member_name:member
items.  It is only available on the class.
__new__(), if specified, must create and return the enum members; it is
also a very good idea to set the member’s _value_ appropriately.  Once
all the members are created it is no longer used.


Supported _sunder_ names¶

_name_ – name of the member
_value_ – value of the member; can be set / modified in __new__
_missing_ – a lookup function used when a value is not found; may be
overridden
_ignore_ – a list of names, either as a list() or a str(),
that will not be transformed into members, and will be removed from the final
class
_order_ – used in Python 2/3 code to ensure member order is consistent
(class attribute, removed during class creation)
_generate_next_value_ – used by the Functional API and by
auto to get an appropriate value for an enum member; may be
overridden


New in version 3.6: _missing_, _order_, _generate_next_value_


New in version 3.7: _ignore_

To help keep Python 2 / Python 3 code in sync an _order_ attribute can
be provided.  It will be checked against the actual order of the enumeration
and raise an error if the two do not match:
>>> class Color(Enum):
...     _order_ = 'RED GREEN BLUE'
...     RED = 1
...     BLUE = 3
...     GREEN = 2
...
Traceback (most recent call last):
...
TypeError: member order does not match _order_



Note
In Python 2 code the _order_ attribute is necessary as definition
order is lost before it can be recorded.



Enum member type¶
Enum members are instances of their Enum class, and are
normally accessed as EnumClass.member.  Under certain circumstances they
can also be accessed as EnumClass.member.member, but you should never do
this as that lookup may fail or, worse, return something besides the
Enum member you are looking for (this is another good reason to use
all-uppercase names for members):
>>> class FieldTypes(Enum):
...     name = 0
...     value = 1
...     size = 2
...
>>> FieldTypes.value.size
<FieldTypes.size: 2>
>>> FieldTypes.size.value
2



Changed in version 3.5.



Boolean value of Enum classes and members¶
Enum members that are mixed with non-Enum types (such as
int, str, etc.) are evaluated according to the mixed-in
type’s rules; otherwise, all members evaluate as True.  To make your
own Enum’s boolean evaluation depend on the member’s value add the following to
your class:
def __bool__(self):
    return bool(self.value)


Enum classes always evaluate as True.


Enum classes with methods¶
If you give your Enum subclass extra methods, like the Planet
class above, those methods will show up in a dir() of the member,
but not of the class:
>>> dir(Planet)
['EARTH', 'JUPITER', 'MARS', 'MERCURY', 'NEPTUNE', 'SATURN', 'URANUS', 'VENUS', '__class__', '__doc__', '__members__', '__module__']
>>> dir(Planet.EARTH)
['__class__', '__doc__', '__module__', 'name', 'surface_gravity', 'value']




Combining members of Flag¶
If a combination of Flag members is not named, the repr() will include
all named flags and all named combinations of flags that are in the value:
>>> class Color(Flag):
...     RED = auto()
...     GREEN = auto()
...     BLUE = auto()
...     MAGENTA = RED | BLUE
...     YELLOW = RED | GREEN
...     CYAN = GREEN | BLUE
...
>>> Color(3)  # named combination
<Color.YELLOW: 3>
>>> Color(7)      # not named combination
<Color.CYAN|MAGENTA|BLUE|YELLOW|GREEN|RED: 7>



