link:
library/email.compat32-message.html#email.message.Message.set_charset

docs:

<dt id="email.message.Message.set_charset">
<code class="descname">set_charset</code><span class="sig-paren">(</span><em>charset</em><span class="sig-paren">)</span><a class="headerlink" href="#email.message.Message.set_charset" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Set the character set of the payload to <em>charset</em>, which can either be a
<a class="reference internal" href="email.charset.html#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a> instance (see <a class="reference internal" href="email.charset.html#module-email.charset" title="email.charset: Character Sets"><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.charset</span></code></a>), a
string naming a character set, or <code class="docutils literal notranslate"><span class="pre">None</span></code>.  If it is a string, it will
be converted to a <a class="reference internal" href="email.charset.html#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a> instance.  If <em>charset</em>
is <code class="docutils literal notranslate"><span class="pre">None</span></code>, the <code class="docutils literal notranslate"><span class="pre">charset</span></code> parameter will be removed from the
<em class="mailheader">Content-Type</em> header (the message will not be otherwise
modified).  Anything else will generate a <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>.</p>
<p>If there is no existing <em class="mailheader">MIME-Version</em> header one will be
added.  If there is no existing <em class="mailheader">Content-Type</em> header, one
will be added with a value of <em class="mimetype">text/plain</em>.  Whether the
<em class="mailheader">Content-Type</em> header already exists or not, its <code class="docutils literal notranslate"><span class="pre">charset</span></code>
parameter will be set to <em>charset.output_charset</em>.   If
<em>charset.input_charset</em> and <em>charset.output_charset</em> differ, the payload
will be re-encoded to the <em>output_charset</em>.  If there is no existing
<em class="mailheader">Content-Transfer-Encoding</em> header, then the payload will be
transfer-encoded, if needed, using the specified
<a class="reference internal" href="email.charset.html#email.charset.Charset" title="email.charset.Charset"><code class="xref py py-class docutils literal notranslate"><span class="pre">Charset</span></code></a>, and a header with the appropriate value
will be added.  If a <em class="mailheader">Content-Transfer-Encoding</em> header
already exists, the payload is assumed to already be correctly encoded
using that <em class="mailheader">Content-Transfer-Encoding</em> and is not modified.</p>
<p>This is a legacy method.  On the
<code class="xref py py-class docutils literal notranslate"><span class="pre">EmailMessage</span></code> class its functionality is
replaced by the <em>charset</em> parameter of the
<code class="xref py py-meth docutils literal notranslate"><span class="pre">email.emailmessage.EmailMessage.set_content()</span></code> method.</p>
</dd>