link:
library/concurrent.futures.html#concurrent.futures.Future.exception

docs:

<dt id="concurrent.futures.Future.exception">
<code class="descname">exception</code><span class="sig-paren">(</span><em>timeout=None</em><span class="sig-paren">)</span><a class="headerlink" href="#concurrent.futures.Future.exception" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the exception raised by the call.  If the call hasn’t yet
completed then this method will wait up to <em>timeout</em> seconds.  If the
call hasn’t completed in <em>timeout</em> seconds, then a
<a class="reference internal" href="#concurrent.futures.TimeoutError" title="concurrent.futures.TimeoutError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">concurrent.futures.TimeoutError</span></code></a> will be raised.  <em>timeout</em> can be
an int or float.  If <em>timeout</em> is not specified or <code class="docutils literal notranslate"><span class="pre">None</span></code>, there is no
limit to the wait time.</p>
<p>If the future is cancelled before completing then <a class="reference internal" href="#concurrent.futures.CancelledError" title="concurrent.futures.CancelledError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">CancelledError</span></code></a>
will be raised.</p>
<p>If the call completed without raising, <code class="docutils literal notranslate"><span class="pre">None</span></code> is returned.</p>
</dd>