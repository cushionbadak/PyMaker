link:
library/xmlrpc.client.html#xmlrpc.client.ServerProxy

docs:


class xmlrpc.client.ServerProxy(uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False, use_builtin_types=False, *, context=None)¶

Changed in version 3.3: The use_builtin_types flag was added.

A ServerProxy instance is an object that manages communication with a
remote XML-RPC server.  The required first argument is a URI (Uniform Resource
Indicator), and will normally be the URL of the server.  The optional second
argument is a transport factory instance; by default it is an internal
SafeTransport instance for https: URLs and an internal HTTP
Transport instance otherwise.  The optional third argument is an
encoding, by default UTF-8. The optional fourth argument is a debugging flag.
The following parameters govern the use of the returned proxy instance.
If allow_none is true,  the Python constant None will be translated into
XML; the default behaviour is for None to raise a TypeError. This is
a commonly-used extension to the XML-RPC specification, but isn’t supported by
all clients and servers; see http://ontosys.com/xml-rpc/extensions.php
for a description.
The use_builtin_types flag can be used to cause date/time values
to be presented as datetime.datetime objects and binary data to be
presented as bytes objects; this flag is false by default.
datetime.datetime, bytes and bytearray objects
may be passed to calls.
The obsolete use_datetime flag is similar to use_builtin_types but it
applies only to date/time values.
Both the HTTP and HTTPS transports support the URL syntax extension for HTTP
Basic Authentication: http://user:pass@host:port/path.  The  user:pass
portion will be base64-encoded as an HTTP ‘Authorization’ header, and sent to
the remote server as part of the connection process when invoking an XML-RPC
method.  You only need to use this if the remote server requires a Basic
Authentication user and password. If an HTTPS URL is provided, context may
be ssl.SSLContext and configures the SSL settings of the underlying
HTTPS connection.
The returned instance is a proxy object with methods that can be used to invoke
corresponding RPC calls on the remote server.  If the remote server supports the
introspection API, the proxy can also be used to query the remote server for the
methods it supports (service discovery) and fetch other server-associated
metadata.
Types that are conformable (e.g. that can be marshalled through XML),
include the following (and except where noted, they are unmarshalled
as the same Python type):






XML-RPC type
Python type



boolean
bool

int, i1,
i2,  i4,
i8 or
biginteger
int in range from -2147483648 to 2147483647.
Values get the <int> tag.

double or
float
float.  Values get the <double> tag.

string
str

array
list or tuple containing
conformable elements.  Arrays are returned as
lists.

struct
dict.  Keys must be strings, values may be
any conformable type.  Objects of user-defined
classes can be passed in; only their
__dict__ attribute is transmitted.

dateTime.iso8601
DateTime or datetime.datetime.
Returned type depends on values of
use_builtin_types and use_datetime flags.

base64
Binary, bytes or
bytearray.  Returned type depends on the
value of the use_builtin_types flag.

nil
The None constant.  Passing is allowed only if
allow_none is true.

bigdecimal
decimal.Decimal.  Returned type only.



This is the full set of data types supported by XML-RPC.  Method calls may also
raise a special Fault instance, used to signal XML-RPC server errors, or
ProtocolError used to signal an error in the HTTP/HTTPS transport layer.
Both Fault and ProtocolError derive from a base class called
Error.  Note that the xmlrpc client module currently does not marshal
instances of subclasses of built-in types.
When passing strings, characters special to XML such as <, >, and &
will be automatically escaped.  However, it’s the caller’s responsibility to
ensure that the string is free of characters that aren’t allowed in XML, such as
the control characters with ASCII values between 0 and 31 (except, of course,
tab, newline and carriage return); failing to do this will result in an XML-RPC
request that isn’t well-formed XML.  If you have to pass arbitrary bytes
via XML-RPC, use bytes or bytearray classes or the
Binary wrapper class described below.
Server is retained as an alias for ServerProxy for backwards
compatibility.  New code should use ServerProxy.

Changed in version 3.5: Added the context argument.


Changed in version 3.6: Added support of type tags with prefixes (e.g. ex:nil).
Added support of unmarshalling additional types used by Apache XML-RPC
implementation for numerics: i1, i2, i8, biginteger,
float and bigdecimal.
See http://ws.apache.org/xmlrpc/types.html for a description.

