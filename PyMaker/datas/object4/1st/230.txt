link:
reference/expressions.html#asynchronous-generator-functions

docs:

6.2.9.3. Asynchronous generator functions¶
The presence of a yield expression in a function or method defined using
async def further defines the function as an
asynchronous generator function.
When an asynchronous generator function is called, it returns an
asynchronous iterator known as an asynchronous generator object.
That object then controls the execution of the generator function.
An asynchronous generator object is typically used in an
async for statement in a coroutine function analogously to
how a generator object would be used in a for statement.
Calling one of the asynchronous generator’s methods returns an
awaitable object, and the execution starts when this object
is awaited on. At that time, the execution proceeds to the first yield
expression, where it is suspended again, returning the value of
expression_list to the awaiting coroutine. As with a generator,
suspension means that all local state is retained, including the
current bindings of local variables, the instruction pointer, the internal
evaluation stack, and the state of any exception handling.  When the execution
is resumed by awaiting on the next object returned by the asynchronous
generator’s methods, the function can proceed exactly as if the yield
expression were just another external call. The value of the yield expression
after resuming depends on the method which resumed the execution.  If
__anext__() is used then the result is None. Otherwise, if
asend() is used, then the result will be the value passed in to
that method.
In an asynchronous generator function, yield expressions are allowed anywhere
in a try construct. However, if an asynchronous generator is not
resumed before it is finalized (by reaching a zero reference count or by
being garbage collected), then a yield expression within a try
construct could result in a failure to execute pending finally
clauses.  In this case, it is the responsibility of the event loop or
scheduler running the asynchronous generator to call the asynchronous
generator-iterator’s aclose() method and run the resulting
coroutine object, thus allowing any pending finally clauses
to execute.
To take care of finalization, an event loop should define
a finalizer function which takes an asynchronous generator-iterator
and presumably calls aclose() and executes the coroutine.
This  finalizer may be registered by calling sys.set_asyncgen_hooks().
When first iterated over, an asynchronous generator-iterator will store the
registered finalizer to be called upon finalization. For a reference example
of a finalizer method see the implementation of
asyncio.Loop.shutdown_asyncgens in Lib/asyncio/base_events.py.
The expression yield from <expr> is a syntax error when used in an
asynchronous generator function.
