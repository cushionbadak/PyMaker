link:
library/asyncio-eventloop.html#opening-network-connections

docs:

Opening network connections¶


coroutine loop.create_connection(protocol_factory, host=None, port=None, *, ssl=None, family=0, proto=0, flags=0, sock=None, local_addr=None, server_hostname=None, ssl_handshake_timeout=None)¶
Open a streaming transport connection to a given
address specified by host and port.
The socket family can be either AF_INET or
AF_INET6 depending on host (or the family
argument, if provided).
The socket type will be SOCK_STREAM.
protocol_factory must be a callable returning an
asyncio protocol implementation.
This method will try to establish the connection in the background.
When successful, it returns a (transport, protocol) pair.
The chronological synopsis of the underlying operation is as follows:

The connection is established and a transport
is created for it.
protocol_factory is called without arguments and is expected to
return a protocol instance.
The protocol instance is coupled with the transport by calling its
connection_made() method.
A (transport, protocol) tuple is returned on success.

The created transport is an implementation-dependent bidirectional
stream.
Other arguments:

ssl: if given and not false, a SSL/TLS transport is created
(by default a plain TCP transport is created).  If ssl is
a ssl.SSLContext object, this context is used to create
the transport; if ssl is True, a default context returned
from ssl.create_default_context() is used.

See also
SSL/TLS security considerations


server_hostname sets or overrides the hostname that the target
server’s certificate will be matched against.  Should only be passed
if ssl is not None.  By default the value of the host argument
is used.  If host is empty, there is no default and you must pass a
value for server_hostname.  If server_hostname is an empty
string, hostname matching is disabled (which is a serious security
risk, allowing for potential man-in-the-middle attacks).

family, proto, flags are the optional address family, protocol
and flags to be passed through to getaddrinfo() for host resolution.
If given, these should all be integers from the corresponding
socket module constants.

sock, if given, should be an existing, already connected
socket.socket object to be used by the transport.
If sock is given, none of host, port, family, proto, flags
and local_addr should be specified.

local_addr, if given, is a (local_host, local_port) tuple used
to bind the socket to locally.  The local_host and local_port
are looked up using getaddrinfo(), similarly to host and port.

ssl_handshake_timeout is (for a TLS connection) the time in seconds
to wait for the TLS handshake to complete before aborting the connection.
60.0 seconds if None (default).



New in version 3.7: The ssl_handshake_timeout parameter.


Changed in version 3.6: The socket option TCP_NODELAY is set by default
for all TCP connections.


Changed in version 3.5: Added support for SSL/TLS in ProactorEventLoop.


See also
The open_connection() function is a high-level alternative
API.  It returns a pair of (StreamReader, StreamWriter)
that can be used directly in async/await code.




coroutine loop.create_datagram_endpoint(protocol_factory, local_addr=None, remote_addr=None, *, family=0, proto=0, flags=0, reuse_address=None, reuse_port=None, allow_broadcast=None, sock=None)¶
Create a datagram connection.
The socket family can be either AF_INET,
AF_INET6, or AF_UNIX,
depending on host (or the family argument, if provided).
The socket type will be SOCK_DGRAM.
protocol_factory must be a callable returning a
protocol implementation.
A tuple of (transport, protocol) is returned on success.
Other arguments:

local_addr, if given, is a (local_host, local_port) tuple used
to bind the socket to locally.  The local_host and local_port
are looked up using getaddrinfo().
remote_addr, if given, is a (remote_host, remote_port) tuple used
to connect the socket to a remote address.  The remote_host and
remote_port are looked up using getaddrinfo().
family, proto, flags are the optional address family, protocol
and flags to be passed through to getaddrinfo() for host
resolution. If given, these should all be integers from the
corresponding socket module constants.
reuse_address tells the kernel to reuse a local socket in
TIME_WAIT state, without waiting for its natural timeout to
expire. If not specified will automatically be set to True on
Unix.
reuse_port tells the kernel to allow this endpoint to be bound to the
same port as other existing endpoints are bound to, so long as they all
set this flag when being created. This option is not supported on Windows
and some Unixes. If the SO_REUSEPORT constant is not
defined then this capability is unsupported.
allow_broadcast tells the kernel to allow this endpoint to send
messages to the broadcast address.
sock can optionally be specified in order to use a preexisting,
already connected, socket.socket object to be used by the
transport. If specified, local_addr and remote_addr should be omitted
(must be None).

On Windows, with ProactorEventLoop, this method is not supported.
See UDP echo client protocol and
UDP echo server protocol examples.

Changed in version 3.4.4: The family, proto, flags, reuse_address, reuse_port,
*allow_broadcast, and sock parameters were added.




coroutine loop.create_unix_connection(protocol_factory, path=None, *, ssl=None, sock=None, server_hostname=None, ssl_handshake_timeout=None)¶
Create a Unix connection.
The socket family will be AF_UNIX; socket
type will be SOCK_STREAM.
A tuple of (transport, protocol) is returned on success.
path is the name of a Unix domain socket and is required,
unless a sock parameter is specified.  Abstract Unix sockets,
str, bytes, and Path paths are
supported.
See the documentation of the loop.create_connection() method
for information about arguments to this method.
Availability: Unix.

New in version 3.7: The ssl_handshake_timeout parameter.


Changed in version 3.7: The path parameter can now be a path-like object.


