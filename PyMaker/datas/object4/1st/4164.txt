link:
library/ctypes.html#arrays-and-pointers

docs:

Arrays and pointers¶


class ctypes.Array(*args)¶
Abstract base class for arrays.
The recommended way to create concrete array types is by multiplying any
ctypes data type with a positive integer.  Alternatively, you can subclass
this type and define _length_ and _type_ class variables.
Array elements can be read and written using standard
subscript and slice accesses; for slice reads, the resulting object is
not itself an Array.


_length_¶
A positive integer specifying the number of elements in the array.
Out-of-range subscripts result in an IndexError. Will be
returned by len().



_type_¶
Specifies the type of each element in the array.

Array subclass constructors accept positional arguments, used to
initialize the elements in order.



class ctypes._Pointer¶
Private, abstract base class for pointers.
Concrete pointer types are created by calling POINTER() with the
type that will be pointed to; this is done automatically by
pointer().
If a pointer points to an array, its elements can be read and
written using standard subscript and slice accesses.  Pointer objects
have no size, so len() will raise TypeError.  Negative
subscripts will read from the memory before the pointer (as in C), and
out-of-range subscripts will probably crash with an access violation (if
you’re lucky).


_type_¶
Specifies the type pointed to.



contents¶
Returns the object to which to pointer points.  Assigning to this
attribute changes the pointer to point to the assigned object.


