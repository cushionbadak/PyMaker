link:
library/profile.html#module-cProfile

docs:

profile and cProfile Module Reference¶
Both the profile and cProfile modules provide the following
functions:


profile.run(command, filename=None, sort=-1)¶
This function takes a single argument that can be passed to the exec()
function, and an optional file name.  In all cases this routine executes:
exec(command, __main__.__dict__, __main__.__dict__)


and gathers profiling statistics from the execution. If no file name is
present, then this function automatically creates a Stats
instance and prints a simple profiling report. If the sort value is specified,
it is passed to this Stats instance to control how the
results are sorted.



profile.runctx(command, globals, locals, filename=None, sort=-1)¶
This function is similar to run(), with added arguments to supply the
globals and locals dictionaries for the command string. This routine
executes:
exec(command, globals, locals)


and gathers profiling statistics as in the run() function above.



class profile.Profile(timer=None, timeunit=0.0, subcalls=True, builtins=True)¶
This class is normally only used if more precise control over profiling is
needed than what the cProfile.run() function provides.
A custom timer can be supplied for measuring how long code takes to run via
the timer argument. This must be a function that returns a single number
representing the current time. If the number is an integer, the timeunit
specifies a multiplier that specifies the duration of each unit of time. For
example, if the timer returns times measured in thousands of seconds, the
time unit would be .001.
Directly using the Profile class allows formatting profile results
without writing the profile data to a file:
import cProfile, pstats, io
from pstats import SortKey
pr = cProfile.Profile()
pr.enable()
# ... do something ...
pr.disable()
s = io.StringIO()
sortby = SortKey.CUMULATIVE
ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
ps.print_stats()
print(s.getvalue())




enable()¶
Start collecting profiling data.



disable()¶
Stop collecting profiling data.



create_stats()¶
Stop collecting profiling data and record the results internally
as the current profile.



print_stats(sort=-1)¶
Create a Stats object based on the current
profile and print the results to stdout.



dump_stats(filename)¶
Write the results of the current profile to filename.



run(cmd)¶
Profile the cmd via exec().



runctx(cmd, globals, locals)¶
Profile the cmd via exec() with the specified global and
local environment.



runcall(func, *args, **kwargs)¶
Profile func(*args, **kwargs)


Note that profiling will only work if the called command/function actually
returns.  If the interpreter is terminated (e.g. via a sys.exit() call
during the called command/function execution) no profiling results will be
printed.
