link:
library/code.html#code.interact

docs:

<dt id="code.interact">
<code class="descclassname">code.</code><code class="descname">interact</code><span class="sig-paren">(</span><em>banner=None</em>, <em>readfunc=None</em>, <em>local=None</em>, <em>exitmsg=None</em><span class="sig-paren">)</span><a class="headerlink" href="#code.interact" title="Permalink to this definition">Â¶</a></dt>
<dd><p>Convenience function to run a read-eval-print loop.  This creates a new
instance of <a class="reference internal" href="#code.InteractiveConsole" title="code.InteractiveConsole"><code class="xref py py-class docutils literal notranslate"><span class="pre">InteractiveConsole</span></code></a> and sets <em>readfunc</em> to be used as
the <a class="reference internal" href="#code.InteractiveConsole.raw_input" title="code.InteractiveConsole.raw_input"><code class="xref py py-meth docutils literal notranslate"><span class="pre">InteractiveConsole.raw_input()</span></code></a> method, if provided.  If <em>local</em> is
provided, it is passed to the <a class="reference internal" href="#code.InteractiveConsole" title="code.InteractiveConsole"><code class="xref py py-class docutils literal notranslate"><span class="pre">InteractiveConsole</span></code></a> constructor for
use as the default namespace for the interpreter loop.  The <a class="reference internal" href="#code.interact" title="code.interact"><code class="xref py py-meth docutils literal notranslate"><span class="pre">interact()</span></code></a>
method of the instance is then run with <em>banner</em> and <em>exitmsg</em> passed as the
banner and exit message to use, if provided.  The console object is discarded
after use.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6: </span>Added <em>exitmsg</em> parameter.</p>
</div>
</dd>