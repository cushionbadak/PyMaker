link:
library/logging.handlers.html#logging.handlers.QueueListener

docs:

<dt id="logging.handlers.QueueListener">
<em class="property">class </em><code class="descclassname">logging.handlers.</code><code class="descname">QueueListener</code><span class="sig-paren">(</span><em>queue</em>, <em>*handlers</em>, <em>respect_handler_level=False</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.QueueListener" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns a new instance of the <a class="reference internal" href="#logging.handlers.QueueListener" title="logging.handlers.QueueListener"><code class="xref py py-class docutils literal notranslate"><span class="pre">QueueListener</span></code></a> class. The instance is
initialized with the queue to send messages to and a list of handlers which
will handle entries placed on the queue. The queue can be any queue-like
object; it’s passed as-is to the <a class="reference internal" href="#logging.handlers.QueueListener.dequeue" title="logging.handlers.QueueListener.dequeue"><code class="xref py py-meth docutils literal notranslate"><span class="pre">dequeue()</span></code></a> method, which needs
to know how to get messages from it. If <code class="docutils literal notranslate"><span class="pre">respect_handler_level</span></code> is <code class="docutils literal notranslate"><span class="pre">True</span></code>,
a handler’s level is respected (compared with the level for the message) when
deciding whether to pass messages to that handler; otherwise, the behaviour
is as in previous Python versions - to always pass each message to each
handler.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>The <code class="docutils literal notranslate"><span class="pre">respect_handler_levels</span></code> argument was added.</p>
</div>
<dl class="method">
<dt id="logging.handlers.QueueListener.dequeue">
<code class="descname">dequeue</code><span class="sig-paren">(</span><em>block</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.QueueListener.dequeue" title="Permalink to this definition">¶</a></dt>
<dd><p>Dequeues a record and return it, optionally blocking.</p>
<p>The base implementation uses <code class="docutils literal notranslate"><span class="pre">get()</span></code>. You may want to override this
method if you want to use timeouts or work with custom queue
implementations.</p>
</dd></dl>
<dl class="method">
<dt id="logging.handlers.QueueListener.prepare">
<code class="descname">prepare</code><span class="sig-paren">(</span><em>record</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.QueueListener.prepare" title="Permalink to this definition">¶</a></dt>
<dd><p>Prepare a record for handling.</p>
<p>This implementation just returns the passed-in record. You may want to
override this method if you need to do any custom marshalling or
manipulation of the record before passing it to the handlers.</p>
</dd></dl>
<dl class="method">
<dt id="logging.handlers.QueueListener.handle">
<code class="descname">handle</code><span class="sig-paren">(</span><em>record</em><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.QueueListener.handle" title="Permalink to this definition">¶</a></dt>
<dd><p>Handle a record.</p>
<p>This just loops through the handlers offering them the record
to handle. The actual object passed to the handlers is that which
is returned from <a class="reference internal" href="#logging.handlers.QueueListener.prepare" title="logging.handlers.QueueListener.prepare"><code class="xref py py-meth docutils literal notranslate"><span class="pre">prepare()</span></code></a>.</p>
</dd></dl>
<dl class="method">
<dt id="logging.handlers.QueueListener.start">
<code class="descname">start</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.QueueListener.start" title="Permalink to this definition">¶</a></dt>
<dd><p>Starts the listener.</p>
<p>This starts up a background thread to monitor the queue for
LogRecords to process.</p>
</dd></dl>
<dl class="method">
<dt id="logging.handlers.QueueListener.stop">
<code class="descname">stop</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.QueueListener.stop" title="Permalink to this definition">¶</a></dt>
<dd><p>Stops the listener.</p>
<p>This asks the thread to terminate, and then waits for it to do so.
Note that if you don’t call this before your application exits, there
may be some records still left on the queue, which won’t be processed.</p>
</dd></dl>
<dl class="method">
<dt id="logging.handlers.QueueListener.enqueue_sentinel">
<code class="descname">enqueue_sentinel</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#logging.handlers.QueueListener.enqueue_sentinel" title="Permalink to this definition">¶</a></dt>
<dd><p>Writes a sentinel to the queue to tell the listener to quit. This
implementation uses <code class="docutils literal notranslate"><span class="pre">put_nowait()</span></code>.  You may want to override this
method if you want to use timeouts or work with custom queue
implementations.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.3.</span></p>
</div>
</dd></dl>
</dd>