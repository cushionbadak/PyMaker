link:
library/warnings.html#the-warnings-filter

docs:

The Warnings Filter¶
The warnings filter controls whether warnings are ignored, displayed, or turned
into errors (raising an exception).
Conceptually, the warnings filter maintains an ordered list of filter
specifications; any specific warning is matched against each filter
specification in the list in turn until a match is found; the filter determines
the disposition of the match.  Each entry is a tuple of the form (action,
message, category, module, lineno), where:

action is one of the following strings:






Value
Disposition



"default"
print the first occurrence of matching
warnings for each location (module +
line number) where the warning is issued

"error"
turn matching warnings into exceptions

"ignore"
never print matching warnings

"always"
always print matching warnings

"module"
print the first occurrence of matching
warnings for each module where the warning
is issued (regardless of line number)

"once"
print only the first occurrence of matching
warnings, regardless of location




message is a string containing a regular expression that the start of
the warning message must match.  The expression is compiled to always be
case-insensitive.

category is a class (a subclass of Warning) of which the warning
category must be a subclass in order to match.

module is a string containing a regular expression that the module name must
match.  The expression is compiled to be case-sensitive.

lineno is an integer that the line number where the warning occurred must
match, or 0 to match all line numbers.


Since the Warning class is derived from the built-in Exception
class, to turn a warning into an error we simply raise category(message).
If a warning is reported and doesn’t match any registered filter then the
“default” action is applied (hence its name).

Describing Warning Filters¶
The warnings filter is initialized by -W options passed to the Python
interpreter command line and the PYTHONWARNINGS environment variable.
The interpreter saves the arguments for all supplied entries without
interpretation in sys.warnoptions; the warnings module parses these
when it is first imported (invalid options are ignored, after printing a
message to sys.stderr).
Individual warnings filters are specified as a sequence of fields separated by
colons:
action:message:category:module:line


The meaning of each of these fields is as described in The Warnings Filter.
When listing multiple filters on a single line (as for
PYTHONWARNINGS), the individual filters are separated by commas,and
the filters listed later take precedence over those listed before them (as
they’re applied left-to-right, and the most recently applied filters take
precedence over earlier ones).
Commonly used warning filters apply to either all warnings, warnings in a
particular category, or warnings raised by particular modules or packages.
Some examples:
default                      # Show all warnings (even those ignored by default)
ignore                       # Ignore all warnings
error                        # Convert all warnings to errors
error::ResourceWarning       # Treat ResourceWarning messages as errors
default::DeprecationWarning  # Show DeprecationWarning messages
ignore,default:::mymodule    # Only report warnings triggered by "mymodule"
error:::mymodule[.*]         # Convert warnings to errors in "mymodule"
                             # and any subpackages of "mymodule"




Default Warning Filter¶
By default, Python installs several warning filters, which can be overridden by
the -W command-line option, the PYTHONWARNINGS environment
variable and calls to filterwarnings().
In regular release builds, the default warning filter has the following entries
(in order of precedence):
default::DeprecationWarning:__main__
ignore::DeprecationWarning
ignore::PendingDeprecationWarning
ignore::ImportWarning
ignore::ResourceWarning


In debug builds, the list of default warning filters is empty.

Changed in version 3.2: DeprecationWarning is now ignored by default in addition to
PendingDeprecationWarning.


Changed in version 3.7: DeprecationWarning is once again shown by default when triggered
directly by code in __main__.


Changed in version 3.7: BytesWarning no longer appears in the default filter list and is
instead configured via sys.warnoptions when -b is specified
twice.



Overriding the default filter¶
Developers of applications written in Python may wish to hide all Python level
warnings from their users by default, and only display them when running tests
or otherwise working on the application. The sys.warnoptions attribute
used to pass filter configurations to the interpreter can be used as a marker to
indicate whether or not warnings should be disabled:
import sys

if not sys.warnoptions:
    import warnings
    warnings.simplefilter("ignore")


Developers of test runners for Python code are advised to instead ensure that
all warnings are displayed by default for the code under test, using code
like:
import sys

if not sys.warnoptions:
    import os, warnings
    warnings.simplefilter("default") # Change the filter in this process
    os.environ["PYTHONWARNINGS"] = "default" # Also affect subprocesses


Finally, developers of interactive shells that run user code in a namespace
other than __main__ are advised to ensure that DeprecationWarning
messages are made visible by default, using code like the following (where
user_ns is the module used to execute code entered interactively):
import warnings
warnings.filterwarnings("default", category=DeprecationWarning,
                                   module=user_ns.get("__name__"))



