link:
library/json.html#json.load

docs:


json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)¶
Deserialize fp (a .read()-supporting text file or
binary file containing a JSON document) to a Python object using
this conversion table.
object_hook is an optional function that will be called with the result of
any object literal decoded (a dict).  The return value of
object_hook will be used instead of the dict.  This feature can be used
to implement custom decoders (e.g. JSON-RPC
class hinting).
object_pairs_hook is an optional function that will be called with the
result of any object literal decoded with an ordered list of pairs.  The
return value of object_pairs_hook will be used instead of the
dict.  This feature can be used to implement custom decoders.
If object_hook is also defined, the object_pairs_hook takes priority.

Changed in version 3.1: Added support for object_pairs_hook.

parse_float, if specified, will be called with the string of every JSON
float to be decoded.  By default, this is equivalent to float(num_str).
This can be used to use another datatype or parser for JSON floats
(e.g. decimal.Decimal).
parse_int, if specified, will be called with the string of every JSON int
to be decoded.  By default, this is equivalent to int(num_str).  This can
be used to use another datatype or parser for JSON integers
(e.g. float).
parse_constant, if specified, will be called with one of the following
strings: '-Infinity', 'Infinity', 'NaN'.
This can be used to raise an exception if invalid JSON numbers
are encountered.

Changed in version 3.1: parse_constant doesn’t get called on ‘null’, ‘true’, ‘false’ anymore.

To use a custom JSONDecoder subclass, specify it with the cls
kwarg; otherwise JSONDecoder is used.  Additional keyword arguments
will be passed to the constructor of the class.
If the data being deserialized is not a valid JSON document, a
JSONDecodeError will be raised.

Changed in version 3.6: All optional parameters are now keyword-only.


Changed in version 3.6: fp can now be a binary file. The input encoding should be
UTF-8, UTF-16 or UTF-32.

