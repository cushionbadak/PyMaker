link:
library/json.html#json.load

docs:

<dt id="json.load">
<code class="descclassname">json.</code><code class="descname">load</code><span class="sig-paren">(</span><em>fp</em>, <em>*</em>, <em>cls=None</em>, <em>object_hook=None</em>, <em>parse_float=None</em>, <em>parse_int=None</em>, <em>parse_constant=None</em>, <em>object_pairs_hook=None</em>, <em>**kw</em><span class="sig-paren">)</span><a class="headerlink" href="#json.load" title="Permalink to this definition">¶</a></dt>
<dd><p>Deserialize <em>fp</em> (a <code class="docutils literal notranslate"><span class="pre">.read()</span></code>-supporting <a class="reference internal" href="../glossary.html#term-text-file"><span class="xref std std-term">text file</span></a> or
<a class="reference internal" href="../glossary.html#term-binary-file"><span class="xref std std-term">binary file</span></a> containing a JSON document) to a Python object using
this <a class="reference internal" href="#json-to-py-table"><span class="std std-ref">conversion table</span></a>.</p>
<p><em>object_hook</em> is an optional function that will be called with the result of
any object literal decoded (a <a class="reference internal" href="stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal notranslate"><span class="pre">dict</span></code></a>).  The return value of
<em>object_hook</em> will be used instead of the <a class="reference internal" href="stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal notranslate"><span class="pre">dict</span></code></a>.  This feature can be used
to implement custom decoders (e.g. <a class="reference external" href="http://www.jsonrpc.org">JSON-RPC</a>
class hinting).</p>
<p><em>object_pairs_hook</em> is an optional function that will be called with the
result of any object literal decoded with an ordered list of pairs.  The
return value of <em>object_pairs_hook</em> will be used instead of the
<a class="reference internal" href="stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal notranslate"><span class="pre">dict</span></code></a>.  This feature can be used to implement custom decoders.
If <em>object_hook</em> is also defined, the <em>object_pairs_hook</em> takes priority.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.1: </span>Added support for <em>object_pairs_hook</em>.</p>
</div>
<p><em>parse_float</em>, if specified, will be called with the string of every JSON
float to be decoded.  By default, this is equivalent to <code class="docutils literal notranslate"><span class="pre">float(num_str)</span></code>.
This can be used to use another datatype or parser for JSON floats
(e.g. <a class="reference internal" href="decimal.html#decimal.Decimal" title="decimal.Decimal"><code class="xref py py-class docutils literal notranslate"><span class="pre">decimal.Decimal</span></code></a>).</p>
<p><em>parse_int</em>, if specified, will be called with the string of every JSON int
to be decoded.  By default, this is equivalent to <code class="docutils literal notranslate"><span class="pre">int(num_str)</span></code>.  This can
be used to use another datatype or parser for JSON integers
(e.g. <a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a>).</p>
<p><em>parse_constant</em>, if specified, will be called with one of the following
strings: <code class="docutils literal notranslate"><span class="pre">'-Infinity'</span></code>, <code class="docutils literal notranslate"><span class="pre">'Infinity'</span></code>, <code class="docutils literal notranslate"><span class="pre">'NaN'</span></code>.
This can be used to raise an exception if invalid JSON numbers
are encountered.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.1: </span><em>parse_constant</em> doesn’t get called on ‘null’, ‘true’, ‘false’ anymore.</p>
</div>
<p>To use a custom <a class="reference internal" href="#json.JSONDecoder" title="json.JSONDecoder"><code class="xref py py-class docutils literal notranslate"><span class="pre">JSONDecoder</span></code></a> subclass, specify it with the <code class="docutils literal notranslate"><span class="pre">cls</span></code>
kwarg; otherwise <a class="reference internal" href="#json.JSONDecoder" title="json.JSONDecoder"><code class="xref py py-class docutils literal notranslate"><span class="pre">JSONDecoder</span></code></a> is used.  Additional keyword arguments
will be passed to the constructor of the class.</p>
<p>If the data being deserialized is not a valid JSON document, a
<a class="reference internal" href="#json.JSONDecodeError" title="json.JSONDecodeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">JSONDecodeError</span></code></a> will be raised.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6: </span>All optional parameters are now <a class="reference internal" href="../glossary.html#keyword-only-parameter"><span class="std std-ref">keyword-only</span></a>.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.6: </span><em>fp</em> can now be a <a class="reference internal" href="../glossary.html#term-binary-file"><span class="xref std std-term">binary file</span></a>. The input encoding should be
UTF-8, UTF-16 or UTF-32.</p>
</div>
</dd>