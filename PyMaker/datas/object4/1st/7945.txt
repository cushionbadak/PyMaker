link:
library/turtle.html#public-classes

docs:

Public classes¶


class turtle.RawTurtle(canvas)¶

class turtle.RawPen(canvas)¶




Parameters:canvas – a tkinter.Canvas, a ScrolledCanvas or a
TurtleScreen



Create a turtle.  The turtle has all methods described above as “methods of
Turtle/RawTurtle”.



class turtle.Turtle¶
Subclass of RawTurtle, has the same interface but draws on a default
Screen object created automatically when needed for the first time.



class turtle.TurtleScreen(cv)¶




Parameters:cv – a tkinter.Canvas



Provides screen oriented methods like setbg() etc. that are described
above.



class turtle.Screen¶
Subclass of TurtleScreen, with four methods added.



class turtle.ScrolledCanvas(master)¶




Parameters:master – some Tkinter widget to contain the ScrolledCanvas, i.e.
a Tkinter-canvas with scrollbars added



Used by class Screen, which thus automatically provides a ScrolledCanvas as
playground for the turtles.



class turtle.Shape(type_, data)¶




Parameters:type_ – one of the strings “polygon”, “image”, “compound”



Data structure modeling shapes.  The pair (type_, data) must follow this
specification:






type_
data



“polygon”
a polygon-tuple, i.e. a tuple of pairs of coordinates

“image”
an image  (in this form only used internally!)

“compound”
None (a compound shape has to be constructed using the
addcomponent() method)





addcomponent(poly, fill, outline=None)¶




Parameters:
poly – a polygon, i.e. a tuple of pairs of numbers
fill – a color the poly will be filled with
outline – a color for the poly’s outline (if given)





Example:
>>> poly = ((0,0),(10,-5),(0,10),(-10,-5))
>>> s = Shape("compound")
>>> s.addcomponent(poly, "red", "blue")
>>> # ... add more components and then use register_shape()


See Compound shapes.




class turtle.Vec2D(x, y)¶
A two-dimensional vector class, used as a helper class for implementing
turtle graphics.  May be useful for turtle graphics programs too.  Derived
from tuple, so a vector is a tuple!
Provides (for a, b vectors, k number):

a + b vector addition
a - b vector subtraction
a * b inner product
k * a and a * k multiplication with scalar
abs(a) absolute value of a
a.rotate(angle) rotation


