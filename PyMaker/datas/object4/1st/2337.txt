link:
library/pickle.html#examples

docs:

Examples¶
For the simplest code, use the dump() and load() functions.
import pickle

# An arbitrary collection of objects supported by pickle.
data = {
    'a': [1, 2.0, 3, 4+6j],
    'b': ("character string", b"byte string"),
    'c': {None, True, False}
}

with open('data.pickle', 'wb') as f:
    # Pickle the 'data' dictionary using the highest protocol available.
    pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)


The following example reads the resulting pickled data.
import pickle

with open('data.pickle', 'rb') as f:
    # The protocol version used is detected automatically, so we do not
    # have to specify it.
    data = pickle.load(f)



See also

Module copyreg
Pickle interface constructor registration for extension types.
Module pickletools
Tools for working with and analyzing pickled data.
Module shelve
Indexed databases of objects; uses pickle.
Module copy
Shallow and deep object copying.
Module marshal
High-performance serialization of built-in types.


Footnotes



[1]Don’t confuse this with the marshal module





[2]This is why lambda functions cannot be pickled:  all
lambda functions share the same name:  <lambda>.





[3]The exception raised will likely be an ImportError or an
AttributeError but it could be something else.





[4]The copy module uses this protocol for shallow and deep copying
operations.





[5]The limitation on alphanumeric characters is due to the fact
the persistent IDs, in protocol 0, are delimited by the newline
character.  Therefore if any kind of newline characters occurs in
persistent IDs, the resulting pickle will become unreadable.


