link:
library/asyncio-stream.html#streamreader

docs:

StreamReader¶


class asyncio.StreamReader¶
Represents a reader object that provides APIs to read data
from the IO stream.
It is not recommended to instantiate StreamReader objects
directly; use open_connection() and start_server()
instead.


coroutine read(n=-1)¶
Read up to n bytes.  If n is not provided, or set to -1,
read until EOF and return all read bytes.
If EOF was received and the internal buffer is empty,
return an empty bytes object.



coroutine readline()¶
Read one line, where “line” is a sequence of bytes
ending with \n.
If EOF is received and \n was not found, the method
returns partially read data.
If EOF is received and the internal buffer is empty,
return an empty bytes object.



coroutine readexactly(n)¶
Read exactly n bytes.
Raise an IncompleteReadError if EOF is reached before n
can be read.  Use the IncompleteReadError.partial
attribute to get the partially read data.



coroutine readuntil(separator=b'\n')¶
Read data from the stream until separator is found.
On success, the data and separator will be removed from the
internal buffer (consumed). Returned data will include the
separator at the end.
If the amount of data read exceeds the configured stream limit, a
LimitOverrunError exception is raised, and the data
is left in the internal buffer and can be read again.
If EOF is reached before the complete separator is found,
an IncompleteReadError exception is raised, and the internal
buffer is reset.  The IncompleteReadError.partial attribute
may contain a portion of the separator.

New in version 3.5.2.




at_eof()¶
Return True if the buffer is empty and feed_eof()
was called.


