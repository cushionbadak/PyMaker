link:
library/doctest.html#doctest.DocFileSuite

docs:

<dt id="doctest.DocFileSuite">
<code class="descclassname">doctest.</code><code class="descname">DocFileSuite</code><span class="sig-paren">(</span><em>*paths</em>, <em>module_relative=True</em>, <em>package=None</em>, <em>setUp=None</em>, <em>tearDown=None</em>, <em>globs=None</em>, <em>optionflags=0</em>, <em>parser=DocTestParser()</em>, <em>encoding=None</em><span class="sig-paren">)</span><a class="headerlink" href="#doctest.DocFileSuite" title="Permalink to this definition">¶</a></dt>
<dd><p>Convert doctest tests from one or more text files to a
<a class="reference internal" href="unittest.html#unittest.TestSuite" title="unittest.TestSuite"><code class="xref py py-class docutils literal notranslate"><span class="pre">unittest.TestSuite</span></code></a>.</p>
<p>The returned <a class="reference internal" href="unittest.html#unittest.TestSuite" title="unittest.TestSuite"><code class="xref py py-class docutils literal notranslate"><span class="pre">unittest.TestSuite</span></code></a> is to be run by the unittest framework
and runs the interactive examples in each file.  If an example in any file
fails, then the synthesized unit test fails, and a <code class="xref py py-exc docutils literal notranslate"><span class="pre">failureException</span></code>
exception is raised showing the name of the file containing the test and a
(sometimes approximate) line number.</p>
<p>Pass one or more paths (as strings) to text files to be examined.</p>
<p>Options may be provided as keyword arguments:</p>
<p>Optional argument <em>module_relative</em> specifies how the filenames in <em>paths</em>
should be interpreted:</p>
<ul class="simple">
<li>If <em>module_relative</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code> (the default), then each filename in
<em>paths</em> specifies an OS-independent module-relative path.  By default, this
path is relative to the calling module’s directory; but if the <em>package</em>
argument is specified, then it is relative to that package.  To ensure
OS-independence, each filename should use <code class="docutils literal notranslate"><span class="pre">/</span></code> characters to separate path
segments, and may not be an absolute path (i.e., it may not begin with
<code class="docutils literal notranslate"><span class="pre">/</span></code>).</li>
<li>If <em>module_relative</em> is <code class="docutils literal notranslate"><span class="pre">False</span></code>, then each filename in <em>paths</em> specifies
an OS-specific path.  The path may be absolute or relative; relative paths
are resolved with respect to the current working directory.</li>
</ul>
<p>Optional argument <em>package</em> is a Python package or the name of a Python
package whose directory should be used as the base directory for
module-relative filenames in <em>paths</em>.  If no package is specified, then the
calling module’s directory is used as the base directory for module-relative
filenames.  It is an error to specify <em>package</em> if <em>module_relative</em> is
<code class="docutils literal notranslate"><span class="pre">False</span></code>.</p>
<p>Optional argument <em>setUp</em> specifies a set-up function for the test suite.
This is called before running the tests in each file.  The <em>setUp</em> function
will be passed a <a class="reference internal" href="#doctest.DocTest" title="doctest.DocTest"><code class="xref py py-class docutils literal notranslate"><span class="pre">DocTest</span></code></a> object.  The setUp function can access the
test globals as the <em>globs</em> attribute of the test passed.</p>
<p>Optional argument <em>tearDown</em> specifies a tear-down function for the test
suite.  This is called after running the tests in each file.  The <em>tearDown</em>
function will be passed a <a class="reference internal" href="#doctest.DocTest" title="doctest.DocTest"><code class="xref py py-class docutils literal notranslate"><span class="pre">DocTest</span></code></a> object.  The setUp function can
access the test globals as the <em>globs</em> attribute of the test passed.</p>
<p>Optional argument <em>globs</em> is a dictionary containing the initial global
variables for the tests.  A new copy of this dictionary is created for each
test.  By default, <em>globs</em> is a new empty dictionary.</p>
<p>Optional argument <em>optionflags</em> specifies the default doctest options for the
tests, created by or-ing together individual option flags.  See section
<a class="reference internal" href="#doctest-options"><span class="std std-ref">Option Flags</span></a>. See function <a class="reference internal" href="#doctest.set_unittest_reportflags" title="doctest.set_unittest_reportflags"><code class="xref py py-func docutils literal notranslate"><span class="pre">set_unittest_reportflags()</span></code></a> below
for a better way to set reporting options.</p>
<p>Optional argument <em>parser</em> specifies a <a class="reference internal" href="#doctest.DocTestParser" title="doctest.DocTestParser"><code class="xref py py-class docutils literal notranslate"><span class="pre">DocTestParser</span></code></a> (or subclass)
that should be used to extract tests from the files.  It defaults to a normal
parser (i.e., <code class="docutils literal notranslate"><span class="pre">DocTestParser()</span></code>).</p>
<p>Optional argument <em>encoding</em> specifies an encoding that should be used to
convert the file to unicode.</p>
<p>The global <code class="docutils literal notranslate"><span class="pre">__file__</span></code> is added to the globals provided to doctests loaded
from a text file using <a class="reference internal" href="#doctest.DocFileSuite" title="doctest.DocFileSuite"><code class="xref py py-func docutils literal notranslate"><span class="pre">DocFileSuite()</span></code></a>.</p>
</dd>