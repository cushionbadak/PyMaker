link:
library/doctest.html#doctest.DocFileSuite

docs:


doctest.DocFileSuite(*paths, module_relative=True, package=None, setUp=None, tearDown=None, globs=None, optionflags=0, parser=DocTestParser(), encoding=None)¶
Convert doctest tests from one or more text files to a
unittest.TestSuite.
The returned unittest.TestSuite is to be run by the unittest framework
and runs the interactive examples in each file.  If an example in any file
fails, then the synthesized unit test fails, and a failureException
exception is raised showing the name of the file containing the test and a
(sometimes approximate) line number.
Pass one or more paths (as strings) to text files to be examined.
Options may be provided as keyword arguments:
Optional argument module_relative specifies how the filenames in paths
should be interpreted:

If module_relative is True (the default), then each filename in
paths specifies an OS-independent module-relative path.  By default, this
path is relative to the calling module’s directory; but if the package
argument is specified, then it is relative to that package.  To ensure
OS-independence, each filename should use / characters to separate path
segments, and may not be an absolute path (i.e., it may not begin with
/).
If module_relative is False, then each filename in paths specifies
an OS-specific path.  The path may be absolute or relative; relative paths
are resolved with respect to the current working directory.

Optional argument package is a Python package or the name of a Python
package whose directory should be used as the base directory for
module-relative filenames in paths.  If no package is specified, then the
calling module’s directory is used as the base directory for module-relative
filenames.  It is an error to specify package if module_relative is
False.
Optional argument setUp specifies a set-up function for the test suite.
This is called before running the tests in each file.  The setUp function
will be passed a DocTest object.  The setUp function can access the
test globals as the globs attribute of the test passed.
Optional argument tearDown specifies a tear-down function for the test
suite.  This is called after running the tests in each file.  The tearDown
function will be passed a DocTest object.  The setUp function can
access the test globals as the globs attribute of the test passed.
Optional argument globs is a dictionary containing the initial global
variables for the tests.  A new copy of this dictionary is created for each
test.  By default, globs is a new empty dictionary.
Optional argument optionflags specifies the default doctest options for the
tests, created by or-ing together individual option flags.  See section
Option Flags. See function set_unittest_reportflags() below
for a better way to set reporting options.
Optional argument parser specifies a DocTestParser (or subclass)
that should be used to extract tests from the files.  It defaults to a normal
parser (i.e., DocTestParser()).
Optional argument encoding specifies an encoding that should be used to
convert the file to unicode.
The global __file__ is added to the globals provided to doctests loaded
from a text file using DocFileSuite().
