link:
library/re.html#module-contents

docs:

Module Contents¶
The module defines several functions, constants, and an exception. Some of the
functions are simplified versions of the full featured methods for compiled
regular expressions.  Most non-trivial applications always use the compiled
form.

Changed in version 3.6: Flag constants are now instances of RegexFlag, which is a subclass of
enum.IntFlag.



re.compile(pattern, flags=0)¶
Compile a regular expression pattern into a regular expression object, which can be used for matching using its
match(), search() and other methods, described
below.
The expression’s behaviour can be modified by specifying a flags value.
Values can be any of the following variables, combined using bitwise OR (the
| operator).
The sequence
prog = re.compile(pattern)
result = prog.match(string)


is equivalent to
result = re.match(pattern, string)


but using re.compile() and saving the resulting regular expression
object for reuse is more efficient when the expression will be used several
times in a single program.

Note
The compiled versions of the most recent patterns passed to
re.compile() and the module-level matching functions are cached, so
programs that use only a few regular expressions at a time needn’t worry
about compiling regular expressions.




re.A¶

re.ASCII¶
Make \w, \W, \b, \B, \d, \D, \s and \S
perform ASCII-only matching instead of full Unicode matching.  This is only
meaningful for Unicode patterns, and is ignored for byte patterns.
Corresponds to the inline flag (?a).
Note that for backward compatibility, the re.U flag still
exists (as well as its synonym re.UNICODE and its embedded
counterpart (?u)), but these are redundant in Python 3 since
matches are Unicode by default for strings (and Unicode matching
isn’t allowed for bytes).



re.DEBUG¶
Display debug information about compiled expression.
No corresponding inline flag.



re.I¶

re.IGNORECASE¶
Perform case-insensitive matching; expressions like [A-Z] will also
match lowercase letters.  Full Unicode matching (such as Ü matching
ü) also works unless the re.ASCII flag is used to disable
non-ASCII matches.  The current locale does not change the effect of this
flag unless the re.LOCALE flag is also used.
Corresponds to the inline flag (?i).
Note that when the Unicode patterns [a-z] or [A-Z] are used in
combination with the IGNORECASE flag, they will match the 52 ASCII
letters and 4 additional non-ASCII letters: ‘İ’ (U+0130, Latin capital
letter I with dot above), ‘ı’ (U+0131, Latin small letter dotless i),
‘ſ’ (U+017F, Latin small letter long s) and ‘K’ (U+212A, Kelvin sign).
If the ASCII flag is used, only letters ‘a’ to ‘z’
and ‘A’ to ‘Z’ are matched.



re.L¶

re.LOCALE¶
Make \w, \W, \b, \B and case-insensitive matching
dependent on the current locale.  This flag can be used only with bytes
patterns.  The use of this flag is discouraged as the locale mechanism
is very unreliable, it only handles one “culture” at a time, and it only
works with 8-bit locales.  Unicode matching is already enabled by default
in Python 3 for Unicode (str) patterns, and it is able to handle different
locales/languages.
Corresponds to the inline flag (?L).

Changed in version 3.6: re.LOCALE can be used only with bytes patterns and is
not compatible with re.ASCII.


Changed in version 3.7: Compiled regular expression objects with the re.LOCALE flag no
longer depend on the locale at compile time.  Only the locale at
matching time affects the result of matching.




re.M¶

re.MULTILINE¶
When specified, the pattern character '^' matches at the beginning of the
string and at the beginning of each line (immediately following each newline);
and the pattern character '$' matches at the end of the string and at the
end of each line (immediately preceding each newline).  By default, '^'
matches only at the beginning of the string, and '$' only at the end of the
string and immediately before the newline (if any) at the end of the string.
Corresponds to the inline flag (?m).



re.S¶

re.DOTALL¶
Make the '.' special character match any character at all, including a
newline; without this flag, '.' will match anything except a newline.
Corresponds to the inline flag (?s).



re.X¶

re.VERBOSE¶
This flag allows you to write regular expressions that look nicer and are
more readable by allowing you to visually separate logical sections of the
pattern and add comments. Whitespace within the pattern is ignored, except
when in a character class, or when preceded by an unescaped backslash,
or within tokens like *?, (?: or (?P<...>.
When a line contains a # that is not in a character class and is not
preceded by an unescaped backslash, all characters from the leftmost such
# through the end of the line are ignored.
This means that the two following regular expression objects that match a
decimal number are functionally equal:
a = re.compile(r"""\d +  # the integral part
                   \.    # the decimal point
                   \d *  # some fractional digits""", re.X)
b = re.compile(r"\d+\.\d*")


Corresponds to the inline flag (?x).



re.search(pattern, string, flags=0)¶
Scan through string looking for the first location where the regular expression
pattern produces a match, and return a corresponding match object.  Return None if no position in the string matches the
pattern; note that this is different from finding a zero-length match at some
point in the string.



re.match(pattern, string, flags=0)¶
If zero or more characters at the beginning of string match the regular
expression pattern, return a corresponding match object.  Return None if the string does not match the pattern;
note that this is different from a zero-length match.
Note that even in MULTILINE mode, re.match() will only match
at the beginning of the string and not at the beginning of each line.
If you want to locate a match anywhere in string, use search()
instead (see also search() vs. match()).



re.fullmatch(pattern, string, flags=0)¶
If the whole string matches the regular expression pattern, return a
corresponding match object.  Return None if the
string does not match the pattern; note that this is different from a
zero-length match.

New in version 3.4.




re.split(pattern, string, maxsplit=0, flags=0)¶
Split string by the occurrences of pattern.  If capturing parentheses are
used in pattern, then the text of all groups in the pattern are also returned
as part of the resulting list. If maxsplit is nonzero, at most maxsplit
splits occur, and the remainder of the string is returned as the final element
of the list.
>>> re.split(r'\W+', 'Words, words, words.')
['Words', 'words', 'words', '']
>>> re.split(r'(\W+)', 'Words, words, words.')
['Words', ', ', 'words', ', ', 'words', '.', '']
>>> re.split(r'\W+', 'Words, words, words.', 1)
['Words', 'words, words.']
>>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)
['0', '3', '9']


If there are capturing groups in the separator and it matches at the start of
the string, the result will start with an empty string.  The same holds for
the end of the string:
>>> re.split(r'(\W+)', '...words, words...')
['', '...', 'words', ', ', 'words', '...', '']


That way, separator components are always found at the same relative
indices within the result list.
Empty matches for the pattern split the string only when not adjacent
to a previous empty match.
>>> re.split(r'\b', 'Words, words, words.')
['', 'Words', ', ', 'words', ', ', 'words', '.']
>>> re.split(r'\W*', '...words...')
['', '', 'w', 'o', 'r', 'd', 's', '', '']
>>> re.split(r'(\W*)', '...words...')
['', '...', '', '', 'w', '', 'o', '', 'r', '', 'd', '', 's', '...', '', '', '']



Changed in version 3.1: Added the optional flags argument.


Changed in version 3.7: Added support of splitting on a pattern that could match an empty string.




re.findall(pattern, string, flags=0)¶
Return all non-overlapping matches of pattern in string, as a list of
strings.  The string is scanned left-to-right, and matches are returned in
the order found.  If one or more groups are present in the pattern, return a
list of groups; this will be a list of tuples if the pattern has more than
one group.  Empty matches are included in the result.

Changed in version 3.7: Non-empty matches can now start just after a previous empty match.




re.finditer(pattern, string, flags=0)¶
Return an iterator yielding match objects over
all non-overlapping matches for the RE pattern in string.  The string
is scanned left-to-right, and matches are returned in the order found.  Empty
matches are included in the result.

Changed in version 3.7: Non-empty matches can now start just after a previous empty match.




re.sub(pattern, repl, string, count=0, flags=0)¶
Return the string obtained by replacing the leftmost non-overlapping occurrences
of pattern in string by the replacement repl.  If the pattern isn’t found,
string is returned unchanged.  repl can be a string or a function; if it is
a string, any backslash escapes in it are processed.  That is, \n is
converted to a single newline character, \r is converted to a carriage return, and
so forth.  Unknown escapes of ASCII letters are reserved for future use and
treated as errors.  Other unknown escapes such as \& are left alone.
Backreferences, such
as \6, are replaced with the substring matched by group 6 in the pattern.
For example:
>>> re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',
...        r'static PyObject*\npy_\1(void)\n{',
...        'def myfunc():')
'static PyObject*\npy_myfunc(void)\n{'


If repl is a function, it is called for every non-overlapping occurrence of
pattern.  The function takes a single match object
argument, and returns the replacement string.  For example:
>>> def dashrepl(matchobj):
...     if matchobj.group(0) == '-': return ' '
...     else: return '-'
>>> re.sub('-{1,2}', dashrepl, 'pro----gram-files')
'pro--gram files'
>>> re.sub(r'\sAND\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)
'Baked Beans & Spam'


The pattern may be a string or a pattern object.
The optional argument count is the maximum number of pattern occurrences to be
replaced; count must be a non-negative integer.  If omitted or zero, all
occurrences will be replaced. Empty matches for the pattern are replaced only
when not adjacent to a previous empty match, so sub('x*', '-', 'abxd') returns
'-a-b--d-'.
In string-type repl arguments, in addition to the character escapes and
backreferences described above,
\g<name> will use the substring matched by the group named name, as
defined by the (?P<name>...) syntax. \g<number> uses the corresponding
group number; \g<2> is therefore equivalent to \2, but isn’t ambiguous
in a replacement such as \g<2>0.  \20 would be interpreted as a
reference to group 20, not a reference to group 2 followed by the literal
character '0'.  The backreference \g<0> substitutes in the entire
substring matched by the RE.

Changed in version 3.1: Added the optional flags argument.


Changed in version 3.5: Unmatched groups are replaced with an empty string.


Changed in version 3.6: Unknown escapes in pattern consisting of '\' and an ASCII letter
now are errors.


Changed in version 3.7: Unknown escapes in repl consisting of '\' and an ASCII letter
now are errors.


Changed in version 3.7: Empty matches for the pattern are replaced when adjacent to a previous
non-empty match.




re.subn(pattern, repl, string, count=0, flags=0)¶
Perform the same operation as sub(), but return a tuple (new_string,
number_of_subs_made).

Changed in version 3.1: Added the optional flags argument.


Changed in version 3.5: Unmatched groups are replaced with an empty string.




re.escape(pattern)¶
Escape special characters in pattern.
This is useful if you want to match an arbitrary literal string that may
have regular expression metacharacters in it.  For example:
>>> print(re.escape('python.exe'))
python\.exe

>>> legal_chars = string.ascii_lowercase + string.digits + "!#$%&'*+-.^_`|~:"
>>> print('[%s]+' % re.escape(legal_chars))
[abcdefghijklmnopqrstuvwxyz0123456789!\#\$%\&'\*\+\-\.\^_`\|\~:]+

>>> operators = ['+', '-', '*', '/', '**']
>>> print('|'.join(map(re.escape, sorted(operators, reverse=True))))
/|\-|\+|\*\*|\*


This functions must not be used for the replacement string in sub()
and subn(), only backslashes should be escaped.  For example:
>>> digits_re = r'\d+'
>>> sample = '/usr/sbin/sendmail - 0 errors, 12 warnings'
>>> print(re.sub(digits_re, digits_re.replace('\\', r'\\'), sample))
/usr/sbin/sendmail - \d+ errors, \d+ warnings



Changed in version 3.3: The '_' character is no longer escaped.


Changed in version 3.7: Only characters that can have special meaning in a regular expression
are escaped.




re.purge()¶
Clear the regular expression cache.



exception re.error(msg, pattern=None, pos=None)¶
Exception raised when a string passed to one of the functions here is not a
valid regular expression (for example, it might contain unmatched parentheses)
or when some other error occurs during compilation or matching.  It is never an
error if a string contains no match for a pattern.  The error instance has
the following additional attributes:


msg¶
The unformatted error message.



pattern¶
The regular expression pattern.



pos¶
The index in pattern where compilation failed (may be None).



lineno¶
The line corresponding to pos (may be None).



colno¶
The column corresponding to pos (may be None).


Changed in version 3.5: Added additional attributes.


