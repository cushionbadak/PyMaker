link:
library/codeop.html#codeop.CommandCompiler

docs:

<dt id="codeop.CommandCompiler">
<em class="property">class </em><code class="descclassname">codeop.</code><code class="descname">CommandCompiler</code><a class="headerlink" href="#codeop.CommandCompiler" title="Permalink to this definition">¶</a></dt>
<dd><p>Instances of this class have <a class="reference internal" href="../reference/datamodel.html#object.__call__" title="object.__call__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__call__()</span></code></a> methods identical in signature to
<a class="reference internal" href="#codeop.compile_command" title="codeop.compile_command"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile_command()</span></code></a>; the difference is that if the instance compiles program
text containing a <code class="docutils literal notranslate"><span class="pre">__future__</span></code> statement, the instance ‘remembers’ and
compiles all subsequent program texts with the statement in force.</p>
</dd>