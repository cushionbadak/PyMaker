link:
library/multiprocessing.html#multiprocessing.RLock

docs:


class multiprocessing.RLock¶
A recursive lock object: a close analog of threading.RLock.  A
recursive lock must be released by the process or thread that acquired it.
Once a process or thread has acquired a recursive lock, the same process
or thread may acquire it again without blocking; that process or thread
must release it once for each time it has been acquired.
Note that RLock is actually a factory function which returns an
instance of multiprocessing.synchronize.RLock initialized with a
default context.
RLock supports the context manager protocol and thus may be
used in with statements.


acquire(block=True, timeout=None)¶
Acquire a lock, blocking or non-blocking.
When invoked with the block argument set to True, block until the
lock is in an unlocked state (not owned by any process or thread) unless
the lock is already owned by the current process or thread.  The current
process or thread then takes ownership of the lock (if it does not
already have ownership) and the recursion level inside the lock increments
by one, resulting in a return value of True.  Note that there are
several differences in this first argument’s behavior compared to the
implementation of threading.RLock.acquire(), starting with the name
of the argument itself.
When invoked with the block argument set to False, do not block.
If the lock has already been acquired (and thus is owned) by another
process or thread, the current process or thread does not take ownership
and the recursion level within the lock is not changed, resulting in
a return value of False.  If the lock is in an unlocked state, the
current process or thread takes ownership and the recursion level is
incremented, resulting in a return value of True.
Use and behaviors of the timeout argument are the same as in
Lock.acquire().  Note that some of these behaviors of timeout
differ from the implemented behaviors in threading.RLock.acquire().



release()¶
Release a lock, decrementing the recursion level.  If after the
decrement the recursion level is zero, reset the lock to unlocked (not
owned by any process or thread) and if any other processes or threads
are blocked waiting for the lock to become unlocked, allow exactly one
of them to proceed.  If after the decrement the recursion level is still
nonzero, the lock remains locked and owned by the calling process or
thread.
Only call this method when the calling process or thread owns the lock.
An AssertionError is raised if this method is called by a process
or thread other than the owner or if the lock is in an unlocked (unowned)
state.  Note that the type of exception raised in this situation
differs from the implemented behavior in threading.RLock.release().

