link:
library/unittest.mock-examples.html#mock-for-method-calls-on-an-object

docs:

Mock for Method Calls on an Object¶
In the last example we patched a method directly on an object to check that it
was called correctly. Another common use case is to pass an object into a
method (or some part of the system under test) and then check that it is used
in the correct way.
The simple ProductionClass below has a closer method. If it is called with
an object then it calls close on it.
>>> class ProductionClass:
...     def closer(self, something):
...         something.close()
...


So to test it we need to pass in an object with a close method and check
that it was called correctly.
>>> real = ProductionClass()
>>> mock = Mock()
>>> real.closer(mock)
>>> mock.close.assert_called_with()


We don’t have to do any work to provide the ‘close’ method on our mock.
Accessing close creates it. So, if ‘close’ hasn’t already been called then
accessing it in the test will create it, but assert_called_with()
will raise a failure exception.
