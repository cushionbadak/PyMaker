link:
library/io.html#io.FileIO

docs:

<dt id="io.FileIO">
<em class="property">class </em><code class="descclassname">io.</code><code class="descname">FileIO</code><span class="sig-paren">(</span><em>name</em>, <em>mode='r'</em>, <em>closefd=True</em>, <em>opener=None</em><span class="sig-paren">)</span><a class="headerlink" href="#io.FileIO" title="Permalink to this definition">¶</a></dt>
<dd><p><a class="reference internal" href="#io.FileIO" title="io.FileIO"><code class="xref py py-class docutils literal notranslate"><span class="pre">FileIO</span></code></a> represents an OS-level file containing bytes data.
It implements the <a class="reference internal" href="#io.RawIOBase" title="io.RawIOBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">RawIOBase</span></code></a> interface (and therefore the
<a class="reference internal" href="#io.IOBase" title="io.IOBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">IOBase</span></code></a> interface, too).</p>
<p>The <em>name</em> can be one of two things:</p>
<ul class="simple">
<li>a character string or <a class="reference internal" href="stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> object representing the path to the
file which will be opened. In this case closefd must be <code class="docutils literal notranslate"><span class="pre">True</span></code> (the default)
otherwise an error will be raised.</li>
<li>an integer representing the number of an existing OS-level file descriptor
to which the resulting <a class="reference internal" href="#io.FileIO" title="io.FileIO"><code class="xref py py-class docutils literal notranslate"><span class="pre">FileIO</span></code></a> object will give access. When the
FileIO object is closed this fd will be closed as well, unless <em>closefd</em>
is set to <code class="docutils literal notranslate"><span class="pre">False</span></code>.</li>
</ul>
<p>The <em>mode</em> can be <code class="docutils literal notranslate"><span class="pre">'r'</span></code>, <code class="docutils literal notranslate"><span class="pre">'w'</span></code>, <code class="docutils literal notranslate"><span class="pre">'x'</span></code> or <code class="docutils literal notranslate"><span class="pre">'a'</span></code> for reading
(default), writing, exclusive creation or appending. The file will be
created if it doesn’t exist when opened for writing or appending; it will be
truncated when opened for writing. <a class="reference internal" href="exceptions.html#FileExistsError" title="FileExistsError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">FileExistsError</span></code></a> will be raised if
it already exists when opened for creating. Opening a file for creating
implies writing, so this mode behaves in a similar way to <code class="docutils literal notranslate"><span class="pre">'w'</span></code>. Add a
<code class="docutils literal notranslate"><span class="pre">'+'</span></code> to the mode to allow simultaneous reading and writing.</p>
<p>The <code class="xref py py-meth docutils literal notranslate"><span class="pre">read()</span></code> (when called with a positive argument), <code class="xref py py-meth docutils literal notranslate"><span class="pre">readinto()</span></code>
and <code class="xref py py-meth docutils literal notranslate"><span class="pre">write()</span></code> methods on this class will only make one system call.</p>
<p>A custom opener can be used by passing a callable as <em>opener</em>. The underlying
file descriptor for the file object is then obtained by calling <em>opener</em> with
(<em>name</em>, <em>flags</em>). <em>opener</em> must return an open file descriptor (passing
<a class="reference internal" href="os.html#os.open" title="os.open"><code class="xref py py-mod docutils literal notranslate"><span class="pre">os.open</span></code></a> as <em>opener</em> results in functionality similar to passing
<code class="docutils literal notranslate"><span class="pre">None</span></code>).</p>
<p>The newly created file is <a class="reference internal" href="os.html#fd-inheritance"><span class="std std-ref">non-inheritable</span></a>.</p>
<p>See the <a class="reference internal" href="functions.html#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> built-in function for examples on using the <em>opener</em>
parameter.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.3: </span>The <em>opener</em> parameter was added.
The <code class="docutils literal notranslate"><span class="pre">'x'</span></code> mode was added.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.4: </span>The file is now non-inheritable.</p>
</div>
<p>In addition to the attributes and methods from <a class="reference internal" href="#io.IOBase" title="io.IOBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">IOBase</span></code></a> and
<a class="reference internal" href="#io.RawIOBase" title="io.RawIOBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">RawIOBase</span></code></a>, <a class="reference internal" href="#io.FileIO" title="io.FileIO"><code class="xref py py-class docutils literal notranslate"><span class="pre">FileIO</span></code></a> provides the following data
attributes:</p>
<dl class="attribute">
<dt id="io.FileIO.mode">
<code class="descname">mode</code><a class="headerlink" href="#io.FileIO.mode" title="Permalink to this definition">¶</a></dt>
<dd><p>The mode as given in the constructor.</p>
</dd></dl>
<dl class="attribute">
<dt id="io.FileIO.name">
<code class="descname">name</code><a class="headerlink" href="#io.FileIO.name" title="Permalink to this definition">¶</a></dt>
<dd><p>The file name.  This is the file descriptor of the file when no name is
given in the constructor.</p>
</dd></dl>
</dd>