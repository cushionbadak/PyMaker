link:
library/asyncio-eventloop.html#watch-a-file-descriptor-for-read-events

docs:

Watch a file descriptor for read eventsÂ¶
Wait until a file descriptor received some data using the
loop.add_reader() method and then close the event loop:
import asyncio
from socket import socketpair

# Create a pair of connected file descriptors
rsock, wsock = socketpair()

loop = asyncio.get_event_loop()

def reader():
    data = rsock.recv(100)
    print("Received:", data.decode())

    # We are done: unregister the file descriptor
    loop.remove_reader(rsock)

    # Stop the event loop
    loop.stop()

# Register the file descriptor for read event
loop.add_reader(rsock, reader)

# Simulate the reception of data from the network
loop.call_soon(wsock.send, 'abc'.encode())

try:
    # Run the event loop
    loop.run_forever()
finally:
    # We are done. Close sockets and the event loop.
    rsock.close()
    wsock.close()
    loop.close()



See also

A similar example
using transports, protocols, and the
loop.create_connection() method.
Another similar example
using the high-level asyncio.open_connection() function
and streams.


