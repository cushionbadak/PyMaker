link:
reference/datamodel.html#object.__ifloordiv__

docs:


object.__iadd__(self, other)¶

object.__isub__(self, other)¶

object.__imul__(self, other)¶

object.__imatmul__(self, other)¶

object.__itruediv__(self, other)¶

object.__ifloordiv__(self, other)¶

object.__imod__(self, other)¶

object.__ipow__(self, other[, modulo])¶

object.__ilshift__(self, other)¶

object.__irshift__(self, other)¶

object.__iand__(self, other)¶

object.__ixor__(self, other)¶

object.__ior__(self, other)¶
These methods are called to implement the augmented arithmetic assignments
(+=, -=, *=, @=, /=, //=, %=, **=, <<=,
>>=, &=, ^=, |=).  These methods should attempt to do the
operation in-place (modifying self) and return the result (which could be,
but does not have to be, self).  If a specific method is not defined, the
augmented assignment falls back to the normal methods.  For instance, if x
is an instance of a class with an __iadd__() method, x += y is
equivalent to x = x.__iadd__(y) . Otherwise, x.__add__(y) and
y.__radd__(x) are considered, as with the evaluation of x + y. In
certain situations, augmented assignment can result in unexpected errors (see
Why does a_tuple[i] += [‘item’] raise an exception when the addition works?), but this behavior is in fact
part of the data model.
