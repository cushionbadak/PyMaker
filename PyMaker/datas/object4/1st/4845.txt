link:
library/asyncio-eventloop.html#asyncio.Server.serve_forever

docs:


coroutine serve_forever()Â¶
Start accepting connections until the coroutine is cancelled.
Cancellation of serve_forever task causes the server
to be closed.
This method can be called if the server is already accepting
connections.  Only one serve_forever task can exist per
one Server object.
Example:
async def client_connected(reader, writer):
    # Communicate with the client with
    # reader/writer streams.  For example:
    await reader.readline()

async def main(host, port):
    srv = await asyncio.start_server(
        client_connected, host, port)
    await srv.serve_forever()

asyncio.run(main('127.0.0.1', 0))



New in version 3.7.

