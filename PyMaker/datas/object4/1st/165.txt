link:
reference/datamodel.html#asynchronous-context-managers

docs:

3.4.4. Asynchronous Context Managers¶
An asynchronous context manager is a context manager that is able to
suspend execution in its __aenter__ and __aexit__ methods.
Asynchronous context managers can be used in an async with statement.


object.__aenter__(self)¶
This method is semantically similar to the __enter__(), with only
difference that it must return an awaitable.



object.__aexit__(self, exc_type, exc_value, traceback)¶
This method is semantically similar to the __exit__(), with only
difference that it must return an awaitable.

An example of an asynchronous context manager class:
class AsyncContextManager:
    async def __aenter__(self):
        await log('entering context')

    async def __aexit__(self, exc_type, exc, tb):
        await log('exiting context')



New in version 3.5.

Footnotes



[1]It is possible in some cases to change an object’s type, under certain
controlled conditions. It generally isn’t a good idea though, since it can
lead to some very strange behaviour if it is handled incorrectly.





[2]The __hash__(), __iter__(), __reversed__(), and
__contains__() methods have special handling for this; others
will still raise a TypeError, but may do so by relying on
the behavior that None is not callable.





[3]“Does not support” here means that the class has no such method, or
the method returns NotImplemented.  Do not set the method to
None if you want to force fallback to the right operand’s reflected
method—that will instead have the opposite effect of explicitly
blocking such fallback.





[4]For operands of the same type, it is assumed that if the non-reflected method
(such as __add__()) fails the operation is not supported, which is why the
reflected method is not called.


