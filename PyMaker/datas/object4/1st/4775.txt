link:
library/asyncio-eventloop.html#scheduling-callbacks

docs:

Scheduling callbacks¶


loop.call_soon(callback, *args, context=None)¶
Schedule a callback to be called with args arguments at
the next iteration of the event loop.
Callbacks are called in the order in which they are registered.
Each callback will be called exactly once.
An optional keyword-only context argument allows specifying a
custom contextvars.Context for the callback to run in.
The current context is used when no context is provided.
An instance of asyncio.Handle is returned, which can be
used later to cancel the callback.
This method is not thread-safe.



loop.call_soon_threadsafe(callback, *args, context=None)¶
A thread-safe variant of call_soon().  Must be used to
schedule callbacks from another thread.
See the concurrency and multithreading
section of the documentation.


Changed in version 3.7: The context keyword-only parameter was added. See PEP 567
for more details.


Note
Most asyncio scheduling functions don’t allow passing
keyword arguments.  To do that, use functools.partial():
# will schedule "print("Hello", flush=True)"
loop.call_soon(
    functools.partial(print, "Hello", flush=True))


Using partial objects is usually more convenient than using lambdas,
as asyncio can render partial objects better in debug and error
messages.

