link:
library/importlib.html#module-importlib.machinery

docs:

importlib.machinery – Importers and path hooks¶
Source code: Lib/importlib/machinery.py

This module contains the various objects that help import
find and load modules.


importlib.machinery.SOURCE_SUFFIXES¶
A list of strings representing the recognized file suffixes for source
modules.

New in version 3.3.




importlib.machinery.DEBUG_BYTECODE_SUFFIXES¶
A list of strings representing the file suffixes for non-optimized bytecode
modules.

New in version 3.3.


Deprecated since version 3.5: Use BYTECODE_SUFFIXES instead.




importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES¶
A list of strings representing the file suffixes for optimized bytecode
modules.

New in version 3.3.


Deprecated since version 3.5: Use BYTECODE_SUFFIXES instead.




importlib.machinery.BYTECODE_SUFFIXES¶
A list of strings representing the recognized file suffixes for bytecode
modules (including the leading dot).

New in version 3.3.


Changed in version 3.5: The value is no longer dependent on __debug__.




importlib.machinery.EXTENSION_SUFFIXES¶
A list of strings representing the recognized file suffixes for
extension modules.

New in version 3.3.




importlib.machinery.all_suffixes()¶
Returns a combined list of strings representing all file suffixes for
modules recognized by the standard import machinery. This is a
helper for code which simply needs to know if a filesystem path
potentially refers to a module without needing any details on the kind
of module (for example, inspect.getmodulename()).

New in version 3.3.




class importlib.machinery.BuiltinImporter¶
An importer for built-in modules. All known built-in modules are
listed in sys.builtin_module_names. This class implements the
importlib.abc.MetaPathFinder and
importlib.abc.InspectLoader ABCs.
Only class methods are defined by this class to alleviate the need for
instantiation.

Changed in version 3.5: As part of PEP 489, the builtin importer now implements
Loader.create_module() and Loader.exec_module()




class importlib.machinery.FrozenImporter¶
An importer for frozen modules. This class implements the
importlib.abc.MetaPathFinder and
importlib.abc.InspectLoader ABCs.
Only class methods are defined by this class to alleviate the need for
instantiation.



class importlib.machinery.WindowsRegistryFinder¶
Finder for modules declared in the Windows registry.  This class
implements the importlib.abc.MetaPathFinder ABC.
Only class methods are defined by this class to alleviate the need for
instantiation.

New in version 3.3.


Deprecated since version 3.6: Use site configuration instead. Future versions of Python may
not enable this finder by default.




class importlib.machinery.PathFinder¶
A Finder for sys.path and package __path__ attributes.
This class implements the importlib.abc.MetaPathFinder ABC.
Only class methods are defined by this class to alleviate the need for
instantiation.


classmethod find_spec(fullname, path=None, target=None)¶
Class method that attempts to find a spec
for the module specified by fullname on sys.path or, if
defined, on path. For each path entry that is searched,
sys.path_importer_cache is checked. If a non-false object
is found then it is used as the path entry finder to look
for the module being searched for. If no entry is found in
sys.path_importer_cache, then sys.path_hooks is
searched for a finder for the path entry and, if found, is stored
in sys.path_importer_cache along with being queried about
the module. If no finder is ever found then None is both
stored in the cache and returned.

New in version 3.4.


Changed in version 3.5: If the current working directory – represented by an empty string –
is no longer valid then None is returned but no value is cached
in sys.path_importer_cache.




classmethod find_module(fullname, path=None)¶
A legacy wrapper around find_spec().

Deprecated since version 3.4: Use find_spec() instead.




classmethod invalidate_caches()¶
Calls importlib.abc.PathEntryFinder.invalidate_caches() on all
finders stored in sys.path_importer_cache that define the method.
Otherwise entries in sys.path_importer_cache set to None are
deleted.

Changed in version 3.7: Entries of None in sys.path_importer_cache are deleted.



Changed in version 3.4: Calls objects in sys.path_hooks with the current working
directory for '' (i.e. the empty string).




class importlib.machinery.FileFinder(path, *loader_details)¶
A concrete implementation of importlib.abc.PathEntryFinder which
caches results from the file system.
The path argument is the directory for which the finder is in charge of
searching.
The loader_details argument is a variable number of 2-item tuples each
containing a loader and a sequence of file suffixes the loader recognizes.
The loaders are expected to be callables which accept two arguments of
the module’s name and the path to the file found.
The finder will cache the directory contents as necessary, making stat calls
for each module search to verify the cache is not outdated. Because cache
staleness relies upon the granularity of the operating system’s state
information of the file system, there is a potential race condition of
searching for a module, creating a new file, and then searching for the
module the new file represents. If the operations happen fast enough to fit
within the granularity of stat calls, then the module search will fail. To
prevent this from happening, when you create a module dynamically, make sure
to call importlib.invalidate_caches().

New in version 3.3.



path¶
The path the finder will search in.



find_spec(fullname, target=None)¶
Attempt to find the spec to handle fullname within path.

New in version 3.4.




find_loader(fullname)¶
Attempt to find the loader to handle fullname within path.



invalidate_caches()¶
Clear out the internal cache.



classmethod path_hook(*loader_details)¶
A class method which returns a closure for use on sys.path_hooks.
An instance of FileFinder is returned by the closure using the
path argument given to the closure directly and loader_details
indirectly.
If the argument to the closure is not an existing directory,
ImportError is raised.




class importlib.machinery.SourceFileLoader(fullname, path)¶
A concrete implementation of importlib.abc.SourceLoader by
subclassing importlib.abc.FileLoader and providing some concrete
implementations of other methods.

New in version 3.3.



name¶
The name of the module that this loader will handle.



path¶
The path to the source file.



is_package(fullname)¶
Return true if path appears to be for a package.



path_stats(path)¶
Concrete implementation of importlib.abc.SourceLoader.path_stats().



set_data(path, data)¶
Concrete implementation of importlib.abc.SourceLoader.set_data().



load_module(name=None)¶
Concrete implementation of importlib.abc.Loader.load_module() where
specifying the name of the module to load is optional.

Deprecated since version 3.6: Use importlib.abc.Loader.exec_module() instead.





class importlib.machinery.SourcelessFileLoader(fullname, path)¶
A concrete implementation of importlib.abc.FileLoader which can
import bytecode files (i.e. no source code files exist).
Please note that direct use of bytecode files (and thus not source code
files) inhibits your modules from being usable by all Python
implementations or new versions of Python which change the bytecode
format.

New in version 3.3.



name¶
The name of the module the loader will handle.



path¶
The path to the bytecode file.



is_package(fullname)¶
Determines if the module is a package based on path.



get_code(fullname)¶
Returns the code object for name created from path.



get_source(fullname)¶
Returns None as bytecode files have no source when this loader is
used.



load_module(name=None)¶

Concrete implementation of importlib.abc.Loader.load_module() where
specifying the name of the module to load is optional.

Deprecated since version 3.6: Use importlib.abc.Loader.exec_module() instead.




class importlib.machinery.ExtensionFileLoader(fullname, path)¶
A concrete implementation of importlib.abc.ExecutionLoader for
extension modules.
The fullname argument specifies the name of the module the loader is to
support. The path argument is the path to the extension module’s file.

New in version 3.3.



name¶
Name of the module the loader supports.



path¶
Path to the extension module.



create_module(spec)¶
Creates the module object from the given specification in accordance
with PEP 489.

New in version 3.5.




exec_module(module)¶
Initializes the given module object in accordance with PEP 489.

New in version 3.5.




is_package(fullname)¶
Returns True if the file path points to a package’s __init__
module based on EXTENSION_SUFFIXES.



get_code(fullname)¶
Returns None as extension modules lack a code object.



get_source(fullname)¶
Returns None as extension modules do not have source code.



get_filename(fullname)¶
Returns path.

New in version 3.4.





class importlib.machinery.ModuleSpec(name, loader, *, origin=None, loader_state=None, is_package=None)¶
A specification for a module’s import-system-related state.  This is
typically exposed as the module’s __spec__ attribute.  In the
descriptions below, the names in parentheses give the corresponding
attribute available directly on the module object.
E.g. module.__spec__.origin == module.__file__.  Note however that
while the values are usually equivalent, they can differ since there is
no synchronization between the two objects.  Thus it is possible to update
the module’s __path__ at runtime, and this will not be automatically
reflected in __spec__.submodule_search_locations.

New in version 3.4.



name¶

(__name__)
A string for the fully-qualified name of the module.


loader¶

(__loader__)
The loader to use for loading.  For namespace packages this should be
set to None.


origin¶

(__file__)
Name of the place from which the module is loaded, e.g. “builtin” for
built-in modules and the filename for modules loaded from source.
Normally “origin” should be set, but it may be None (the default)
which indicates it is unspecified (e.g. for namespace packages).


submodule_search_locations¶

(__path__)
List of strings for where to find submodules, if a package (None
otherwise).


loader_state¶

Container of extra module-specific data for use during loading (or
None).


cached¶

(__cached__)
String for where the compiled module should be stored (or None).


parent¶

(__package__)
(Read-only) Fully-qualified name of the package to which the module
belongs as a submodule (or None).


has_location¶

Boolean indicating whether or not the module’s “origin”
attribute refers to a loadable location.

