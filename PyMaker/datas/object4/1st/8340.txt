link:
library/doctest.html#option-flags

docs:

Option Flags¶
A number of option flags control various aspects of doctest’s behavior.
Symbolic names for the flags are supplied as module constants, which can be
bitwise ORed together and passed to various functions.
The names can also be used in doctest directives,
and may be passed to the doctest command line interface via the -o option.

New in version 3.4: The -o command line option.

The first group of options define test semantics, controlling aspects of how
doctest decides whether actual output matches an example’s expected output:


doctest.DONT_ACCEPT_TRUE_FOR_1¶
By default, if an expected output block contains just 1, an actual output
block containing just 1 or just True is considered to be a match, and
similarly for 0 versus False.  When DONT_ACCEPT_TRUE_FOR_1 is
specified, neither substitution is allowed.  The default behavior caters to that
Python changed the return type of many functions from integer to boolean;
doctests expecting “little integer” output still work in these cases.  This
option will probably go away, but not for several years.



doctest.DONT_ACCEPT_BLANKLINE¶
By default, if an expected output block contains a line containing only the
string <BLANKLINE>, then that line will match a blank line in the actual
output.  Because a genuinely blank line delimits the expected output, this is
the only way to communicate that a blank line is expected.  When
DONT_ACCEPT_BLANKLINE is specified, this substitution is not allowed.



doctest.NORMALIZE_WHITESPACE¶
When specified, all sequences of whitespace (blanks and newlines) are treated as
equal.  Any sequence of whitespace within the expected output will match any
sequence of whitespace within the actual output. By default, whitespace must
match exactly. NORMALIZE_WHITESPACE is especially useful when a line of
expected output is very long, and you want to wrap it across multiple lines in
your source.



doctest.ELLIPSIS¶
When specified, an ellipsis marker (...) in the expected output can match
any substring in the actual output.  This includes substrings that span line
boundaries, and empty substrings, so it’s best to keep usage of this simple.
Complicated uses can lead to the same kinds of “oops, it matched too much!”
surprises that .* is prone to in regular expressions.



doctest.IGNORE_EXCEPTION_DETAIL¶
When specified, an example that expects an exception passes if an exception of
the expected type is raised, even if the exception detail does not match.  For
example, an example expecting ValueError: 42 will pass if the actual
exception raised is ValueError: 3*14, but will fail, e.g., if
TypeError is raised.
It will also ignore the module name used in Python 3 doctest reports. Hence
both of these variations will work with the flag specified, regardless of
whether the test is run under Python 2.7 or Python 3.2 (or later versions):
>>> raise CustomError('message')
Traceback (most recent call last):
CustomError: message

>>> raise CustomError('message')
Traceback (most recent call last):
my_module.CustomError: message


Note that ELLIPSIS can also be used to ignore the
details of the exception message, but such a test may still fail based
on whether or not the module details are printed as part of the
exception name. Using IGNORE_EXCEPTION_DETAIL and the details
from Python 2.3 is also the only clear way to write a doctest that doesn’t
care about the exception detail yet continues to pass under Python 2.3 or
earlier (those releases do not support doctest directives and ignore them as irrelevant comments). For example:
>>> (1, 2)[3] = 'moo'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: object doesn't support item assignment


passes under Python 2.3 and later Python versions with the flag specified,
even though the detail
changed in Python 2.4 to say “does not” instead of “doesn’t”.

Changed in version 3.2: IGNORE_EXCEPTION_DETAIL now also ignores any information relating
to the module containing the exception under test.




doctest.SKIP¶
When specified, do not run the example at all.  This can be useful in contexts
where doctest examples serve as both documentation and test cases, and an
example should be included for documentation purposes, but should not be
checked.  E.g., the example’s output might be random; or the example might
depend on resources which would be unavailable to the test driver.
The SKIP flag can also be used for temporarily “commenting out” examples.



doctest.COMPARISON_FLAGS¶
A bitmask or’ing together all the comparison flags above.

The second group of options controls how test failures are reported:


doctest.REPORT_UDIFF¶
When specified, failures that involve multi-line expected and actual outputs are
displayed using a unified diff.



doctest.REPORT_CDIFF¶
When specified, failures that involve multi-line expected and actual outputs
will be displayed using a context diff.



doctest.REPORT_NDIFF¶
When specified, differences are computed by difflib.Differ, using the same
algorithm as the popular ndiff.py utility. This is the only method that
marks differences within lines as well as across lines.  For example, if a line
of expected output contains digit 1 where actual output contains letter
l, a line is inserted with a caret marking the mismatching column positions.



doctest.REPORT_ONLY_FIRST_FAILURE¶
When specified, display the first failing example in each doctest, but suppress
output for all remaining examples.  This will prevent doctest from reporting
correct examples that break because of earlier failures; but it might also hide
incorrect examples that fail independently of the first failure.  When
REPORT_ONLY_FIRST_FAILURE is specified, the remaining examples are
still run, and still count towards the total number of failures reported; only
the output is suppressed.



doctest.FAIL_FAST¶
When specified, exit after the first failing example and don’t attempt to run
the remaining examples. Thus, the number of failures reported will be at most
1.  This flag may be useful during debugging, since examples after the first
failure won’t even produce debugging output.
The doctest command line accepts the option -f as a shorthand for -o
FAIL_FAST.

New in version 3.4.




doctest.REPORTING_FLAGS¶
A bitmask or’ing together all the reporting flags above.

There is also a way to register new option flag names, though this isn’t
useful unless you intend to extend doctest internals via subclassing:


doctest.register_optionflag(name)¶
Create a new option flag with a given name, and return the new flag’s integer
value.  register_optionflag() can be used when subclassing
OutputChecker or DocTestRunner to create new options that are
supported by your subclasses.  register_optionflag() should always be
called using the following idiom:
MY_FLAG = register_optionflag('MY_FLAG')



