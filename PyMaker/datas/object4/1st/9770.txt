link:
library/parser.html#creating-st-objects

docs:

Creating ST Objects¶
ST objects may be created from source code or from a parse tree. When creating
an ST object from source, different functions are used to create the 'eval'
and 'exec' forms.


parser.expr(source)¶
The expr() function parses the parameter source as if it were an input
to compile(source, 'file.py', 'eval').  If the parse succeeds, an ST object
is created to hold the internal parse tree representation, otherwise an
appropriate exception is raised.



parser.suite(source)¶
The suite() function parses the parameter source as if it were an input
to compile(source, 'file.py', 'exec').  If the parse succeeds, an ST object
is created to hold the internal parse tree representation, otherwise an
appropriate exception is raised.



parser.sequence2st(sequence)¶
This function accepts a parse tree represented as a sequence and builds an
internal representation if possible.  If it can validate that the tree conforms
to the Python grammar and all nodes are valid node types in the host version of
Python, an ST object is created from the internal representation and returned
to the called.  If there is a problem creating the internal representation, or
if the tree cannot be validated, a ParserError exception is raised.  An
ST object created this way should not be assumed to compile correctly; normal
exceptions raised by compilation may still be initiated when the ST object is
passed to compilest().  This may indicate problems not related to syntax
(such as a MemoryError exception), but may also be due to constructs such
as the result of parsing del f(0), which escapes the Python parser but is
checked by the bytecode compiler.
Sequences representing terminal tokens may be represented as either two-element
lists of the form (1, 'name') or as three-element lists of the form (1,
'name', 56).  If the third element is present, it is assumed to be a valid
line number.  The line number may be specified for any subset of the terminal
symbols in the input tree.



parser.tuple2st(sequence)¶
This is the same function as sequence2st().  This entry point is
maintained for backward compatibility.

