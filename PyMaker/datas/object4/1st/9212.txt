link:
library/sys.html#sys.getsizeof

docs:

<dt id="sys.getsizeof">
<code class="descclassname">sys.</code><code class="descname">getsizeof</code><span class="sig-paren">(</span><em>object</em><span class="optional">[</span>, <em>default</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#sys.getsizeof" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the size of an object in bytes. The object can be any type of
object. All built-in objects will return correct results, but this
does not have to hold true for third-party extensions as it is implementation
specific.</p>
<p>Only the memory consumption directly attributed to the object is
accounted for, not the memory consumption of objects it refers to.</p>
<p>If given, <em>default</em> will be returned if the object does not provide means to
retrieve the size.  Otherwise a <a class="reference internal" href="exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> will be raised.</p>
<p><a class="reference internal" href="#sys.getsizeof" title="sys.getsizeof"><code class="xref py py-func docutils literal notranslate"><span class="pre">getsizeof()</span></code></a> calls the object’s <code class="docutils literal notranslate"><span class="pre">__sizeof__</span></code> method and adds an
additional garbage collector overhead if the object is managed by the garbage
collector.</p>
<p>See <a class="reference external" href="https://code.activestate.com/recipes/577504">recursive sizeof recipe</a>
for an example of using <a class="reference internal" href="#sys.getsizeof" title="sys.getsizeof"><code class="xref py py-func docutils literal notranslate"><span class="pre">getsizeof()</span></code></a> recursively to find the size of
containers and all their contents.</p>
</dd>