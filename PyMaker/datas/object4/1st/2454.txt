link:
library/sqlite3.html#controlling-transactions

docs:

Controlling Transactions¶
The underlying sqlite3 library operates in autocommit mode by default,
but the Python sqlite3 module by default does not.
autocommit mode means that statements that modify the database take effect
immediately.  A BEGIN or SAVEPOINT statement disables autocommit
mode, and a COMMIT, a ROLLBACK, or a RELEASE that ends the
outermost transaction, turns autocommit mode back on.
The Python sqlite3 module by default issues a BEGIN statement
implicitly before a Data Modification Language (DML) statement (i.e.
INSERT/UPDATE/DELETE/REPLACE).
You can control which kind of BEGIN statements sqlite3 implicitly
executes via the isolation_level parameter to the connect()
call, or via the isolation_level property of connections.
If you specify no isolation_level, a plain BEGIN is used, which is
equivalent to specifying DEFERRED.  Other possible values are IMMEDIATE
and EXCLUSIVE.
You can disable the sqlite3 module’s implicit transaction management by
setting isolation_level to None.  This will leave the underlying
sqlite3 library operating in autocommit mode.  You can then completely
control the transaction state by explicitly issuing BEGIN, ROLLBACK,
SAVEPOINT, and RELEASE statements in your code.

Changed in version 3.6: sqlite3 used to implicitly commit an open transaction before DDL
statements.  This is no longer the case.

