link:
library/asyncio-sync.html#lock

docs:

Lock¶


class asyncio.Lock(*, loop=None)¶
Implements a mutex lock for asyncio tasks.  Not thread-safe.
An asyncio lock can be used to guarantee exclusive access to a
shared resource.
The preferred way to use a Lock is an async with
statement:
lock = asyncio.Lock()

# ... later
async with lock:
    # access shared state


which is equivalent to:
lock = asyncio.Lock()

# ... later
await lock.acquire()
try:
    # access shared state
finally:
    lock.release()




coroutine acquire()¶
Acquire the lock.
This method waits until the lock is unlocked, sets it to
locked and returns True.



release()¶
Release the lock.
When the lock is locked, reset it to unlocked and return.
If the lock is unlocked, a RuntimeError is raised.



locked()¶
Return True if the lock is locked.


