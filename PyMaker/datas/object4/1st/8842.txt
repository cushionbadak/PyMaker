link:
library/test.html#test.support.check__all__

docs:

<dt id="test.support.check__all__">
<code class="descclassname">test.support.</code><code class="descname">check__all__</code><span class="sig-paren">(</span><em>test_case</em>, <em>module</em>, <em>name_of_module=None</em>, <em>extra=()</em>, <em>blacklist=()</em><span class="sig-paren">)</span><a class="headerlink" href="#test.support.check__all__" title="Permalink to this definition">¶</a></dt>
<dd><p>Assert that the <code class="docutils literal notranslate"><span class="pre">__all__</span></code> variable of <em>module</em> contains all public names.</p>
<p>The module’s public names (its API) are detected automatically
based on whether they match the public name convention and were defined in
<em>module</em>.</p>
<p>The <em>name_of_module</em> argument can specify (as a string or tuple thereof) what
module(s) an API could be defined in order to be detected as a public
API. One case for this is when <em>module</em> imports part of its public API from
other modules, possibly a C backend (like <code class="docutils literal notranslate"><span class="pre">csv</span></code> and its <code class="docutils literal notranslate"><span class="pre">_csv</span></code>).</p>
<p>The <em>extra</em> argument can be a set of names that wouldn’t otherwise be automatically
detected as “public”, like objects without a proper <code class="docutils literal notranslate"><span class="pre">__module__</span></code>
attribute. If provided, it will be added to the automatically detected ones.</p>
<p>The <em>blacklist</em> argument can be a set of names that must not be treated as part of
the public API even though their names indicate otherwise.</p>
<p>Example use:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">bar</span>
<span class="kn">import</span> <span class="nn">foo</span>
<span class="kn">import</span> <span class="nn">unittest</span>
<span class="kn">from</span> <span class="nn">test</span> <span class="k">import</span> <span class="n">support</span>

<span class="k">class</span> <span class="nc">MiscTestCase</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">test__all__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">support</span><span class="o">.</span><span class="n">check__all__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">foo</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">OtherTestCase</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">test__all__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">extra</span> <span class="o">=</span> <span class="p">{</span><span class="s1">'BAR_CONST'</span><span class="p">,</span> <span class="s1">'FOO_CONST'</span><span class="p">}</span>
        <span class="n">blacklist</span> <span class="o">=</span> <span class="p">{</span><span class="s1">'baz'</span><span class="p">}</span>  <span class="c1"># Undocumented name.</span>
        <span class="c1"># bar imports part of its API from _bar.</span>
        <span class="n">support</span><span class="o">.</span><span class="n">check__all__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bar</span><span class="p">,</span> <span class="p">(</span><span class="s1">'bar'</span><span class="p">,</span> <span class="s1">'_bar'</span><span class="p">),</span>
                             <span class="n">extra</span><span class="o">=</span><span class="n">extra</span><span class="p">,</span> <span class="n">blacklist</span><span class="o">=</span><span class="n">blacklist</span><span class="p">)</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.6.</span></p>
</div>
</dd>